--- 
title: "Writing R extensions"
author: "R Development Core Team"
date: "`r Sys.Date()`"
site: bookdown::bookdown_site
documentclass: book
link-citations: yes
github-repo: ColinFay/writing-r-extensions
description: "Writing R Extensions covers how to create your own packages, write R help files, and the foreign language (C, C++, Fortran, ...) interfaces."
---
# Writing R Extensions {-}

<p>This is a guide to extending R, describing the process of creating R add-on packages, writing R documentation, R’s system and foreign language interfaces, and the R API.</p>
<p>This manual is for R, version 3.4.2 (2017-09-28).</p>
<p>Copyright © 1999–2016 R Core Team</p>
<blockquote>
<p>Permission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies.</p>
<p>Permission is granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.</p>
<p>Permission is granted to copy and distribute translations of this manual into another language, under the above conditions for modified versions, except that this permission notice may be stated in a translation approved by the R Core Team.</p>
</blockquote>
<hr />
<p><a href="" id="Acknowledgements"></a> <a href="" id="Acknowledgements-1"></a></p>
# Acknowledgements {-}

<p>The contributions to early versions of this manual by Saikat DebRoy (who wrote the first draft of a guide to using <code class="calibre2">.Call</code> and <code class="calibre2">.External</code>) and Adrian Trapletti (who provided information on the C++ interface) are gratefully acknowledged.</p>
<hr />
<p><a href="" id="Creating-R-packages"></a> <a href="" id="Creating-R-packages-1"></a></p>
<div id="calibre_pb_4" class="calibre6">

</div>


<!--chapter:end:index.Rmd-->

#  Creating R packages
<p><a href="" id="index-Packages"></a> <a href="" id="index-Creating-packages"></a></p>
<p>Packages provide a mechanism for loading optional code, data and documentation as needed. The R distribution itself includes about 30 packages.</p>
<p>In the following, we assume that you know the <code class="calibre2">library()</code> command, including its <code class="calibre2">lib.loc</code> argument, and we also assume basic knowledge of the <code class="calibre2">R CMD INSTALL</code> utility. Otherwise, please look at R’s help pages on</p>
<div class="example">
<pre class="example1"><code>?library
?INSTALL</code></pre>
</div>
<p>before reading on.</p>
<p>For packages which contain code to be compiled, a computing environment including a number of tools is assumed; the “R Installation and Administration” manual describes what is needed for each OS.</p>
<p>Once a source package is created, it must be installed by the command <code class="calibre2">R CMD INSTALL</code>.</p>
<p>Other types of extensions are supported (but rare): See <a href="R-exts_split_005.html#Package-types">Package types</a>.</p>
<p>Some notes on terminology complete this introduction. These will help with the reading of this manual, and also in describing concepts accurately when asking for help.</p>
<p>A <em>package</em> is a directory of files which extend R, a <em>source package</em> (the master files of a package), or a tarball containing the files of a source package, or an <em>installed</em> package, the result of running <code class="calibre2">R CMD INSTALL</code> on a source package. On some platforms (notably macOS and Windows) there are also <em>binary packages</em>, a zip file or tarball containing the files of an installed package which can be unpacked rather than installing from sources.</p>
<p>A package is <strong>not</strong><a href="R-exts_split_014.html#FOOT1" id="DOCF1"><sup>1</sup></a> a <em>library</em>. The latter is used in two senses in R documentation.</p>
<ul>
<li>A directory into which packages are installed, e.g. /usr/lib/R/library: in that sense it is sometimes referred to as a <em>library directory</em> or <em>library tree</em> (since the library is a directory which contains packages as directories, which themselves contain directories).</li>
<li>That used by the operating system, as a shared, dynamic or static library or (especially on Windows) a DLL, where the second L stands for ‘library’. Installed packages may contain compiled code in what is known on Unix-alikes as a <em>shared object</em> and on Windows as a DLL. The concept of a <em>shared library</em> (<em>dynamic library</em> on macOS) as a collection of compiled code to which a package might link is also used, especially for R itself on some platforms. On most platforms these concepts are interchangeable (shared objects and DLLs can both be loaded into the R process and be linked against), but macOS distinguishes between shared objects (extension .so) and dynamic libraries (extension .dylib).</li>
</ul>
<p>There are a number of well-defined operations on source packages.</p>
<ul>
<li>The most common is <em>installation</em> which takes a source package and installs it in a library using <code class="calibre2">R CMD INSTALL</code> or <code class="calibre2">install.packages</code>.</li>
<li>Source packages can be <em>built</em>. This involves taking a source directory and creating a tarball ready for distribution, including cleaning it up and creating PDF documentation from any <em>vignettes</em> it may contain. Source packages (and most often tarballs) can be <em>checked</em>, when a test installation is done and tested (including running its examples); also, the contents of the package are tested in various ways for consistency and portability.</li>
<li><em>Compilation</em> is not a correct term for a package. Installing a source package which contains C, C++ or Fortran code will involve compiling that code. There is also the possibility of ‘byte’ compiling the R code in a package (using the facilities of package <strong>compiler</strong>): already base and recommended packages are normally byte-compiled and this can be specified for other packages. So <em>compiling</em> a package may come to mean byte-compiling its R code.</li>
<li>It used to be unambiguous to talk about <em>loading</em> an installed package using <code class="calibre2">library()</code>, but since the advent of package namespaces this has been less clear: people now often talk about <em>loading</em> the package’s namespace and then <em>attaching</em> the package so it becomes visible on the search path. Function <code class="calibre2">library</code> performs both steps, but a package’s namespace can be loaded without the package being attached (for example by calls like <code class="calibre2">splines::ns</code>).</li>
</ul>
<p>The concept of <em>lazy loading</em> of code or data is mentioned at several points. This is part of the installation, always selected for R code but optional for data. When used the R objects of the package are created at installation time and stored in a database in the R directory of the installed package, being loaded into the session at first use. This makes the R session start up faster and use less (virtual) memory.</p>
<p><a href="" id="index-CRAN"></a></p>
<p>CRAN is a network of WWW sites holding the R distributions and contributed code, especially R packages. Users of R are encouraged to join in the collaborative project and to submit their own packages to CRAN: current instructions are linked from <a href="https://CRAN.R-project.org/banner.shtml#submitting" class="uri">https://CRAN.R-project.org/banner.shtml#submitting</a>.</p>
<hr />
<p><a href="" id="Package-structure"></a> <a href="" id="Package-structure-1"></a></p>
<h3 id="package-structure" class="section">1.1 Package structure</h3>
<p><a href="" id="index-Package-structure"></a></p>
<p>The sources of an R package consists of a subdirectory containing a files DESCRIPTION and NAMESPACE, and the subdirectories R, data, demo, exec, inst, man, po, src, tests, tools and vignettes (some of which can be missing, but which should not be empty). The package subdirectory may also contain files INDEX, configure, cleanup, LICENSE, LICENCE and NEWS. Other files such as INSTALL (for non-standard installation instructions), README/README.md<a href="R-exts_split_014.html#FOOT2" id="DOCF2"><sup>2</sup></a>, or ChangeLog will be ignored by R, but may be useful to end users. The utility <code class="calibre2">R CMD build</code> may add files in a build directory (but this should not be used for other purposes).</p>
<p>Except where specifically mentioned,<a href="R-exts_split_014.html#FOOT3" id="DOCF3"><sup>3</sup></a> packages should not contain Unix-style ‘hidden’ files/directories (that is, those whose name starts with a dot).</p>
<p>The DESCRIPTION and INDEX files are described in the subsections below. The NAMESPACE file is described in the section on <a href="R-exts_split_005.html#Package-namespaces">Package namespaces</a>.</p>
<p><a href="" id="index-configure-file"></a> <a href="" id="index-cleanup-file"></a></p>
<p>The optional files configure and cleanup are (Bourne) shell scripts which are, respectively, executed before and (if option --clean was given) after installation on Unix-alikes, see <a href="#Configure-and-cleanup">Configure and cleanup</a>. The analogues on Windows are configure.win and cleanup.win.</p>
<p>For the conventions for files NEWS and ChangeLog in the GNU project see <a href="https://www.gnu.org/prep/standards/standards.html#Documentation" class="uri">https://www.gnu.org/prep/standards/standards.html#Documentation</a>.</p>
<p>The package subdirectory should be given the same name as the package. Because some file systems (e.g., those on Windows and by default on OS X) are not case-sensitive, to maintain portability it is strongly recommended that case distinctions not be used to distinguish different packages. For example, if you have a package named foo, do not also create a package named Foo.</p>
<p>To ensure that file names are valid across file systems and supported operating systems, the ASCII control characters as well as the characters ‘&quot;’, ‘*’, ‘:’, ‘/’, ‘&lt;’, ‘&gt;’, ‘?’, ‘\’, and ‘|’ are not allowed in file names. In addition, files with names ‘con’, ‘prn’, ‘aux’, ‘clock$’, ‘nul’, ‘com1’ to ‘com9’, and ‘lpt1’ to ‘lpt9’ after conversion to lower case and stripping possible “extensions” (e.g., ‘lpt5.foo.bar’), are disallowed. Also, file names in the same directory must not differ only by case (see the previous paragraph). In addition, the basenames of ‘.Rd’ files may be used in URLs and so must be ASCII and not contain <code class="calibre2">%</code>. For maximal portability filenames should only contain only ASCII characters not excluded already (that is <code class="calibre2">A-Za-z0-9._!#$%&amp;+,;=@^(){}'[]</code> — we exclude space as many utilities do not accept spaces in file paths): non-English alphabetic characters cannot be guaranteed to be supported in all locales. It would be good practice to avoid the shell metacharacters <code class="calibre2">(){}'[]$~</code>: <code class="calibre2">~</code> is also used as part of ‘8.3’ filenames on Windows. In addition, packages are normally distributed as tarballs, and these have a limit on path lengths: for maximal portability 100 bytes.</p>
<p>A source package if possible should not contain binary executable files: they are not portable, and a security risk if they are of the appropriate architecture. <code class="calibre2">R CMD check</code> will warn about them<a href="R-exts_split_014.html#FOOT4" id="DOCF4"><sup>4</sup></a> unless they are listed (one filepath per line) in a file BinaryFiles at the top level of the package. Note that CRAN will not accept submissions containing binary files even if they are listed.</p>
<p>The R function <code class="calibre2">package.skeleton</code> can help to create the structure for a new package: see its help page for details.</p>
<hr />
<p><a href="" id="The-DESCRIPTION-file"></a> <a href="" id="The-DESCRIPTION-file-1"></a></p>
<h4 id="the-description-file" class="subsection">1.1.1 The DESCRIPTION file</h4>
<p><a href="" id="index-DESCRIPTION-file"></a></p>
<p>The DESCRIPTION file contains basic information about the package in the following format:</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="smallexample"><code>Package: pkgname
Version: 0.5-1
Date: 2015-01-01
Title: My First Collection of Functions
Authors@R: c(person(&quot;Joe&quot;, &quot;Developer&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;),
                     email = &quot;Joe.Developer@some.domain.net&quot;),
              person(&quot;Pat&quot;, &quot;Developer&quot;, role = &quot;aut&quot;),
              person(&quot;A.&quot;, &quot;User&quot;, role = &quot;ctb&quot;,
                     email = &quot;A.User@whereever.net&quot;))
Author: Joe Developer [aut, cre],
  Pat Developer [aut],
  A. User [ctb]
Maintainer: Joe Developer &lt;Joe.Developer@some.domain.net&gt;
Depends: R (&gt;= 3.1.0), nlme
Suggests: MASS
Description: A (one paragraph) description of what
  the package does and why it may be useful.
License: GPL (&gt;= 2)
URL: https://www.r-project.org, http://www.another.url
BugReports: https://pkgname.bugtracker.url</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>The format is that of a version of a ‘Debian Control File’ (see the help for ‘read.dcf’ and <a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html" class="uri">https://www.debian.org/doc/debian-policy/ch-controlfields.html</a>: R does not require encoding in UTF-8 and does not support comments starting with ‘#’). Fields start with an ASCII name immediately followed by a colon: the value starts after the colon and a space. Continuation lines (for example, for descriptions longer than one line) start with a space or tab. Field names are case-sensitive: all those used by R are capitalized.</p>
<p>For maximal portability, the DESCRIPTION file should be written entirely in ASCII — if this is not possible it must contain an ‘Encoding’ field (see below).</p>
<p>Several optional fields take <em>logical values</em>: these can be specified as ‘yes’, ‘true’, ‘no’ or ‘false’: capitalized values are also accepted.</p>
<p>The ‘Package’, ‘Version’, ‘License’, ‘Description’, ‘Title’, ‘Author’, and ‘Maintainer’ fields are mandatory, all other fields are optional. Fields ‘Author’ and ‘Maintainer’ can be auto-generated from ‘Authors@R’, and may be omitted if the latter is provided: however if they are not ASCII we recommend that they are provided.</p>
<p>The mandatory ‘Package’ field gives the name of the package. This should contain only (ASCII) letters, numbers and dot, have at least two characters and start with a letter and not end in a dot. If it needs explaining, this should be done in the ‘Description’ field (and not the ‘Title’ field).</p>
<p>The mandatory ‘Version’ field gives the version of the package. This is a sequence of at least <em>two</em> (and usually three) non-negative integers separated by single ‘.’ or ‘-’ characters. The canonical form is as shown in the example, and a version such as ‘0.01’ or ‘0.01.0’ will be handled as if it were ‘0.1-0’. It is <strong>not</strong> a decimal number, so for example <code class="calibre2">0.9 &lt; 0.75</code> since <code class="calibre2">9 &lt; 75</code>.</p>
<p>The mandatory ‘License’ field is discussed in the next subsection.</p>
<p>The mandatory ‘Title’ field should give a <em>short</em> description of the package. Some package listings may truncate the title to 65 characters. It should use <em>title case</em> (that is, use capitals for the principal words: <code class="calibre2">tools::toTitleCase</code> can help you with this), not use any markup, not have any continuation lines, and not end in a period (unless part of …). Do not repeat the package name: it is often used prefixed by the name. Refer to other packages and external software in single quotes, and to book titles (and similar) in double quotes.</p>
<p>The mandatory ‘Description’ field should give a <em>comprehensive</em> description of what the package does. One can use several (complete) sentences, but only one paragraph. It should be intelligible to all the intended readership (e.g. for a CRAN package to all CRAN users). It is good practice not to start with the package name, ‘This package’ or similar. As with the ‘Title’ field, double quotes should be used for quotations (including titles of books and articles), and single quotes for non-English usage, including names of other packages and external software. This field should also be used for explaining the package name if necessary. URLs should be enclosed in angle brackets, e.g. ‘&lt;https://www.r-project.org&gt;’: see also <a href="#Specifying-URLs">Specifying URLs</a>.</p>
<p>The mandatory ‘Author’ field describes who wrote <em>the package</em>. It is a plain text field intended for human readers, but not for automatic processing (such as extracting the email addresses of all listed contributors: for that use ‘Authors@R’). Note that all significant contributors must be included: if you wrote an R wrapper for the work of others included in the src directory, you are not the sole (and maybe not even the main) author.</p>
<p>The mandatory ‘Maintainer’ field should give a <em>single</em> name followed by a <em>valid</em> (RFC 2822) email address in angle brackets. It should not end in a period or comma. This field is what is reported by the <code class="calibre2">maintainer</code> function and used by <code class="calibre2">bug.report</code>. For a CRAN package it should be a <em>person</em>, not a mailing list and not a corporate entity: do ensure that it is valid and will remain valid for the lifetime of the package.</p>
<p>Note that the <em>display name</em> (the part before the address in angle brackets) should be enclosed in double quotes if it contains non-alphanumeric characters such as comma or period. (The current standard, RFC 5322, allows periods but RFC 2822 did not.)</p>
<p>Both ‘Author’ and ‘Maintainer’ fields can be omitted if a suitable ‘Authors@R’ field is given. This field can be used to provide a refined and machine-readable description of the package “authors” (in particular specifying their precise <em>roles</em>), via suitable R code. It should create an object of class <code class="calibre2">&quot;person&quot;</code>, by either a call to <code class="calibre2">person</code> or a series of calls (one per “author”) concatenated by <code class="calibre2">c()</code>: see the example DESCRIPTION file above. The roles can include ‘&quot;aut&quot;’ (author) for full authors, ‘&quot;cre&quot;’ (creator) for the package maintainer, and ‘&quot;ctb&quot;’ (contributor) for other contributors, ‘&quot;cph&quot;’ (copyright holder), among others. See <code class="calibre2">?person</code> for more information. Note that no role is assumed by default. Auto-generated package citation information takes advantage of this specification. The ‘Author’ and ‘Maintainer’ fields are auto-generated from it if needed when building<a href="R-exts_split_014.html#FOOT5" id="DOCF5"><sup>5</sup></a> or installing.</p>
<p><a href="" id="index-COPYRIGHTS"></a></p>
<p>An optional ‘Copyright’ field can be used where the copyright holder(s) are not the authors. If necessary, this can refer to an installed file: the convention is to use file inst/COPYRIGHTS.</p>
<p>The optional ‘Date’ field gives the <em>release date</em> of the current version of the package. It is strongly recommended<a href="R-exts_split_014.html#FOOT6" id="DOCF6"><sup>6</sup></a> to use the ‘yyyy-mm-dd’ format conforming to the ISO 8601 standard.</p>
<p>The ‘Depends’, ‘Imports’, ‘Suggests’, ‘Enhances’, ‘LinkingTo’ and ‘Additional_repositories’ fields are discussed in a later subsection.</p>
<p>Dependencies external to the R system should be listed in the ‘SystemRequirements’ field, possibly amplified in a separate README file.</p>
<p>The ‘URL’ field may give a list of URLs separated by commas or whitespace, for example the homepage of the author or a page where additional material describing the software can be found. These URLs are converted to active hyperlinks in CRAN package listings. See <a href="#Specifying-URLs">Specifying URLs</a>.</p>
<p>The ‘BugReports’ field may contain a single URL to which bug reports about the package should be submitted. This URL will be used by <code class="calibre2">bug.report</code> instead of sending an email to the maintainer. A browser is opened for a ‘http://’ or ‘https://’ URL. As from R 3.4.0, <code class="calibre2">bug.report</code> will try to extract an email address (preferably from a ‘mailto:’ URL or enclosed in angle brackets).</p>
<p>Base and recommended packages (i.e., packages contained in the R source distribution or available from CRAN and recommended to be included in every binary distribution of R) have a ‘Priority’ field with value ‘base’ or ‘recommended’, respectively. These priorities must not be used by other packages.</p>
<p>A ‘Collate’ field can be used for controlling the collation order for the R code files in a package when these are processed for package installation. The default is to collate according to the ‘C’ locale. If present, the collate specification must list <em>all</em> R code files in the package (taking possible OS-specific subdirectories into account, see <a href="#Package-subdirectories">Package subdirectories</a>) as a whitespace separated list of file paths relative to the R subdirectory. Paths containing white space or quotes need to be quoted. An OS-specific collation field (‘Collate.unix’ or ‘Collate.windows’) will be used in preference to ‘Collate’.</p>
<p>The ‘LazyData’ logical field controls whether the R datasets use lazy-loading. A ‘LazyLoad’ field was used in versions prior to 2.14.0, but now is ignored.</p>
<p>The ‘KeepSource’ logical field controls if the package code is sourced using <code class="calibre2">keep.source = TRUE</code> or <code class="calibre2">FALSE</code>: it might be needed exceptionally for a package designed to always be used with <code class="calibre2">keep.source = TRUE</code>.</p>
<p>The ‘ByteCompile’ logical field controls if the package code is to be byte-compiled on installation: the default is currently not to, so this may be useful for a package known to benefit particularly from byte-compilation (which can take quite a long time and increases the installed size of the package). It is used for the recommended packages, as they are byte-compiled when R is installed and for consistency should be byte-compiled when updated. This can be overridden by installing with flag --no-byte-compile.</p>
<p>The ‘ZipData’ logical field was used to control whether the automatic Windows build would zip up the data directory or not prior to R 2.13.0: it is now ignored.</p>
<p>The ‘Biarch’ logical field is used on Windows to select the <code class="calibre2">INSTALL</code> option --force-biarch for this package.</p>
<p>The ‘BuildVignettes’ logical field can be set to a false value to stop <code class="calibre2">R CMD build</code> from attempting to build the vignettes, as well as preventing<a href="R-exts_split_014.html#FOOT7" id="DOCF7"><sup>7</sup></a> <code class="calibre2">R CMD check</code> from testing this. This should only be used exceptionally, for example if the PDFs include large figures which are not part of the package sources (and hence only in packages which do not have an Open Source license).</p>
<p>The ‘VignetteBuilder’ field names (in a comma-separated list) packages that provide an engine for building vignettes. These may include the current package, or ones listed in ‘Depends’, ‘Suggests’ or ‘Imports’. The <strong>utils</strong> package is always implicitly appended. See <a href="R-exts_split_005.html#Non_002dSweave-vignettes">Non-Sweave vignettes</a> for details.</p>
<p>If the DESCRIPTION file is not entirely in ASCII it should contain an ‘Encoding’ field specifying an encoding. This is used as the encoding of the DESCRIPTION file itself and of the R and NAMESPACE files, and as the default encoding of .Rd files. The examples are assumed to be in this encoding when running <code class="calibre2">R CMD check</code>, and it is used for the encoding of the <code class="calibre2">CITATION</code> file. Only encoding names <code class="calibre2">latin1</code>, <code class="calibre2">latin2</code> and <code class="calibre2">UTF-8</code> are known to be portable. (Do not specify an encoding unless one is actually needed: doing so makes the package <em>less</em> portable. If a package has a specified encoding, you should run <code class="calibre2">R CMD build</code> etc in a locale using that encoding.)</p>
<p>The ‘NeedsCompilation’ field should be set to <code class="calibre2">&quot;yes&quot;</code> if the package contains code which to be compiled, otherwise <code class="calibre2">&quot;no&quot;</code> (when the package could be installed from source on any platform without additional tools). This is used by <code class="calibre2">install.packages(type = &quot;both&quot;)</code> in R &gt;= 2.15.2 on platforms where binary packages are the norm: it is normally set by <code class="calibre2">R CMD build</code> or the repository assuming compilation is required if and only if the package has a src directory.</p>
<p>The ‘OS_type’ field specifies the OS(es) for which the package is intended. If present, it should be one of <code class="calibre2">unix</code> or <code class="calibre2">windows</code>, and indicates that the package can only be installed on a platform with ‘.Platform$OS.type’ having that value.</p>
<p>The ‘Type’ field specifies the type of the package: see <a href="R-exts_split_005.html#Package-types">Package types</a>.</p>
<p>One can add subject classifications for the content of the package using the fields ‘Classification/ACM’ or ‘Classification/ACM-2012’ (using the Computing Classification System of the Association for Computing Machinery, <a href="http://www.acm.org/about/class/" class="uri">http://www.acm.org/about/class/</a>; the former refers to the 1998 version), ‘Classification/JEL’ (the Journal of Economic Literature Classification System, <a href="https://www.aeaweb.org/econlit/jelCodes.php" class="uri">https://www.aeaweb.org/econlit/jelCodes.php</a>, or ‘Classification/MSC’ or ‘Classification/MSC-2010’ (the Mathematics Subject Classification of the American Mathematical Society, <a href="http://www.ams.org/msc/" class="uri">http://www.ams.org/msc/</a>; the former refers to the 2000 version). The subject classifications should be comma-separated lists of the respective classification codes, e.g., ‘Classification/ACM: G.4, H.2.8, I.5.1’.</p>
<p>A ‘Language’ field can be used to indicate if the package documentation is not in English: this should be a comma-separated list of standard (not private use or grandfathered) IETF language tags as currently defined by RFC 5646 (<a href="https://tools.ietf.org/html/rfc5646" class="uri">https://tools.ietf.org/html/rfc5646</a>, see also <a href="https://en.wikipedia.org/wiki/IETF_language_tag" class="uri">https://en.wikipedia.org/wiki/IETF_language_tag</a>), i.e., use language subtags which in essence are 2-letter ISO 639-1 (<a href="https://en.wikipedia.org/wiki/ISO_639-1" class="uri">https://en.wikipedia.org/wiki/ISO_639-1</a>) or 3-letter ISO 639-3 (<a href="https://en.wikipedia.org/wiki/ISO_639-3" class="uri">https://en.wikipedia.org/wiki/ISO_639-3</a>) language codes.</p>
<p>An ‘RdMacros’ field can be used to hold a comma-separated list of packages from which the current package will import Rd macro definitions. These will be imported after the system macros, in the order listed in the ‘RdMacros’ field, before any macro definitions in the current package are loaded. Macro definitions in individual .Rd files in the man directory are loaded last, and are local to later parts of that file. In case of duplicates, the last loaded definition will be used<a href="R-exts_split_014.html#FOOT8" id="DOCF8"><sup>8</sup></a> Both <code class="calibre2">R CMD Rd2pdf</code> and <code class="calibre2">R CMD Rdconv</code> have an optional flag --RdMacros=pkglist. The option is also a comma-separated list of package names, and has priority over the value given in DESCRIPTION. Packages using Rd macros should depend on R 3.2.0 or later.</p>
<blockquote>
<p><strong>Note:</strong> There should be no ‘Built’ or ‘Packaged’ fields, as these are added by the package management tools.</p>
</blockquote>
<p>There is no restriction on the use of other fields not mentioned here (but using other capitalizations of these field names would cause confusion). Fields <code class="calibre2">Note</code>, <code class="calibre2">Contact</code> (for contacting the authors/developers<a href="R-exts_split_014.html#FOOT9" id="DOCF9"><sup>9</sup></a>) and <code class="calibre2">MailingList</code> are in common use. Some repositories (including CRAN and R-forge) add their own fields.</p>
<hr />
<p><a href="" id="Licensing"></a> <a href="" id="Licensing-1"></a></p>
<h4 id="licensing" class="subsection">1.1.2 Licensing</h4>
<p>Licensing for a package which might be distributed is an important but potentially complex subject.</p>
<p>It is very important that you include license information! Otherwise, it may not even be legally correct for others to distribute copies of the package, let alone use it.</p>
<p>The package management tools use the concept of ‘free or open source software’ (FOSS, e.g., <a href="https://en.wikipedia.org/wiki/FOSS" class="uri">https://en.wikipedia.org/wiki/FOSS</a>) licenses: the idea being that some users of R and its packages want to restrict themselves to such software. Others need to ensure that there are no restrictions stopping them using a package, e.g. forbidding commercial or military use. It is a central tenet of FOSS software that there are no restrictions on users nor usage.</p>
<p>Do not use the ‘License’ field for information on copyright holders: if needed, use a ‘Copyright’ field.</p>
<p>The mandatory ‘License’ field in the DESCRIPTION file should specify the license of the package in a standardized form. Alternatives are indicated <em>via</em> vertical bars. Individual specifications must be one of</p>
<ul>
<li><p>One of the “standard” short specifications</p>
<div class="example">
<pre class="example1"><code>GPL-2 GPL-3 LGPL-2 LGPL-2.1 LGPL-3 AGPL-3 Artistic-2.0
BSD_2_clause BSD_3_clause MIT</code></pre>
</div>
<p>as made available <em>via</em> <a href="https://www.R-project.org/Licenses/" class="uri">https://www.R-project.org/Licenses/</a> and contained in subdirectory share/licenses of the R source or home directory.</p></li>
<li><p>The names or abbreviations of other licenses contained in the license data base in file share/licenses/license.db in the R source or home directory, possibly (for versioned licenses) followed by a version restriction of the form ‘(op v)’ with ‘op’ one of the comparison operators ‘&lt;’, ‘&lt;=’, ‘&gt;’, ‘&gt;=’, ‘==’, or ‘!=’ and ‘v’ a numeric version specification (strings of non-negative integers separated by ‘.’), possibly combined <em>via</em> ‘,’ (see below for an example). For versioned licenses, one can also specify the name followed by the version, or combine an existing abbreviation and the version with a ‘-’.</p>
<p>Abbreviations <code class="calibre2">GPL</code> and <code class="calibre2">LGPL</code> are ambiguous and usually taken to mean any version of the license: but it is better not to use them.</p></li>
<li>One of the strings ‘file LICENSE’ or ‘file LICENCE’ referring to a file named LICENSE or LICENCE in the package (source and installation) top-level directory.</li>
<li>The string ‘Unlimited’, meaning that there are no restrictions on distribution or use other than those imposed by relevant laws (including copyright laws).</li>
</ul>
<p>If a package license <em>restricts</em> a base license (where permitted, e.g., using GPL-3 or AGPL-3 with an attribution clause), the additional terms should be placed in file LICENSE (or LICENCE), and the string ‘+ file LICENSE’ (or ‘+ file LICENCE’, respectively) should be appended to the corresponding individual license specification. Note that several commonly used licenses do not permit restrictions: this includes GPL-2 and hence any specification which includes it.</p>
<p>Examples of standardized specifications include</p>
<div class="example">
<pre class="example1"><code>License: GPL-2
License: LGPL (&gt;= 2.0, &lt; 3) | Mozilla Public License
License: GPL-2 | file LICENCE
License: GPL (&gt;= 2) | BSD_3_clause + file LICENSE
License: Artistic-2.0 | AGPL-3 + file LICENSE</code></pre>
</div>
<p>Please note in particular that “Public domain” is not a valid license, since it is not recognized in some jurisdictions.</p>
<p>Please ensure that the license you choose also covers any dependencies (including system dependencies) of your package: it is particularly important that any restrictions on the use of such dependencies are evident to people reading your DESCRIPTION file.</p>
<p>Fields ‘License_is_FOSS’ and ‘License_restricts_use’ may be added by repositories where information cannot be computed from the name of the license. ‘License_is_FOSS: yes’ is used for licenses which are known to be FOSS, and ‘License_restricts_use’ can have values ‘yes’ or ‘no’ if the LICENSE file is known to restrict users or usage, or known not to. These are used by, e.g., the <code class="calibre2">available.packages</code> filters.</p>
<p><a href="" id="index-LICENSE-file"></a> <a href="" id="index-LICENCE-file"></a></p>
<p>The optional file LICENSE/LICENCE contains a copy of the license of the package. To avoid any confusion only include such a file if it is referred to in the ‘License’ field of the DESCRIPTION file.</p>
<p>Whereas you should feel free to include a license file in your <em>source</em> distribution, please do not arrange to <em>install</em> yet another copy of the GNU COPYING or COPYING.LIB files but refer to the copies on <a href="https://www.R-project.org/Licenses/" class="uri">https://www.R-project.org/Licenses/</a> and included in the R distribution (in directory share/licenses). Since files named LICENSE or LICENCE <em>will</em> be installed, do not use these names for standard license files. To include comments about the licensing rather than the body of a license, use a file named something like LICENSE.note.</p>
<p>A few “standard” licenses are rather license templates which need additional information to be completed <em>via</em> ‘+ file LICENSE’.</p>
<hr />
<p><a href="" id="Package-Dependencies"></a> <a href="" id="Package-Dependencies-1"></a></p>
<h4 id="package-dependencies" class="subsection">1.1.3 Package Dependencies</h4>
<p>The ‘Depends’ field gives a comma-separated list of package names which this package depends on. Those packages will be attached before the current package when <code class="calibre2">library</code> or <code class="calibre2">require</code> is called. Each package name may be optionally followed by a comment in parentheses specifying a version requirement. The comment should contain a comparison operator, whitespace and a valid version number, e.g. ‘MASS (&gt;= 3.1-20)’.</p>
<p>The ‘Depends’ field can also specify a dependence on a certain version of R — e.g., if the package works only with R version 3.0.0 or later, include ‘R (&gt;= 3.0.0)’ in the ‘Depends’ field. You can also require a certain SVN revision for R-devel or R-patched, e.g. ‘R (&gt;= 2.14.0), R (&gt;= r56550)’ requires a version later than R-devel of late July 2011 (including released versions of 2.14.0).</p>
<p>It makes no sense to declare a dependence on <code class="calibre2">R</code> without a version specification, nor on the package <strong>base</strong>: this is an R package and package <strong>base</strong> is always available.</p>
<p>A package or ‘R’ can appear more than once in the ‘Depends’ field, for example to give upper and lower bounds on acceptable versions.</p>
<p>Both <code class="calibre2">library</code> and the R package checking facilities use this field: hence it is an error to use improper syntax or misuse the ‘Depends’ field for comments on other software that might be needed. The R <code class="calibre2">INSTALL</code> facilities check if the version of R used is recent enough for the package being installed, and the list of packages which is specified will be attached (after checking version requirements) before the current package.</p>
<p>The ‘Imports’ field lists packages whose namespaces are imported from (as specified in the NAMESPACE file) but which do not need to be attached. Namespaces accessed by the ‘::’ and ‘:::’ operators must be listed here, or in ‘Suggests’ or ‘Enhances’ (see below). Ideally this field will include all the standard packages that are used, and it is important to include S4-using packages (as their class definitions can change and the DESCRIPTION file is used to decide which packages to re-install when this happens). Packages declared in the ‘Depends’ field should not also be in the ‘Imports’ field. Version requirements can be specified and are checked when the namespace is loaded (since R &gt;= 3.0.0).</p>
<p>The ‘Suggests’ field uses the same syntax as ‘Depends’ and lists packages that are not necessarily needed. This includes packages used only in examples, tests or vignettes (see <a href="#Writing-package-vignettes">Writing package vignettes</a>), and packages loaded in the body of functions. E.g., suppose an example<a href="R-exts_split_014.html#FOOT10" id="DOCF10"><sup>10</sup></a> from package <strong>foo</strong> uses a dataset from package <strong>bar</strong>. Then it is not necessary to have <strong>bar</strong> use <strong>foo</strong> unless one wants to execute all the examples/tests/vignettes: it is useful to have <strong>bar</strong>, but not necessary. Version requirements can be specified but should be checked by the code which uses the package.</p>
<p>Finally, the ‘Enhances’ field lists packages “enhanced” by the package at hand, e.g., by providing methods for classes from these packages, or ways to handle objects from these packages (so several packages have ‘Enhances: chron’ because they can handle datetime objects from <a href="https://CRAN.R-project.org/package=chron"><strong>chron</strong></a> even though they prefer R’s native datetime functions). Version requirements can be specified, but are currently not used. Such packages cannot be required to check the package: any tests which use them must be conditional on the presence of the package. (If your tests use e.g. a dataset from another package it should be in ‘Suggests’ and not ‘Enhances’.)</p>
<p>The general rules are</p>
<ul>
<li>A package should be listed in only one of these fields.</li>
<li>Packages whose namespace only is needed to load the package using <code class="calibre2">library(pkgname)</code> should be listed in the ‘Imports’ field and not in the ‘Depends’ field. Packages listed in <code class="calibre2">imports</code> or <code class="calibre2">importFrom</code> directives in the NAMESPACE file should almost always be in ‘Imports’ and not ‘Depends’.</li>
<li>Packages that need to be attached to successfully load the package using <code class="calibre2">library(pkgname)</code> must be listed in the ‘Depends’ field.</li>
<li>All packages that are needed<a href="R-exts_split_014.html#FOOT11" id="DOCF11"><sup>11</sup></a> to successfully run <code class="calibre2">R CMD check</code> on the package must be listed in one of ‘Depends’ or ‘Suggests’ or ‘Imports’. Packages used to run examples or tests conditionally (e.g. <em>via</em> <code class="calibre2">if(require(pkgname))</code>) should be listed in ‘Suggests’ or ‘Enhances’. (This allows checkers to ensure that all the packages needed for a complete check are installed.)</li>
</ul>
<p>In particular, packages providing “only” data for examples or vignettes should be listed in ‘Suggests’ rather than ‘Depends’ in order to make lean installations possible.</p>
<p>Version dependencies in the ‘Depends’ and ‘Imports’ fields are used by <code class="calibre2">library</code> when it loads the package, and <code class="calibre2">install.packages</code> checks versions for the ‘Depends’, ‘Imports’ and (for <code class="calibre2">dependencies = TRUE</code>) ‘Suggests’ fields.</p>
<p>It is increasingly important that the information in these fields is complete and accurate: it is for example used to compute which packages depend on an updated package and which packages can safely be installed in parallel.</p>
<p>This scheme was developed before all packages had namespaces (R 2.14.0 in October 2011), and good practice changed once that was in place.</p>
<p>Field ‘Depends’ should nowadays be used rarely, only for packages which are intended to be put on the search path to make their facilities available to the end user (and not to the package itself): for example it makes sense that a user of package <a href="https://CRAN.R-project.org/package=latticeExtra"><strong>latticeExtra</strong></a> would want the functions of package <a href="https://CRAN.R-project.org/package=lattice"><strong>lattice</strong></a> made available.</p>
<p>Almost always packages mentioned in ‘Depends’ should also be imported from in the NAMESPACE file: this ensures that any needed parts of those packages are available when some other package imports the current package.</p>
<p>The ‘Imports’ field should not contain packages which are not imported from (<em>via</em> the NAMESPACE file or <code class="calibre2">::</code> or <code class="calibre2">:::</code> operators), as all the packages listed in that field need to be installed for the current package to be installed. (This is checked by <code class="calibre2">R CMD check</code>.)</p>
<p>R code in the package should call <code class="calibre2">library</code> or <code class="calibre2">require</code> only exceptionally. Such calls are never needed for packages listed in ‘Depends’ as they will already be on the search path. It used to be common practice to use <code class="calibre2">require</code> calls for packages listed in ‘Suggests’ in functions which used their functionality, but nowadays it is better to access such functionality <em>via</em> <code class="calibre2">::</code> calls.</p>
<p>A package that wishes to make use of header files in other packages needs to declare them as a comma-separated list in the field ‘LinkingTo’ in the DESCRIPTION file. For example</p>
<div class="example">
<pre class="example1"><code>LinkingTo: link1, link2</code></pre>
</div>
<p>The ‘LinkingTo’ field can have a version requirement which is checked at installation.</p>
<p>Specifying a package in ‘LinkingTo’ suffices if these are C++ headers containing source code or static linking is done at installation: the packages do not need to be (and usually should not be) listed in the ‘Depends’ or ‘Imports’ fields. This includes CRAN package <a href="https://CRAN.R-project.org/package=BH"><strong>BH</strong></a> and almost all users of <a href="https://CRAN.R-project.org/package=RcppArmadillo"><strong>RcppArmadillo</strong></a> and <a href="https://CRAN.R-project.org/package=RcppEigen"><strong>RcppEigen</strong></a>.</p>
<p>For another use of ‘LinkingTo’ see <a href="R-exts_split_009.html#Linking-to-native-routines-in-other-packages">Linking to native routines in other packages</a>.</p>
<p>The ‘Additional_repositories’ field is a comma-separated list of repository URLs where the packages named in the other fields may be found. It is currently used by <code class="calibre2">R CMD check</code> to check that the packages can be found, at least as source packages (which can be installed on any platform).</p>
<hr />
<p><a href="" id="Suggested-packages"></a> <a href="" id="Suggested-packages-1"></a></p>
<h4 id="suggested-packages" class="subsection">1.1.3.1 Suggested packages</h4>
<p>Note that someone wanting to run the examples/tests/vignettes may not have a suggested package available (and it may not even be possible to install it for that platform). The recommendation used to be to make their use conditional <em>via</em> <code class="calibre2">if(require(&quot;pkgname&quot;))</code>: this is OK if that conditioning is done in examples/tests/vignettes, although using <code class="calibre2">if(requireNamespace(&quot;pkgname&quot;))</code> is preferred, if possible.</p>
<p>However, using <code class="calibre2">require</code> for conditioning <em>in package code</em> is not good practice as it alters the search path for the rest of the session and relies on functions in that package not being masked by other <code class="calibre2">require</code> or <code class="calibre2">library</code> calls. It is better practice to use code like</p>
<div class="example">
<pre class="example1"><code>   if (requireNamespace(&quot;rgl&quot;, quietly = TRUE)) {
      rgl::plot3d(...)
   } else {
      ## do something else not involving rgl.
   }</code></pre>
</div>
<p>Note the use of <code class="calibre2">rgl::</code> as that object would not necessarily be visible (and if it is, it need not be the one from that namespace: <code class="calibre2">plot3d</code> occurs in several other packages). If the intention is to give an error if the suggested package is not available, simply use e.g. <code class="calibre2">rgl::plot3d</code>.</p>
<p>Note that the recommendation to use suggested packages conditionally in tests does also apply to packages used to manage test suites: a notorious example was <a href="https://CRAN.R-project.org/package=testthat"><strong>testthat</strong></a> which in version 1.0.0 contained illegal C++ code and hence could not be installed on standards-compliant platforms.</p>
<p>Some people have assumed that a ‘recommended’ package in ‘Suggests’ can safely be used unconditionally, but this is not so. (R can be installed without recommended packages, and which packages are ‘recommended’ may change.)</p>
<p>As noted above, packages in ‘Enhances’ <em>must</em> be used conditionally and hence objects within them should always be accessed <em>via</em> <code class="calibre2">::</code>.</p>
<hr />
<p><a href="" id="The-INDEX-file"></a> <a href="" id="The-INDEX-file-1"></a></p>
<h4 id="the-index-file" class="subsection">1.1.4 The INDEX file</h4>
<p><a href="" id="index-INDEX-file"></a></p>
<p>The optional file INDEX contains a line for each sufficiently interesting object in the package, giving its name and a description (functions such as print methods not usually called explicitly might not be included). Normally this file is missing and the corresponding information is automatically generated from the documentation sources (using <code class="calibre2">tools::Rdindex()</code>) when installing from source.</p>
<p>The file is part of the information given by <code class="calibre2">library(help = pkgname)</code>.</p>
<p>Rather than editing this file, it is preferable to put customized information about the package into an overview help page (see <a href="R-exts_split_006.html#Documenting-packages">Documenting packages</a>) and/or a vignette (see <a href="#Writing-package-vignettes">Writing package vignettes</a>).</p>
<hr />
<p><a href="" id="Package-subdirectories"></a> <a href="" id="Package-subdirectories-1"></a></p>
<h4 id="package-subdirectories" class="subsection">1.1.5 Package subdirectories</h4>
<p><a href="" id="index-Package-subdirectories"></a></p>
<p>The R subdirectory contains R code files, only. The code files to be installed must start with an ASCII (lower or upper case) letter or digit and have one of the extensions<a href="R-exts_split_014.html#FOOT12" id="DOCF12"><sup>12</sup></a> .R, .S, .q, .r, or .s. We recommend using .R, as this extension seems to be not used by any other software. It should be possible to read in the files using <code class="calibre2">source()</code>, so R objects must be created by assignments. Note that there need be no connection between the name of the file and the R objects created by it. Ideally, the R code files should only directly assign R objects and definitely should not call functions with side effects such as <code class="calibre2">require</code> and <code class="calibre2">options</code>. If computations are required to create objects these can use code ‘earlier’ in the package (see the ‘Collate’ field) plus functions in the ‘Depends’ packages provided that the objects created do not depend on those packages except <em>via</em> namespace imports.</p>
<p>Two exceptions are allowed: if the R subdirectory contains a file sysdata.rda (a saved image of one or more R objects: please use suitable compression as suggested by <code class="calibre2">tools::resaveRdaFiles</code>, and see also the ‘SysDataCompression’ DESCRIPTION field.) this will be lazy-loaded into the namespace environment – this is intended for system datasets that are not intended to be user-accessible <em>via</em> <code class="calibre2">data</code>. Also, files ending in ‘.in’ will be allowed in the R directory to allow a configure script to generate suitable files.</p>
<p>Only ASCII characters (and the control characters tab, formfeed, LF and CR) should be used in code files. Other characters are accepted in comments<a href="R-exts_split_014.html#FOOT13" id="DOCF13"><sup>13</sup></a>, but then the comments may not be readable in e.g. a UTF-8 locale. Non-ASCII characters in object names will normally<a href="R-exts_split_014.html#FOOT14" id="DOCF14"><sup>14</sup></a> fail when the package is installed. Any byte will be allowed in a quoted character string but <code class="calibre2">\uxxxx</code> escapes should be used for non-ASCII characters. However, non-ASCII character strings may not be usable in some locales and may display incorrectly in others.</p>
<p><a href="" id="index-library_002edynam"></a></p>
<p>Various R functions in a package can be used to initialize and clean up. See <a href="R-exts_split_005.html#Load-hooks">Load hooks</a>.</p>
<p>The man subdirectory should contain (only) documentation files for the objects in the package in <em>R documentation</em> (Rd) format. The documentation filenames must start with an ASCII (lower or upper case) letter or digit and have the extension .Rd (the default) or .rd. Further, the names must be valid in ‘file://’ URLs, which means<a href="R-exts_split_014.html#FOOT15" id="DOCF15"><sup>15</sup></a> they must be entirely ASCII and not contain ‘%’. See <a href="R-exts_split_005.html#Writing-R-documentation-files">Writing R documentation files</a>, for more information. Note that all user-level objects in a package should be documented; if a package pkg contains user-level objects which are for “internal” use only, it should provide a file pkg-internal.Rd which documents all such objects, and clearly states that these are not meant to be called by the user. See e.g. the sources for package <strong>grid</strong> in the R distribution. Note that packages which use internal objects extensively should not export those objects from their namespace, when they do not need to be documented (see <a href="R-exts_split_005.html#Package-namespaces">Package namespaces</a>).</p>
<p>Having a man directory containing no documentation files may give an installation error.</p>
<p>The man subdirectory may contain a subdirectory named macros; this will contain source for user-defined Rd macros. (See <a href="R-exts_split_006.html#User_002ddefined-macros">User-defined macros</a>.) These use the Rd format, but may not contain anything but macro definitions, comments and whitespace.</p>
<p>The R and man subdirectories may contain OS-specific subdirectories named unix or windows.</p>
<p>The sources and headers for the compiled code are in src, plus optionally a file Makevars or Makefile. When a package is installed using <code class="calibre2">R CMD INSTALL</code>, <code class="calibre2">make</code> is used to control compilation and linking into a shared object for loading into R. There are default <code class="calibre2">make</code> variables and rules for this (determined when R is configured and recorded in R_HOME/etcR_ARCH/Makeconf), providing support for C, C++, FORTRAN 77, Fortran 9x<a href="R-exts_split_014.html#FOOT16" id="DOCF16"><sup>16</sup></a>, Objective C and Objective C++<a href="R-exts_split_014.html#FOOT17" id="DOCF17"><sup>17</sup></a> with associated extensions .c, .cc or .cpp, .f, .f90 or .f95, .m, and .mm, respectively. We recommend using .h for headers, also for C++<a href="R-exts_split_014.html#FOOT18" id="DOCF18"><sup>18</sup></a> or Fortran 9x include files. (Use of extension .C for C++ is no longer supported.) Files in the src directory should not be hidden (start with a dot), and hidden files will under some versions of R be ignored.</p>
<p>It is not portable (and may not be possible at all) to mix all these languages in a single package, and we do not support using both C++ and Fortran 9x. Because R itself uses it, we know that C and FORTRAN 77 can be used together and mixing C and C++ seems to be widely successful.</p>
<p>If your code needs to depend on the platform there are certain defines which can used in C or C++. On all Windows builds (even 64-bit ones) ‘_WIN32’ will be defined: on 64-bit Windows builds also ‘_WIN64’, and on macOS ‘__APPLE__’ is defined.<a href="R-exts_split_014.html#FOOT19" id="DOCF19"><sup>19</sup></a></p>
<p>The default rules can be tweaked by setting macros<a href="R-exts_split_014.html#FOOT20" id="DOCF20"><sup>20</sup></a> in a file src/Makevars (see <a href="#Using-Makevars">Using Makevars</a>). Note that this mechanism should be general enough to eliminate the need for a package-specific src/Makefile. If such a file is to be distributed, considerable care is needed to make it general enough to work on all R platforms. If it has any targets at all, it should have an appropriate first target named ‘all’ and a (possibly empty) target ‘clean’ which removes all files generated by running <code class="calibre2">make</code> (to be used by ‘R CMD INSTALL --clean’ and ‘R CMD INSTALL --preclean’). There are platform-specific file names on Windows: src/Makevars.win takes precedence over src/Makevars and src/Makefile.win must be used. Some <code class="calibre2">make</code> programs require makefiles to have a complete final line, including a newline.</p>
<p>A few packages use the src directory for purposes other than making a shared object (e.g. to create executables). Such packages should have files src/Makefile and src/Makefile.win (unless intended for only Unix-alikes or only Windows).</p>
<p>In very special cases packages may create binary files other than the shared objects/DLLs in the src directory. Such files will not be installed in a multi-architecture setting since <code class="calibre2">R CMD INSTALL --libs-only</code> is used to merge multiple sub-architectures and it only copies shared objects/DLLs. If a package wants to install other binaries (for example executable programs), it should provide an R script src/install.libs.R which will be run as part of the installation in the <code class="calibre2">src</code> build directory <em>instead of</em> copying the shared objects/DLLs. The script is run in a separate R environment containing the following variables: <code class="calibre2">R_PACKAGE_NAME</code> (the name of the package), <code class="calibre2">R_PACKAGE_SOURCE</code> (the path to the source directory of the package), <code class="calibre2">R_PACKAGE_DIR</code> (the path of the target installation directory of the package), <code class="calibre2">R_ARCH</code> (the arch-dependent part of the path, often empty), <code class="calibre2">SHLIB_EXT</code> (the extension of shared objects) and <code class="calibre2">WINDOWS</code> (<code class="calibre2">TRUE</code> on Windows, <code class="calibre2">FALSE</code> elsewhere). Something close to the default behavior could be replicated with the following src/install.libs.R file:</p>
<div class="example">
<pre class="example1"><code>files &lt;- Sys.glob(paste0(&quot;*&quot;, SHLIB_EXT))
dest &lt;- file.path(R_PACKAGE_DIR, paste0(&#39;libs&#39;, R_ARCH))
dir.create(dest, recursive = TRUE, showWarnings = FALSE)
file.copy(files, dest, overwrite = TRUE)
if(file.exists(&quot;symbols.rds&quot;))
    file.copy(&quot;symbols.rds&quot;, dest, overwrite = TRUE)</code></pre>
</div>
<p>On the other hand, executable programs could be installed along the lines of</p>
<div class="example">
<pre class="example1"><code>execs &lt;- c(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;)
if(WINDOWS) execs &lt;- paste0(execs, &quot;.exe&quot;)
if ( any(file.exists(execs)) ) {
  dest &lt;- file.path(R_PACKAGE_DIR,  paste0(&#39;bin&#39;, R_ARCH))
  dir.create(dest, recursive = TRUE, showWarnings = FALSE)
  file.copy(execs, dest, overwrite = TRUE)
}</code></pre>
</div>
<p>Note the use of architecture-specific subdirectories of bin where needed.</p>
<p>The data subdirectory is for data files: See <a href="#Data-in-packages">Data in packages</a>.</p>
<p>The demo subdirectory is for R scripts (for running <em>via</em> <code class="calibre2">demo()</code>) that demonstrate some of the functionality of the package. Demos may be interactive and are not checked automatically, so if testing is desired use code in the tests directory to achieve this. The script files must start with a (lower or upper case) letter and have one of the extensions .R or .r. If present, the demo subdirectory should also have a 00Index file with one line for each demo, giving its name and a description separated by a tab or at least three spaces. (This index file is not generated automatically.) Note that a demo does not have a specified encoding and so should be an ASCII file (see <a href="R-exts_split_005.html#Encoding-issues">Encoding issues</a>). Function <code class="calibre2">demo()</code> will use the package encoding if there is one, but this is mainly useful for non-ASCII comments.</p>
<p><a href="" id="index-_002eRinstignore-file"></a></p>
<p>The contents of the inst subdirectory will be copied recursively to the installation directory. Subdirectories of inst should not interfere with those used by R (currently, R, data, demo, exec, libs, man, help, html and Meta, and earlier versions used latex, R-ex). The copying of the inst happens after src is built so its Makefile can create files to be installed. To exclude files from being installed, one can specify a list of exclude patterns in file .Rinstignore in the top-level source directory. These patterns should be Perl-like regular expressions (see the help for <code class="calibre2">regexp</code> in R for the precise details), one per line, to be matched case-insensitively against the file and directory paths, e.g. doc/.*[.]png$ will exclude all PNG files in inst/doc based on the extension.</p>
<p>Note that with the exceptions of INDEX, LICENSE/LICENCE and NEWS, information files at the top level of the package will <em>not</em> be installed and so not be known to users of Windows and macOS compiled packages (and not seen by those who use <code class="calibre2">R CMD INSTALL</code> or <code class="calibre2">install.packages</code> on the tarball). So any information files you wish an end user to see should be included in inst. Note that if the named exceptions also occur in inst, the version in inst will be that seen in the installed package.</p>
<p><a href="" id="index-CITATION"></a> <a href="" id="index-citation"></a> <a href="" id="index-NEWS_002eRd"></a> <a href="" id="index-news"></a></p>
<p>Things you might like to add to inst are a CITATION file for use by the <code class="calibre2">citation</code> function, and a NEWS.Rd file for use by the <code class="calibre2">news</code> function. See its help page for the specific format restrictions of the NEWS.Rd file.</p>
<p><a href="" id="index-AUTHORS"></a> <a href="" id="index-COPYRIGHTS-1"></a></p>
<p>Another file sometimes needed in inst is AUTHORS or COPYRIGHTS to specify the authors or copyright holders when this is too complex to put in the DESCRIPTION file.</p>
<p>Subdirectory tests is for additional package-specific test code, similar to the specific tests that come with the R distribution. Test code can either be provided directly in a .R (or .r as from R 3.4.0) file, or <em>via</em> a .Rin file containing code which in turn creates the corresponding .R file (e.g., by collecting all function objects in the package and then calling them with the strangest arguments). The results of running a .R file are written to a .Rout file. If there is a corresponding<a href="R-exts_split_014.html#FOOT21" id="DOCF21"><sup>21</sup></a> .Rout.save file, these two are compared, with differences being reported but not causing an error. The directory tests is copied to the check area, and the tests are run with the copy as the working directory and with <code class="calibre2">R_LIBS</code> set to ensure that the copy of the package installed during testing will be found by <code class="calibre2">library(pkg_name)</code>. Note that the package-specific tests are run in a vanilla R session without setting the random-number seed, so tests which use random numbers will need to set the seed to obtain reproducible results (and it can be helpful to do so in all cases, to avoid occasional failures when tests are run).</p>
<p>If directory tests has a subdirectory Examples containing a file <code class="calibre2">pkg-Ex.Rout.save</code>, this is compared to the output file for running the examples when the latter are checked. Reference output should be produced without having the --timings option set (and note that --as-cran sets it).</p>
<p>Subdirectory exec could contain additional executable scripts the package needs, typically scripts for interpreters such as the shell, Perl, or Tcl. NB: only files (and not directories) under exec are installed (and those with names starting with a dot are ignored), and they are all marked as executable (mode <code class="calibre2">755</code>, moderated by ‘umask’) on POSIX platforms. Note too that this is not suitable for executable <em>programs</em> since some platforms (including Windows) support multiple architectures using the same installed package directory.</p>
<p>Subdirectory po is used for files related to <em>localization</em>: see <a href="R-exts_split_005.html#Internationalization">Internationalization</a>.</p>
<p>Subdirectory tools is the preferred place for auxiliary files needed during configuration, and also for sources need to re-create scripts (e.g. M4 files for <code class="calibre2">autoconf</code>).</p>
<hr />
<p><a href="" id="Data-in-packages"></a> <a href="" id="Data-in-packages-1"></a></p>
<h4 id="data-in-packages" class="subsection">1.1.6 Data in packages</h4>
<p>The data subdirectory is for data files, either to be made available <em>via</em> lazy-loading or for loading using <code class="calibre2">data()</code>. (The choice is made by the ‘LazyData’ field in the DESCRIPTION file: the default is not to do so.) It should not be used for other data files needed by the package, and the convention has grown up to use directory inst/extdata for such files.</p>
<p>Data files can have one of three types as indicated by their extension: plain R code (.R or .r), tables (.tab, .txt, or .csv, see <code class="calibre2">?data</code> for the file formats, and note that .csv is <strong>not</strong> the standard<a href="R-exts_split_014.html#FOOT22" id="DOCF22"><sup>22</sup></a> CSV format), or <code class="calibre2">save()</code> images (.RData or .rda). The files should not be hidden (have names starting with a dot). Note that R code should be “self-sufficient” and not make use of extra functionality provided by the package, so that the data file can also be used without having to load the package or its namespace.</p>
<p>Images (extensions .RData<a href="R-exts_split_014.html#FOOT23" id="DOCF23"><sup>23</sup></a> or .rda) can contain references to the namespaces of packages that were used to create them. Preferably there should be no such references in data files, and in any case they should only be to packages listed in the <code class="calibre2">Depends</code> and <code class="calibre2">Imports</code> fields, as otherwise it may be impossible to install the package. To check for such references, load all the images into a vanilla R session, and look at the output of <code class="calibre2">loadedNamespaces()</code>.</p>
<p>If your data files are large and you are not using ‘LazyData’ you can speed up installation by providing a file datalist in the data subdirectory. This should have one line per topic that <code class="calibre2">data()</code> will find, in the format ‘foo’ if <code class="calibre2">data(foo)</code> provides ‘foo’, or ‘foo: bar bah’ if <code class="calibre2">data(foo)</code> provides ‘bar’ and ‘bah’. <code class="calibre2">R CMD build</code> will automatically add a datalist file to data directories of over 1Mb, using the function <code class="calibre2">tools::add_datalist</code>.</p>
<p>Tables (.tab, .txt, or .csv files) can be compressed by <code class="calibre2">gzip</code>, <code class="calibre2">bzip2</code> or <code class="calibre2">xz</code>, optionally with additional extension .gz, .bz2 or .xz.</p>
<p>If your package is to be distributed, do consider the resource implications of large datasets for your users: they can make packages very slow to download and use up unwelcome amounts of storage space, as well as taking many seconds to load. It is normally best to distribute large datasets as .rda images prepared by <code class="calibre2">save(, compress = TRUE)</code> (the default). Using <code class="calibre2">bzip2</code> or <code class="calibre2">xz</code> compression will usually reduce the size of both the package tarball and the installed package, in some cases by a factor of two or more.</p>
<p>Package <strong>tools</strong> has a couple of functions to help with data images: <code class="calibre2">checkRdaFiles</code> reports on the way the image was saved, and <code class="calibre2">resaveRdaFiles</code> will re-save with a different type of compression, including choosing the best type for that particular image.</p>
<p>Some packages using ‘LazyData’ will benefit from using a form of compression other than <code class="calibre2">gzip</code> in the installed lazy-loading database. This can be selected by the --data-compress option to <code class="calibre2">R CMD INSTALL</code> or by using the ‘LazyDataCompression’ field in the DESCRIPTION file. Useful values are <code class="calibre2">bzip2</code>, <code class="calibre2">xz</code> and the default, <code class="calibre2">gzip</code>. The only way to discover which is best is to try them all and look at the size of the pkgname/data/Rdata.rdb file.</p>
<p>Lazy-loading is not supported for very large datasets (those which when serialized exceed 2GB, the limit for the format on 32-bit platforms).</p>
<p>The analogue for sysdata.rda is field ‘SysDataCompression’: the default is <code class="calibre2">xz</code> for files bigger than 1MB otherwise <code class="calibre2">gzip</code>.</p>
<hr />
<p><a href="" id="Non_002dR-scripts-in-packages"></a> <a href="" id="Non_002dR-scripts-in-packages-1"></a></p>
<h4 id="non-r-scripts-in-packages" class="subsection">1.1.7 Non-R scripts in packages</h4>
<p>Code which needs to be compiled (C, C++, FORTRAN, Fortran 95 …) is included in the src subdirectory and discussed elsewhere in this document.</p>
<p>Subdirectory exec could be used for scripts for interpreters such as the shell, BUGS, JavaScript, Matlab, Perl, php (<a href="https://CRAN.R-project.org/package=amap"><strong>amap</strong></a>), Python or Tcl (<a href="https://CRAN.R-project.org/package=Simile"><strong>Simile</strong></a>), or even R. However, it seems more common to use the inst directory, for example WriteXLS/inst/Perl, NMF/inst/m-files, RnavGraph/inst/tcl, RProtoBuf/inst/python and emdbook/inst/BUGS and gridSVG/inst/js.</p>
<p>Java code is a special case: except for very small programs, .java files should be byte-compiled (to a .class file) and distributed as part of a .jar file: the conventional location for the .jar file(s) is inst/java. It is desirable (and required under an Open Source license) to make the Java source files available: this is best done in a top-level java directory in the package—the source files should not be installed.</p>
<p>If your package requires one of these interpreters or an extension then this should be declared in the ‘SystemRequirements’ field of its DESCRIPTION file. (Users of Java most often do so <em>via</em> <a href="https://CRAN.R-project.org/package=rJava"><strong>rJava</strong></a>, when depending on/importing that suffices.)</p>
<p>Windows and Mac users should be aware that the Tcl extensions ‘BWidget’ and ‘Tktable’ which are currently included with the R for Windows and in the macOS installers <em>are</em> extensions and do need to be declared for users of other platforms (and that ‘Tktable’ is less widely available than it used to be, including not in the main repositories for major Linux distributions).</p>
<p>‘BWidget’ needs to be installed by the user on other OSes. This is fairly easy to do: first find the Tcl/Tk search path:</p>
<div class="example">
<pre class="example1"><code>library(tcltk)
strsplit(tclvalue(&#39;auto_path&#39;), &quot; &quot;)[[1]]</code></pre>
</div>
<p>then download the sources from <a href="http://sourceforge.net/projects/tcllib/files/BWidget/" class="uri">http://sourceforge.net/projects/tcllib/files/BWidget/</a> and at the command line run something like</p>
<div class="example">
<pre class="example1"><code>tar xf bwidget-1.9.8.tar.gz
sudo mv bwidget-1.9.8 /usr/local/lib</code></pre>
</div>
<p>substituting a location on the Tcl/Tk search path for /usr/local/lib if needed.</p>
<hr />
<p><a href="" id="Specifying-URLs"></a> <a href="" id="Specifying-URLs-1"></a></p>
<h4 id="specifying-urls" class="subsection">1.1.8 Specifying URLs</h4>
<p>URLs in many places in the package documentation will be converted to clickable hyperlinks in at least some of their renderings. So care is needed that their forms are correct and portable.</p>
<p>The full URL should be given, including the scheme (often ‘http://’ or ‘https://’) and a final ‘/’ for references to directories.</p>
<p>Spaces in URLs are not portable and how they are handled does vary by HTTP server and by client. There should be no space in the host part of an ‘http://’ URL, and spaces in the remainder should be encoded, with each space replaced by ‘%20’.</p>
<p>Other characters may benefit from being encoded: see the help on <code class="calibre2">URLencode()</code>.</p>
<p>The canonical URL for a CRAN package is</p>
<div class="example">
<pre class="example1"><code>https://cran.r-project.org/package=pkgname</code></pre>
</div>
<p>and not a version starting ‘http://cran.r-project.org/web/packages/pkgname’.</p>
<hr />
<p><a href="" id="Configure-and-cleanup"></a> <a href="" id="Configure-and-cleanup-1"></a></p>
<h3 id="configure-and-cleanup" class="section">1.2 Configure and cleanup</h3>
<p>Note that most of this section is specific to Unix-alikes: see the comments later on about the Windows port of R.</p>
<p>If your package needs some system-dependent configuration before installation you can include an executable (Bourne<a href="R-exts_split_014.html#FOOT24" id="DOCF24"><sup>24</sup></a>) shell script configure in your package which (if present) is executed by <code class="calibre2">R CMD INSTALL</code> before any other action is performed. This can be a script created by the Autoconf mechanism, but may also be a script written by yourself. Use this to detect if any nonstandard libraries are present such that corresponding code in the package can be disabled at install time rather than giving error messages when the package is compiled or used. To summarize, the full power of Autoconf is available for your extension package (including variable substitution, searching for libraries, etc.).</p>
<p>Under a Unix-alike only, an executable (Bourne shell) script cleanup is executed as the last thing by <code class="calibre2">R CMD INSTALL</code> if option --clean was given, and by <code class="calibre2">R CMD build</code> when preparing the package for building from its source.</p>
<p>As an example consider we want to use functionality provided by a (C or FORTRAN) library <code class="calibre2">foo</code>. Using Autoconf, we can create a configure script which checks for the library, sets variable <code class="calibre2">HAVE_FOO</code> to <code class="calibre2">TRUE</code> if it was found and to <code class="calibre2">FALSE</code> otherwise, and then substitutes this value into output files (by replacing instances of ‘@HAVE_FOO@’ in input files with the value of <code class="calibre2">HAVE_FOO</code>). For example, if a function named <code class="calibre2">bar</code> is to be made available by linking against library <code class="calibre2">foo</code> (i.e., using -lfoo), one could use</p>
<div class="example">
<pre class="example1"><code>AC_CHECK_LIB(foo, fun, [HAVE_FOO=TRUE], [HAVE_FOO=FALSE])
AC_SUBST(HAVE_FOO)
......
AC_CONFIG_FILES([foo.R])
AC_OUTPUT</code></pre>
</div>
<p>in configure.ac (assuming Autoconf 2.50 or later).</p>
<p>The definition of the respective R function in foo.R.in could be</p>
<div class="example">
<pre class="example1"><code>foo &lt;- function(x) {
    if(!@HAVE_FOO@)
      stop(&quot;Sorry, library ‘foo’ is not available&quot;)
    ...</code></pre>
</div>
<p>From this file <code class="calibre2">configure</code> creates the actual R source file foo.R looking like</p>
<div class="example">
<pre class="example1"><code>foo &lt;- function(x) {
    if(!FALSE)
      stop(&quot;Sorry, library ‘foo’ is not available&quot;)
    ...</code></pre>
</div>
<p>if library <code class="calibre2">foo</code> was not found (with the desired functionality). In this case, the above R code effectively disables the function.</p>
<p>One could also use different file fragments for available and missing functionality, respectively.</p>
<p>You will very likely need to ensure that the same C compiler and compiler flags are used in the configure tests as when compiling R or your package. Under a Unix-alike, you can achieve this by including the following fragment early in configure.ac (<em>before</em> calling <code class="calibre2">AC_PROG_CC</code>)</p>
<div class="example">
<pre class="example1"><code>: ${R_HOME=`R RHOME`}
if test -z &quot;${R_HOME}&quot;; then
  echo &quot;could not determine R_HOME&quot;
  exit 1
fi
CC=`&quot;${R_HOME}/bin/R&quot; CMD config CC`
CFLAGS=`&quot;${R_HOME}/bin/R&quot; CMD config CFLAGS`
CPPFLAGS=`&quot;${R_HOME}/bin/R&quot; CMD config CPPFLAGS`</code></pre>
</div>
<p>(Using ‘${R_HOME}/bin/R’ rather than just ‘R’ is necessary in order to use the correct version of R when running the script as part of <code class="calibre2">R CMD INSTALL</code>, and the quotes since ‘${R_HOME}’ might contain spaces.)</p>
<p>If your code does load checks then you may also need</p>
<div class="example">
<pre class="example1"><code>LDFLAGS=`&quot;${R_HOME}/bin/R&quot; CMD config LDFLAGS`</code></pre>
</div>
<p>and packages written with C++ need to pick up the details for the C++ compiler and switch the current language to C++ by something like</p>
<div class="example">
<pre class="example1"><code>CXX=`&quot;${R_HOME}/bin/R&quot; CMD config CXX`
CXXFLAGS=`&quot;${R_HOME}/bin/R&quot; CMD config CXXFLAGS`
AC_LANG(C++)</code></pre>
</div>
<p>The latter is important, as for example C headers may not be available to C++ programs or may not be written to avoid C++ name-mangling.</p>
<p><a href="" id="index-R-CMD-config"></a></p>
<p>You can use <code class="calibre2">R CMD config</code> for getting the value of the basic configuration variables, and also the header and library flags necessary for linking a front-end executable program against R, see R CMD config --help for details.</p>
<p>To check for an external BLAS library using the <code class="calibre2">ACX_BLAS</code> macro from the official Autoconf Macro Archive, one can simply do</p>
<div class="example">
<pre class="example1"><code>F77=`&quot;${R_HOME}/bin/R&quot; CMD config F77`
AC_PROG_F77
FLIBS=`&quot;${R_HOME}/bin/R&quot; CMD config FLIBS`
ACX_BLAS([], AC_MSG_ERROR([could not find your BLAS library], 1))</code></pre>
</div>
<p>Note that <code class="calibre2">FLIBS</code> as determined by R must be used to ensure that FORTRAN 77 code works on all R platforms. Calls to the Autoconf macro <code class="calibre2">AC_F77_LIBRARY_LDFLAGS</code>, which would overwrite <code class="calibre2">FLIBS</code>, must not be used (and hence e.g. removed from <code class="calibre2">ACX_BLAS</code>). (Recent versions of Autoconf in fact allow an already set <code class="calibre2">FLIBS</code> to override the test for the FORTRAN linker flags.)</p>
<p><strong>N.B.</strong>: If the <code class="calibre2">configure</code> script creates files, e.g. src/Makevars, you do need a <code class="calibre2">cleanup</code> script to remove them. Otherwise <code class="calibre2">R CMD build</code> may ship the files that are created. For example, package <a href="https://CRAN.R-project.org/package=RODBC"><strong>RODBC</strong></a> has</p>
<div class="example">
<pre class="example1"><code>#!/bin/sh

rm -f config.* src/Makevars src/config.h</code></pre>
</div>
<p>As this example shows, <code class="calibre2">configure</code> often creates working files such as config.log.</p>
<p>If your configure script needs auxiliary files, it is recommended that you ship them in a tools directory (as R itself does).</p>
<p>You should bear in mind that the configure script will not be used on Windows systems. If your package is to be made publicly available, please give enough information for a user on a non-Unix-alike platform to configure it manually, or provide a configure.win script to be used on that platform. (Optionally, there can be a cleanup.win script. Both should be shell scripts to be executed by <code class="calibre2">ash</code>, which is a minimal version of Bourne-style <code class="calibre2">sh</code>.) When configure.win is run the environment variables <code class="calibre2">R_HOME</code> (which uses ‘/’ as the file separator), <code class="calibre2">R_ARCH</code> and Use <code class="calibre2">R_ARCH_BIN</code> will be set. Use <code class="calibre2">R_ARCH</code> to decide if this is a 64-bit build (its value there is ‘/x64’) and to install DLLs to the correct place (${R_HOME}/libs${R_ARCH}). Use <code class="calibre2">R_ARCH_BIN</code> to find the correct place under the bin directory, e.g. ${R_HOME}/bin${R_ARCH_BIN}/Rscript.exe.</p>
<p>In some rare circumstances, the configuration and cleanup scripts need to know the location into which the package is being installed. An example of this is a package that uses C code and creates two shared object/DLLs. Usually, the object that is dynamically loaded by R is linked against the second, dependent, object. On some systems, we can add the location of this dependent object to the object that is dynamically loaded by R. This means that each user does not have to set the value of the <code class="calibre2">LD_LIBRARY_PATH</code> (or equivalent) environment variable, but that the secondary object is automatically resolved. Another example is when a package installs support files that are required at run time, and their location is substituted into an R data structure at installation time. <a href="" id="index-R_005fLIBRARY_005fDIR"></a> <a href="" id="index-R_005fPACKAGE_005fDIR"></a> <a href="" id="index-R_005fPACKAGE_005fNAME"></a> The names of the top-level library directory (i.e., specifiable <em>via</em> the ‘-l’ argument) and the directory of the package itself are made available to the installation scripts <em>via</em> the two shell/environment variables <code class="calibre2">R_LIBRARY_DIR</code> and <code class="calibre2">R_PACKAGE_DIR</code>. Additionally, the name of the package (e.g. ‘survival’ or ‘MASS’) being installed is available from the environment variable <code class="calibre2">R_PACKAGE_NAME</code>. (Currently the value of <code class="calibre2">R_PACKAGE_DIR</code> is always <code class="calibre2">${R_LIBRARY_DIR}/${R_PACKAGE_NAME}</code>, but this used not to be the case when versioned installs were allowed. Its main use is in configure.win scripts for the installation path of external software’s DLLs.) Note that the value of <code class="calibre2">R_PACKAGE_DIR</code> may contain spaces and other shell-unfriendly characters, and so should be quoted in makefiles and configure scripts.</p>
<p>One of the more tricky tasks can be to find the headers and libraries of external software. One tool which is increasingly available on Unix-alikes (but not by default on macOS) to do this is <code class="calibre2">pkg-config</code>. The configure script will need to test for the presence of the command itself (see for example package <a href="https://CRAN.R-project.org/package=Cairo"><strong>Cairo</strong></a>), and if present it can be asked if the software is installed, of a suitable version and for compilation/linking flags by e.g.</p>
<div class="example">
<pre class="example1"><code>$ pkg-config --exists ‘QtCore &gt;= 4.0.0’  # check the status
$ pkg-config --modversion QtCore
4.7.1
$ pkg-config --cflags QtCore
-DQT_SHARED -I/usr/include/QtCore
$ pkg-config --libs QtCore
-lQtCore</code></pre>
</div>
<p>Note that <code class="calibre2">pkg-config --libs</code> gives the information required to link against the default version of that library (usually the dynamic one), and <code class="calibre2">pkg-config --static</code> is needed if the static library is to be used.</p>
<p>Sometimes the name by which the software is known to <code class="calibre2">pkg-config</code> is not what one might expect (e.g. ‘gtk+-2.0’ even for 2.22). To get a complete list use</p>
<div class="example">
<pre class="example1"><code>pkg-config --list-all | sort</code></pre>
</div>
<hr />
<p><a href="" id="Using-Makevars"></a> <a href="" id="Using-Makevars-1"></a></p>
<h4 id="using-makevars" class="subsection">1.2.1 Using Makevars</h4>
<p>Sometimes writing your own configure script can be avoided by supplying a file Makevars: also one of the most common uses of a configure script is to make Makevars from Makevars.in.</p>
<p>A Makevars file is a makefile and is used as one of several makefiles by <code class="calibre2">R CMD SHLIB</code> (which is called by <code class="calibre2">R CMD INSTALL</code> to compile code in the src directory). It should be written if at all possible in a portable style, in particular (except for Makevars.win) without the use of GNU extensions.</p>
<p>The most common use of a Makevars file is to set additional preprocessor options (for example include paths) for C/C++ files <em>via</em> <code class="calibre2">PKG_CPPFLAGS</code>, and additional compiler flags by setting <code class="calibre2">PKG_CFLAGS</code>, <code class="calibre2">PKG_CXXFLAGS</code>, <code class="calibre2">PKG_FFLAGS</code> or <code class="calibre2">PKG_FCFLAGS</code>, for C, C++, FORTRAN or Fortran 9x respectively (see <a href="R-exts_split_009.html#Creating-shared-objects">Creating shared objects</a>).</p>
<p><strong>N.B.</strong>: Include paths are preprocessor options, not compiler options, and <strong>must</strong> be set in <code class="calibre2">PKG_CPPFLAGS</code> as otherwise platform-specific paths (e.g. ‘-I/usr/local/include’) will take precedence.</p>
<p>Makevars can also be used to set flags for the linker, for example ‘-L’ and ‘-l’ options, <em>via</em> <code class="calibre2">PKG_LIBS</code>.</p>
<p>When writing a Makevars file for a package you intend to distribute, take care to ensure that it is not specific to your compiler: flags such as -O2 -Wall -pedantic (and all other -W flags: for the Oracle compilers these are used to pass arguments to compiler phases) are all specific to GCC.</p>
<p>Also, do not set variables such as <code class="calibre2">CPPFLAGS</code>, <code class="calibre2">CFLAGS</code> etc.: these should be settable by users (sites) through appropriate personal (site-wide) Makevars files.</p>
<p>There are some macros<a href="R-exts_split_014.html#FOOT25" id="DOCF25"><sup>25</sup></a> which are set whilst configuring the building of R itself and are stored in R_HOME/etcR_ARCH/Makeconf. That makefile is included as a Makefile <em>after</em> Makevars[.win], and the macros it defines can be used in macro assignments and make command lines in the latter. These include</p>
<dl>
<dt><code class="calibre2">FLIBS</code></dt>
<dd><p><a href="" id="index-FLIBS"></a></p>
<p>A macro containing the set of libraries need to link FORTRAN code. This may need to be included in <code class="calibre2">PKG_LIBS</code>: it will normally be included automatically if the package contains FORTRAN source files.</p>
</dd>
<dt><code class="calibre2">BLAS_LIBS</code></dt>
<dd><p><a href="" id="index-BLAS_005fLIBS"></a></p>
<p>A macro containing the BLAS libraries used when building R. This may need to be included in <code class="calibre2">PKG_LIBS</code>. Beware that if it is empty then the R executable will contain all the double-precision and double-complex BLAS routines, but no single-precision nor complex routines. If <code class="calibre2">BLAS_LIBS</code> is included, then <code class="calibre2">FLIBS</code> also needs to be<a href="R-exts_split_014.html#FOOT26" id="DOCF26"><sup>26</sup></a> included following it, as most BLAS libraries are written at least partially in FORTRAN.</p>
</dd>
<dt><code class="calibre2">LAPACK_LIBS</code></dt>
<dd><p><a href="" id="index-LAPACK_005fLIBS"></a></p>
<p>A macro containing the LAPACK libraries (and paths where appropriate) used when building R. This may need to be included in <code class="calibre2">PKG_LIBS</code>. It may point to a dynamic library <code class="calibre2">libRlapack</code> which contains the main double-precision LAPACK routines as well as those double-complex LAPACK routines needed to build R, or it may point to an external LAPACK library, or may be empty if an external BLAS library also contains LAPACK.</p>
<p>[<code class="calibre2">libRlapack</code> includes all the double-precision LAPACK routines which were current in 2003: a list of which routines are included is in file src/modules/lapack/README. Note that an external LAPACK/BLAS library need not do so, as some were ‘deprecated’ (and not compiled by default) in LAPACK 3.6.0 in late 2015.]</p>
<p>For portability, the macros <code class="calibre2">BLAS_LIBS</code> and <code class="calibre2">FLIBS</code> should always be included <em>after</em> <code class="calibre2">LAPACK_LIBS</code> (and in that order).</p>
</dd>
<dt><code class="calibre2">SAFE_FFLAGS</code></dt>
<dd><p><a href="" id="index-SAFE_005fFFLAGS"></a></p>
<p>A macro containing flags which are needed to circumvent over-optimization of FORTRAN code: it is typically ‘-g -O2 -ffloat-store’ on ‘ix86’ platforms using <code class="calibre2">gfortran</code>. Note that this is <strong>not</strong> an additional flag to be used as part of <code class="calibre2">PKG_FFLAGS</code>, but a replacement for <code class="calibre2">FFLAGS</code>, and that it is intended for the FORTRAN 77 compiler ‘F77’ and not necessarily for the Fortran 90/95 compiler ‘FC’. See the example later in this section.</p>
</dd>
</dl>
<p><a href="" id="index-OBJECTS"></a></p>
<p>Setting certain macros in Makevars will prevent <code class="calibre2">R CMD SHLIB</code> setting them: in particular if Makevars sets ‘OBJECTS’ it will not be set on the <code class="calibre2">make</code> command line. This can be useful in conjunction with implicit rules to allow other types of source code to be compiled and included in the shared object. It can also be used to control the set of files which are compiled, either by excluding some files in src or including some files in subdirectories. For example</p>
<div class="example">
<pre class="example1"><code>OBJECTS = 4dfp/endianio.o 4dfp/Getifh.o R4dfp-object.o</code></pre>
</div>
<p>Note that Makevars should not normally contain targets, as it is included before the default makefile and <code class="calibre2">make</code> will call the first target, intended to be <code class="calibre2">all</code> in the default makefile. If you really need to circumvent that, use a suitable (phony) target <code class="calibre2">all</code> before any actual targets in Makevars.[win]: for example package <a href="https://CRAN.R-project.org/package=fastICA"><strong>fastICA</strong></a> used to have</p>
<div class="example">
<pre class="example1"><code>PKG_LIBS = @BLAS_LIBS@

SLAMC_FFLAGS=$(R_XTRA_FFLAGS) $(FPICFLAGS) $(SHLIB_FFLAGS) $(SAFE_FFLAGS)

all: $(SHLIB)

slamc.o: slamc.f
        $(F77) $(SLAMC_FFLAGS) -c -o slamc.o slamc.f</code></pre>
</div>
<p>needed to ensure that the LAPACK routines find some constants without infinite looping. The Windows equivalent was</p>
<div class="example">
<pre class="example1"><code>all: $(SHLIB)

slamc.o: slamc.f
        $(F77) $(SAFE_FFLAGS) -c -o slamc.o slamc.f</code></pre>
</div>
<p>(since the other macros are all empty on that platform, and R’s internal BLAS was not used). Note that the first target in Makevars will be called, but for back-compatibility it is best named <code class="calibre2">all</code>.</p>
<p>If you want to create and then link to a library, say using code in a subdirectory, use something like</p>
<div class="example">
<pre class="example1"><code>.PHONY: all mylibs

all: $(SHLIB)
$(SHLIB): mylibs

mylibs:
        (cd subdir; $(MAKE))</code></pre>
</div>
<p>Be careful to create all the necessary dependencies, as there is no guarantee that the dependencies of <code class="calibre2">all</code> will be run in a particular order (and some of the CRAN build machines use multiple CPUs and parallel makes). In particular,</p>
<div class="example">
<pre class="example1"><code>all: mylibs</code></pre>
</div>
<p>does <strong>not</strong> suffice.</p>
<p>Note that on Windows it is required that Makevars[.win] does create a DLL: this is needed as it is the only reliable way to ensure that building a DLL succeeded. If you want to use the src directory for some purpose other than building a DLL, use a Makefile.win file.</p>
<p>It is sometimes useful to have a target ‘clean’ in Makevars or Makevars.win: this will be used by <code class="calibre2">R CMD build</code> to clean up (a copy of) the package sources. When it is run by <code class="calibre2">build</code> it will have fewer macros set, in particular not <code class="calibre2">$(SHLIB)</code>, nor <code class="calibre2">$(OBJECTS)</code> unless set in the file itself. It would also be possible to add tasks to the target ‘shlib-clean’ which is run by <code class="calibre2">R CMD INSTALL</code> and <code class="calibre2">R CMD SHLIB</code> with options --clean and --preclean.</p>
<p>If you want to run R code in Makevars, e.g. to find configuration information, please do ensure that you use the correct copy of <code class="calibre2">R</code> or <code class="calibre2">Rscript</code>: there might not be one in the path at all, or it might be the wrong version or architecture. The correct way to do this is <em>via</em></p>
<div class="example">
<pre class="example1"><code>&quot;$(R_HOME)/bin$(R_ARCH_BIN)/Rscript&quot; filename
&quot;$(R_HOME)/bin$(R_ARCH_BIN)/Rscript&quot; -e ‘R expression’</code></pre>
</div>
<p>where <code class="calibre2">$(R_ARCH_BIN)</code> is only needed currently on Windows.</p>
<p>Environment or make variables can be used to select different macros for 32- and 64-bit code, for example (GNU <code class="calibre2">make</code> syntax, allowed on Windows)</p>
<div class="example">
<pre class="example1"><code>ifeq &quot;$(WIN)&quot; &quot;64&quot;
PKG_LIBS = value for 64-bit Windows
else
PKG_LIBS = value for 32-bit Windows
endif</code></pre>
</div>
<p>On Windows there is normally a choice between linking to an import library or directly to a DLL. Where possible, the latter is much more reliable: import libraries are tied to a specific toolchain, and in particular on 64-bit Windows two different conventions have been commonly used. So for example instead of</p>
<div class="example">
<pre class="example1"><code>PKG_LIBS = -L$(XML_DIR)/lib -lxml2</code></pre>
</div>
<p>one can use</p>
<div class="example">
<pre class="example1"><code>PKG_LIBS = -L$(XML_DIR)/bin -lxml2</code></pre>
</div>
<p>since on Windows <code class="calibre2">-lxxx</code> will look in turn for</p>
<div class="example">
<pre class="example1"><code>libxxx.dll.a
xxx.dll.a
libxxx.a
xxx.lib
libxxx.dll
xxx.dll</code></pre>
</div>
<p>where the first and second are conventionally import libraries, the third and fourth often static libraries (with <code class="calibre2">.lib</code> intended for Visual C++), but might be import libraries. See for example <a href="https://sourceware.org/binutils/docs-2.20/ld/WIN32.html#WIN32" class="uri">https://sourceware.org/binutils/docs-2.20/ld/WIN32.html#WIN32</a>.</p>
<p>The fly in the ointment is that the DLL might not be named libxxx.dll, and in fact on 32-bit Windows there is a libxml2.dll whereas on one build for 64-bit Windows the DLL is called libxml2-2.dll. Using import libraries can cover over these differences but can cause equal difficulties.</p>
<p>If static libraries are available they can save a lot of problems with run-time finding of DLLs, especially when binary packages are to be distributed and even more when these support both architectures. Where using DLLs is unavoidable we normally arrange (<em>via</em> configure.win) to ship them in the same directory as the package DLL.</p>
<hr />
<p><a href="" id="OpenMP-support"></a> <a href="" id="OpenMP-support-1"></a></p>
<h4 id="openmp-support" class="subsection">1.2.1.1 OpenMP support</h4>
<p><a href="" id="index-OpenMP"></a></p>
<p>There is some support for packages which wish to use OpenMP<a href="R-exts_split_014.html#FOOT27" id="DOCF27"><sup>27</sup></a>. The <code class="calibre2">make</code> macros</p>
<div class="example">
<pre class="example1"><code>SHLIB_OPENMP_CFLAGS
SHLIB_OPENMP_CXXFLAGS
SHLIB_OPENMP_FCFLAGS
SHLIB_OPENMP_FFLAGS</code></pre>
</div>
<p>are available for use in src/Makevars or src/Makevars.win. Include the appropriate macro in <code class="calibre2">PKG_CFLAGS</code>, <code class="calibre2">PKG_CPPFLAGS</code> and so on, and also in <code class="calibre2">PKG_LIBS</code>. C/C++ code that needs to be conditioned on the use of OpenMP can be used inside <code class="calibre2">#ifdef _OPENMP</code>: note that some toolchains used for R (including that of macOS and some others using <code class="calibre2">clang</code><a href="R-exts_split_014.html#FOOT28" id="DOCF28"><sup>28</sup></a>) have no OpenMP support at all, not even omp.h.</p>
<p>For example, a package with C code written for OpenMP should have in src/Makevars the lines</p>
<div class="example">
<pre class="example1"><code>PKG_CFLAGS = $(SHLIB_OPENMP_CFLAGS)
PKG_LIBS = $(SHLIB_OPENMP_CFLAGS)</code></pre>
</div>
<p>Note that the macro <code class="calibre2">SHLIB_OPENMP_CXXFLAGS</code> applies to the default C++ compiler and not necessarily to the C++11/14/17 compiler: users of the latter should do their own <code class="calibre2">configure</code> checks (an example is available in CRAN package <a href="https://CRAN.R-project.org/package=ARTP2"><strong>ARTP2</strong></a>).</p>
<p>Some care is needed when compilers are from different families which may use different OpenMP runtimes (e.g. <code class="calibre2">clang</code> <em>vs</em> GCC including <code class="calibre2">gfortran</code>, although it is currently possible to use the <code class="calibre2">clang</code> runtime with GCC but not <em>vice versa</em>). For a package with Fortran 77 code using OpenMP the appropriate lines are</p>
<div class="example">
<pre class="example1"><code>PKG_FFLAGS = $(SHLIB_OPENMP_FFLAGS)
PKG_LIBS = $(SHLIB_OPENMP_CFLAGS)</code></pre>
</div>
<p>as the C compiler will be used to link the package code (and there is no guarantee that this will work everywhere). (This does not apply to Fortran 9x code, where <code class="calibre2">SHLIB_OPENMP_FCFLAGS</code> should be used in both <code class="calibre2">PKG_FCFLAGS</code> and <code class="calibre2">PKG_LIBS</code>.)</p>
<p>For portability, any C/C++ code using the <code class="calibre2">omp_*</code> functions should include the omp.h header: some compilers (but not all) include it when OpenMP mode is switched on (e.g. <em>via</em> flag -fopenmp).</p>
<p>There is nothing<a href="R-exts_split_014.html#FOOT29" id="DOCF29"><sup>29</sup></a> to say what version of OpenMP is supported: version 3.1 (and much of 4.0) is supported by recent versions<a href="R-exts_split_014.html#FOOT30" id="DOCF30"><sup>30</sup></a> of the Linux, Windows and Solaris platforms, but portable packages cannot assume that end users have recent versions.<a href="R-exts_split_014.html#FOOT31" id="DOCF31"><sup>31</sup></a> macOS currently uses Apple builds of <code class="calibre2">clang</code> with no OpenMP support (even if invoked as <code class="calibre2">gcc</code> and despite the <code class="calibre2">man</code> page including the flag -fopenmp for that command). <a href="http://www.openmp.org/resources/openmp-compilers" class="uri">http://www.openmp.org/resources/openmp-compilers</a> gives some idea of what compilers support what versions.</p>
<p>The performance of OpenMP varies substantially between platforms. The Windows implementation has substantial overheads<a href="R-exts_split_014.html#FOOT32" id="DOCF32"><sup>32</sup></a>, so is only beneficial if quite substantial tasks are run in parallel. Also, on Windows new threads are started with the default<a href="R-exts_split_014.html#FOOT33" id="DOCF33"><sup>33</sup></a> FPU control word, so computations done on OpenMP threads will not make use of extended-precision arithmetic which is the default for the main process.</p>
<p>Calling any of the R API from threaded code is ‘for experts only’: they will need to read the source code to determine if it is thread-safe. In particular, code which makes use of the stack-checking mechanism must not be called from threaded code.</p>
<p>Packages are not standard-alone programs, and an R process could contain more than one OpenMP-enabled package as well as other components (for example, an optimized BLAS) making use of OpenMP. So careful consideration needs to be given to resource usage. OpenMP works with parallel regions, and for most implementations the default is to use as many threads as ‘CPUs’ for such regions. Parallel regions can be nested, although it is common to use only a single thread below the first level. The correctness of the detected number of ‘CPUs’ and the assumption that the R process is entitled to use them all are both dubious assumptions. The best way to limit resources is to limit the overall number of threads available to OpenMP in the R process: this can be done via environment variable <code class="calibre2">OMP_THREAD_LIMIT</code>, where implemented.<a href="R-exts_split_014.html#FOOT34" id="DOCF34"><sup>34</sup></a> Alternatively, the number of threads per region can be limited by the environment variable <code class="calibre2">OMP_NUM_THREADS</code> or API call <code class="calibre2">omp_set_num_threads</code>, or, better, for the regions in your code as part of their specification. E.g. R uses</p>
<div class="example">
<pre class="example1"><code>#pragma omp parallel for num_threads(nthreads) …</code></pre>
</div>
<p>That way you only control your own code and not that of other OpenMP users.</p>
<hr />
<p><a href="" id="Using-pthreads"></a> <a href="" id="Using-pthreads-1"></a></p>
<h4 id="using-pthreads" class="subsection">1.2.1.2 Using pthreads</h4>
<p>There is no direct support for the POSIX threads (more commonly known as <code class="calibre2">pthreads</code>): by the time we considered adding it several packages were using it unconditionally so it seems that nowadays it is universally available on POSIX operating systems (hence not Windows).</p>
<p>For reasonably recent versions of <code class="calibre2">gcc</code> and <code class="calibre2">clang</code> the correct specification is</p>
<div class="example">
<pre class="example1"><code>PKG_CPPFLAGS = -pthread
PKG_LIBS = -pthread</code></pre>
</div>
<p>(and the plural version is also accepted on some systems/versions). For other platforms the specification is</p>
<div class="example">
<pre class="example1"><code>PKG_CPPFLAGS = -D_REENTRANT
PKG_LIBS = -lpthread</code></pre>
</div>
<p>(and note that the library name is singular). This is what -pthread does on all known current platforms (although earlier versions of OpenBSD used a different library name).</p>
<p>For a tutorial see <a href="https://computing.llnl.gov/tutorials/pthreads/" class="uri">https://computing.llnl.gov/tutorials/pthreads/</a>.</p>
<p>POSIX threads are not normally used on Windows, which has its own native concepts of threads. However, there are two projects implementing <code class="calibre2">pthreads</code> on top of Windows, <code class="calibre2">pthreads-w32</code> and <code class="calibre2">winpthreads</code> (part of the MinGW-w64 project).</p>
<p>Whether Windows toolchains implement <code class="calibre2">pthreads</code> is up to the toolchain provider. A <code class="calibre2">make</code> variable <code class="calibre2">SHLIB_PTHREAD_FLAGS</code> is available: this should be included in both <code class="calibre2">PKG_CPPFLAGS</code> (or the Fortran or F9x equivalents) and <code class="calibre2">PKG_LIBS</code>.</p>
<p>The presence of a working <code class="calibre2">pthreads</code> implementation cannot be unambiguously determined without testing for yourself: however, that ‘_REENTRANT’ is defined<a href="R-exts_split_014.html#FOOT35" id="DOCF35"><sup>35</sup></a> in C/C++ code is a good indication.</p>
<p>Note that not all <code class="calibre2">pthreads</code> implementations are equivalent as parts are optional (see <a href="http://pubs.opengroup.org/onlinepubs/009695399/basedefs/pthread.h.html" class="uri">http://pubs.opengroup.org/onlinepubs/009695399/basedefs/pthread.h.html</a>): for example, macOS lacks the ‘Barriers’ option.</p>
<p>See also the comments on thread-safety and performance under OpenMP: on all known R platforms OpenMP is implemented <em>via</em> <code class="calibre2">pthreads</code> and the known performance issues are in the latter.</p>
<hr />
<p><a href="" id="Compiling-in-sub_002ddirectories"></a> <a href="" id="Compiling-in-sub_002ddirectories-1"></a></p>
<h4 id="compiling-in-sub-directories" class="subsection">1.2.1.3 Compiling in sub-directories</h4>
<p>Package authors fairly often want to organize code in sub-directories of src, for example if they are including a separate piece of external software to which this is an R interface.</p>
<p>One simple way is simply to set <code class="calibre2">OBJECTS</code> to be all the objects that need to be compiled, including in sub-directories. For example, CRAN package <a href="https://CRAN.R-project.org/package=RSiena"><strong>RSiena</strong></a> has</p>
<div class="example">
<pre class="smallexample"><code>SOURCES = $(wildcard data/*.cpp network/*.cpp utils/*.cpp model/*.cpp model/*/*.cpp model/*/*/*.cpp)

OBJECTS = siena07utilities.o siena07internals.o siena07setup.o siena07models.o $(SOURCES:.cpp=.o)</code></pre>
</div>
<p>One problem with that approach is that unless GNU make extensions are used, the source files need to be listed and kept up-to-date. As in the following from CRAN package <a href="https://CRAN.R-project.org/package=lossDev"><strong>lossDev</strong></a>:</p>
<div class="example">
<pre class="smallexample"><code>OBJECTS.samplers = samplers/ExpandableArray.o samplers/Knots.o \
  samplers/RJumpSpline.o samplers/RJumpSplineFactory.o \
  samplers/RealSlicerOV.o samplers/SliceFactoryOV.o samplers/MNorm.o
OBJECTS.distributions = distributions/DSpline.o \
  distributions/DChisqrOV.o distributions/DTOV.o \
  distributions/DNormOV.o distributions/DUnifOV.o distributions/RScalarDist.o
OBJECTS.root = RJump.o

OBJECTS = $(OBJECTS.samplers) $(OBJECTS.distributions) $(OBJECTS.root)</code></pre>
</div>
<p>Where the subdirectory is self-contained code with a suitable makefile, the best approach is something like</p>
<div class="example">
<pre class="smallexample"><code>PKG_LIBS = -LCsdp/lib -lsdp $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)

$(SHLIB): Csdp/lib/libsdp.a

Csdp/lib/libsdp.a:      
        @(cd Csdp/lib &amp;&amp; $(MAKE) libsdp.a \
          CC=&quot;$(CC)&quot; CFLAGS=&quot;$(CFLAGS) $(CPICFLAGS)&quot; AR=&quot;$(AR)&quot; RANLIB=&quot;$(RANLIB)&quot;)</code></pre>
</div>
<p>Note the quotes: the macros can contain spaces, e.g. <code class="calibre2">CC = &quot;gcc -m64 -std=gnu99&quot;</code>. Several authors have forgotten about parallel makes: the static library in the subdirectory must be made before the shared object (<code class="calibre2">$(SHLIB)</code>) and so the latter must depend on the former. Others forget the need<a href="R-exts_split_014.html#FOOT36" id="DOCF36"><sup>36</sup></a> for position-independent code.</p>
<p>We really do not recommend using src/Makefile instead of src/Makevars, and as the example above shows, it is not necessary.</p>
<hr />
<p><a href="" id="Configure-example"></a> <a href="" id="Configure-example-1"></a></p>
<h4 id="configure-example" class="subsection">1.2.2 Configure example</h4>
<p>It may be helpful to give an extended example of using a configure script to create a src/Makevars file: this is based on that in the <a href="https://CRAN.R-project.org/package=RODBC"><strong>RODBC</strong></a> package.</p>
<p>The configure.ac file follows: configure is created from this by running <code class="calibre2">autoconf</code> in the top-level package directory (containing configure.ac).</p>
<blockquote>
<div class="example">
<pre class="smallexample"><code>AC_INIT([RODBC], 1.1.8) dnl package name, version

dnl A user-specifiable option
odbc_mgr=&quot;&quot;
AC_ARG_WITH([odbc-manager],
            AC_HELP_STRING([--with-odbc-manager=MGR],
                           [specify the ODBC manager, e.g. odbc or iodbc]),
            [odbc_mgr=$withval])

if test &quot;$odbc_mgr&quot; = &quot;odbc&quot; ; then
  AC_PATH_PROGS(ODBC_CONFIG, odbc_config)
fi

dnl Select an optional include path, from a configure option
dnl or from an environment variable.
AC_ARG_WITH([odbc-include],
            AC_HELP_STRING([--with-odbc-include=INCLUDE_PATH],
                           [the location of ODBC header files]),
            [odbc_include_path=$withval])
RODBC_CPPFLAGS=&quot;-I.&quot;
if test [ -n &quot;$odbc_include_path&quot; ] ; then
   RODBC_CPPFLAGS=&quot;-I. -I${odbc_include_path}&quot;
else
  if test [ -n &quot;${ODBC_INCLUDE}&quot; ] ; then
     RODBC_CPPFLAGS=&quot;-I. -I${ODBC_INCLUDE}&quot;
  fi
fi

dnl ditto for a library path
AC_ARG_WITH([odbc-lib],
            AC_HELP_STRING([--with-odbc-lib=LIB_PATH],
                           [the location of ODBC libraries]),
            [odbc_lib_path=$withval])
if test [ -n &quot;$odbc_lib_path&quot; ] ; then
   LIBS=&quot;-L$odbc_lib_path ${LIBS}&quot;
else
  if test [ -n &quot;${ODBC_LIBS}&quot; ] ; then
     LIBS=&quot;-L${ODBC_LIBS} ${LIBS}&quot;
  else
    if test -n &quot;${ODBC_CONFIG}&quot;; then
      odbc_lib_path=`odbc_config --libs | sed s/-lodbc//`
      LIBS=&quot;${odbc_lib_path} ${LIBS}&quot;
    fi
  fi
fi

dnl Now find the compiler and compiler flags to use
: ${R_HOME=`R RHOME`}
if test -z &quot;${R_HOME}&quot;; then
  echo &quot;could not determine R_HOME&quot;
  exit 1
fi
CC=`&quot;${R_HOME}/bin/R&quot; CMD config CC`
CPP=`&quot;${R_HOME}/bin/R&quot; CMD config CPP`
CFLAGS=`&quot;${R_HOME}/bin/R&quot; CMD config CFLAGS`
CPPFLAGS=`&quot;${R_HOME}/bin/R&quot; CMD config CPPFLAGS`
AC_PROG_CC
AC_PROG_CPP


if test -n &quot;${ODBC_CONFIG}&quot;; then
  RODBC_CPPFLAGS=`odbc_config --cflags`
fi
CPPFLAGS=&quot;${CPPFLAGS} ${RODBC_CPPFLAGS}&quot;

dnl Check the headers can be found
AC_CHECK_HEADERS(sql.h sqlext.h)
if test &quot;${ac_cv_header_sql_h}&quot; = no ||
   test &quot;${ac_cv_header_sqlext_h}&quot; = no; then
   AC_MSG_ERROR(&quot;ODBC headers sql.h and sqlext.h not found&quot;)
fi

dnl search for a library containing an ODBC function
if test [ -n &quot;${odbc_mgr}&quot; ] ; then
  AC_SEARCH_LIBS(SQLTables, ${odbc_mgr}, ,
      AC_MSG_ERROR(&quot;ODBC driver manager ${odbc_mgr} not found&quot;))
else
  AC_SEARCH_LIBS(SQLTables, odbc odbc32 iodbc, ,
      AC_MSG_ERROR(&quot;no ODBC driver manager found&quot;))
fi

dnl for 64-bit ODBC need SQL[U]LEN, and it is unclear where they are defined.
AC_CHECK_TYPES([SQLLEN, SQLULEN], , , [# include &lt;sql.h&gt;])
dnl for unixODBC header
AC_CHECK_SIZEOF(long, 4)

dnl substitute RODBC_CPPFLAGS and LIBS
AC_SUBST(RODBC_CPPFLAGS)
AC_SUBST(LIBS)
AC_CONFIG_HEADERS([src/config.h])
dnl and do substitution in the src/Makevars.in and src/config.h
AC_CONFIG_FILES([src/Makevars])
AC_OUTPUT</code></pre>
</div>
</blockquote>
<p>where src/Makevars.in would be simply</p>
<blockquote>
<div class="example">
<pre class="example1"><code>PKG_CPPFLAGS = @RODBC_CPPFLAGS@
PKG_LIBS = @LIBS@</code></pre>
</div>
</blockquote>
<p>A user can then be advised to specify the location of the ODBC driver manager files by options like (lines broken for easier reading)</p>
<div class="example">
<pre class="example1"><code>R CMD INSTALL \
  --configure-args=&#39;--with-odbc-include=/opt/local/include \
  --with-odbc-lib=/opt/local/lib --with-odbc-manager=iodbc&#39; \
  RODBC</code></pre>
</div>
<p>or by setting the environment variables <code class="calibre2">ODBC_INCLUDE</code> and <code class="calibre2">ODBC_LIBS</code>.</p>
<hr />
<p><a href="" id="Using-F95-code"></a> <a href="" id="Using-F95-code-1"></a></p>
<h4 id="using-f95-code" class="subsection">1.2.3 Using F95 code</h4>
<p>R assumes that source files with extension .f are FORTRAN 77, and passes them to the compiler specified by ‘F77’. On most but not all platforms that compiler will accept Fortran 90/95 code: some platforms have a separate Fortran 90/95 compiler and a few (by now quite rare<a href="R-exts_split_014.html#FOOT37" id="DOCF37"><sup>37</sup></a>) platforms have no Fortran 90/95 support.</p>
<p>This means that portable packages need to be written in correct FORTRAN 77, which will also be valid Fortran 95. See <a href="https://developer.R-project.org/Portability.html" class="uri">https://developer.R-project.org/Portability.html</a> for reference resources. In particular, <em>free source form</em> F95 code is not portable.</p>
<p>On some systems an alternative F95 compiler is available: from the <code class="calibre2">gcc</code> family this might be <code class="calibre2">gfortran</code> or <code class="calibre2">g95</code>. Configuring R will try to find a compiler which (from its name) appears to be a Fortran 90/95 compiler, and set it in macro ‘FC’. Note that it does not check that such a compiler is fully (or even partially) compliant with Fortran 90/95. Packages making use of Fortran 90/95 features should use file extension .f90 or .f95 for the source files: the variable <code class="calibre2">PKG_FCFLAGS</code> specifies any special flags to be used. There is no guarantee that compiled Fortran 90/95 code can be mixed with any other type of compiled code, nor that a build of R will have support for such packages.</p>
<p>Some (but not) all compilers specified by the ‘FC’ macro will accept Fortran 2003 or 2008 code: such code should still use file extension .f90 or .f95. For platforms using <code class="calibre2">gfortran</code>, you may need to include -std=f2003 or -std=f2008 in <code class="calibre2">PKG_FCFLAGS</code>: the default is ‘GNU Fortran’, Fortran 95 with non-standard extensions. The Oracle <code class="calibre2">f95</code> compiler ‘accepts some Fortran 2003/8 features’ (search for ‘Oracle Developer Studio 12.5: Fortran User’s Guide’ and look for §4.6).</p>
<p>Modern versions of Fortran support modules, whereby compiling one source file creates a module file which is then included in others. (Module files typically have a .mod extension: they do depend on the compiler used and so should never be included in a package.) This creates a dependence which <code class="calibre2">make</code> will not know about and often causes installation with a parallel make to fail. Thus it is necessary to add explicit dependencies to src/Makevars to tell <code class="calibre2">make</code> the constraints on the order of compilation. For example, if file iface.f90 creates a module ‘iface’ used by files cmi.f90 and dmi.f90 then src/Makevars needs to contain something like</p>
<div class="example">
<pre class="example1"><code>cmi.o dmi.o: iface.o</code></pre>
</div>
<hr />
<p><a href="" id="Using-C_002b_002b11-code"></a> <a href="" id="Using-C_002b_002b11-code-1"></a></p>
<h4 id="using-c11-code" class="subsection">1.2.4 Using C++11 code</h4>
<p>R can be built without a C++ compiler although one is available (but not necessarily installed) on all known R platforms. For full portability across platforms, all that can be assumed is approximate support for the C++98 standard (the widely used <code class="calibre2">g++</code> deviates considerably from the standard). Some compilers have a concept of ‘C++03’ (‘essentially a bug fix’) or ‘C++ Technical Report 1’ (TR1), an optional addition to the ‘C++03’ revision which was published in 2007. A revised standard was published in 2011 and compilers with pretty much complete implementations are available. C++11 added all of the C99 features which are not otherwise implemented in C++, and C++ compilers commonly accept C99 extensions to C++98. A minor update<a href="R-exts_split_014.html#FOOT38" id="DOCF38"><sup>38</sup></a> to C++11 (C++14) was published in December 2014. The next standard has been sent to ISO and is likely to be approved in 2017: it is informally known as C++17.</p>
<p>What standard a C++ compiler aims to support can be hard to determine: the value<a href="R-exts_split_014.html#FOOT39" id="DOCF39"><sup>39</sup></a> of <code class="calibre2">__cplusplus</code> may help but some compilers use it to denote a standard which is partially supported and some the latest standard which is (almost) fully supported. As from version 6, <code class="calibre2">g++</code> defaults to C++14 (with GNU extensions): earlier versions aim to support C++03 with many extensions (including support for TR1). <code class="calibre2">clang</code> with its native<a href="R-exts_split_014.html#FOOT40" id="DOCF40"><sup>40</sup></a> <code class="calibre2">libc++</code> headers and library includes many C++11 features, and does not support TR1.</p>
<p>Since version 3.1.0, R has provided support for C++11 in packages in addition to C++98. This support is not uniform across platforms as it depends on the capabilities of the compiler (see below). When R is configured, it will determine whether the C++ compiler supports C++11 and which compiler flags, if any, are required to enable C++11 support. For example, recent versions of <code class="calibre2">g++</code> or <code class="calibre2">clang++</code> accept the compiler flag -std=c++11, and earlier versions support a flag -std=c++0x, but the latter only provided partial support for the C++11 standard (it later became a deprecated synonym for -std=c++11).</p>
<p>In order to use C++11 code in a package, the package’s Makevars file (or Makevars.win on Windows) should include the line</p>
<div class="example">
<pre class="example1"><code>CXX_STD = CXX11</code></pre>
</div>
<p>Compilation and linking will then be done with the C++11 compiler.</p>
<p>Packages without a src/Makevars or src/Makefile file may specify that they require C++11 for code in the src directory by including ‘C++11’ in the ‘SystemRequirements’ field of the DESCRIPTION file, e.g.</p>
<div class="example">
<pre class="example1"><code>SystemRequirements: C++11</code></pre>
</div>
<p>If a package does have a src/Makevars[.win] file then setting the make variable ‘CXX_STD’ is preferred, as it allows <code class="calibre2">R CMD SHLIB</code> to work correctly in the package’s src directory.</p>
<p>Conversely, to ensure that the C++98 standard is assumed even when this is not the compiler default, use</p>
<div class="example">
<pre class="example1"><code>SystemRequirements: C++98</code></pre>
</div>
<p>or</p>
<div class="example">
<pre class="example1"><code>CXX_STD = CXX98</code></pre>
</div>
<p>The C++11 compiler will be used systematically by R for all C++ code if the environment variable <code class="calibre2">USE_CXX11</code> is defined (with any value). Hence this environment variable should be defined when invoking <code class="calibre2">R CMD SHLIB</code> in the absence of a Makevars file (or Makevars.win on Windows) if a C++11 compiler is required.</p>
<p>Further control over compilation of C++11 code can be obtained by specifying the macros ‘CXX11’ and ‘CXX11STD’ when R is configured<a href="R-exts_split_014.html#FOOT41" id="DOCF41"><sup>41</sup></a>, or in a personal or site Makevars file. If C++11 support is not available then these macros are both empty; if it is available by default, ‘CXX11’ defaults to ‘CXX’ and ‘CXX11STD’ is empty . Otherwise, ‘CXX11’ defaults to the same value as the C++ compiler ‘CXX’ and the flag ‘CXX11STD’ defaults to -std=c++11 or similar. It is possible to specify ‘CXX11’ to be a distinct compiler just for C++11–using packages, e.g. <code class="calibre2">g++</code> on Solaris. Note however that different C++ compilers (and even different versions of the same compiler) often differ in their ABI so their outputs can rarely be mixed. By setting ‘CXX11STD’ it is also possible to choose a different dialect of the standard such as -std=c++11.</p>
<p>As noted above, support for C++11 varies across platforms: on some platforms, it may be possible or necessary to select a different compiler for C++11, <em>via</em> personal or site Makevars files.</p>
<p>There is no guarantee that C++11 can be used in a package in combination with any other compiled language (even C), as the C++11 compiler may be incompatible with the native compilers for the platform. (There are known problems mixing C++11 with Fortran.)</p>
<p>If a package using C++11 has a <code class="calibre2">configure</code> script it is essential that it selects the correct compiler, <em>via</em> something like</p>
<div class="example">
<pre class="example1"><code>CXX11=`&quot;${R_HOME}/bin/R&quot; CMD config CXX11`
CXX11STD=`&quot;${R_HOME}/bin/R&quot; CMD config CXX11STD`
CXX=&quot;${CXX11} ${CXX11STD}&quot;
CXXFLAGS=`&quot;${R_HOME}/bin/R&quot; CMD config CXX11FLAGS`
AC_LANG(C++)</code></pre>
</div>
<p>(paying attention to all the quotes required).</p>
<p>If you want to compile C++11 code in a subdirectory, make sure you pass down the macros to specify that compiler, e.g. in src/Makevars</p>
<div class="example">
<pre class="example1"><code>sublibs:
         @(cd libs &amp;&amp; $(MAKE) \
            CXX=&quot;$(CXX11) $(CXX11STD)&quot; CXXFLAGS=&quot;$(CXX11FLAGS) $(CXX11PICFLAGS)&quot;)</code></pre>
</div>
<p>Note that the mechanisms described here specify C++11 for code compiled by <code class="calibre2">R CMD SHLIB</code> as used by default by <code class="calibre2">R CMD INSTALL</code>. They do not necessarily apply if there is a src/Makefile file, nor to compilation done in vignettes or <em>via</em> other packages.</p>
<hr />
<p><a href="" id="Using-C_002b_002b14-code"></a> <a href="" id="Using-C_002b_002b14-code-1"></a></p>
<h4 id="using-c14-code" class="subsection">1.2.5 Using C++14 code</h4>
<p>Support for a C++14 has been explicitly added to R from version 3.4.0. Similar considerations to C++11 apply, except that the variables associated with the C++14 compiler use the prefix ‘CXX14’ instead of ‘CXX11’. Hence to use C++14 code in a package, the package’s Makevars file (or Makevars.win on Windows) should include the line</p>
<div class="example">
<pre class="example1"><code>CXX_STD = CXX14</code></pre>
</div>
<p>In the absence of a Makevars file, C++14 support can also be requested by the line:</p>
<div class="example">
<pre class="example1"><code>SystemRequirements: C++14</code></pre>
</div>
<p>in the DESCRIPTION file. Finally, the C++14 compiler can be used systematically by setting the environment variable <code class="calibre2">USE_CXX17</code>.</p>
<p>Note that code written for C++11 that emulates features of C++14 will not necessarily compile under a C++14 compiler<a href="R-exts_split_014.html#FOOT42" id="DOCF42"><sup>42</sup></a>, since the emulation typically leads to a namespace clash. In order to ensure that the code also compiles under C++14, something like the following should be done:</p>
<div class="example">
<pre class="example1"><code>#if __cplusplus &gt;= 201402L
using std::make_unique;
#else
// your emulation
#endif</code></pre>
</div>
<p>Code needing C++14 features would do better to test for their presence <em>via</em> ‘SD-6 feature tests’<a href="R-exts_split_014.html#FOOT43" id="DOCF43"><sup>43</sup></a>. That test could be</p>
<div class="example">
<pre class="example1"><code>#include &lt;memory&gt; // header where this is defined
#if defined(__cpp_lib_make_unique) &amp;&amp; (__cpp_lib_make_unique &gt;= 201304)
using std::make_unique;
#else
// your emulation
#endif</code></pre>
</div>
<p>The webpage <a href="http://en.cppreference.com/w/cpp/compiler_support" class="uri">http://en.cppreference.com/w/cpp/compiler_support</a> gives some information on which compilers are known to support recent C++ features, including those in the C++17 drafts (for which feature tests should be used).</p>
<hr />
<p><a href="" id="Using-C_002b_002b17-code"></a> <a href="" id="Using-C_002b_002b17-code-1"></a></p>
<h4 id="using-c17-code" class="subsection">1.2.6 Using C++17 code</h4>
<p>Experimental support for C++17 has been added to R version 3.4.0. The configure script tests a subset of C++17 features. At the time of writing (March 2017) both <code class="calibre2">clang 4.0.0</code> and <code class="calibre2">gcc 7.1</code> pass these tests (with flags -std=gnu++1z and -std=gnu++17 respectively chosen by the configure script). Note that the C++17 feature tests are incomplete and are subject to change in future R versions as compiler support for the standard improves.</p>
<p>The variables associated with the C++17 compiler use the prefix ‘CXX17’. Hence to use C++17 code in a package, the package’s Makevars file (or Makevars.win on Windows) should include the line</p>
<div class="example">
<pre class="example1"><code>CXX_STD = CXX17</code></pre>
</div>
<p>In the absence of a Makevars file, C++17 support can also be requested by the line:</p>
<div class="example">
<pre class="example1"><code>SystemRequirements: C++17</code></pre>
</div>
<p>in the DESCRIPTION file. Finally, the C++17 compiler can be used systematically by setting the environment variable <code class="calibre2">USE_CXX17</code>.</p>
<hr />
<p><a href="" id="Checking-and-building-packages"></a> <a href="" id="Checking-and-building-packages-1"></a></p>
<h3 id="checking-and-building-packages" class="section">1.3 Checking and building packages</h3>
<p>Before using these tools, please check that your package can be installed (which checked it can be loaded). <code class="calibre2">R CMD check</code> will <em>inter alia</em> do this, but you may get more detailed error messages doing the install directly.</p>
<p>If your package specifies an encoding in its DESCRIPTION file, you should run these tools in a locale which makes use of that encoding: they may not work at all or may work incorrectly in other locales (although UTF-8 locales will most likely work).</p>
<blockquote>
<p><strong>Note:</strong> <code class="calibre2">R CMD check</code> and <code class="calibre2">R CMD build</code> run R processes with --vanilla in which none of the user’s startup files are read. If you need <code class="calibre2">R_LIBS</code> set (to find packages in a non-standard library) you can set it in the environment: also you can use the check and build environment files (as specified by the environment variables <code class="calibre2">R_CHECK_ENVIRON</code> and <code class="calibre2">R_BUILD_ENVIRON</code>; if unset, files<a href="R-exts_split_014.html#FOOT44" id="DOCF44"><sup>44</sup></a> ~/.R/check.Renviron and ~/.R/build.Renviron are used) to set environment variables when using these utilities.</p>
</blockquote>
<blockquote>
<p><strong>Note to Windows users:</strong> <code class="calibre2">R CMD build</code> may make use of the Windows toolset (see the “R Installation and Administration” manual) if present and in your path, and it is required for packages which need it to install (including those with configure.win or cleanup.win scripts or a src directory) and e.g. need vignettes built.</p>
<p>You may need to set the environment variable <code class="calibre2">TMPDIR</code> to point to a suitable writable directory with a path not containing spaces – use forward slashes for the separators. Also, the directory needs to be on a case-honouring file system (some network-mounted file systems are not).</p>
</blockquote>
<hr />
<p><a href="" id="Checking-packages"></a> <a href="" id="Checking-packages-1"></a></p>
<h4 id="checking-packages" class="subsection">1.3.1 Checking packages</h4>
<p><a href="" id="index-Checking-packages"></a> <a href="" id="index-R-CMD-check"></a></p>
<p>Using <code class="calibre2">R CMD check</code>, the R package checker, one can test whether <em>source</em> R packages work correctly. It can be run on one or more directories, or compressed package <code class="calibre2">tar</code> archives with extension .tar.gz, .tgz, .tar.bz2 or .tar.xz.</p>
<p>It is strongly recommended that the final checks are run on a <code class="calibre2">tar</code> archive prepared by <code class="calibre2">R CMD build</code>.</p>
<p>This runs a series of checks, including</p>
<ol>
<li>The package is installed. This will warn about missing cross-references and duplicate aliases in help files.</li>
<li>The file names are checked to be valid across file systems and supported operating system platforms.</li>
<li>The files and directories are checked for sufficient permissions (Unix-alikes only).</li>
<li>The files are checked for binary executables, using a suitable version of <code class="calibre2">file</code> if available<a href="R-exts_split_014.html#FOOT45" id="DOCF45"><sup>45</sup></a>. (There may be rare false positives.)</li>
<li>The DESCRIPTION file is checked for completeness, and some of its entries for correctness. Unless installation tests are skipped, checking is aborted if the package dependencies cannot be resolved at run time. (You may need to set <code class="calibre2">R_LIBS</code> in the environment if dependent packages are in a separate library tree.) One check is that the package name is not that of a standard package, nor one of the defunct standard packages (‘ctest’, ‘eda’, ‘lqs’, ‘mle’, ‘modreg’, ‘mva’, ‘nls’, ‘stepfun’ and ‘ts’). Another check is that all packages mentioned in <code class="calibre2">library</code> or <code class="calibre2">require</code>s or from which the NAMESPACE file imports or are called <em>via</em> <code class="calibre2">::</code> or <code class="calibre2">:::</code> are listed (in ‘Depends’, ‘Imports’, ‘Suggests’): this is not an exhaustive check of the actual imports.</li>
<li>Available index information (in particular, for demos and vignettes) is checked for completeness.</li>
<li><p>The package subdirectories are checked for suitable file names and for not being empty. The checks on file names are controlled by the option --check-subdirs=value. This defaults to ‘default’, which runs the checks only if checking a tarball: the default can be overridden by specifying the value as ‘yes’ or ‘no’. Further, the check on the src directory is only run if the package does not contain a configure script (which corresponds to the value ‘yes-maybe’) and there is no src/Makefile or src/Makefile.in.</p>
<p>To allow a configure script to generate suitable files, files ending in ‘.in’ will be allowed in the R directory.</p>
<p>A warning is given for directory names that look like R package check directories – many packages have been submitted to CRAN containing these.</p></li>
<li>The R files are checked for syntax errors. Bytes which are non-ASCII are reported as warnings, but these should be regarded as errors unless it is known that the package will always be used in the same locale.</li>
<li>It is checked that the package can be loaded, first with the usual default packages and then only with package <strong>base</strong> already loaded. It is checked that the namespace this can be loaded in an empty session with only the <strong>base</strong> namespace loaded. (Namespaces and packages can be loaded very early in the session, before the default packages are available, so packages should work then.)</li>
<li>The R files are checked for correct calls to <code class="calibre2">library.dynam</code>. Package startup functions are checked for correct argument lists and (incorrect) calls to functions which modify the search path or inappropriately generate messages. The R code is checked for possible problems using <a href="https://CRAN.R-project.org/package=codetools"><strong>codetools</strong></a>. In addition, it is checked whether S3 methods have all arguments of the corresponding generic, and whether the final argument of replacement functions is called ‘value’. All foreign function calls (<code class="calibre2">.C</code>, <code class="calibre2">.Fortran</code>, <code class="calibre2">.Call</code> and <code class="calibre2">.External</code> calls) are tested to see if they have a <code class="calibre2">PACKAGE</code> argument, and if not, whether the appropriate DLL might be deduced from the namespace of the package. Any other calls are reported. (The check is generous, and users may want to supplement this by examining the output of <code class="calibre2">tools::checkFF(&quot;mypkg&quot;, verbose=TRUE)</code>, especially if the intention were to always use a <code class="calibre2">PACKAGE</code> argument)</li>
<li>The Rd files are checked for correct syntax and metadata, including the presence of the mandatory fields (<code class="calibre2">\name</code>, <code class="calibre2">\alias</code>, <code class="calibre2">\title</code> and <code class="calibre2">\description</code>). The Rd name and title are checked for being non-empty, and there is a check for missing cross-references (links).</li>
<li>A check is made for missing documentation entries, such as undocumented user-level objects in the package.</li>
<li>Documentation for functions, data sets, and S4 classes is checked for consistency with the corresponding code.</li>
<li>It is checked whether all function arguments given in <code class="calibre2">\usage</code> sections of Rd files are documented in the corresponding <code class="calibre2">\arguments</code> section.</li>
<li>The data directory is checked for non-ASCII characters and for the use of reasonable levels of compression.</li>
<li><p>C, C++ and FORTRAN source and header files<a href="R-exts_split_014.html#FOOT46" id="DOCF46"><sup>46</sup></a> are tested for portable (LF-only) line endings. If there is a Makefile or Makefile.in or Makevars or Makevars.in file under the src directory, it is checked for portable line endings and the correct use of ‘$(BLAS_LIBS)’ and ‘$(LAPACK_LIBS)’</p>
<p>Compiled code is checked for symbols corresponding to functions which might terminate R or write to stdout/stderr instead of the console. Note that the latter might give false positives in that the symbols might be pulled in with external libraries and could never be called. Windows<a href="R-exts_split_014.html#FOOT47" id="DOCF47"><sup>47</sup></a> users should note that the Fortran and C++ runtime libraries are examples of such external libraries.</p></li>
<li>Some checks are made of the contents of the inst/doc directory. These always include checking for files that look like leftovers, and if suitable tools (such as <code class="calibre2">qpdf</code>) are available, checking that the PDF documentation is of minimal size.</li>
<li><p>The examples provided by the package’s documentation are run. (see <a href="R-exts_split_005.html#Writing-R-documentation-files">Writing R documentation files</a>, for information on using <code class="calibre2">\examples</code> to create executable example code.) If there is a file tests/Examples/pkg-Ex.Rout.save, the output of running the examples is compared to that file.</p>
<p>Of course, released packages should be able to run at least their own examples. Each example is run in a ‘clean’ environment (so earlier examples cannot be assumed to have been run), and with the variables <code class="calibre2">T</code> and <code class="calibre2">F</code> redefined to generate an error unless they are set in the example: See <a href="./R-intro.html#Logical-vectors">Logical vectors</a> in An Introduction to R.</p></li>
<li>If the package sources contain a tests directory then the tests specified in that directory are run. (Typically they will consist of a set of .R source files and target output files .Rout.save.) Please note that the comparison will be done in the end user’s locale, so the target output files should be ASCII if at all possible. (The command line option <code class="calibre2">--test-dir=foo</code> may be used to specify tests in a non-standard location. For example, unusually slow tests could be placed in inst/slowTests and then <code class="calibre2">R CMD check --test-dir=inst/slowTests</code> would be used to run them. Other names that have been suggested are, for example, inst/testWithOracle for tests that require Oracle to be installed, inst/randomTests for tests which use random values and may occasionally fail by chance, etc.)</li>
<li><p>The code in package vignettes (see <a href="#Writing-package-vignettes">Writing package vignettes</a>) is executed, and the vignette PDFs re-made from their sources as a check of completeness of the sources (unless there is a ‘BuildVignettes’ field in the package’s DESCRIPTION file with a false value). If there is a target output file .Rout.save in the vignette source directory, the output from running the code in that vignette is compared with the target output file and any differences are reported (but not recorded in the log file). (If the vignette sources are in the deprecated location inst/doc, do mark such target output files to not be installed in .Rinstignore.)</p>
<p>If there is an error<a href="R-exts_split_014.html#FOOT48" id="DOCF48"><sup>48</sup></a> in executing the R code in vignette foo.ext, a log file foo.ext.log is created in the check directory. The vignette PDFs are re-made in a copy of the package sources in the vign_test subdirectory of the check directory, so for further information on errors look in directory pkgname/vign_test/vignettes. (It is only retained if there are errors or if environment variable <code class="calibre2">_R_CHECK_CLEAN_VIGN_TEST_</code> is set to a false value.)</p></li>
<li>The PDF version of the package’s manual is created (to check that the Rd files can be converted successfully). This needs LaTeX and suitable fonts and LaTeX packages to be installed. See the section ‘Making the manuals’ in the ‘R Installation and Administration’ manual’ for further details.</li>
</ol>
<p>All these tests are run with collation set to the <code class="calibre2">C</code> locale, and for the examples and tests with environment variable <code class="calibre2">LANGUAGE=en</code>: this is to minimize differences between platforms.</p>
<p>Use R CMD check --help to obtain more information about the usage of the R package checker. A subset of the checking steps can be selected by adding command-line options. It also allows customization by setting environment variables <code class="calibre2">_R_CHECK_*_</code> as described in ‘R Internals’: a set of these customizations similar to those used by CRAN can be selected by the option --as-cran (which works best if Internet access is available). Some Windows users may need to set environment variable <code class="calibre2">R_WIN_NO_JUNCTIONS</code> to a non-empty value. The test of cyclic declarations<a href="R-exts_split_014.html#FOOT49" id="DOCF49"><sup>49</sup></a>in DESCRIPTION files needs repositories (including CRAN) set: do this in ~/.Rprofile, by e.g.</p>
<div class="example">
<pre class="example1"><code>options(repos = c(CRAN=&quot;https://cran.r-project.org&quot;))</code></pre>
</div>
<p>One check customization which can be revealing is</p>
<div class="example">
<pre class="example1"><code>_R_CHECK_CODETOOLS_PROFILE_=&quot;suppressLocalUnused=FALSE&quot;</code></pre>
</div>
<p>which reports unused local assignments. Not only does this point out computations which are unnecessary because their results are unused, it also can uncover errors. (Two such are to intend to update an object by assigning a value but mistype its name or assign in the wrong scope, for example using <code class="calibre2">&lt;-</code> where <code class="calibre2">&lt;&lt;-</code> was intended.) This can give false positives, most commonly because of non-standard evaluation for formulae and because the intention is to return objects in the environment of a function for later use.</p>
<p>Complete checking of a package which contains a file README.md needs <code class="calibre2">pandoc</code> installed: see <a href="http://johnmacfarlane.net/pandoc/installing.html" class="uri">http://johnmacfarlane.net/pandoc/installing.html</a>. This should be reasonably current: at the time of writing CRAN used version 1.12.4.2 to process these files.</p>
<p>You do need to ensure that the package is checked in a suitable locale if it contains non-ASCII characters. Such packages are likely to fail some of the checks in a <code class="calibre2">C</code> locale, and <code class="calibre2">R CMD check</code> will warn if it spots the problem. You should be able to check any package in a UTF-8 locale (if one is available). Beware that although a <code class="calibre2">C</code> locale is rarely used at a console, it may be the default if logging in remotely or for batch jobs.</p>
<blockquote>
<p><strong>Multiple sub-architectures:</strong> On systems which support multiple sub-architectures (principally Windows), <code class="calibre2">R CMD check</code> will install and check a package which contains compiled code under all available sub-architectures. (Use option --force-multiarch to force this for packages without compiled code, which are otherwise only checked under the main sub-architecture.) This will run the loading tests, examples and tests directory under each installed sub-architecture in turn, and give an error if any fail. Where environment variables (including perhaps <code class="calibre2">PATH</code>) need to be set differently for each sub-architecture, these can be set in architecture-specific files such as R_HOME/etc/i386/Renviron.site.</p>
<p>An alternative approach is to use <code class="calibre2">R CMD check --no-multiarch</code> to check the primary sub-architecture, and then to use something like <code class="calibre2">R --arch=x86_64 CMD check --extra-arch</code> or (Windows) <code class="calibre2">/path/to/R/bin/x64/Rcmd check --extra-arch</code> to run for each additional sub-architecture just the checks<a href="R-exts_split_014.html#FOOT50" id="DOCF50"><sup>50</sup></a> which differ by sub-architecture. (This approach is required for packages which are installed by <code class="calibre2">R CMD INSTALL --merge-multiarch</code>.)</p>
<p>Where packages need additional commands to install all the sub-architectures these can be supplied by e.g. --install-args=--force-biarch.</p>
</blockquote>
<hr />
<p><a href="" id="Building-package-tarballs"></a> <a href="" id="Building-package-tarballs-1"></a></p>
<h4 id="building-package-tarballs" class="subsection">1.3.2 Building package tarballs</h4>
<p><a href="" id="index-Building-source-packages"></a> <a href="" id="index-R-CMD-build"></a> <a href="" id="index-Package-builder"></a> <a href="" id="index-tarballs"></a></p>
<p>Packages may be distributed in source form as “tarballs” (.tar.gz files) or in binary form. The source form can be installed on all platforms with suitable tools and is the usual form for Unix-like systems; the binary form is platform-specific, and is the more common distribution form for the Windows and macOS platforms.</p>
<p>Using <code class="calibre2">R CMD build</code>, the R package builder, one can build R package tarballs from their sources (for example, for subsequent release).</p>
<p>Prior to actually building the package in the standard gzipped tar file format, a few diagnostic checks and cleanups are performed. In particular, it is tested whether object indices exist and can be assumed to be up-to-date, and C, C++ and FORTRAN source files and relevant makefiles in a src directory are tested and converted to LF line-endings if necessary.</p>
<p>Run-time checks whether the package works correctly should be performed using <code class="calibre2">R CMD check</code> prior to invoking the final build procedure.</p>
<p><a href="" id="index-_002eRbuildignore-file"></a></p>
<p>To exclude files from being put into the package, one can specify a list of exclude patterns in file .Rbuildignore in the top-level source directory. These patterns should be Perl-like regular expressions (see the help for <code class="calibre2">regexp</code> in R for the precise details), one per line, to be matched case-insensitively against the file and directory names relative to the top-level package source directory. In addition, directories from source control systems<a href="R-exts_split_014.html#FOOT51" id="DOCF51"><sup>51</sup></a> or from <code class="calibre2">eclipse</code><a href="R-exts_split_014.html#FOOT52" id="DOCF52"><sup>52</sup></a>, directories with names ending .Rcheck or Old or old and files GNUMakefile<a href="R-exts_split_014.html#FOOT53" id="DOCF53"><sup>53</sup></a>, Read-and-delete-me or with base names starting with ‘.#’, or starting and ending with ‘#’, or ending in ‘~’, ‘.bak’ or ‘.swp’, are excluded by default. In addition, those files in the R, demo and man directories which are flagged by <code class="calibre2">R CMD check</code> as having invalid names will be excluded.</p>
<p>Use R CMD build --help to obtain more information about the usage of the R package builder.</p>
<p>Unless R CMD build is invoked with the --no-build-vignettes option (or the package’s DESCRIPTION contains ‘BuildVignettes: no’ or similar), it will attempt to (re)build the vignettes (see <a href="#Writing-package-vignettes">Writing package vignettes</a>) in the package. To do so it installs the current package into a temporary library tree, but any dependent packages need to be installed in an available library tree (see the Note: at the top of this section).</p>
<p>Similarly, if the .Rd documentation files contain any <code class="calibre2">\Sexpr</code> macros (see <a href="R-exts_split_006.html#Dynamic-pages">Dynamic pages</a>), the package will be temporarily installed to execute them. Post-execution binary copies of those pages containing build-time macros will be saved in build/partial.rdb. If there are any install-time or render-time macros, a .pdf version of the package manual will be built and installed in the build subdirectory. (This allows CRAN or other repositories to display the manual even if they are unable to install the package.) This can be suppressed by the option --no-manual or if package’s DESCRIPTION contains ‘BuildManual: no’ or similar.</p>
<p>One of the checks that <code class="calibre2">R CMD build</code> runs is for empty source directories. These are in most (but not all) cases unintentional, if they are intentional use the option --keep-empty-dirs (or set the environment variable <code class="calibre2">_R_BUILD_KEEP_EMPTY_DIRS_</code> to ‘TRUE’, or have a ‘BuildKeepEmpty’ field with a true value in the DESCRIPTION file).</p>
<p>The --resave-data option allows saved images (.rda and .RData files) in the data directory to be optimized for size. It will also compress tabular files and convert .R files to saved images. It can take values <code class="calibre2">no</code>, <code class="calibre2">gzip</code> (the default if this option is not supplied, which can be changed by setting the environment variable <code class="calibre2">_R_BUILD_RESAVE_DATA_</code>) and <code class="calibre2">best</code> (equivalent to giving it without a value), which chooses the most effective compression. Using <code class="calibre2">best</code> adds a dependence on <code class="calibre2">R (&gt;= 2.10)</code> to the DESCRIPTION file if <code class="calibre2">bzip2</code> or <code class="calibre2">xz</code> compression is selected for any of the files. If this is thought undesirable, --resave-data=gzip (which is the default if that option is not supplied) will do what compression it can with <code class="calibre2">gzip</code>. A package can control how its data is resaved by supplying a ‘BuildResaveData’ field (with one of the values given earlier in this paragraph) in its DESCRIPTION file.</p>
<p>The --compact-vignettes option will run <code class="calibre2">tools::compactPDF</code> over the PDF files in inst/doc (and its subdirectories) to losslessly compress them. This is not enabled by default (it can be selected by environment variable <code class="calibre2">_R_BUILD_COMPACT_VIGNETTES_</code>) and needs <code class="calibre2">qpdf</code> (<a href="http://qpdf.sourceforge.net/" class="uri">http://qpdf.sourceforge.net/</a>) to be available.</p>
<p>It can be useful to run <code class="calibre2">R CMD check --check-subdirs=yes</code> on the built tarball as a final check on the contents.</p>
<p>Where a non-POSIX file system is in use which does not utilize execute permissions, some care is needed with permissions. This applies on Windows and to e.g. FAT-formatted drives and SMB-mounted file systems on other OSes. The ‘mode’ of the file recorded in the tarball will be whatever <code class="calibre2">file.info()</code> returns. On Windows this will record only directories as having execute permission and on other OSes it is likely that all files have reported ‘mode’ <code class="calibre2">0777</code>. A particular issue is packages being built on Windows which are intended to contain executable scripts such as configure and cleanup: <code class="calibre2">R CMD build</code> ensures those two are recorded with execute permission.</p>
<p>Directory build of the package sources is reserved for use by <code class="calibre2">R CMD build</code>: it contains information which may not easily be created when the package is installed, including index information on the vignettes and, rarely, information on the help pages and perhaps a copy of the PDF reference manual (see above).</p>
<hr />
<p><a href="" id="Building-binary-packages"></a> <a href="" id="Building-binary-packages-1"></a></p>
<h4 id="building-binary-packages" class="subsection">1.3.3 Building binary packages</h4>
<p><a href="" id="index-Building-binary-packages"></a></p>
<p>Binary packages are compressed copies of installed versions of packages. They contain compiled shared libraries rather than C, C++ or Fortran source code, and the R functions are included in their installed form. The format and filename are platform-specific; for example, a binary package for Windows is usually supplied as a .zip file, and for the macOS platform the default binary package file extension is .tgz.</p>
<p>The recommended method of building binary packages is to use</p>
<p><code class="calibre2">R CMD INSTALL --build pkg</code> where pkg is either the name of a source tarball (in the usual .tar.gz format) or the location of the directory of the package source to be built. This operates by first installing the package and then packing the installed binaries into the appropriate binary package file for the particular platform.</p>
<p>By default, <code class="calibre2">R CMD INSTALL --build</code> will attempt to install the package into the default library tree for the local installation of R. This has two implications:</p>
<ul>
<li>If the installation is successful, it will overwrite any existing installation of the same package.</li>
<li>The default library tree must have write permission; if not, the package will not install and the binary will not be created.</li>
</ul>
<p>To prevent changes to the present working installation or to provide an install location with write access, create a suitably located directory with write access and use the <code class="calibre2">-l</code> option to build the package in the chosen location. The usage is then</p>
<p><code class="calibre2">R CMD INSTALL -l location --build pkg</code></p>
<p>where location is the chosen directory with write access. The package will be installed as a subdirectory of location, and the package binary will be created in the current directory.</p>
<p>Other options for <code class="calibre2">R CMD INSTALL</code> can be found using <code class="calibre2">R CMD INSTALL --help</code>, and platform-specific details for special cases are discussed in the platform-specific FAQs.</p>
<p>Finally, at least one web-based service is available for building binary packages from (checked) source code: WinBuilder (see <a href="https://win-builder.R-project.org/" class="uri">https://win-builder.R-project.org/</a>) is able to build Windows binaries. Note that this is intended for developers on other platforms who do not have access to Windows but wish to provide binaries for the Windows platform.</p>
<hr />
<p><a href="" id="Writing-package-vignettes"></a> <a href="" id="Writing-package-vignettes-1"></a></p>

<!--chapter:end:04-R-exts.Rmd-->

<h3 id="writing-package-vignettes" class="section">1.4 Writing package vignettes</h3>
<p><a href="" id="index-vignettes"></a> <a href="" id="index-Sweave"></a></p>
<p>In addition to the help files in Rd format, R packages allow the inclusion of documents in arbitrary other formats. The standard location for these is subdirectory inst/doc of a source package, the contents will be copied to subdirectory doc when the package is installed. Pointers from package help indices to the installed documents are automatically created. Documents in inst/doc can be in arbitrary format, however we strongly recommend providing them in PDF format, so users on almost all platforms can easily read them. To ensure that they can be accessed from a browser (as an HTML index is provided), the file names should start with an ASCII letter and be comprised entirely of ASCII letters or digits or hyphen or underscore.</p>
<p>A special case is <em>package vignettes</em>. Vignettes are documents in PDF or HTML format obtained from plain text literate source files from which R knows how to extract R code and create output (in PDF/HTML or intermediate LaTeX). Vignette engines do this work, using “tangle” and “weave” functions respectively. Sweave, provided by the R distribution, is the default engine. Since R version 3.0.0, other vignette engines besides Sweave are supported; see <a href="#Non_002dSweave-vignettes">Non-Sweave vignettes</a>.</p>
<p>Package vignettes have their sources in subdirectory vignettes of the package sources. Note that the location of the vignette sources only affects <code class="calibre2">R CMD build</code> and <code class="calibre2">R CMD check</code>: the tarball built by <code class="calibre2">R CMD build</code> includes in inst/doc the components intended to be installed.</p>
<p>Sweave vignette sources are normally given the file extension .Rnw or .Rtex, but for historical reasons extensions<a href="R-exts_split_014.html#FOOT54" id="DOCF54"><sup>54</sup></a> .Snw and .Stex are also recognized. Sweave allows the integration of LaTeX documents: see the <code class="calibre2">Sweave</code> help page in R and the <code class="calibre2">Sweave</code> vignette in package <strong>utils</strong> for details on the source document format.</p>
<p>Package vignettes are tested by <code class="calibre2">R CMD check</code> by executing all R code chunks they contain (except those marked for non-evaluation, e.g., with option <code class="calibre2">eval=FALSE</code> for Sweave). The R working directory for all vignette tests in <code class="calibre2">R CMD check</code> is a <em>copy</em> of the vignette source directory. Make sure all files needed to run the R code in the vignette (data sets, …) are accessible by either placing them in the inst/doc hierarchy of the source package or by using calls to <code class="calibre2">system.file()</code>. All other files needed to re-make the vignettes (such as LaTeX style files, BibTeX input files and files for any figures not created by running the code in the vignette) must be in the vignette source directory. <code class="calibre2">R CMD check</code> will check that vignette production has succeeded by comparing modification times of output files in inst/doc with the source in vignettes.</p>
<p><code class="calibre2">R CMD build</code> will automatically<a href="R-exts_split_014.html#FOOT55" id="DOCF55"><sup>55</sup></a> create the (PDF or HTML versions of the) vignettes in inst/doc for distribution with the package sources. By including the vignette outputs in the package sources it is not necessary that these can be re-built at install time, i.e., the package author can use private R packages, screen snapshots and LaTeX extensions which are only available on his machine.<a href="R-exts_split_014.html#FOOT56" id="DOCF56"><sup>56</sup></a></p>
<p>By default <code class="calibre2">R CMD build</code> will run <code class="calibre2">Sweave</code> on all Sweave vignette source files in vignettes. If Makefile is found in the vignette source directory, then <code class="calibre2">R CMD build</code> will try to run <code class="calibre2">make</code> after the <code class="calibre2">Sweave</code> runs, otherwise <code class="calibre2">texi2pdf</code> is run on each .tex file produced.</p>
<p>The first target in the Makefile should take care of both creation of PDF/HTML files and cleaning up afterwards (including after <code class="calibre2">Sweave</code>), i.e., delete all files that shall not appear in the final package archive. Note that if the <code class="calibre2">make</code> step runs R it needs to be careful to respect the environment values of <code class="calibre2">R_LIBS</code> and <code class="calibre2">R_HOME</code><a href="R-exts_split_014.html#FOOT57" id="DOCF57"><sup>57</sup></a>. Finally, if there is a Makefile and it has a ‘clean:’ target, <code class="calibre2">make clean</code> is run.</p>
<p>All the usual <em>caveats</em> about including a Makefile apply. It must be portable (no GNU extensions), use LF line endings and must work correctly with a parallel <code class="calibre2">make</code>: too many authors have written things like</p>
<div class="example">
<pre class="example1"><code>## BAD EXAMPLE
all: pdf clean

pdf: ABC-intro.pdf ABC-details.pdf

%.pdf:  %.tex
        texi2dvi --pdf $*

clean:
        rm *.tex ABC-details-*.pdf</code></pre>
</div>
<p>which will start removing the source files whilst <code class="calibre2">pdflatex</code> is working.</p>
<p>Metadata lines can be placed in the source file, preferably in LaTeX comments in the preamble. One such is a <code class="calibre2">\VignetteIndexEntry</code> of the form</p>
<div class="example">
<pre class="example1"><code>%\VignetteIndexEntry{Using Animal}</code></pre>
</div>
<p>Others you may see are <code class="calibre2">\VignettePackage</code> (currently ignored), <code class="calibre2">\VignetteDepends</code> and <code class="calibre2">\VignetteKeyword</code> (which replaced <code class="calibre2">\VignetteKeywords</code>). These are processed at package installation time to create the saved data frame Meta/vignette.rds, but only the <code class="calibre2">\VignetteIndexEntry</code> and <code class="calibre2">\VignetteKeyword</code> statements are currently used. The <code class="calibre2">\VignetteEngine</code> statement is described in <a href="#Non_002dSweave-vignettes">Non-Sweave vignettes</a>.</p>
<p>At install time an HTML index for all vignettes in the package is automatically created from the <code class="calibre2">\VignetteIndexEntry</code> statements unless a file index.html exists in directory inst/doc. This index is linked from the HTML help index for the package. If you do supply a inst/doc/index.html file it should contain relative links only to files under the installed doc directory, or perhaps (not really an index) to HTML help files or to the DESCRIPTION file, and be valid HTML as confirmed via the <a href="https://validator.w3.org">W3C Markup Validation Service</a> or <a href="https://validator.nu/">Validator.nu</a>.</p>
<p>Sweave/Stangle allows the document to specify the <code class="calibre2">split=TRUE</code> option to create a single R file for each code chunk: this will not work for vignettes where it is assumed that each vignette source generates a single file with the vignette extension replaced by .R.</p>
<p>Do watch that PDFs are not too large – one in a CRAN package was 72MB! This is usually caused by the inclusion of overly detailed figures, which will not render well in PDF viewers. Sometimes it is much better to generate fairly high resolution bitmap (PNG, JPEG) figures and include those in the PDF document.</p>
<p><a href="" id="index-_002einstall_005fextras-file"></a></p>
<p>When <code class="calibre2">R CMD build</code> builds the vignettes, it copies these and the vignette sources from directory vignettes to inst/doc. To install any other files from the vignettes directory, include a file vignettes/.install_extras which specifies these as Perl-like regular expressions on one or more lines. (See the description of the .Rinstignore file for full details.)</p>
<hr />
<p><a href="" id="Encodings-and-vignettes"></a> <a href="" id="Encodings-and-vignettes-1"></a></p>
<h4 id="encodings-and-vignettes" class="subsection">1.4.1 Encodings and vignettes</h4>
<p>Vignettes will in general include descriptive text, R input, R output and figures, LaTeX include files and bibliographic references. As any of these may contain non-ASCII characters, the handling of encodings can become very complicated.</p>
<p>The vignette source file should be written in ASCII or contain a declaration of the encoding (see below). This applies even to comments within the source file, since vignette engines process comments to look for options and metadata lines. When an engine’s weave and tangle functions are called on the vignette source, it will be converted to the encoding of the current R session.</p>
<p><code class="calibre2">Stangle()</code> will produce an R code file in the current locale’s encoding: for a non-ASCII vignette what that is is recorded in a comment at the top of the file.</p>
<p><code class="calibre2">Sweave()</code> will produce a .tex file in the current encoding, or in UTF-8 if that is declared. Non-ASCII encodings need to be declared to LaTeX via a line like</p>
<div class="example">
<pre class="example1"><code>\usepackage[utf8]{inputenc}</code></pre>
</div>
<p>(It is also possible to use the more recent ‘inputenx’ LaTeX package.) For files where this line is not needed (e.g. chapters included within the body of a larger document, or non-Sweave vignettes), the encoding may be declared using a comment like</p>
<div class="example">
<pre class="example1"><code>%\VignetteEncoding{UTF-8}</code></pre>
</div>
<p>If the encoding is UTF-8, this can also be declared using the declaration</p>
<div class="example">
<pre class="example1"><code>%\SweaveUTF8</code></pre>
</div>
<p>If no declaration is given in the vignette, it will be assumed to be in the encoding declared for the package. If there is no encoding declared in either place, then it is an error to use non-ASCII characters in the vignette.</p>
<p>In any case, be aware that LaTeX may require the ‘usepackage’ declaration.</p>
<p><code class="calibre2">Sweave()</code> will also parse and evaluate the R code in each chunk. The R output will also be in the current locale (or UTF-8 if so declared), and should be covered by the ‘inputenc’ declaration. One thing people often forget is that the R output may not be ASCII even for ASCII R sources, for many possible reasons. One common one is the use of ‘fancy’ quotes: see the R help on <code class="calibre2">sQuote</code>: note carefully that it is not portable to declare UTF-8 or CP1252 to cover such quotes, as their encoding will depend on the locale used to run <code class="calibre2">Sweave()</code>: this can be circumvented by setting <code class="calibre2">options(useFancyQuotes=&quot;UTF-8&quot;)</code> in the vignette.</p>
<p>The final issue is the encoding of figures – this applies only to PDF figures and not PNG etc. The PDF figures will contain declarations for their encoding, but the Sweave option <code class="calibre2">pdf.encoding</code> may need to be set appropriately: see the help for the <code class="calibre2">pdf()</code> graphics device.</p>
<p>As a real example of the complexities, consider the <a href="https://CRAN.R-project.org/package=fortunes"><strong>fortunes</strong></a> package version ‘1.4-0’. That package did not have a declared encoding, and its vignette was in ASCII. However, the data it displays are read from a UTF-8 CSV file and will be assumed to be in the current encoding, so fortunes.tex will be in UTF-8 in any locale. Had <code class="calibre2">read.table</code> been told the data were UTF-8, fortunes.tex would have been in the locale’s encoding.</p>
<hr />
<p><a href="" id="Non_002dSweave-vignettes"></a> <a href="" id="Non_002dSweave-vignettes-1"></a></p>
<h4 id="non-sweave-vignettes" class="subsection">1.4.2 Non-Sweave vignettes</h4>
<p>Vignettes in formats other than Sweave are supported <em>via</em> “vignette engines”. For example <a href="https://CRAN.R-project.org/package=knitr"><strong>knitr</strong></a> version 1.1 or later can create .tex files from a variation on Sweave format, and .html files from a variation on “markdown” format. These engines replace the <code class="calibre2">Sweave()</code> function with other functions to convert vignette source files into LaTeX files for processing into .pdf, or directly into .pdf or .html files. The <code class="calibre2">Stangle()</code> function is replaced with a function that extracts the R source from a vignette.</p>
<p>R recognizes non-Sweave vignettes using filename extensions specified by the engine. For example, the <a href="https://CRAN.R-project.org/package=knitr"><strong>knitr</strong></a> package supports the extension .Rmd (standing for “R markdown”). The user indicates the vignette engine within the vignette source using a <code class="calibre2">\VignetteEngine</code> line, for example</p>
<div class="example">
<pre class="example1"><code>%\VignetteEngine{knitr::knitr}</code></pre>
</div>
<p>This specifies the name of a package and an engine to use in place of Sweave in processing the vignette. As <code class="calibre2">Sweave</code> is the only engine supplied with the R distribution, the package providing any other engine must be specified in the ‘VignetteBuilder’ field of the package DESCRIPTION file, and also specified in the ‘Suggests’, ‘Imports’ or ‘Depends’ field (since its namespace must be available to build or check your package). If more than one package is specified as a builder, they will be searched in the order given there. The <strong>utils</strong> package is always implicitly appended to the list of builder packages, but may be included earlier to change the search order.</p>
<p>Note that a package with non-Sweave vignettes should always have a ‘VignetteBuilder’ field in the DESCRIPTION file, since this is how <code class="calibre2">R CMD check</code> recognizes that there are vignettes to be checked: packages listed there are required when the package is checked.</p>
<p>The vignette engine can produce .tex, .pdf, or .html files as output. If it produces .tex files, R will call <code class="calibre2">texi2pdf</code> to convert them to .pdf for display to the user (unless there is a Makefile in the vignettes directory).</p>
<p>Package writers who would like to supply vignette engines need to register those engines in the package <code class="calibre2">.onLoad</code> function. For example, that function could make the call</p>
<div class="example">
<pre class="example1"><code>tools::vignetteEngine(&quot;knitr&quot;, weave = vweave, tangle = vtangle,
                      pattern = &quot;[.]Rmd$&quot;, package = &quot;knitr&quot;)</code></pre>
</div>
<p>(The actual registration in <a href="https://CRAN.R-project.org/package=knitr"><strong>knitr</strong></a> is more complicated, because it supports other input formats.) See the <code class="calibre2">?tools::vignetteEngine</code> help topic for details on engine registration.</p>
<hr />
<p><a href="" id="Package-namespaces"></a> <a href="" id="Package-namespaces-1"></a></p>
<h3 id="package-namespaces" class="section">1.5 Package namespaces</h3>
<p><a href="" id="index-namespaces"></a></p>
<p>R has a namespace management system for code in packages. This system allows the package writer to specify which variables in the package should be <em>exported</em> to make them available to package users, and which variables should be <em>imported</em> from other packages.</p>
<p>The namespace for a package is specified by the NAMESPACE file in the top level package directory. This file contains <em>namespace directives</em> describing the imports and exports of the namespace. Additional directives register any shared objects to be loaded and any S3-style methods that are provided. Note that although the file looks like R code (and often has R-style comments) it is not processed as R code. Only very simple conditional processing of <code class="calibre2">if</code> statements is implemented.</p>
<p>Packages are loaded and attached to the search path by calling <code class="calibre2">library</code> or <code class="calibre2">require</code>. Only the exported variables are placed in the attached frame. Loading a package that imports variables from other packages will cause these other packages to be loaded as well (unless they have already been loaded), but they will <em>not</em> be placed on the search path by these implicit loads. Thus code in the package can only depend on objects in its own namespace and its imports (including the <strong>base</strong> namespace) being visible<a href="R-exts_split_014.html#FOOT58" id="DOCF58"><sup>58</sup></a>.</p>
<p>Namespaces are <em>sealed</em> once they are loaded. Sealing means that imports and exports cannot be changed and that internal variable bindings cannot be changed. Sealing allows a simpler implementation strategy for the namespace mechanism. Sealing also allows code analysis and compilation tools to accurately identify the definition corresponding to a global variable reference in a function body.</p>
<p>The namespace controls the search strategy for variables used by functions in the package. If not found locally, R searches the package namespace first, then the imports, then the base namespace and then the normal search path.</p>
<hr />
<p><a href="" id="Specifying-imports-and-exports"></a> <a href="" id="Specifying-imports-and-exports-1"></a></p>
<h4 id="specifying-imports-and-exports" class="subsection">1.5.1 Specifying imports and exports</h4>
<p>Exports are specified using the <code class="calibre2">export</code> directive in the NAMESPACE file. A directive of the form</p>
<p><a href="" id="index-export"></a></p>
<div class="example">
<pre class="example1"><code>export(f, g)</code></pre>
</div>
<p>specifies that the variables <code class="calibre2">f</code> and <code class="calibre2">g</code> are to be exported. (Note that variable names may be quoted, and reserved words and non-standard names such as <code class="calibre2">[&lt;-.fractions</code> must be.)</p>
<p>For packages with many variables to export it may be more convenient to specify the names to export with a regular expression using <code class="calibre2">exportPattern</code>. The directive</p>
<p><a href="" id="index-exportPattern"></a></p>
<div class="example">
<pre class="example1"><code>exportPattern(&quot;^[^\\.]&quot;)</code></pre>
</div>
<p>exports all variables that do not start with a period. However, such broad patterns are not recommended for production code: it is better to list all exports or use narrowly-defined groups. (This pattern applies to S4 classes.) Beware of patterns which include names starting with a period: some of these are internal-only variables and should never be exported, e.g. ‘.__S3MethodsTable__.’ (and the code nowadays excludes known cases).</p>
<p>Packages implicitly import the base namespace. Variables exported from other packages with namespaces need to be imported explicitly using the directives <code class="calibre2">import</code> and <code class="calibre2">importFrom</code>. The <code class="calibre2">import</code> directive imports all exported variables from the specified package(s). Thus the directives</p>
<p><a href="" id="index-import"></a></p>
<div class="example">
<pre class="example1"><code>import(foo, bar)</code></pre>
</div>
<p>specifies that all exported variables in the packages <strong>foo</strong> and <strong>bar</strong> are to be imported. If only some of the exported variables from a package are needed, then they can be imported using <code class="calibre2">importFrom</code>. The directive</p>
<p><a href="" id="index-importFrom"></a></p>
<div class="example">
<pre class="example1"><code>importFrom(foo, f, g)</code></pre>
</div>
<p>specifies that the exported variables <code class="calibre2">f</code> and <code class="calibre2">g</code> of the package <strong>foo</strong> are to be imported. Using <code class="calibre2">importFrom</code> selectively rather than <code class="calibre2">import</code> is good practice and recommended notably when importing from packages with more than a dozen exports.</p>
<p>To import every symbol from a package but for a few exceptions, pass the <code class="calibre2">except</code> argument to <code class="calibre2">import</code>. The directive</p>
<div class="example">
<pre class="example1"><code>import(foo, except=c(bar, baz))</code></pre>
</div>
<p>imports every symbol from <strong>foo</strong> except <code class="calibre2">bar</code> and <code class="calibre2">baz</code>. The value of <code class="calibre2">except</code> should evaluate to something coercible to a character vector, after substituting each symbol for its corresponding string.</p>
<p>It is possible to export variables from a namespace which it has imported from other namespaces: this has to be done explicitly and not <em>via</em> <code class="calibre2">exportPattern</code>.</p>
<p>If a package only needs a few objects from another package it can use a fully qualified variable reference in the code instead of a formal import. A fully qualified reference to the function <code class="calibre2">f</code> in package <strong>foo</strong> is of the form <code class="calibre2">foo::f</code>. This is slightly less efficient than a formal import and also loses the advantage of recording all dependencies in the NAMESPACE file (but they still need to be recorded in the DESCRIPTION file). Evaluating <code class="calibre2">foo::f</code> will cause package <strong>foo</strong> to be loaded, but not attached, if it was not loaded already—this can be an advantage in delaying the loading of a rarely used package.</p>
<p>Using <code class="calibre2">foo:::f</code> instead of <code class="calibre2">foo::f</code> allows access to unexported objects. This is generally not recommended, as the semantics of unexported objects may be changed by the package author in routine maintenance.</p>
<hr />
<p><a href="" id="Registering-S3-methods"></a> <a href="" id="Registering-S3-methods-1"></a></p>
<h4 id="registering-s3-methods" class="subsection">1.5.2 Registering S3 methods</h4>
<p>The standard method for S3-style <code class="calibre2">UseMethod</code> dispatching might fail to locate methods defined in a package that is imported but not attached to the search path. To ensure that these methods are available the packages defining the methods should ensure that the generics are imported and register the methods using <code class="calibre2">S3method</code> directives. If a package defines a function <code class="calibre2">print.foo</code> intended to be used as a <code class="calibre2">print</code> method for class <code class="calibre2">foo</code>, then the directive</p>
<p><a href="" id="index-S3method"></a></p>
<div class="example">
<pre class="example1"><code>S3method(print, foo)</code></pre>
</div>
<p>ensures that the method is registered and available for <code class="calibre2">UseMethod</code> dispatch, and the function <code class="calibre2">print.foo</code> does not need to be exported. Since the generic <code class="calibre2">print</code> is defined in <strong>base</strong> it does not need to be imported explicitly.</p>
<p>(Note that function and class names may be quoted, and reserved words and non-standard names such as <code class="calibre2">[&lt;-</code> and <code class="calibre2">function</code> must be.)</p>
<p>It is possible to specify a third argument to S3method, the function to be used as the method, for example</p>
<div class="example">
<pre class="example1"><code>S3method(print, check_so_symbols, .print.via.format)</code></pre>
</div>
<p>when <code class="calibre2">print.check_so_symbols</code> is not needed.</p>
<hr />
<p><a href="" id="Load-hooks"></a> <a href="" id="Load-hooks-1"></a></p>
<h4 id="load-hooks" class="subsection">1.5.3 Load hooks</h4>
<p><a href="" id="index-_002eonLoad"></a> <a href="" id="index-_002eonAttach"></a></p>
<p>There are a number of hooks called as packages are loaded, attached, detached, and unloaded. See <code class="calibre2">help(&quot;.onLoad&quot;)</code> for more details.</p>
<p>Since loading and attaching are distinct operations, separate hooks are provided for each. These hook functions are called <code class="calibre2">.onLoad</code> and <code class="calibre2">.onAttach</code>. They both take arguments<a href="R-exts_split_014.html#FOOT59" id="DOCF59"><sup>59</sup></a> <code class="calibre2">libname</code> and <code class="calibre2">pkgname</code>; they should be defined in the namespace but not exported.</p>
<p><a href="" id="index-_002eonUnload"></a> <a href="" id="index-_002eonDetach"></a> <a href="" id="index-_002eLast_002elib"></a></p>
<p>Packages can use a <code class="calibre2">.onDetach</code> or <code class="calibre2">.Last.lib</code> function (provided the latter is exported from the namespace) when <code class="calibre2">detach</code> is called on the package. It is called with a single argument, the full path to the installed package. There is also a hook <code class="calibre2">.onUnload</code> which is called when the namespace is unloaded (<em>via</em> a call to <code class="calibre2">unloadNamespace</code>, perhaps called by <code class="calibre2">detach(unload = TRUE)</code>) with argument the full path to the installed package’s directory. <code class="calibre2">.onUnload</code> and <code class="calibre2">.onDetach</code> should be defined in the namespace and not exported, but <code class="calibre2">.Last.lib</code> does need to be exported.</p>
<p>Packages are not likely to need <code class="calibre2">.onAttach</code> (except perhaps for a start-up banner); code to set options and load shared objects should be placed in a <code class="calibre2">.onLoad</code> function, or use made of the <code class="calibre2">useDynLib</code> directive described next.</p>
<p>User-level hooks are also available: see the help on function <code class="calibre2">setHook</code>.</p>
<p>These hooks are often used incorrectly. People forget to export <code class="calibre2">.Last.lib</code>. Compiled code should be loaded in <code class="calibre2">.onLoad</code> (or <em>via</em> a <code class="calibre2">useDynLb</code> directive: see below) and unloaded in <code class="calibre2">.onUnload</code>. Do remember that a package’s namespace can be loaded without the namespace being attached (e.g. by <code class="calibre2">pkgname::fun</code>) and that a package can be detached and re-attached whilst its namespace remains loaded.</p>
<hr />
<p><a href="" id="useDynLib"></a> <a href="" id="useDynLib-1"></a></p>
<h4 id="usedynlib" class="subsection">1.5.4 useDynLib</h4>
<p>A NAMESPACE file can contain one or more <code class="calibre2">useDynLib</code> directives which allows shared objects that need to be loaded.<a href="R-exts_split_014.html#FOOT60" id="DOCF60"><sup>60</sup></a> The directive</p>
<p><a href="" id="index-useDynLib"></a></p>
<div class="example">
<pre class="example1"><code>useDynLib(foo)</code></pre>
</div>
<p>registers the shared object <code class="calibre2">foo</code><a href="R-exts_split_014.html#FOOT61" id="DOCF61"><sup>61</sup></a> for loading with <code class="calibre2">library.dynam</code>. Loading of registered object(s) occurs after the package code has been loaded and before running the load hook function. Packages that would only need a load hook function to load a shared object can use the <code class="calibre2">useDynLib</code> directive instead.</p>
<p>The <code class="calibre2">useDynLib</code> directive also accepts the names of the native routines that are to be used in R <em>via</em> the <code class="calibre2">.C</code>, <code class="calibre2">.Call</code>, <code class="calibre2">.Fortran</code> and <code class="calibre2">.External</code> interface functions. These are given as additional arguments to the directive, for example,</p>
<div class="example">
<pre class="example1"><code>useDynLib(foo, myRoutine, myOtherRoutine)</code></pre>
</div>
<p>By specifying these names in the <code class="calibre2">useDynLib</code> directive, the native symbols are resolved when the package is loaded and R variables identifying these symbols are added to the package’s namespace with these names. These can be used in the <code class="calibre2">.C</code>, <code class="calibre2">.Call</code>, <code class="calibre2">.Fortran</code> and <code class="calibre2">.External</code> calls in place of the name of the routine and the <code class="calibre2">PACKAGE</code> argument. For instance, we can call the routine <code class="calibre2">myRoutine</code> from R with the code</p>
<div class="example">
<pre class="example1"><code> .Call(myRoutine, x, y)</code></pre>
</div>
<p>rather than</p>
<div class="example">
<pre class="example1"><code> .Call(&quot;myRoutine&quot;, x, y, PACKAGE = &quot;foo&quot;)</code></pre>
</div>
<p>There are at least two benefits to this approach. Firstly, the symbol lookup is done just once for each symbol rather than each time the routine is invoked. Secondly, this removes any ambiguity in resolving symbols that might be present in several compiled DLLs. However, this approach is nowadays deprecated in favour of supplying registration information (see below).</p>
<p>In some circumstances, there will already be an R variable in the package with the same name as a native symbol. For example, we may have an R function in the package named <code class="calibre2">myRoutine</code>. In this case, it is necessary to map the native symbol to a different R variable name. This can be done in the <code class="calibre2">useDynLib</code> directive by using named arguments. For instance, to map the native symbol name <code class="calibre2">myRoutine</code> to the R variable <code class="calibre2">myRoutine_sym</code>, we would use</p>
<div class="example">
<pre class="example1"><code>useDynLib(foo, myRoutine_sym = myRoutine, myOtherRoutine)</code></pre>
</div>
<p>We could then call that routine from R using the command</p>
<div class="example">
<pre class="example1"><code> .Call(myRoutine_sym, x, y)</code></pre>
</div>
<p>Symbols without explicit names are assigned to the R variable with that name.</p>
<p>In some cases, it may be preferable not to create R variables in the package’s namespace that identify the native routines. It may be too costly to compute these for many routines when the package is loaded if many of these routines are not likely to be used. In this case, one can still perform the symbol resolution correctly using the DLL, but do this each time the routine is called. Given a reference to the DLL as an R variable, say <code class="calibre2">dll</code>, we can call the routine <code class="calibre2">myRoutine</code> using the expression</p>
<div class="example">
<pre class="example1"><code> .Call(dll$myRoutine, x, y)</code></pre>
</div>
<p>The <code class="calibre2">$</code> operator resolves the routine with the given name in the DLL using a call to <code class="calibre2">getNativeSymbol</code>. This is the same computation as above where we resolve the symbol when the package is loaded. The only difference is that this is done each time in the case of <code class="calibre2">dll$myRoutine</code>.</p>
<p>In order to use this dynamic approach (e.g., <code class="calibre2">dll$myRoutine</code>), one needs the reference to the DLL as an R variable in the package. The DLL can be assigned to a variable by using the <code class="calibre2">variable = dllName</code> format used above for mapping symbols to R variables. For example, if we wanted to assign the DLL reference for the DLL <code class="calibre2">foo</code> in the example above to the variable <code class="calibre2">myDLL</code>, we would use the following directive in the NAMESPACE file:</p>
<div class="example">
<pre class="example1"><code>myDLL = useDynLib(foo, myRoutine_sym = myRoutine, myOtherRoutine)</code></pre>
</div>
<p>Then, the R variable <code class="calibre2">myDLL</code> is in the package’s namespace and available for calls such as <code class="calibre2">myDLL$dynRoutine</code> to access routines that are not explicitly resolved at load time.</p>
<p>If the package has registration information (see <a href="R-exts_split_009.html#Registering-native-routines">Registering native routines</a>), then we can use that directly rather than specifying the list of symbols again in the <code class="calibre2">useDynLib</code> directive in the NAMESPACE file. Each routine in the registration information is specified by giving a name by which the routine is to be specified along with the address of the routine and any information about the number and type of the parameters. Using the <code class="calibre2">.registration</code> argument of <code class="calibre2">useDynLib</code>, we can instruct the namespace mechanism to create R variables for these symbols. For example, suppose we have the following registration information for a DLL named <code class="calibre2">myDLL</code>:</p>
<div class="example">
<pre class="example1"><code>static R_NativePrimitiveArgType foo_t[] = {
    REALSXP, INTSXP, STRSXP, LGLSXP
};

static const R_CMethodDef cMethods[] = {
   {&quot;foo&quot;, (DL_FUNC) &amp;foo, 4, foo_t},
   {&quot;bar_sym&quot;, (DL_FUNC) &amp;bar, 0},
   {NULL, NULL, 0, NULL}
};

static const R_CallMethodDef callMethods[] = {
   {&quot;R_call_sym&quot;, (DL_FUNC) &amp;R_call, 4},
   {&quot;R_version_sym&quot;, (DL_FUNC) &amp;R_version, 0},
   {NULL, NULL, 0}
};</code></pre>
</div>
<p>Then, the directive in the NAMESPACE file</p>
<div class="example">
<pre class="example1"><code>useDynLib(myDLL, .registration = TRUE)</code></pre>
</div>
<p>causes the DLL to be loaded and also for the R variables <code class="calibre2">foo</code>, <code class="calibre2">bar_sym</code>, <code class="calibre2">R_call_sym</code> and <code class="calibre2">R_version_sym</code> to be defined in the package’s namespace.</p>
<p>Note that the names for the R variables are taken from the entry in the registration information and do not need to be the same as the name of the native routine. This allows the creator of the registration information to map the native symbols to non-conflicting variable names in R, e.g. <code class="calibre2">R_version</code> to <code class="calibre2">R_version_sym</code> for use in an R function such as</p>
<div class="example">
<pre class="example1"><code>R_version &lt;- function()
{
  .Call(R_version_sym)
}</code></pre>
</div>
<p>Using argument <code class="calibre2">.fixes</code> allows an automatic prefix to be added to the registered symbols, which can be useful when working with an existing package. For example, package <a href="https://CRAN.R-project.org/package=KernSmooth"><strong>KernSmooth</strong></a> has</p>
<div class="example">
<pre class="example1"><code>useDynLib(KernSmooth, .registration = TRUE, .fixes = &quot;F_&quot;)</code></pre>
</div>
<p>which makes the R variables corresponding to the FORTRAN symbols <code class="calibre2">F_bkde</code> and so on, and so avoid clashes with R code in the namespace.</p>
<p><strong>NB</strong>: Using these arguments for a package which does not register native symbols merely slows down the package loading (although at the time of writing 90 CRAN packages did so). Once symbols are registered, check that the corresponding R variables are not accidentally exported by a pattern in the NAMESPACE file.</p>
<hr />
<p><a href="" id="An-example"></a> <a href="" id="An-example-1"></a></p>
<h4 id="an-example" class="subsection">1.5.5 An example</h4>
<p>As an example consider two packages named <strong>foo</strong> and <strong>bar</strong>. The R code for package <strong>foo</strong> in file foo.R is</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>x &lt;- 1
f &lt;- function(y) c(x,y)
foo &lt;- function(x) .Call(&quot;foo&quot;, x, PACKAGE=&quot;foo&quot;)
print.foo &lt;- function(x, ...) cat(&quot;&lt;a foo&gt;\n&quot;)</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>Some C code defines a C function compiled into DLL <code class="calibre2">foo</code> (with an appropriate extension). The NAMESPACE file for this package is</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>useDynLib(foo)
export(f, foo)
S3method(print, foo)</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>The second package <strong>bar</strong> has code file bar.R</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>c &lt;- function(...) sum(...)
g &lt;- function(y) f(c(y, 7))
h &lt;- function(y) y+9</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>and NAMESPACE file</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>import(foo)
export(g, h)</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>Calling <code class="calibre2">library(bar)</code> loads <strong>bar</strong> and attaches its exports to the search path. Package <strong>foo</strong> is also loaded but not attached to the search path. A call to <code class="calibre2">g</code> produces</p>
<div class="example">
<pre class="example1"><code>&gt; g(6)
[1]  1 13</code></pre>
</div>
<p>This is consistent with the definitions of <code class="calibre2">c</code> in the two settings: in <strong>bar</strong> the function <code class="calibre2">c</code> is defined to be equivalent to <code class="calibre2">sum</code>, but in <strong>foo</strong> the variable <code class="calibre2">c</code> refers to the standard function <code class="calibre2">c</code> in <strong>base</strong>.</p>
<hr />
<p><a href="" id="Namespaces-with-S4-classes-and-methods"></a> <a href="" id="Namespaces-with-S4-classes-and-methods-1"></a></p>
<h4 id="namespaces-with-s4-classes-and-methods" class="subsection">1.5.6 Namespaces with S4 classes and methods</h4>
<p>Some additional steps are needed for packages which make use of formal (S4-style) classes and methods (unless these are purely used internally). The package should have <code class="calibre2">Depends: methods</code> in its DESCRIPTION file<a href="R-exts_split_014.html#FOOT62" id="DOCF62"><sup>62</sup></a> and <code class="calibre2">import(methods)</code> or <code class="calibre2">importFrom(methods, ...)</code> plus any classes and methods which are to be exported need to be declared in the NAMESPACE file. For example, the <strong>stats4</strong> package has</p>
<p><a href="" id="index-exportClasses"></a> <a href="" id="index-exportMethods"></a></p>
<div class="example">
<pre class="example1"><code>export(mle) # exporting methods implicitly exports the generic
importFrom(&quot;graphics&quot;, plot)
importFrom(&quot;stats&quot;, optim, qchisq)
## For these, we define methods or (AIC, BIC, nobs) an implicit generic:
importFrom(&quot;stats&quot;, AIC, BIC, coef, confint, logLik, nobs, profile,
           update, vcov)
exportClasses(mle, profile.mle, summary.mle)
## All methods for imported generics:
exportMethods(coef, confint, logLik, plot, profile, summary,
              show, update, vcov)
## implicit generics which do not have any methods here
export(AIC, BIC, nobs)</code></pre>
</div>
<p><a href="" id="index-exportPattern-1"></a> <a href="" id="index-exportClassPattern"></a></p>
<p>All S4 classes to be used outside the package need to be listed in an <code class="calibre2">exportClasses</code> directive. Alternatively, they can be specified using <code class="calibre2">exportClassPattern</code><a href="R-exts_split_014.html#FOOT63" id="DOCF63"><sup>63</sup></a> in the same style as for <code class="calibre2">exportPattern</code>. To export methods for generics from other packages an <code class="calibre2">exportMethods</code> directive can be used.</p>
<p>Note that exporting methods on a generic in the namespace will also export the generic, and exporting a generic in the namespace will also export its methods. If the generic function is not local to this package, either because it was imported as a generic function or because the non-generic version has been made generic solely to add S4 methods to it (as for functions such as <code class="calibre2">plot</code> in the example above), it can be declared <em>via</em> either or both of <code class="calibre2">export</code> or <code class="calibre2">exportMethods</code>, but the latter is clearer (and is used in the <strong>stats4</strong> example above). In particular, for primitive functions there is no generic function, so <code class="calibre2">export</code> would export the primitive, which makes no sense. On the other hand, if the generic is local to this package, it is more natural to export the function itself using <code class="calibre2">export()</code>, and this <em>must</em> be done if an implicit generic is created without setting any methods for it (as is the case for <code class="calibre2">AIC</code> in <strong>stats4</strong>).</p>
<p>A non-local generic function is only exported to ensure that calls to the function will dispatch the methods from this package (and that is not done or required when the methods are for primitive functions). For this reason, you do not need to document such implicitly created generic functions, and <code class="calibre2">undoc</code> in package <strong>tools</strong> will not report them.</p>
<p>If a package uses S4 classes and methods exported from another package, but does not import the entire namespace of the other package<a href="R-exts_split_014.html#FOOT64" id="DOCF64"><sup>64</sup></a>, it needs to import the classes and methods explicitly, with directives</p>
<p><a href="" id="index-importClassesFrom"></a> <a href="" id="index-importMethodsFrom"></a></p>
<div class="example">
<pre class="example1"><code>importClassesFrom(package, ...)
importMethodsFrom(package, ...)</code></pre>
</div>
<p>listing the classes and functions with methods respectively. Suppose we had two small packages <strong>A</strong> and <strong>B</strong> with <strong>B</strong> using <strong>A</strong>. Then they could have <code class="calibre2">NAMESPACE</code> files</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>export(f1, ng1)
exportMethods(&quot;[&quot;)
exportClasses(c1)</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>and</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>importFrom(A, ng1)
importClassesFrom(A, c1)
importMethodsFrom(A, f1)
export(f4, f5)
exportMethods(f6, &quot;[&quot;)
exportClasses(c1, c2)</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>respectively.</p>
<p>Note that <code class="calibre2">importMethodsFrom</code> will also import any generics defined in the namespace on those methods.</p>
<p>It is important if you export S4 methods that the corresponding generics are available. You may for example need to import <code class="calibre2">plot</code> from <strong>graphics</strong> to make visible a function to be converted into its implicit generic. But it is better practice to make use of the generics exported by <strong>stats4</strong> as this enables multiple packages to unambiguously set methods on those generics.</p>
<hr />
<p><a href="" id="Writing-portable-packages"></a> <a href="" id="Writing-portable-packages-1"></a></p>
<h3 id="writing-portable-packages" class="section">1.6 Writing portable packages</h3>
<p>This section contains advice on writing packages to be used on multiple platforms or for distribution (for example to be submitted to a package repository such as CRAN).</p>
<p>Portable packages should have simple file names: use only alphanumeric ASCII characters and period (<code class="calibre2">.</code>), and avoid those names not allowed under Windows which are mentioned above.</p>
<p>Many of the graphics devices are platform-specific: even <code class="calibre2">X11()</code> (aka <code class="calibre2">x11()</code>) which although emulated on Windows may not be available on a Unix-alike (and is not the preferred screen device on OS X). It is rarely necessary for package code or examples to open a new device, but if essential,<a href="R-exts_split_014.html#FOOT65" id="DOCF65"><sup>65</sup></a> use <code class="calibre2">dev.new()</code>.</p>
<p>Use <code class="calibre2">R CMD build</code> to make the release .tar.gz file.</p>
<p><code class="calibre2">R CMD check</code> provides a basic set of checks, but often further problems emerge when people try to install and use packages submitted to CRAN – many of these involve compiled code. Here are some further checks that you can do to make your package more portable.</p>
<ul>
<li>If your package has a configure script, provide a configure.win script to be used on Windows (an empty file if no actions are needed).</li>
<li><p>If your package has a Makevars or Makefile file, make sure that you use only portable make features. Such files should be LF-terminated<a href="R-exts_split_014.html#FOOT66" id="DOCF66"><sup>66</sup></a> (including the final line of the file) and not make use of GNU extensions. (The POSIX specification is available at <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html" class="uri">http://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html</a>; anything not documented there should be regarded as an extension to be avoided.) Commonly misused GNU extensions are conditional inclusions (<code class="calibre2">ifeq</code> and the like), <code class="calibre2">${shell ...}</code>, <code class="calibre2">${wildcard ...}</code> and similar, and the use of <code class="calibre2">+=</code><a href="R-exts_split_014.html#FOOT67" id="DOCF67"><sup>67</sup></a> and <code class="calibre2">:=</code>. Also, the use of <code class="calibre2">$&lt;</code> other than in implicit rules is a GNU extension, as is the <code class="calibre2">$^</code> macro. Unfortunately makefiles which use GNU extensions often run on other platforms but do not have the intended results.</p>
<p>The use of <code class="calibre2">${shell ...}</code> can be avoided by using backticks, e.g.</p>
<div class="example">
<pre class="example1"><code>PKG_CPPFLAGS = `gsl-config --cflags`</code></pre>
</div>
<p>which works in all versions of <code class="calibre2">make</code> known<a href="R-exts_split_014.html#FOOT68" id="DOCF68"><sup>68</sup></a> to be used with R.</p>
<p>If you really must require GNU make, declare it in the DESCRIPTION file by</p>
<div class="example">
<pre class="example1"><code>SystemRequirements: GNU make</code></pre>
</div>
<p>and ensure that you use the value of environment variable <code class="calibre2">MAKE</code> (and not just <code class="calibre2">make</code>) in your scripts. (On some platforms GNU make is available under a name such as <code class="calibre2">gmake</code>, and there <code class="calibre2">SystemRequirements</code> is used to set <code class="calibre2">MAKE</code>.)</p>
<p>If you only need GNU make for parts of the package which are rarely needed (for example to create bibliography files under vignettes), use a file called GNUmakefile rather than Makefile as GNU make (only) will use the former.</p>
<p>Since the only viable make for Windows is GNU make, it is permissible to use GNU extensions in files Makevars.win or Makefile.win.</p></li>
<li><p>Bash extensions also need to be avoided in shell scripts, including expressions in Makefiles (which are passed to the shell for processing). Some R platforms use strict<a href="R-exts_split_014.html#FOOT69" id="DOCF69"><sup>69</sup></a> Bourne shells: the R toolset on Windows and some Unix-alike OSes use <code class="calibre2">ash</code> (<a href="https://en.wikipedia.org/wiki/Almquist_shell" class="uri">https://en.wikipedia.org/wiki/Almquist_shell</a>), a rather minimal shell with few builtins. Beware of assuming that all the POSIX command-line utilities are available, especially on Windows where only a minimal set is provided for use with R. One particular issue is the use of <code class="calibre2">echo</code>, for which two behaviours are allowed (<a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/echo.html" class="uri">http://pubs.opengroup.org/onlinepubs/9699919799/utilities/echo.html</a>) and both occur as defaults on R platforms: portable applications should not use -n (as the first argument) nor escape sequences. Another common issue is the construction</p>
<div class="example">
<pre class="example1"><code>export FOO=value</code></pre>
</div>
<p>which is bash-specific (first set the variable then export it by name).</p></li>
<li><p>Make use of the abilities of your compilers to check the standards-conformance of your code. For example, <code class="calibre2">gcc</code> and <code class="calibre2">gfortran</code><a href="R-exts_split_014.html#FOOT70" id="DOCF70"><sup>70</sup></a> can be used with options -Wall -pedantic to alert you to potential problems. This is particularly important for C++, where <code class="calibre2">g++ -Wall -pedantic</code> will alert you to the use of some of the GNU extensions which fail to compile on most other C++ compilers. If R was not configured accordingly, one can achieve this <em>via</em> personal Makevars files.</p>
<p>Portable C++ code needs to follow the 1998 standard (and not use features from C99), or to specify a C++11 compiler (see <a href="R-exts_split_004.html#Using-C_002b_002b11-code">Using C++11 code</a>) where available (which is not the case on all R platforms).</p>
<p>If you use FORTRAN 77, <code class="calibre2">ftnchek</code> (<a href="http://www.dsm.fordham.edu/~ftnchek/" class="uri">http://www.dsm.fordham.edu/~ftnchek/</a>) provides thorough testing of conformance to the standard.</p>
<p>If using Fortran 9x with the GNU compiler, use the flags -std=f95 -Wall -pedantic which reject most GNU extensions and features from later standards.</p>
<p>R has tested that <code class="calibre2">DOUBLE COMPLEX</code> works (although an extension to the Fortran standards) and so is preferred to <code class="calibre2">COMPLEX*16</code>. (Fortran 9x code can use something like <code class="calibre2">COMPLEX(KIND=KIND(0.0D0))</code><a href="R-exts_split_014.html#FOOT71" id="DOCF71"><sup>71</sup></a>.)</p>
<p>Not all common R platforms conform to the expected standards, e.g. C99 for C code. One common area of problems is the <code class="calibre2">*printf</code> functions where Windows does not support <code class="calibre2">%lld</code>, <code class="calibre2">%Lf</code> and similar formats (and has its own formats such as <code class="calibre2">%I64d</code> for 64-bit integers). It is very rare to need to output such types, and 64-bit integers can usually be converted to doubles for output.</p></li>
<li><p><code class="calibre2">R CMD check</code> performs some checks for non-portable compiler/linker flags in src/Makevars. However, it cannot check the meaning of such flags, and some are commonly accepted but with compiler-specific meanings. There are other non-portable flags which are not checked, nor are src/Makefile files and makefiles in sub-directories. As a comment in the code says</p>
<blockquote>
<p>It is hard to think of anything apart from -I* and -D* that is safe for general use …</p>
</blockquote>
<p>although -pthread is pretty close to portable. (Option -U is portable but little use on the command line as it will only cancel built-in defines (not portable) and those defined earlier on the command line (R does not use any).)</p></li>
<li><p>Do be very careful with passing arguments between R, C and FORTRAN code. In particular, <code class="calibre2">long</code> in C will be 32-bit on some R platforms (including 64-bit Windows), but 64-bit on most modern Unix and Linux platforms. It is rather unlikely that the use of <code class="calibre2">long</code> in C code has been thought through: if you need a longer type than <code class="calibre2">int</code> you should use a configure test for a C99/C++11 type such as <code class="calibre2">int_fast64_t</code> (and failing that, <code class="calibre2">long long</code> <a href="R-exts_split_014.html#FOOT72" id="DOCF72"><sup>72</sup></a>) and typedef your own type to be <code class="calibre2">long</code> or <code class="calibre2">long long</code>, or use another suitable type (such as <code class="calibre2">size_t</code>).</p>
<p>It is not safe to assume that <code class="calibre2">long</code> and pointer types are the same size, and they are not on 64-bit Windows. If you need to convert pointers to and from integers use the C99/C++11 integer types <code class="calibre2">intptr_t</code> and <code class="calibre2">uintptr_t</code> (which are defined in the header <code class="calibre2">&lt;stdint.h&gt;</code> and are not required to be implemented by the C99 standard but are used in C code by R itself).</p>
<p>Note that <code class="calibre2">integer</code> in FORTRAN corresponds to <code class="calibre2">int</code> in C on all R platforms.</p></li>
<li><p>Under no circumstances should your compiled code ever call <code class="calibre2">abort</code> or <code class="calibre2">exit</code><a href="R-exts_split_014.html#FOOT73" id="DOCF73"><sup>73</sup></a>: these terminate the user’s R process, quite possibly including all his unsaved work. One usage that could call <code class="calibre2">abort</code> is the <code class="calibre2">assert</code> macro in C or C++ functions, which should never be active in production code. The normal way to ensure that is to define the macro <code class="calibre2">NDEBUG</code>, and <code class="calibre2">R CMD INSTALL</code> does so as part of the compilation flags. If you wish to use <code class="calibre2">assert</code> during development. you can include <code class="calibre2">-UNDEBUG</code> in <code class="calibre2">PKG_CPPFLAGS</code>. Note that your own src/Makefile or makefiles in sub-directories may also need to define <code class="calibre2">NDEBUG</code>.</p>
<p>This applies not only to your own code but to any external software you compile in or link to.</p></li>
<li>Compiled code should not write to stdout or stderr and C++ and Fortran I/O should not be used. As with the previous item such calls may come from external software and may never be called, but package authors are often mistaken about that.</li>
<li><p>Compiled code should not call the system random number generators such as <code class="calibre2">rand</code>, <code class="calibre2">drand48</code> and <code class="calibre2">random</code><a href="R-exts_split_014.html#FOOT74" id="DOCF74"><sup>74</sup></a>, but rather use the interfaces to R’s RNGs described in <a href="R-exts_split_010.html#Random-numbers">Random numbers</a>. In particular, if more than one package initializes the system RNG (e.g. <em>via</em> <code class="calibre2">srand</code>), they will interfere with each other.</p>
<p>Nor should the C++11 random number library be used.</p></li>
<li>Errors in memory allocation and reading/writing outside arrays are very common causes of crashes (e.g., segfaults) on some machines. See <a href="R-exts_split_008.html#Checking-memory-access">Checking memory access</a> for tools which can be used to look for this.</li>
<li><p>Many platforms will allow unsatisfied entry points in compiled code, but will crash the application (here R) if they are ever used. Some (notably Windows) will not. Looking at the output of</p>
<div class="example">
<pre class="example1"><code>nm -pg mypkg.so</code></pre>
</div>
<p>and checking if any of the symbols marked <code class="calibre2">U</code> is unexpected is a good way to avoid this.</p></li>
<li>Linkers have a lot of freedom in how to resolve entry points in dynamically-loaded code, so the results may differ by platform. One area that has caused grief is packages including copies of standard system software such as <code class="calibre2">libz</code> (especially those already linked into R). In the case in point, entry point <code class="calibre2">gzgets</code> was sometimes resolved against the old version compiled into the package, sometimes against the copy compiled into R and sometimes against the system dynamic library. The only safe solution is to rename the entry points in the copy in the package. We have even seen problems with entry point name <code class="calibre2">myprintf</code>, which is a system entry point<a href="R-exts_split_014.html#FOOT75" id="DOCF75"><sup>75</sup></a> on some Linux systems.</li>
<li>Conflicts between symbols in DLLs are handled in very platform-specific ways. Good ways to avoid trouble are to make as many symbols as possible static (check with <code class="calibre2">nm -pg</code>), and to use names which are clearly tied to your package (which also helps users if anything does go wrong). Note that symbol names starting with <code class="calibre2">R_</code> are regarded as part of R’s namespace and should not be used in packages.</li>
<li>It is good practice for DLLs to register their symbols (see <a href="R-exts_split_009.html#Registering-native-routines">Registering native routines</a>), restrict visibility (see <a href="R-exts_split_010.html#Controlling-visibility">Controlling visibility</a>) and not allow symbol search (see <a href="R-exts_split_009.html#Registering-native-routines">Registering native routines</a>). It should be possible for a DLL to have only one visible symbol, <code class="calibre2">R_init_pkgname</code>, on suitable platforms<a href="R-exts_split_014.html#FOOT76" id="DOCF76"><sup>76</sup></a>, which would completely avoid symbol conflicts.</li>
<li>It is not portable to call compiled code in R or other packages <em>via</em> <code class="calibre2">.Internal</code>, <code class="calibre2">.C</code>, <code class="calibre2">.Fortran</code>, <code class="calibre2">.Call</code> or <code class="calibre2">.External</code>, since such interfaces are subject to change without notice and will probably result in your code terminating the R process.</li>
<li>Do not use (hard or symbolic) file links in your package sources. Where possible <code class="calibre2">R CMD build</code> will replace them by copies.</li>
<li>If you do not yourself have a Windows system, consider submitting your source package to WinBuilder (<a href="https://win-builder.r-project.org/" class="uri">https://win-builder.r-project.org/</a>) before distribution.</li>
<li>It is bad practice for package code to alter the search path using <code class="calibre2">library</code>, <code class="calibre2">require</code> or <code class="calibre2">attach</code> and this often does not work as intended. For alternatives, see <a href="R-exts_split_004.html#Suggested-packages">Suggested packages</a> and <code class="calibre2">with</code>.</li>
<li>Examples can be run interactively <em>via</em> <code class="calibre2">example</code> as well as in batch mode when checking. So they should behave appropriately in both scenarios, conditioning by <code class="calibre2">interactive()</code> the parts which need an operator or observer. For instance, progress bars<a href="R-exts_split_014.html#FOOT77" id="DOCF77"><sup>77</sup></a> are only appropriate in interactive use, as is displaying help pages or calling <code class="calibre2">View()</code> (see below).</li>
<li>Be careful with the order of entries in macros such as <code class="calibre2">PKG_LIBS</code>. Some linkers will re-order the entries, and behaviour can differ between dynamic and static libraries. Generally -L options should precede<a href="R-exts_split_014.html#FOOT78" id="DOCF78"><sup>78</sup></a> the libraries (typically specified by -l options) to be found from those directories, and libraries are searched once in the order they are specified. Not all linkers allow a space after -L .</li>
<li><p>Care is needed with the use of <code class="calibre2">LinkingTo</code>. This puts one or more directories on the include search path ahead of system headers but (prior to R 3.4.0) after those specified in the <code class="calibre2">CPPFLAGS</code> macro of the R build (which normally includes <code class="calibre2">-I/usr/local/include</code>, but most platforms ignore that and include it with the system headers).</p>
<p>Any confusion would be avoided by having <code class="calibre2">LinkingTo</code> headers in a directory named after the package. In any case, name conflicts of headers and directories under package include directories should be avoided, both between packages and between a package and system and third-party software.</p></li>
<li>The <code class="calibre2">ar</code> utility is often used in makefiles to make static libraries. Its modifier <code class="calibre2">u</code> is defined by POSIX but is disabled in GNU <code class="calibre2">ar</code> on some recent Linux distributions which use ‘deterministic mode’. The safest way to make a static library is to first remove any existing file of that name then use <code class="calibre2">ar -cr</code> and then <code class="calibre2">ranlib</code> if needed (which is system-dependent: on most systems<a href="R-exts_split_014.html#FOOT79" id="DOCF79"><sup>79</sup></a> <code class="calibre2">ar</code> always maintains a symbol table). The POSIX standard says options should be preceded by a hyphen (as in -cr), although most OSes accept them without. Note that on some systems <code class="calibre2">ar -cr</code> must have at least one file specified.</li>
<li>Some people have a need to set a locale. Locale names are not portable, and e.g. ‘fr_FR.utf8’ is commonly used on Linux but not accepted on either Solaris or macOS. ‘fr_FR.UTF-8’ is more portable, being accepted on recent Linux, AIX, FreeBSD, macOS and Solaris (at least). However, some Linux distributions micro-package, so locales defined by <strong>glibc</strong> (including these examples) may not be installed.</li>
<li><p>Avoid spaces in file names, not least as they can cause difficulties for external tools. A recent example was a package with a <a href="https://CRAN.R-project.org/package=knitr"><strong>knitr</strong></a> vignette that used spaces in plot names: this caused some versions of <code class="calibre2">pandoc</code> to fail with a baffling error message.</p>
<p>Non-ASCII filenames can also cause problems (particularly in non-UTF-8 locales).</p></li>
<li><p>Make sure that any version requirement for Java code is both declared in the ‘SystemRequirements’ field and tested at runtime (not least as the Java installation when the package is installed might not be the same as when the package is run and will not be for binary packages). Java 8 (aka 1.8) is available for fewer platforms than Java 7. A suitable test for packages using <a href="https://CRAN.R-project.org/package=rJava"><strong>rJava</strong></a> would be</p>
<div class="example">
<pre class="example1"><code>.jinit()
jv &lt;- .jcall(&quot;java/lang/System&quot;, &quot;S&quot;, &quot;getProperty&quot;, &quot;java.runtime.version&quot;)
jvn &lt;- as.numeric(paste0(strsplit(jv, &quot;[.]&quot;)[[1L]][1:2], collapse = &quot;.&quot;))
if(jvn &lt; 1.8) stop(&quot;Java 8 is needed for this package but not available&quot;)</code></pre>
</div>
<p>Some packages have stated a requirement on a particular JDK, but a package should only be requiring a JRE unless providing its own Java interface.</p></li>
<li><p>A package with a hard-to-satisfy system requirement is by definition not portable, annoyingly so if this is not declared in the ‘SystemRequirements’ field. The most common example is the use of <code class="calibre2">pandoc</code>, which is only available for a very limited range of platforms (and has onerous requirements to install from source) and has capabilities<a href="R-exts_split_014.html#FOOT80" id="DOCF80"><sup>80</sup></a> that vary by build but are not documented.</p>
<p>An external command can be an optional requirement for an imported package but needed for examples or tests in the package itself. Such usage should always be conditional on a test for existence (perhaps using <code class="calibre2">Sys.which</code>), as well as declared in the ‘SystemRequirements’ field.</p></li>
<li>Be sure to use portable encoding names: none of <code class="calibre2">utf8</code>, <code class="calibre2">mac</code> and <code class="calibre2">macroman</code> are. See the help for <code class="calibre2">file</code> for more details.</li>
<li><p>Do not invoke R by plain <code class="calibre2">R</code>, <code class="calibre2">Rscript</code> or (on Windows) <code class="calibre2">Rterm</code> in your examples, tests, vignettes, makefiles or other scripts. As pointed out in several places earlier in this manual, use something like</p>
<div class="example">
<pre class="example1"><code>&quot;$(R_HOME)/bin/Rscript&quot;
&quot;$(R_HOME)/bin$(R_ARCH_BIN)/Rterm&quot;</code></pre>
</div>
<p>with appropriate quotes (as, although not recommended, <code class="calibre2">R_HOME</code> can contain spaces).</p></li>
</ul>
<p>Do be careful in what your tests (and examples) actually test. Bad practice seen in distributed packages include:</p>
<ul>
<li>It is not reasonable to test the time taken by a command: you cannot know how fast or how heavily loaded an R platform might be. At best you can test a ratio of times, and even that is fraught with difficulties.</li>
<li><p>Do not test the exact format of R messages (from R itself or from other packages): They change, and they can be translated.</p>
<p>Packages have even tested the exact format of system error messages, which are platform-dependent and perhaps locale-dependent.</p></li>
<li>If you use functions such as <code class="calibre2">View</code>, remember that in testing there is no one to look at the output. It is better to use something like one of
<div class="example">
<pre class="example1"><code>if(interactive()) View(obj) else print(head(obj))
if(interactive()) View(obj) else str(obj)</code></pre>
</div></li>
<li><p>Only test the accuracy of results if you have done a formal error analysis. Things such as checking that probabilities numerically sum to one are silly: numerical tests should always have a tolerance. That the tests on your platform achieve a particular tolerance says little about other platforms. R is configured by default to make use of long doubles where available, but they may not be available or be too slow for routine use. Most R platforms use ‘ix86’ or ‘x86_64’ CPUs: these use extended precision registers on some but not all of their FPU instructions. Thus the achieved precision can depend on the compiler version and optimization flags—our experience is that 32-bit builds tend to be less precise than 64-bit ones. But not all platforms use those CPUs, and not all<a href="R-exts_split_014.html#FOOT81" id="DOCF81"><sup>81</sup></a> which use them configure them to allow the use of extended precision. In particular, ARM CPUs do not (currently) have extended precision nor long doubles, and long double was 64-bit on HP/PA Linux.</p>
<p>If you must try to establish a tolerance empirically, configure and build R with --disable-long-double and use appropriate compiler flags (such as -ffloat-store and -fexcess-precision=standard for <code class="calibre2">gcc</code>, depending on the CPU type<a href="R-exts_split_014.html#FOOT82" id="DOCF82"><sup>82</sup></a>) to mitigate the effects of extended-precision calculations.</p>
<p>Tests which involve random inputs or non-deterministic algorithms should normally set a seed or be tested for many seeds.</p></li>
</ul>
<hr />
<p><a href="" id="PDF-size"></a> <a href="" id="PDF-size-1"></a></p>
<h4 id="pdf-size" class="subsection">1.6.1 PDF size</h4>
<p>There are a several tools available to reduce the size of PDF files: often the size can be reduced substantially with no or minimal loss in quality. Not only do large files take up space: they can stress the PDF viewer and take many minutes to print (if they can be printed at all).</p>
<p><code class="calibre2">qpdf</code> (<a href="http://qpdf.sourceforge.net/" class="uri">http://qpdf.sourceforge.net/</a>) can compress losslessly. It is fairly readily available (e.g. it has binaries for Windows and packages in Debian/Ubuntu/Fedora, and is installed as part of the CRAN macOS distribution of R). <code class="calibre2">R CMD build</code> has an option to run <code class="calibre2">qpdf</code> over PDF files under inst/doc and replace them if at least 10Kb and 10% is saved. The full path to the <code class="calibre2">qpdf</code> command can be supplied as environment variable <code class="calibre2">R_QPDF</code> (and is on the CRAN binary of R for macOS). It seems MiKTeX does not use PDF object compression and so <code class="calibre2">qpdf</code> can reduce considerably the files it outputs: MiKTeX can be overridden by code in the preamble of an Sweave or LaTeX file — see how this is done for the R reference manual at <a href="https://svn.r-project.org/R/trunk/doc/manual/refman.top" class="uri">https://svn.r-project.org/R/trunk/doc/manual/refman.top</a>.</p>
<p>Other tools can reduce the size of PDFs containing bitmap images at excessively high resolution. These are often best re-generated (for example <code class="calibre2">Sweave</code> defaults to 300 ppi, and 100–150 is more appropriate for a package manual). These tools include Adobe Acrobat (not Reader), Apple’s Preview<a href="R-exts_split_014.html#FOOT83" id="DOCF83"><sup>83</sup></a> and Ghostscript (which converts PDF to PDF by</p>
<div class="example">
<pre class="example1"><code>ps2pdf options -dAutoRotatePages=/None in.pdf out.pdf</code></pre>
</div>
<p>and suitable options might be</p>
<div class="example">
<pre class="example1"><code>-dPDFSETTINGS=/ebook
-dPDFSETTINGS=/screen</code></pre>
</div>
<p>; see <a href="http://www.ghostscript.com/doc/current/Ps2pdf.htm" class="uri">http://www.ghostscript.com/doc/current/Ps2pdf.htm</a> for more such and consider all the options for image downsampling). There have been examples in CRAN packages for which Ghostscript 9.06 and later produced much better reductions than 9.05 or earlier.</p>
<p>We come across occasionally large PDF files containing excessively complicated figures using PDF vector graphics: such figures are often best redesigned or failing that, output as PNG files.</p>
<p>Option --compact-vignettes to <code class="calibre2">R CMD build</code> defaults to value ‘qpdf’: use ‘both’ to try harder to reduce the size, provided you have Ghostscript available (see the help for <code class="calibre2">tools::compactPDF</code>).</p>
<hr />
<p><a href="" id="Check-timing"></a> <a href="" id="Check-timing-1"></a></p>
<h4 id="check-timing" class="subsection">1.6.2 Check timing</h4>
<p>There are several ways to find out where time is being spent in the check process. Start by setting the environment variable <code class="calibre2">_R_CHECK_TIMINGS_</code> to ‘0’. This will report the total CPU times (not Windows) and elapsed times for installation and running examples, tests and vignettes, under each sub-architecture if appropriate. For tests and vignettes, it reports the time for each as well as the total.</p>
<p>Setting <code class="calibre2">_R_CHECK_TIMINGS_</code> to a positive value sets a threshold (in seconds elapsed time) for reporting timings.</p>
<p>If you need to look in more detail at the timings for examples, use option --timings to <code class="calibre2">R CMD check</code> (this is set by --as-cran). This adds a summary to the check output for all the examples with CPU or elapsed time of more than 5 seconds. It produces a file mypkg.Rcheck/mypkg-Ex.timings containing timings for each help file: it is a tab-delimited file which can be read into R for further analysis.</p>
<p>Timings for the tests and vignette runs are given at the bottom of the corresponding log file: note that log files for successful vignette runs are only retained if environment variable <code class="calibre2">_R_CHECK_ALWAYS_LOG_VIGNETTE_OUTPUT_</code> is set to a true value.</p>
<hr />
<p><a href="" id="Encoding-issues"></a> <a href="" id="Encoding-issues-1"></a></p>
<h4 id="encoding-issues" class="subsection">1.6.3 Encoding issues</h4>
<p>Care is needed if your package contains non-ASCII text, and in particular if it is intended to be used in more than one locale. It is possible to mark the encoding used in the DESCRIPTION file and in .Rd files, as discussed elsewhere in this manual.</p>
<p>First, consider carefully if you really need non-ASCII text. Many users of R will only be able to view correctly text in their native language group (e.g. Western European, Eastern European, Simplified Chinese) and ASCII.<a href="R-exts_split_014.html#FOOT84" id="DOCF84"><sup>84</sup></a>. Other characters may not be rendered at all, rendered incorrectly, or cause your R code to give an error. For .Rd documentation, marking the encoding and including ASCII transliterations is likely to do a reasonable job. The set of characters which is commonly supported is wider than it used to be around 2000, but non-Latin alphabets (Greek, Russian, Georgian, …) are still often problematic and those with double-width characters (Chinese, Japanese, Korean) often need specialist fonts to render correctly.</p>
<p>Several CRAN packages have messages in their R code in French (and a few in German). A better way to tackle this is to use the internationalization facilities discussed elsewhere in this manual.</p>
<p>Function <code class="calibre2">showNonASCIIfile</code> in package <strong>tools</strong> can help in finding non-ASCII bytes in files.</p>
<p>There is a portable way to have arbitrary text in character strings (only) in your R code, which is to supply them in Unicode as <code class="calibre2">\uxxxx</code> escapes. If there are any characters not in the current encoding the parser will encode the character string as UTF-8 and mark it as such. This applies also to character strings in datasets: they can be prepared using <code class="calibre2">\uxxxx</code> escapes or encoded in UTF-8 in a UTF-8 locale, or even converted to UTF-8 via ‘iconv()’. If you do this, make sure you have ‘R (&gt;= 2.10)’ (or later) in the ‘Depends’ field of the DESCRIPTION file.</p>
<p>R sessions running in non-UTF-8 locales will if possible re-encode such strings for display (and this is done by <code class="calibre2">RGui</code> on Windows, for example). Suitable fonts will need to be selected or made available<a href="R-exts_split_014.html#FOOT85" id="DOCF85"><sup>85</sup></a> both for the console/terminal and graphics devices such as ‘X11()’ and ‘windows()’. Using ‘postscript’ or ‘pdf’ will choose a default 8-bit encoding depending on the language of the UTF-8 locale, and your users would need to be told how to select the ‘encoding’ argument.</p>
<p>If you want to run <code class="calibre2">R CMD check</code> on a Unix-alike over a package that sets a package encoding in its DESCRIPTION file <em>and do not use a UTF-8 locale</em> you may need to specify a suitable locale <em>via</em> environment variable <code class="calibre2">R_ENCODING_LOCALES</code>. The default is equivalent to the value</p>
<div class="example">
<pre class="example1"><code>&quot;latin1=en_US:latin2=pl_PL:UTF-8=en_US.UTF-8:latin9=fr_FR.iso885915@euro&quot;</code></pre>
</div>
<p>(which is appropriate for a system based on <code class="calibre2">glibc</code>: macOS requires <code class="calibre2">latin9=fr_FR.ISO8859-15</code>) except that if the current locale is UTF-8 then the package code is translated to UTF-8 for syntax checking, so it is strongly recommended to check in a UTF-8 locale.</p>
<hr />
<p><a href="" id="Portable-C-and-C_002b_002b-code"></a> <a href="" id="Portable-C-and-C_002b_002b-code-1"></a></p>
<h4 id="portable-c-and-c-code" class="subsection">1.6.4 Portable C and C++ code</h4>
<p>Writing portable C and C++ code is mainly a matter of observing the standards (C99, C++98 or where declared C++11/14) and testing that extensions (such as POSIX functions) are supported.</p>
<p>Note that the ‘TR1’ C++ extensions are not part of any of these standards and the <code class="calibre2">&lt;tr1/name&gt;</code> headers are not supplied by some of the compilers used for R, including on macOS. (Use the C++11 versions instead.)</p>
<p>Note too that the POSIX standards only require recently-defined functions to be declared if certain macros are defined with large enough values, and on some compiler/OS combinations<a href="R-exts_split_014.html#FOOT86" id="DOCF86"><sup>86</sup></a> they are not declared otherwise. So you may need to include something like one of <a href="R-exts_split_014.html#FOOT87" id="DOCF87"><sup>87</sup></a></p>
<div class="example">
<pre class="example1"><code>#define _XOPEN_SOURCE 500</code></pre>
</div>
<p>or</p>
<div class="example">
<pre class="example1"><code>#ifdef __GLIBC__
# define _POSIX_C_SOURCE 200809L
#endif</code></pre>
</div>
<p>before <em>any</em> headers. (<code class="calibre2">strdup</code> and <code class="calibre2">strncasecmp</code> are two such functions.)</p>
<p>However, some common errors are worth pointing out here. It can be helpful to look up functions at <a href="http://www.cplusplus.com/reference/" class="uri">http://www.cplusplus.com/reference/</a> or <a href="http://en.cppreference.com/w/" class="uri">http://en.cppreference.com/w/</a> and compare what is defined in the various standards.</p>
<p>Both the compiler and OS (<em>via</em> system header files, which may differ by architecture even for nominally the same OS) affect the compilability of C/C++ code. Compilers from the GCC, <code class="calibre2">clang</code>, Intel and Oracle Studio suites are routinely used with R, and both <code class="calibre2">clang</code> and Oracle have more than one implementation of C++ headers and library. The range of possibilities makes comprehensive empirical checking impossible, and regrettably compilers are patchy at best on warning about non-standard code.</p>
<ul>
<li><p>Mathematical functions such as <code class="calibre2">sqrt</code> are defined in C++ for floating-point arguments. It is legitimate in C++ to overload these with versions for types <code class="calibre2">float</code>, <code class="calibre2">double</code>, <code class="calibre2">long double</code> and possibly more. This means that calling <code class="calibre2">sqrt</code> on an integer type may have ‘overloading ambiguity’ as it could be promoted to any of the supported floating-point types: this is commonly seen on Solaris, but for <code class="calibre2">pow</code> also seen on macOS. (C++98 has an overload for <code class="calibre2">std::pow(&lt;double&gt;, &lt;int&gt;)</code>, but this may not be visible from the main namespace. C++11 requires additional overloads for integer types, and ambiguous overloads are more common in C++11 (and later) compiler modes.)</p>
<p>A not-uncommonly-seen problem is to mistakenly call <code class="calibre2">floor(x/y)</code> or <code class="calibre2">ceil(x/y)</code> for <code class="calibre2">int</code> arguments <code class="calibre2">x</code> and <code class="calibre2">y</code>. Since <code class="calibre2">x/y</code> does integer division, the result is an <code class="calibre2">int</code> and ‘overloading ambiguity’ may be reported. Some people have (pointlessly) called <code class="calibre2">floor</code> and <code class="calibre2">ceil</code> on integer arguments, which may have an ‘overloading ambiguity’.</p>
<p>A surprising common misuse is things like <code class="calibre2">pow(10, -3)</code>: this should be the constant <code class="calibre2">1e-3</code>.</p></li>
<li>Function <code class="calibre2">fabs</code> is defined only for floating-point types, except in C++11 which has overloads for <code class="calibre2">std::fabs</code> in &lt;cmath&gt; for integer types. Function <code class="calibre2">abs</code> is defined in C99’s &lt;stdlib.h&gt; for <code class="calibre2">int</code> and in C++98’s &lt;cstdlib&gt; for integer types, overloaded in &lt;cmath&gt; for floating-point types. C++11 has additional overloads for <code class="calibre2">std::abs</code> in &lt;cmath&gt; for integer types. The effect of calling <code class="calibre2">abs</code> with a floating-point type is implementation-specific: it may truncate to an integer.</li>
<li><p>Functions/macros such as <code class="calibre2">isnan</code>, <code class="calibre2">isinf</code> and <code class="calibre2">isfinite</code> are not required by C++98: where compilers support them they may be only in the <code class="calibre2">std</code> namespace or only in the main namespace. There is no way to make use of these functions which works with all C++ compilers currently in use on R platforms: use R’s versions such as <code class="calibre2">ISNAN</code> and <code class="calibre2">R_FINITE</code> instead.</p>
<p>If you must use them in C++11, beware that some compilers<a href="R-exts_split_014.html#FOOT88" id="DOCF88"><sup>88</sup></a> provide both <code class="calibre2">std::isnan</code> and <code class="calibre2">::isnan</code>, so using</p>
<div class="example">
<pre class="example1"><code>using namespace std;</code></pre>
</div>
<p>may cause ‘overloading ambiguity’ and you must use <code class="calibre2">std::isnan</code> <em>etc</em> explicitly.</p>
<p>It is an error (and make little sense, although has been seen) to call these functions for integer arguments: a few compilers give a compilation error.</p></li>
<li><p>The GNU C/C++ compilers support a large number of non-portable extensions. For example, <code class="calibre2">INFINITY</code> (which is in C99 but not C++98), for which R provides the portable <code class="calibre2">R_PosInf</code> (and <code class="calibre2">R_NegInf</code> for <code class="calibre2">-INFINITY</code>). And <code class="calibre2">NAN</code> is just one NaN value: in R code <code class="calibre2">NA_REAL</code> is usually what is intended, but <code class="calibre2">R_NaN</code> is also available.</p>
<p>Some (but not all) extensions are listed at <a href="https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html" class="uri">https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html</a> and <a href="https://gcc.gnu.org/onlinedocs/gcc/C_002b_002b-Extensions.html" class="uri">https://gcc.gnu.org/onlinedocs/gcc/C_002b_002b-Extensions.html</a>.</p>
<p>Other GNU extensions which have bitten package writers is the use of non-portable characters such as ‘$’ in identifiers and use of C++ headers under ext.</p>
<p>The GNU Fortran compiler also supports a large number of non-portable extensions, the most commonly encountered one being <code class="calibre2">ISNAN</code><a href="R-exts_split_014.html#FOOT89" id="DOCF89"><sup>89</sup></a>. Some are listed at <a href="https://gcc.gnu.org/onlinedocs/gfortran/Extensions-implemented-in-GNU-Fortran.html" class="uri">https://gcc.gnu.org/onlinedocs/gfortran/Extensions-implemented-in-GNU-Fortran.html</a>. One that frequently catches package writers is that it allows out-of-order declarations: in standard-conformant Fortran variables must be declared (explicitly or implicitly) before use in other declarations such as dimensions.</p></li>
<li>Including C-style headers in C++ code is not portable. Including the legacy header<a href="R-exts_split_014.html#FOOT90" id="DOCF90"><sup>90</sup></a> math.h in C++ code may conflict with cmath which may be included by other headers. This is particularly problematic with C++11 compilers, as functions like <code class="calibre2">sqrt</code> and <code class="calibre2">isnan</code> are defined for <code class="calibre2">double</code> arguments in math.h and for a range of types including <code class="calibre2">double</code> in cmath. Similar issues have been seen for stdlib.h and cstdlib. Including the C++ version first used to be a sufficient workaround but for some 2016 compilers only one could be included.</li>
<li>Variable-length arrays are C99, not supported by C++98 nor by the C++ compilers in use with R on some platforms.</li>
<li>The <code class="calibre2">restrict</code> qualifier is C99/C11 but not part of C++11 and not supported by some C++ compilers used with R.</li>
<li><p>Be careful to include the headers which define the functions you use. Some compilers/OSes include other system headers in their headers which are not required by the standards, and so code may compile on such systems and not on others. (A prominent example is the C++11 header <code class="calibre2">&lt;random&gt;</code> which is indirectly included by <code class="calibre2">&lt;algorithm&gt;</code> by <code class="calibre2">g++</code>. Another issue is the C header <code class="calibre2">&lt;time.h&gt;</code> which is included by other headers on Linux and Windows but not macOS nor Solaris.)</p>
<p>Note that <code class="calibre2">malloc</code>, <code class="calibre2">calloc</code>, <code class="calibre2">realloc</code> and <code class="calibre2">free</code> are defined by C99 in the header stdlib.h and (in the <code class="calibre2">std::</code> namespace) by C++ header cstdlib. Some earlier implementations used a header malloc.h, but that is not portable and does not exist on macOS.</p>
<p>This also applies to types such as <code class="calibre2">ssize_t</code>. The POSIX standards say that is declared in headers <code class="calibre2">unistd.h</code> and <code class="calibre2">sys/types.h</code>, and the latter is often included indirectly by other headers on some but not all systems.</p>
<p>Similarly for constants: for example <code class="calibre2">SIZE_MAX</code> is defined in <code class="calibre2">stdint.h</code> alongside <code class="calibre2">size_t</code> (according to the C99 standard: it is not part of C++98).</p></li>
<li><p>For C++ code, be careful to specify namespaces where needed. Many functions are defined by the standards to be in the <code class="calibre2">std</code> namespace, but <code class="calibre2">g++</code> puts many such also in the C++ main namespace. One way to do so is to use declarations such as</p>
<div class="example">
<pre class="example1"><code>using std::floor;</code></pre>
</div>
<p>but it is usually preferable to use explicit namespace prefixes in the code.</p>
<p>Examples seen in CRAN packages include</p>
<div class="example">
<pre class="example1"><code>abs acos atan calloc ceil div exp fabs floor fmod free log malloc memcpy
memset pow printf qsort round sin sprintf sqrt strcmp strcpy strerror
strlen strncmp strtol tan trunc</code></pre>
</div></li>
<li><p>Some C++ compilers refuse to compile constructs such as</p>
<div class="example">
<pre class="example1"><code>      if(ptr &gt; 0) { ....}</code></pre>
</div>
<p>which compares a pointer to the integer <code class="calibre2">0</code>. This could just use <code class="calibre2">if(ptr)</code> (pointer addresses cannot be negative) but if needed pointers can be tested against <code class="calibre2">nullptr</code> (C++11 and later) or <code class="calibre2">NULL</code>.</p>
<p>Note that although <code class="calibre2">nullptr</code> was only introduced in C++11, some compilers accept it in C++98 mode (but most do not).</p></li>
<li>Macros defined by the compiler/OS can cause problems. Identifiers starting with an underscore followed by an upper-case letter or another underscore are reserved for system macros and should not be used in portable code (including not as guards in C/C++ headers). Other macros, typically upper-case, may be defined by the compiler or system headers and can cause problems. The most common issue involves the names of the Intel CPU registers such as <code class="calibre2">CS</code>, <code class="calibre2">DS</code>, <code class="calibre2">ES</code>, <code class="calibre2">FS</code>, <code class="calibre2">GS</code> and <code class="calibre2">SS</code> (and more with longer abbreviations) defined on i586/x64 Solaris in &lt;sys/regset.h&gt; and often included indirectly by &lt;stdlib.h&gt; and other core headers. Further examples are <code class="calibre2">ERR</code>, <code class="calibre2">LITTLE_ENDIAN</code>, <code class="calibre2">zero</code> and <code class="calibre2">I</code> (which is defined in Solaris’ &lt;complex.h&gt; as a compiler intrinsic for the imaginary unit). Some of these can be avoided by defining <code class="calibre2">_POSIX_C_SOURCE</code> before including any system headers, but it is better to only use all-upper-case names which have a unique prefix such as the package name.</li>
<li><code class="calibre2">typedef</code>s in OS headers can conflict with those in the package: examples include <code class="calibre2">ulong</code> on several OSes and <code class="calibre2">index_t</code> and <code class="calibre2">single</code> on Solaris. (Note that these may conflict with other uses as identifiers, e.g. defining a C++ function called <code class="calibre2">single</code>.)</li>
<li><p>If you use OpenMP, check carefully that you have followed the advice in the subsection on <a href="R-exts_split_004.html#OpenMP-support">OpenMP support</a>. In particular, any use of OpenMP in C/C++ code will need to use</p>
<div class="example">
<pre class="example1"><code>#ifdef _OPENMP
# include &lt;omp.h&gt;
#endif</code></pre>
</div>
<p>Any use of OpenMP functions, e.g. <code class="calibre2">omp_set_num_threads</code> also needs to be conditioned.</p>
<p>And do not hardcode -lgomp: not only is that specific to the GCC family of compilers, using the correct linker flag often sets up the run-time path to the library.</p></li>
<li><p>Package authors commonly assume things are part of C99 when they are not: the most common example is POSIX function <code class="calibre2">strdup</code>. The most common C library on Linux, <code class="calibre2">glibc</code>, will hide the declarations of such extensions unless a ‘feature-test macro’ is defined <strong>before</strong> (almost) any system header is included. So for <code class="calibre2">strdup</code> you need</p>
<div class="example">
<pre class="example1"><code>#define _POSIX_C_SOURCE 200809L
...
#include &lt;string.h&gt;
...
strdup call(s)</code></pre>
</div>
<p>where the appropriate value can be found by <code class="calibre2">man strdup</code> on Linux. (Use of <code class="calibre2">strncasecmp</code> is similar.)</p>
<p>However, modes of <code class="calibre2">gcc</code> with ‘GNU EXTENSIONS’ (which are the default, either -std=gnu99 or -std=gnu11) declare enough macros to ensure that missing declarations are rarely seen.</p>
<p>This applies also to constants such as <code class="calibre2">M_PI</code> and <code class="calibre2">M_LN2</code>, which are part of the X/Open standard: to use these define <code class="calibre2">_XOPEN_SOURCE</code> before including any headers, or include the R header Rmath.h.</p></li>
<li><p>Similarly, package authors commonly assume things are part of C++ when they were introduced in C++11 if at all. Recent examples from CRAN packages include the C99/C++11 functions</p>
<div class="example">
<pre class="example1"><code>erf expm1 fmin fmax lgamma lround loglp round snprintf strcasecmp trunc</code></pre>
</div>
<p>(all of which are in the <code class="calibre2">std</code> namespace in C++11) and the POSIX functions <code class="calibre2">strdup</code> and <code class="calibre2">strncasecmp</code> and constants <code class="calibre2">M_PI</code> and <code class="calibre2">M_LN2</code> (see the previous item). R has long provided <code class="calibre2">fmax2</code>, <code class="calibre2">fmin2</code>, <code class="calibre2">fround</code>, <code class="calibre2">ftrunc</code>, <code class="calibre2">lgammafn</code> and many of the X/Open constants, declared in header Rmath.h. Uses of <code class="calibre2">erf</code> can be replaced by <code class="calibre2">pnorm</code> (see the R help page for the latter).</p></li>
<li>Using <code class="calibre2">alloca</code> portably is tricky: it is neither an ISO C nor a POSIX function. An adequately portable preamble is
<div class="example">
<pre class="example1"><code>#ifdef __GNUC__
/* Includes GCC, clang and Intel compilers */
# undef alloca
# define alloca(x) __builtin_alloca((x))
#elif defined(__sun) || defined(_AIX)
/* this is necessary (and sufficient) for Solaris 10 and AIX 6: */
# include &lt;alloca.h&gt;
#endif</code></pre>
</div></li>
</ul>
<p>Some additional information for C++ is available at <a href="http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Plummer.pdf" class="uri">http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Plummer.pdf</a> by Martyn Plummer.</p>
<hr />
<p><a href="" id="Binary-distribution"></a> <a href="" id="Binary-distribution-1"></a></p>
<h4 id="binary-distribution" class="subsection">1.6.5 Binary distribution</h4>
<p>If you want to distribute a binary version of a package on Windows or OS X, there are further checks you need to do to check it is portable: it is all too easy to depend on external software on your own machine that other users will not have.</p>
<p>For Windows, check what other DLLs your package’s DLL depends on (‘imports’ from in the DLL tools’ parlance). A convenient GUI-based tool to do so is ‘Dependency Walker’ (<a href="http://www.dependencywalker.com/" class="uri">http://www.dependencywalker.com/</a>) for both 32-bit and 64-bit DLLs – note that this will report as missing links to R’s own DLLs such as R.dll and Rblas.dll. For 32-bit DLLs only, the command-line tool <code class="calibre2">pedump.exe -i</code> (in Rtools*.exe) can be used, and for the brave, the <code class="calibre2">objdump</code> tool in the appropriate toolchain will also reveal what DLLs are imported from. If you use a toolchain other than one provided by the R developers or use your own makefiles, watch out in particular for dependencies on the toolchain’s runtime DLLs such as libgfortran, libstdc++ and libgcc_s.</p>
<p>For macOS, using <code class="calibre2">R CMD otool -L</code> on the package’s shared object(s) in the libs directory will show what they depend on: watch for any dependencies in /usr/local/lib or /usr/local/gfortran/lib, notably libgfortran.?.dylib and libquadmath.0.dylib.</p>
<p>Many people (including the CRAN package repository) will not accept source packages containing binary files as the latter are a security risk. If you want to distribute a source package which needs external software on Windows or macOS, options include</p>
<ul>
<li>To arrange for installation of the package to download the additional software from a URL, as e.g. package <a href="https://CRAN.R-project.org/package=Cairo"><strong>Cairo</strong></a> does.</li>
<li>(For CRAN.) To negotiate with Uwe Ligges to host the additional components on WinBuilder, and write a configure.win file to install them.</li>
</ul>
<p>Be aware that license requirements will need to be met so you may need to supply the sources for the additional components (and will if your package has a GPL-like license).</p>
<hr />
<p><a href="" id="Diagnostic-messages"></a> <a href="" id="Diagnostic-messages-1"></a></p>
<h3 id="diagnostic-messages" class="section">1.7 Diagnostic messages</h3>
<p>Diagnostic messages can be made available for translation, so it is important to write them in a consistent style. Using the tools described in the next section to extract all the messages can give a useful overview of your consistency (or lack of it). Some guidelines follow.</p>
<ul>
<li>Messages are sentence fragments, and not viewed in isolation. So it is conventional not to capitalize the first word and not to end with a period (or other punctuation).</li>
<li><p>Try not to split up messages into small pieces. In C error messages use a single format string containing all English words in the messages.</p>
<p>In R error messages do not construct a message with <code class="calibre2">paste</code> (such messages will not be translated) but <em>via</em> multiple arguments to <code class="calibre2">stop</code> or <code class="calibre2">warning</code>, or <em>via</em> <code class="calibre2">gettextf</code>.</p></li>
<li>Do not use colloquialisms such as “can’t” and “don’t”.</li>
<li><p>Conventionally single quotation marks are used for quotations such as</p>
<div class="example">
<pre class="example1"><code>&#39;ord&#39; must be a positive integer, at most the number of knots</code></pre>
</div>
<p>and double quotation marks when referring to an R character string or a class, such as</p>
<div class="example">
<pre class="example1"><code>&#39;format&#39; must be &quot;normal&quot; or &quot;short&quot; - using &quot;normal&quot;</code></pre>
</div>
<p>Since ASCII does not contain directional quotation marks, it is best to use ‘'’ and let the translator (including automatic translation) use directional quotations where available. The range of quotation styles is immense: unfortunately we cannot reproduce them in a portable <code class="calibre2">texinfo</code> document. But as a taster, some languages use ‘up’ and ‘down’ (comma) quotes rather than left or right quotes, and some use guillemets (and some use what Adobe calls ‘guillemotleft’ to start and others use it to end).</p>
<p>In R messages it is also possible to use <code class="calibre2">sQuote</code> or <code class="calibre2">dQuote</code> as in</p>
<div class="example">
<pre class="example1"><code>        stop(gettextf(&quot;object must be of class %s or %s&quot;,
                      dQuote(&quot;manova&quot;), dQuote(&quot;maov&quot;)),
             domain = NA)</code></pre>
</div></li>
<li><p>Occasionally messages need to be singular or plural (and in other languages there may be no such concept or several plural forms – Slovenian has four). So avoid constructions such as was once used in <code class="calibre2">library</code></p>
<div class="example">
<pre class="example1"><code>if((length(nopkgs) &gt; 0) &amp;&amp; !missing(lib.loc)) {
    if(length(nopkgs) &gt; 1)
        warning(&quot;libraries &quot;,
                paste(sQuote(nopkgs), collapse = &quot;, &quot;),
                &quot; contain no packages&quot;)
    else
        warning(&quot;library &quot;, paste(sQuote(nopkgs)),
                &quot; contains no package&quot;)
}</code></pre>
</div>
<p>and was replaced by</p>
<div class="example">
<pre class="example1"><code>if((length(nopkgs) &gt; 0) &amp;&amp; !missing(lib.loc)) {
    pkglist &lt;- paste(sQuote(nopkgs), collapse = &quot;, &quot;)
    msg &lt;- sprintf(ngettext(length(nopkgs),
                            &quot;library %s contains no packages&quot;,
                            &quot;libraries %s contain no packages&quot;,
                            domain = &quot;R-base&quot;),
                   pkglist)
    warning(msg, domain=NA)
}</code></pre>
</div>
<p>Note that it is much better to have complete clauses as here, since in another language one might need to say ‘There is no package in library %s’ or ‘There are no packages in libraries %s’.</p></li>
</ul>
<hr />
<p><a href="" id="Internationalization"></a> <a href="" id="Internationalization-1"></a></p>
<h3 id="internationalization" class="section">1.8 Internationalization</h3>
<p>There are mechanisms to translate the R- and C-level error and warning messages. There are only available if R is compiled with NLS support (which is requested by <code class="calibre2">configure</code> option --enable-nls, the default).</p>
<p>The procedures make use of <code class="calibre2">msgfmt</code> and <code class="calibre2">xgettext</code> which are part of GNU <code class="calibre2">gettext</code> and this will need to be installed: Windows users can find pre-compiled binaries at <a href="https://www.stats.ox.ac.uk/pub/Rtools/goodies/gettext-tools.zip" class="uri">https://www.stats.ox.ac.uk/pub/Rtools/goodies/gettext-tools.zip</a>.</p>
<hr />
<p><a href="" id="C_002dlevel-messages"></a> <a href="" id="C_002dlevel-messages-1"></a></p>
<h4 id="c-level-messages" class="subsection">1.8.1 C-level messages</h4>
<p>The process of enabling translations is</p>
<ul>
<li>In a header file that will be included in all the C (or C++ or Objective C/C++) files containing messages that should be translated, declare
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;  /* to include Rconfig.h */

#ifdef ENABLE_NLS
#include &lt;libintl.h&gt;
#define _(String) dgettext (&quot;pkg&quot;, String)
/* replace pkg as appropriate */
#else
#define _(String) (String)
#endif</code></pre>
</div></li>
<li><p>For each message that should be translated, wrap it in <code class="calibre2">_(...)</code>, for example</p>
<div class="example">
<pre class="example1"><code>error(_(&quot;&#39;ord&#39; must be a positive integer&quot;));</code></pre>
</div>
<p>If you want to use different messages for singular and plural forms, you need to add</p>
<div class="example">
<pre class="example1"><code>#ifndef ENABLE_NLS
#define dngettext(pkg, String, StringP, N) (N &gt; 1 ? StringP : String)
#endif</code></pre>
</div>
<p>and mark strings by</p>
<div class="example">
<pre class="example1"><code>dngettext(&quot;pkg&quot;, &lt;singular string&gt;, &lt;plural string&gt;, n)</code></pre>
</div></li>
<li>In the package’s src directory run
<div class="example">
<pre class="example1"><code>xgettext --keyword=_ -o pkg.pot *.c</code></pre>
</div></li>
</ul>
<p>The file src/pkg.pot is the template file, and conventionally this is shipped as po/pkg.pot.</p>
<hr />
<p><a href="" id="R-messages"></a> <a href="" id="R-messages-1"></a></p>
<h4 id="r-messages" class="subsection">1.8.2 R messages</h4>
<p>Mechanisms are also available to support the automatic translation of R <code class="calibre2">stop</code>, <code class="calibre2">warning</code> and <code class="calibre2">message</code> messages. They make use of message catalogs in the same way as C-level messages, but using domain <code class="calibre2">R-pkg</code> rather than <code class="calibre2">pkg</code>. Translation of character strings inside <code class="calibre2">stop</code>, <code class="calibre2">warning</code> and <code class="calibre2">message</code> calls is automatically enabled, as well as other messages enclosed in calls to <code class="calibre2">gettext</code> or <code class="calibre2">gettextf</code>. (To suppress this, use argument <code class="calibre2">domain=NA</code>.)</p>
<p>Tools to prepare the R-pkg.pot file are provided in package <strong>tools</strong>: <code class="calibre2">xgettext2pot</code> will prepare a file from all strings occurring inside <code class="calibre2">gettext</code>/<code class="calibre2">gettextf</code>, <code class="calibre2">stop</code>, <code class="calibre2">warning</code> and <code class="calibre2">message</code> calls. Some of these are likely to be spurious and so the file is likely to need manual editing. <code class="calibre2">xgettext</code> extracts the actual calls and so is more useful when tidying up error messages.</p>
<p>The R function <code class="calibre2">ngettext</code> provides an interface to the C function of the same name: see example in the previous section. It is safest to use <code class="calibre2">domain=&quot;R-pkg&quot;</code> explicitly in calls to <code class="calibre2">ngettext</code>, and necessary for earlier versions of R unless they are calls directly from a function in the package.</p>
<hr />
<p><a href="" id="Preparing-translations"></a> <a href="" id="Preparing-translations-1"></a></p>
<h4 id="preparing-translations" class="subsection">1.8.3 Preparing translations</h4>
<p>Once the template files have been created, translations can be made. Conventional translations have file extension .po and are placed in the po subdirectory of the package with a name that is either ‘ll.po’ or ‘R-ll.po’ for translations of the C and R messages respectively to language with code ‘ll’.</p>
<p>See ‘Localization of messages’ in ‘R Installation and Administration’, for details of language codes.</p>
<p>There is an R function, <code class="calibre2">update_pkg_po</code> in package <strong>tools</strong>, to automate much of the maintenance of message translations. See its help for what it does in detail.</p>
<p>If this is called on a package with no existing translations, it creates the directory pkgdir/po, creates a template file of R messages, pkgdir/po/R-pkg.pot, within it, creates the ‘en@quot’ translation and installs that. (The ‘en@quot’ pseudo-language interprets quotes in their directional forms in suitable (e.g. UTF-8) locales.)</p>
<p>If the package has C source files in its src directory that are marked for translation, use</p>
<div class="example">
<pre class="example1"><code>touch pkgdir/po/pkg.pot</code></pre>
</div>
<p>to create a dummy template file, then call <code class="calibre2">update_pkg_po</code> again (this can also be done before it is called for the first time).</p>
<p>When translations to new languages are added in the pkgdir/po directory, running the same command will check and then install the translations.</p>
<p>If the package sources are updated, the same command will update the template files, merge the changes into the translation .po files and then installed the updated translations. You will often see that merging marks translations as ‘fuzzy’ and this is reported in the coverage statistics. As fuzzy translations are <em>not</em> used, this is an indication that the translation files need human attention.</p>
<p>The merged translations are run through <code class="calibre2">tools::checkPofile</code> to check that C-style formats are used correctly: if not the mismatches are reported and the broken translations are not installed.</p>
<p>This function needs the GNU <code class="calibre2">gettext-tools</code> installed and on the path: see its help page.</p>
<p><a href="" id="index-CITATION-1"></a> <a href="" id="index-citation-1"></a></p>
<hr />
<p><a href="" id="CITATION-files"></a> <a href="" id="CITATION-files-1"></a></p>
<h3 id="citation-files" class="section">1.9 CITATION files</h3>
<p>An installed file named CITATION will be used by the <code class="calibre2">citation()</code> function. (It should be in the inst subdirectory of the package sources.)</p>
<p>The CITATION file is parsed as R code (in the package’s declared encoding, or in ASCII if none is declared). If no such file is present, <code class="calibre2">citation</code> auto-generates citation information from the package DESCRIPTION metadata, and an example of what that would look like as a CITATION file can be seen in recommended package <a href="https://CRAN.R-project.org/package=nlme"><strong>nlme</strong></a> (see below): recommended packages <a href="https://CRAN.R-project.org/package=boot"><strong>boot</strong></a>, <a href="https://CRAN.R-project.org/package=cluster"><strong>cluster</strong></a> and <a href="https://CRAN.R-project.org/package=mgcv"><strong>mgcv</strong></a> have further examples.</p>
<p>A CITATION file will contain calls to function <code class="calibre2">bibentry</code>.</p>
<p>Here is that for <a href="https://CRAN.R-project.org/package=nlme"><strong>nlme</strong></a>:</p>
<div class="example">
<pre class="example1"><code>year &lt;- sub(&quot;-.*&quot;, &quot;&quot;, meta$Date)
note &lt;- sprintf(&quot;R package version %s&quot;, meta$Version)

bibentry(bibtype = &quot;Manual&quot;,
         title = &quot;{nlme}: Linear and Nonlinear Mixed Effects Models&quot;,
         author = c(person(&quot;Jose&quot;, &quot;Pinheiro&quot;),
                    person(&quot;Douglas&quot;, &quot;Bates&quot;),
                    person(&quot;Saikat&quot;, &quot;DebRoy&quot;),
                    person(&quot;Deepayan&quot;, &quot;Sarkar&quot;),
                    person(&quot;R Core Team&quot;)),
         year = year,
         note = note,
         url = &quot;https://CRAN.R-project.org/package=nlme&quot;)</code></pre>
</div>
<p>Note the way that information that may need to be updated is picked up from object <code class="calibre2">meta</code>, a parsed version of the DESCRIPTION file – it is tempting to hardcode such information, but it normally then gets outdated. See <code class="calibre2">?bibentry</code> for further details of the information which can be provided.</p>
<p>In case a bibentry contains LaTeX markup (e.g., for accented characters or mathematical symbols), it may be necessary to provide a text representation to be used for printing via the <code class="calibre2">textVersion</code> argument to <code class="calibre2">bibentry</code>. E.g., earlier versions of <a href="https://CRAN.R-project.org/package=nlme"><strong>nlme</strong></a> additionally used</p>
<div class="example">
<pre class="example1"><code>         textVersion =
         paste0(&quot;Jose Pinheiro, Douglas Bates, Saikat DebRoy,&quot;,
                &quot;Deepayan Sarkar and the R Core Team (&quot;,
                year,
                &quot;). nlme: Linear and Nonlinear Mixed Effects Models. &quot;,
                note, &quot;.&quot;)</code></pre>
</div>
<p>The CITATION file should itself produce no output when <code class="calibre2">source</code>-d.</p>
<p>It is desirable (and essential for CRAN) that the CITATION file does not contain calls to functions such as <code class="calibre2">packageDescription</code> which assume the package is installed in a library tree on the package search path.</p>
<hr />
<p><a href="" id="Package-types"></a> <a href="" id="Package-types-1"></a></p>
<h3 id="package-types" class="section">1.10 Package types</h3>
<p>The DESCRIPTION file has an optional field <code class="calibre2">Type</code> which if missing is assumed to be ‘Package’, the sort of extension discussed so far in this chapter. Currently one other type is recognized; there used also to be a ‘Translation’ type.</p>
<hr />
<p><a href="" id="Frontend"></a> <a href="" id="Frontend-1"></a></p>
<h4 id="frontend" class="subsection">1.10.1 Frontend</h4>
<p>This is a rather general mechanism, designed for adding new front-ends such as the former <strong>gnomeGUI</strong> package (see the Archive area on CRAN). If a configure file is found in the top-level directory of the package it is executed, and then if a Makefile is found (often generated by configure), <code class="calibre2">make</code> is called. If <code class="calibre2">R CMD INSTALL --clean</code> is used <code class="calibre2">make clean</code> is called. No other action is taken.</p>
<p><code class="calibre2">R CMD build</code> can package up this type of extension, but <code class="calibre2">R CMD check</code> will check the type and skip it.</p>
<p>Many packages of this type need write permission for the R installation directory.</p>
<hr />
<p><a href="" id="Services"></a> <a href="" id="Services-1"></a></p>
<h3 id="services" class="section">1.11 Services</h3>
<p>Several members of the R project have set up services to assist those writing R packages, particularly those intended for public distribution.</p>
<p><a href="https://win-builder.r-project.org">win-builder.r-project.org</a> offers the automated preparation of (32/64-bit) Windows binaries from well-tested source packages.</p>
<p>R-Forge (<a href="https://R-Forge.r-project.org">R-Forge.r-project.org</a>) and RForge (<a href="https://www.rforge.net">www.rforge.net</a>) are similar services with similar names. Both provide source-code management through SVN, daily building and checking, mailing lists and a repository that can be accessed <em>via</em> <code class="calibre2">install.packages</code> (they can be selected by <code class="calibre2">setRepositories</code> and the GUI menus that use it). Package developers have the opportunity to present their work on the basis of project websites or news announcements. Mailing lists, forums or wikis provide useRs with convenient instruments for discussions and for exchanging information between developers and/or interested useRs.</p>
<hr />
<p><a href="" id="Writing-R-documentation-files"></a> <a href="" id="Writing-R-documentation-files-1"></a></p>
<div id="calibre_pb_6" class="calibre6">

</div>

<!--chapter:end:05-R-exts.Rmd-->

#  Writing R documentation files
<p><a href="" id="index-Documentation_002c-writing"></a></p>
<hr />
<p><a href="" id="Rd-format"></a> <a href="" id="Rd-format-1"></a></p>
<h3 id="rd-format" class="section">2.1 Rd format</h3>
<p>R objects are documented in files written in “R documentation” (Rd) format, a simple markup language much of which closely resembles (La)TeX, which can be processed into a variety of formats, including LaTeX, HTML and plain text. The translation is carried out by functions in the <strong>tools</strong> package called by the script <code class="calibre2">Rdconv</code> in R_HOME/bin and by the installation scripts for packages.</p>
<p>The R distribution contains more than 1300 such files which can be found in the src/library/pkg/man directories of the R source tree, where pkg stands for one of the standard packages which are included in the R distribution.</p>
<p>As an example, let us look at a simplified version of src/library/base/man/load.Rd which documents the R function <code class="calibre2">load</code>.</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="smallexample"><code>% File src/library/base/man/load.Rd
\name{load}
\alias{load}
\title{Reload Saved Datasets}
\description{
  Reload the datasets written to a file with the function
  \code{save}.
}
\usage{
load(file, envir = parent.frame())
}
\arguments{
  \item{file}{a connection or a character string giving the
    name of the file to load.}
  \item{envir}{the environment where the data should be
    loaded.}
}
\seealso{
  \code{\link{save}}.
}
\examples{
## save all data
save(list = ls(), file= &quot;all.RData&quot;)

## restore the saved values to the current environment
load(&quot;all.RData&quot;)

## restore the saved values to the workspace
load(&quot;all.RData&quot;, .GlobalEnv)
}
\keyword{file}</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>An Rd file consists of three parts. The header gives basic information about the name of the file, the topics documented, a title, a short textual description and R usage information for the objects documented. The body gives further information (for example, on the function’s arguments and return value, as in the above example). Finally, there is an optional footer with keyword information. The header is mandatory.</p>
<p>Information is given within a series of <em>sections</em> with standard names (and user-defined sections are also allowed). Unless otherwise specified<a href="R-exts_split_014.html#FOOT91" id="DOCF91"><sup>91</sup></a> these should occur only once in an Rd file (in any order), and the processing software will retain only the first occurrence of a standard section in the file, with a warning.</p>
<p>See <a href="https://developer.r-project.org/Rds.html">“Guidelines for Rd files”</a> for guidelines for writing documentation in Rd format which should be useful for package writers. <a href="" id="index-prompt"></a> The R generic function <code class="calibre2">prompt</code> is used to construct a bare-bones Rd file ready for manual editing. Methods are defined for documenting functions (which fill in the proper function and argument names) and data frames. There are also functions <code class="calibre2">promptData</code>, <code class="calibre2">promptPackage</code>, <code class="calibre2">promptClass</code>, and <code class="calibre2">promptMethods</code> for other types of Rd file.</p>
<p>The general syntax of Rd files is summarized below. For a detailed technical discussion of current Rd syntax, see <a href="https://developer.r-project.org/parseRd.pdf">“Parsing Rd files”</a>.</p>
<p>Rd files consist of four types of text input. The most common is LaTeX-like, with the backslash used as a prefix on markup (e.g. <code class="calibre2">\alias</code>), and braces used to indicate arguments (e.g. <code class="calibre2">{load}</code>). The least common type of text is ‘verbatim’ text, where no markup other than the comment marker (<code class="calibre2">%</code>) is processed. There is also a rare variant of ‘verbatim’ text (used in <code class="calibre2">\eqn</code>, <code class="calibre2">\deqn</code>, <code class="calibre2">\figure</code>, and <code class="calibre2">\newcommand</code>) where comment markers need not be escaped. The final type is R-like, intended for R code, but allowing some embedded macros. Quoted strings within R-like text are handled specially: regular character escapes such as <code class="calibre2">\n</code> may be entered as-is. Only markup starting with <code class="calibre2">\l</code> (e.g. <code class="calibre2">\link</code>) or <code class="calibre2">\v</code> (e.g. <code class="calibre2">\var</code>) will be recognized within quoted strings. The rarely used vertical tab <code class="calibre2">\v</code> must be entered as <code class="calibre2">\\v</code>.</p>
<p>Each macro defines the input type for its argument. For example, the file initially uses LaTeX-like syntax, and this is also used in the <code class="calibre2">\description</code> section, but the <code class="calibre2">\usage</code> section uses R-like syntax, and the <code class="calibre2">\alias</code> macro uses ‘verbatim’ syntax. Comments run from a percent symbol <code class="calibre2">%</code> to the end of the line in all types of text except the rare ‘verbatim’ variant (as on the first line of the <code class="calibre2">load</code> example).</p>
<p>Because backslashes, braces and percent symbols have special meaning, to enter them into text sometimes requires escapes using a backslash. In general balanced braces do not need to be escaped, but percent symbols always do, except in the ‘verbatim’ variant. For the complete list of macros and rules for escapes, see <a href="https://developer.r-project.org/parseRd.pdf">“Parsing Rd files”</a>.</p>
<hr />
<p><a href="" id="Documenting-functions"></a> <a href="" id="Documenting-functions-1"></a></p>
<h4 id="documenting-functions" class="subsection">2.1.1 Documenting functions</h4>
<p>The basic markup commands used for documenting R objects (in particular, functions) are given in this subsection.</p>
<dl>
<dt><code class="calibre2">\name{name}</code></dt>
<dd><p><a href="" id="index-_005cname"></a></p>
<p>name typically<a href="R-exts_split_014.html#FOOT92" id="DOCF92"><sup>92</sup></a> is the basename of the Rd file containing the documentation. It is the “name” of the Rd object represented by the file and has to be unique in a package. To avoid problems with indexing the package manual, it may not contain ‘!’ ‘|’ nor ‘@’, and to avoid possible problems with the HTML help system it should not contain ‘/’ nor a space. (LaTeX special characters are allowed, but may not be collated correctly in the index.) There can only be one <code class="calibre2">\name</code> entry in a file, and it must not contain any markup. Entries in the package manual will be in alphabetic<a href="R-exts_split_014.html#FOOT93" id="DOCF93"><sup>93</sup></a> order of the <code class="calibre2">\name</code> entries.</p>
</dd>
<dt><code class="calibre2">\alias{topic}</code></dt>
<dd><p><a href="" id="index-_005calias"></a></p>
<p>The <code class="calibre2">\alias</code> sections specify all “topics” the file documents. This information is collected into index data bases for lookup by the on-line (plain text and HTML) help systems. The topic can contain spaces, but (for historical reasons) leading and trailing spaces will be stripped. Percent and left brace need to be escaped by a backslash.</p>
<p>There may be several <code class="calibre2">\alias</code> entries. Quite often it is convenient to document several R objects in one file. For example, file Normal.Rd documents the density, distribution function, quantile function and generation of random variates for the normal distribution, and hence starts with</p>
<div class="example">
<pre class="example1"><code>\name{Normal}
\alias{Normal}
\alias{dnorm}
\alias{pnorm}
\alias{qnorm}
\alias{rnorm}</code></pre>
</div>
<p>Also, it is often convenient to have several different ways to refer to an R object, and an <code class="calibre2">\alias</code> does not need to be the name of an object.</p>
<p>Note that the <code class="calibre2">\name</code> is not necessarily a topic documented, and if so desired it needs to have an explicit <code class="calibre2">\alias</code> entry (as in this example).</p>
</dd>
<dt><code class="calibre2">\title{Title}</code></dt>
<dd><p><a href="" id="index-_005ctitle"></a></p>
<p>Title information for the Rd file. This should be capitalized and not end in a period; try to limit its length to at most 65 characters for widest compatibility.</p>
<p>Markup is supported in the text, but use of characters other than English text and punctuation (e.g., ‘&lt;’) may limit portability.</p>
<p>There must be one (and only one) <code class="calibre2">\title</code> section in a help file.</p>
</dd>
<dt><code class="calibre2">\description{…}</code></dt>
<dd><p><a href="" id="index-_005cdescription"></a></p>
<p>A short description of what the function(s) do(es) (one paragraph, a few lines only). (If a description is too long and cannot easily be shortened, the file probably tries to document too much at once.) This is mandatory except for package-overview files.</p>
</dd>
<dt><code class="calibre2">\usage{fun(arg1, arg2, …)}</code></dt>
<dd><p><a href="" id="index-_005cusage"></a></p>
<p>One or more lines showing the synopsis of the function(s) and variables documented in the file. These are set in typewriter font. This is an R-like command.</p>
<p>The usage information specified should match the function definition <em>exactly</em> (such that automatic checking for consistency between code and documentation is possible).</p>
<p>It is no longer advisable to use <code class="calibre2">\synopsis</code> for the actual synopsis and show modified synopses in the <code class="calibre2">\usage</code>. Support for <code class="calibre2">\synopsis</code> will be removed in \R 3.1.0. To indicate that a function can be used in several different ways, depending on the named arguments specified, use section <code class="calibre2">\details</code>. E.g., abline.Rd contains</p>
<div class="example">
<pre class="example1"><code>\details{
  Typical usages are
\preformatted{abline(a, b, untf = FALSE, \dots)
......
}</code></pre>
</div>
<p><a href="" id="index-_005cmethod"></a></p>
<p>Use <code class="calibre2">\method{generic}{class}</code> to indicate the name of an S3 method for the generic function generic for objects inheriting from class <code class="calibre2">&quot;class&quot;</code>. In the printed versions, this will come out as generic (reflecting the understanding that methods should not be invoked directly but <em>via</em> method dispatch), but <code class="calibre2">codoc()</code> and other QC tools always have access to the full name.</p>
<p>For example, print.ts.Rd contains</p>
<div class="example">
<pre class="example1"><code>\usage{
\method{print}{ts}(x, calendar, \dots)
}</code></pre>
</div>
<p>which will print as</p>
<div class="example">
<pre class="example1"><code>Usage:

     ## S3 method for class ‘ts’:
     print(x, calendar, ...)</code></pre>
</div>
<p>Usage for replacement functions should be given in the style of <code class="calibre2">dim(x) &lt;- value</code> rather than explicitly indicating the name of the replacement function (<code class="calibre2">&quot;dim&lt;-&quot;</code> in the above). Similarly, one can use <code class="calibre2">\method{generic}{class}(arglist) &lt;- value</code> to indicate the usage of an S3 replacement method for the generic replacement function <code class="calibre2">&quot;generic&lt;-&quot;</code> for objects inheriting from class <code class="calibre2">&quot;class&quot;</code>.</p>
<p>Usage for S3 methods for extracting or replacing parts of an object, S3 methods for members of the Ops group, and S3 methods for user-defined (binary) infix operators (‘%xxx%’) follows the above rules, using the appropriate function names. E.g., Extract.factor.Rd contains</p>
<div class="example">
<pre class="example1"><code>\usage{
\method{[}{factor}(x, \dots, drop = FALSE)
\method{[[}{factor}(x, \dots)
\method{[}{factor}(x, \dots) &lt;- value
}</code></pre>
</div>
<p>which will print as</p>
<div class="example">
<pre class="example1"><code>Usage:

     ## S3 method for class ‘factor’:
     x[..., drop = FALSE]
     ## S3 method for class ‘factor’:
     x[[...]]
     ## S3 replacement method for class ‘factor’:
     x[...] &lt;- value</code></pre>
</div>
<p><a href="" id="index-_005cS3method"></a></p>
<p><code class="calibre2">\S3method</code> is accepted as an alternative to <code class="calibre2">\method</code>.</p>
</dd>
<dt><code class="calibre2">\arguments{…}</code></dt>
<dd><p><a href="" id="index-_005carguments"></a></p>
<p>Description of the function’s arguments, using an entry of the form</p>
<div class="example">
<pre class="example1"><code>\item{arg_i}{Description of arg_i.}</code></pre>
</div>
<p>for each element of the argument list. (Note that there is no whitespace between the three parts of the entry.) There may be optional text outside the <code class="calibre2">\item</code> entries, for example to give general information about groups of parameters.</p>
</dd>
<dt><code class="calibre2">\details{…}</code></dt>
<dd><p><a href="" id="index-_005cdetails"></a></p>
<p>A detailed if possible precise description of the functionality provided, extending the basic information in the <code class="calibre2">\description</code> slot.</p>
</dd>
<dt><code class="calibre2">\value{…}</code></dt>
<dd><p><a href="" id="index-_005cvalue"></a></p>
<p>Description of the function’s return value.</p>
<p>If a list with multiple values is returned, you can use entries of the form</p>
<div class="example">
<pre class="example1"><code>\item{comp_i}{Description of comp_i.}</code></pre>
</div>
<p>for each component of the list returned. Optional text may precede<a href="R-exts_split_014.html#FOOT94" id="DOCF94"><sup>94</sup></a> this list (see for example the help for <code class="calibre2">rle</code>). Note that <code class="calibre2">\value</code> is implicitly a <code class="calibre2">\describe</code> environment, so that environment should not be used for listing components, just individual <code class="calibre2">\item{}{}</code> entries.</p>
</dd>
<dt><code class="calibre2">\references{…}</code></dt>
<dd><p><a href="" id="index-_005creferences"></a></p>
<p>A section with references to the literature. Use <code class="calibre2">\url{}</code> or <code class="calibre2">\href{}{}</code> for web pointers.</p>
</dd>
<dt><code class="calibre2">\note{...}</code></dt>
<dd><p><a href="" id="index-_005cnote"></a></p>
<p>Use this for a special note you want to have pointed out. Multiple <code class="calibre2">\note</code> sections are allowed, but might be confusing to the end users.</p>
<p>For example, pie.Rd contains</p>
<div class="example">
<pre class="example1"><code>\note{
  Pie charts are a very bad way of displaying information.
  The eye is good at judging linear measures and bad at
  judging relative areas.
  ......
}</code></pre>
</div>
</dd>
<dt><code class="calibre2">\author{…}</code></dt>
<dd><p><a href="" id="index-_005cauthor"></a></p>
<p>Information about the author(s) of the Rd file. Use <code class="calibre2">\email{}</code> without extra delimiters (such as ‘( )’ or ‘&lt; &gt;’) to specify email addresses, or <code class="calibre2">\url{}</code> or <code class="calibre2">\href{}{}</code> for web pointers.</p>
</dd>
<dt><code class="calibre2">\seealso{…}</code></dt>
<dd><p><a href="" id="index-_005cseealso"></a></p>
<p>Pointers to related R objects, using <code class="calibre2">\code{\link{...}}</code> to refer to them (<code class="calibre2">\code</code> is the correct markup for R object names, and <code class="calibre2">\link</code> produces hyperlinks in output formats which support this. See <a href="#Marking-text">Marking text</a>, and <a href="#Cross_002dreferences">Cross-references</a>).</p>
<p><a href="" id="index-_005cexamples"></a></p>
</dd>
<dt><code class="calibre2">\examples{…}</code></dt>
<dd><p>Examples of how to use the function. Code in this section is set in typewriter font without reformatting and is run by <code class="calibre2">example()</code> unless marked otherwise (see below).</p>
<p>Examples are not only useful for documentation purposes, but also provide test code used for diagnostic checking of R code. By default, text inside <code class="calibre2">\examples{}</code> will be displayed in the output of the help page and run by <code class="calibre2">example()</code> and by <code class="calibre2">R CMD check</code>. You can use <code class="calibre2">\dontrun{}</code> <a href="" id="index-_005cdontrun"></a> for text that should only be shown, but not run, and <code class="calibre2">\dontshow{}</code> <a href="" id="index-_005cdontshow"></a> for extra commands for testing that should not be shown to users, but will be run by <code class="calibre2">example()</code>. (Previously this was called <code class="calibre2">\testonly</code>, and that is still accepted.)</p>
<p>Text inside <code class="calibre2">\dontrun{}</code> is ‘verbatim’, but the other parts of the <code class="calibre2">\examples</code> section are R-like text.</p>
<p>For example,</p>
<div class="example">
<pre class="example1"><code>x &lt;- runif(10)       # Shown and run.
\dontrun{plot(x)}    # Only shown.
\dontshow{log(x)}    # Only run.</code></pre>
</div>
<p>Thus, example code not included in <code class="calibre2">\dontrun</code> must be executable! In addition, it should not use any system-specific features or require special facilities (such as Internet access or write permission to specific directories). Text included in <code class="calibre2">\dontrun</code> is indicated by comments in the processed help files: it need not be valid R code but the escapes must still be used for <code class="calibre2">%</code>, <code class="calibre2">\</code> and unpaired braces as in other ‘verbatim’ text.</p>
<p>Example code must be capable of being run by <code class="calibre2">example</code>, which uses <code class="calibre2">source</code>. This means that it should not access stdin, e.g. to <code class="calibre2">scan()</code> data from the example file.</p>
<p>Data needed for making the examples executable can be obtained by random number generation (for example, <code class="calibre2">x &lt;- rnorm(100)</code>), or by using standard data sets listed by <code class="calibre2">data()</code> (see <code class="calibre2">?data</code> for more info).</p>
<p>Finally, there is <code class="calibre2">\donttest</code>, used (at the beginning of a separate line) to mark code that should be run by <code class="calibre2">example()</code> but not by <code class="calibre2">R CMD check</code> (by default: the option --run-donttest can be used). This should be needed only occasionally but can be used for code which might fail in circumstances that are hard to test for, for example in some locales. (Use e.g. <code class="calibre2">capabilities()</code> or <code class="calibre2">nzchar(Sys.which(&quot;someprogram&quot;))</code> to test for features needed in the examples wherever possible, and you can also use <code class="calibre2">try()</code> or <code class="calibre2">tryCatch()</code>. Use <code class="calibre2">interactive()</code> to condition examples which need someone to interact with.) Note that code included in <code class="calibre2">\donttest</code> must be correct R code, and any packages used should be declared in the DESCRIPTION file. It is good practice to include a comment in the <code class="calibre2">\donttest</code> section explaining why it is needed.</p>
<p>As from R 3.4.0, output from code between comments</p>
<div class="example">
<pre class="example1"><code>## IGNORE_RDIFF_BEGIN
## IGNORE_RDIFF_END</code></pre>
</div>
<p>is ignored when comparing check output to reference output (a -Ex.Rout.save file).</p>
<p><a href="" id="index-_005ckeyword"></a></p>
</dd>
<dt><code class="calibre2">\keyword{key}</code></dt>
<dd><p>There can be zero or more <code class="calibre2">\keyword</code> sections per file. Each <code class="calibre2">\keyword</code> section should specify a single keyword, preferably one of the standard keywords as listed in file KEYWORDS in the R documentation directory (default R_HOME/doc). Use e.g. <code class="calibre2">RShowDoc(&quot;KEYWORDS&quot;)</code> to inspect the standard keywords from within R. There can be more than one <code class="calibre2">\keyword</code> entry if the R object being documented falls into more than one category, or none.</p>
<p>Do strongly consider using <code class="calibre2">\concept</code> (see <a href="#Indices">Indices</a>) instead of <code class="calibre2">\keyword</code> if you are about to use more than very few non-standard keywords.</p>
<p>The special keyword ‘internal’ marks a page of internal objects that are not part of the package’s API. If the help page for object <code class="calibre2">foo</code> has keyword ‘internal’, then <code class="calibre2">help(foo)</code> gives this help page, but <code class="calibre2">foo</code> is excluded from several object indices, including the alphabetical list of objects in the HTML help system.</p>
<p><code class="calibre2">help.search()</code> can search by keyword, including user-defined values: however the ‘Search Engine &amp; Keywords’ HTML page accessed <em>via</em> <code class="calibre2">help.start()</code> provides single-click access only to a pre-defined list of keywords.</p>
</dd>
</dl>
<hr />
<p><a href="" id="Documenting-data-sets"></a> <a href="" id="Documenting-data-sets-1"></a></p>
<h4 id="documenting-data-sets" class="subsection">2.1.2 Documenting data sets</h4>
<p>The structure of Rd files which document R data sets is slightly different. Sections such as <code class="calibre2">\arguments</code> and <code class="calibre2">\value</code> are not needed but the format and source of the data should be explained.</p>
<p>As an example, let us look at src/library/datasets/man/rivers.Rd which documents the standard R data set <code class="calibre2">rivers</code>.</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="smallexample"><code>\name{rivers}
\docType{data}
\alias{rivers}
\title{Lengths of Major North American Rivers}
\description{
  This data set gives the lengths (in miles) of 141 \dQuote{major}
  rivers in North America, as compiled by the US Geological
  Survey.
}
\usage{rivers}
\format{A vector containing 141 observations.}
\source{World Almanac and Book of Facts, 1975, page 406.}
\references{
  McNeil, D. R. (1977) \emph{Interactive Data Analysis}.
  New York: Wiley.
}
\keyword{datasets}</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>This uses the following additional markup commands.</p>
<dl>
<dt><code class="calibre2">\docType{…}</code></dt>
<dd><p>Indicates the “type” of the documentation object. Always ‘data’ for data sets, and ‘package’ for pkg-package.Rd overview files. Documentation for S4 methods and classes uses ‘methods’ (from <code class="calibre2">promptMethods()</code>) and ‘class’ (from <code class="calibre2">promptClass()</code>).</p>
</dd>
<dt><code class="calibre2">\format{…}</code></dt>
<dd><p><a href="" id="index-_005cformat"></a></p>
<p>A description of the format of the data set (as a vector, matrix, data frame, time series, …). For matrices and data frames this should give a description of each column, preferably as a list or table. See <a href="#Lists-and-tables">Lists and tables</a>, for more information.</p>
</dd>
<dt><code class="calibre2">\source{…}</code></dt>
<dd><p><a href="" id="index-_005csource"></a></p>
<p>Details of the original source (a reference or URL, see <a href="R-exts_split_004.html#Specifying-URLs">Specifying URLs</a>). In addition, section <code class="calibre2">\references</code> could give secondary sources and usages.</p>
</dd>
</dl>
<p>Note also that when documenting data set bar,</p>
<ul>
<li>The <code class="calibre2">\usage</code> entry is always <code class="calibre2">bar</code> or (for packages which do not use lazy-loading of data) <code class="calibre2">data(bar)</code>. (In particular, only document a <em>single</em> data object per Rd file.)</li>
<li>The <code class="calibre2">\keyword</code> entry should always be ‘datasets’.</li>
</ul>
<p>If <code class="calibre2">bar</code> is a data frame, documenting it as a data set can be initiated <em>via</em> <code class="calibre2">prompt(bar)</code>. Otherwise, the <code class="calibre2">promptData</code> function may be used.</p>
<hr />
<p><a href="" id="Documenting-S4-classes-and-methods"></a> <a href="" id="Documenting-S4-classes-and-methods-1"></a></p>
<h4 id="documenting-s4-classes-and-methods" class="subsection">2.1.3 Documenting S4 classes and methods</h4>
<p>There are special ways to use the ‘?’ operator, namely ‘class?topic’ and ‘methods?topic’, to access documentation for S4 classes and methods, respectively. This mechanism depends on conventions for the topic names used in <code class="calibre2">\alias</code> entries. The topic names for S4 classes and methods respectively are of the form</p>
<div class="example">
<pre class="example1"><code>class-class
generic,signature_list-method</code></pre>
</div>
<p>where signature_list contains the names of the classes in the signature of the method (without quotes) separated by ‘,’ (without whitespace), with ‘ANY’ used for arguments without an explicit specification. E.g., ‘genericFunction-class’ is the topic name for documentation for the S4 class <code class="calibre2">&quot;genericFunction&quot;</code>, and ‘coerce,ANY,NULL-method’ is the topic name for documentation for the S4 method for <code class="calibre2">coerce</code> for signature <code class="calibre2">c(&quot;ANY&quot;, &quot;NULL&quot;)</code>.</p>
<p>Skeletons of documentation for S4 classes and methods can be generated by using the functions <code class="calibre2">promptClass()</code> and <code class="calibre2">promptMethods()</code> from package <strong>methods</strong>. If it is necessary or desired to provide an explicit function declaration (in a <code class="calibre2">\usage</code> section) for an S4 method (e.g., if it has “surprising arguments” to be mentioned explicitly), one can use the special markup</p>
<div class="example">
<pre class="example1"><code>\S4method{generic}{signature_list}(argument_list)</code></pre>
</div>
<p>(e.g., ‘\S4method{coerce}{ANY,NULL}(from, to)’).</p>
<p>To make full use of the potential of the on-line documentation system, all user-visible S4 classes and methods in a package should at least have a suitable <code class="calibre2">\alias</code> entry in one of the package’s Rd files. If a package has methods for a function defined originally somewhere else, and does not change the underlying default method for the function, the package is responsible for documenting the methods it creates, but not for the function itself or the default method.</p>
<p>An S4 replacement method is documented in the same way as an S3 one: see the description of <code class="calibre2">\method</code> in <a href="#Documenting-functions">Documenting functions</a>.</p>
<p>See help(&quot;Documentation&quot;, package = &quot;methods&quot;) for more information on using and creating on-line documentation for S4 classes and methods.</p>
<hr />
<p><a href="" id="Documenting-packages"></a> <a href="" id="Documenting-packages-1"></a></p>
<h4 id="documenting-packages" class="subsection">2.1.4 Documenting packages</h4>
<p>Packages may have an overview help page with an <code class="calibre2">\alias</code> <code class="calibre2">pkgname-package</code>, e.g. ‘utils-package’ for the <strong>utils</strong> package, when <code class="calibre2">package?pkgname</code> will open that help page. If a topic named <code class="calibre2">pkgname</code> does not exist in another Rd file, it is helpful to use this as an additional <code class="calibre2">\alias</code>.</p>
<p>Skeletons of documentation for a package can be generated using the function <code class="calibre2">promptPackage()</code>. If the <code class="calibre2">final = LIBS</code> argument is used, then the Rd file will be generated in final form, containing the information that would be produced up to <code class="calibre2">library(help = pkgname)</code>. Otherwise (the default) comments will be inserted giving suggestions for content.</p>
<p>Apart from the mandatory <code class="calibre2">\name</code> and <code class="calibre2">\title</code> and the <code class="calibre2">pkgname-package</code> alias, the only requirement for the package overview page is that it include a <code class="calibre2">\docType{package}</code> statement. All other content is optional. We suggest that it should be a short overview, to give a reader unfamiliar with the package enough information to get started. More extensive documentation is better placed into a package vignette (see <a href="R-exts_split_004.html#Writing-package-vignettes">Writing package vignettes</a>) and referenced from this page, or into individual man pages for the functions, datasets, or classes.</p>
<hr />
<p><a href="" id="Sectioning"></a> <a href="" id="Sectioning-1"></a></p>
<h3 id="sectioning" class="section">2.2 Sectioning</h3>
<p>To begin a new paragraph or leave a blank line in an example, just insert an empty line (as in (La)TeX). To break a line, use <code class="calibre2">\cr</code>. <a href="" id="index-_005ccr"></a></p>
<p>In addition to the predefined sections (such as <code class="calibre2">\description{}</code>, <code class="calibre2">\value{}</code>, etc.), you can “define” arbitrary ones by <code class="calibre2">\section{section_title}{…}</code>. <a href="" id="index-_005csection"></a> For example</p>
<div class="example">
<pre class="example1"><code>\section{Warning}{
  You must not call this function unless …
}</code></pre>
</div>
<p>For consistency with the pre-assigned sections, the section name (the first argument to <code class="calibre2">\section</code>) should be capitalized (but not all upper case). Whitespace between the first and second braced expressions is not allowed. Markup (e.g. <code class="calibre2">\code</code>) within the section title may cause problems with the latex conversion (depending on the version of macro packages such as ‘hyperref’) and so should be avoided.</p>
<p>The <code class="calibre2">\subsection</code> macro takes arguments in the same format as <code class="calibre2">\section</code>, but is used within a section, so it may be used to nest subsections within sections or other subsections. There is no predefined limit on the nesting level, but formatting is not designed for more than 3 levels (i.e. subsections within subsections within sections).</p>
<p>Note that additional named sections are always inserted at a fixed position in the output (before <code class="calibre2">\note</code>, <code class="calibre2">\seealso</code> and the examples), no matter where they appear in the input (but in the same order amongst themselves as in the input).</p>
<hr />
<p><a href="" id="Marking-text"></a> <a href="" id="Marking-text-1"></a></p>
<h3 id="marking-text" class="section">2.3 Marking text</h3>
<p><a href="" id="index-Marking-text-in-documentation"></a></p>
<p>The following logical markup commands are available for emphasizing or quoting text.</p>
<dl>
<dt><code class="calibre2">\emph{text}</code></dt>
<dd><a href="" id="index-_005cemph"></a>
</dd>
<dt><code class="calibre2">\strong{text}</code></dt>
<dd><p><a href="" id="index-_005cstrong"></a></p>
<p>Emphasize text using <em>italic</em> and <strong>bold</strong> font if possible; <code class="calibre2">\strong</code> is regarded as stronger (more emphatic).</p>
</dd>
<dt><code class="calibre2">\bold{text}</code></dt>
<dd><p><a href="" id="index-_005cbold"></a></p>
<p>Set text in <strong>bold</strong> font where possible.</p>
</dd>
<dt><code class="calibre2">\sQuote{text}</code></dt>
<dd><a href="" id="index-_005csQuote"></a>
</dd>
<dt><code class="calibre2">\dQuote{text}</code></dt>
<dd><p><a href="" id="index-_005cdQuote"></a></p>
<p>Portably single or double quote text (without hard-wiring the characters used for quotation marks).</p>
</dd>
</dl>
<p>Each of the above commands takes LaTeX-like input, so other macros may be used within text.</p>
<p>The following logical markup commands are available for indicating specific kinds of text. Except as noted, these take ‘verbatim’ text input, and so other macros may not be used within them. Some characters will need to be escaped (see <a href="#Insertions">Insertions</a>).</p>
<dl>
<dt><code class="calibre2">\code{text}</code></dt>
<dd><p><a href="" id="index-_005ccode"></a></p>
<p>Indicate text that is a literal example of a piece of an R program, e.g., a fragment of R code or the name of an R object. Text is entered in R-like syntax, and displayed using <code class="calibre2">typewriter</code> font where possible. Macros <code class="calibre2">\var</code> and <code class="calibre2">\link</code> are interpreted within text.</p>
</dd>
<dt><code class="calibre2">\preformatted{text}</code></dt>
<dd><p><a href="" id="index-_005cpreformatted"></a></p>
<p>Indicate text that is a literal example of a piece of a program. Text is displayed using <code class="calibre2">typewriter</code> font where possible. Formatting, e.g. line breaks, is preserved. (Note that this includes a line break after the initial {, so typically text should start on the same line as the command.)</p>
<p>Due to limitations in LaTeX as of this writing, this macro may not be nested within other markup macros other than <code class="calibre2">\dQuote</code> and <code class="calibre2">\sQuote</code>, as errors or bad formatting may result.</p>
</dd>
<dt><code class="calibre2">\kbd{keyboard-characters}</code></dt>
<dd><p><a href="" id="index-_005ckbd"></a></p>
<p>Indicate keyboard input, using slanted typewriter font if possible, so users can distinguish the characters they are supposed to type from computer output. Text is entered ‘verbatim’.</p>
</dd>
<dt><code class="calibre2">\samp{text}</code></dt>
<dd><p><a href="" id="index-_005csamp"></a></p>
<p>Indicate text that is a literal example of a sequence of characters, entered ‘verbatim’. No wrapping or reformatting will occur. Displayed using <code class="calibre2">typewriter</code> font where possible.</p>
</dd>
<dt><code class="calibre2">\verb{text}</code></dt>
<dd><p><a href="" id="index-_005cverb"></a></p>
<p>Indicate text that is a literal example of a sequence of characters, with no interpretation of e.g. <code class="calibre2">\var</code>, but which will be included within word-wrapped text. Displayed using <code class="calibre2">typewriter</code> font if possible.</p>
</dd>
<dt><code class="calibre2">\pkg{package_name}</code></dt>
<dd><p><a href="" id="index-_005cpkg"></a></p>
<p>Indicate the name of an R package. LaTeX-like.</p>
</dd>
<dt><code class="calibre2">\file{file_name}</code></dt>
<dd><p><a href="" id="index-_005cfile"></a></p>
<p>Indicate the name of a file. Text is LaTeX-like, so backslash needs to be escaped. Displayed using a distinct font where possible.</p>
</dd>
<dt><code class="calibre2">\email{email_address}</code></dt>
<dd><p><a href="" id="index-_005cemail"></a></p>
<p>Indicate an electronic mail address. LaTeX-like, will be rendered as a hyperlink in HTML and PDF conversion. Displayed using <code class="calibre2">typewriter</code> font where possible.</p>
</dd>
<dt><code class="calibre2">\url{uniform_resource_locator}</code></dt>
<dd><p><a href="" id="index-_005curl"></a></p>
<p>Indicate a uniform resource locator (URL) for the World Wide Web. The argument is handled as ‘verbatim’ text (with percent and braces escaped by backslash), and rendered as a hyperlink in HTML and PDF conversion. Linefeeds are removed, and leading and trailing whitespace<a href="R-exts_split_014.html#FOOT95" id="DOCF95"><sup>95</sup></a> is removed. See <a href="R-exts_split_004.html#Specifying-URLs">Specifying URLs</a>.</p>
<p>Displayed using <code class="calibre2">typewriter</code> font where possible.</p>
</dd>
<dt><code class="calibre2">\href{uniform_resource_locator}{text}</code></dt>
<dd><p><a href="" id="index-_005chref"></a></p>
<p>Indicate a hyperlink to the World Wide Web. The first argument is handled as ‘verbatim’ text (with percent and braces escaped by backslash) and is used as the URL in the hyperlink, with the second argument of LaTeX-like text displayed to the user. Linefeeds are removed from the first argument, and leading and trailing whitespace is removed.</p>
<p>Note that RFC3986-encoded URLs (e.g. using ‘\%28VS.85\%29’ in place of ‘(VS.85)’) may not work correctly in versions of R before 3.1.3 and are best avoided—use <code class="calibre2">URLdecode()</code> to decode them.</p>
</dd>
<dt><code class="calibre2">\var{metasyntactic_variable}</code></dt>
<dd><p><a href="" id="index-_005cvar"></a></p>
<p>Indicate a metasyntactic variable. In some cases this will be rendered distinctly, e.g. in italic, but not in all<a href="R-exts_split_014.html#FOOT96" id="DOCF96"><sup>96</sup></a>. LaTeX-like.</p>
</dd>
<dt><code class="calibre2">\env{environment_variable}</code></dt>
<dd><p><a href="" id="index-_005cenv"></a></p>
<p>Indicate an environment variable. ‘Verbatim’. Displayed using <code class="calibre2">typewriter</code> font where possible</p>
</dd>
<dt><code class="calibre2">\option{option}</code></dt>
<dd><p><a href="" id="index-_005coption"></a></p>
<p>Indicate a command-line option. ‘Verbatim’. Displayed using <code class="calibre2">typewriter</code> font where possible.</p>
</dd>
<dt><code class="calibre2">\command{command_name}</code></dt>
<dd><p><a href="" id="index-_005ccommand"></a></p>
<p>Indicate the name of a command. LaTeX-like, so <code class="calibre2">\var</code> is interpreted. Displayed using <code class="calibre2">typewriter</code> font where possible.</p>
</dd>
<dt><code class="calibre2">\dfn{term}</code></dt>
<dd><p><a href="" id="index-_005cdfn"></a></p>
<p>Indicate the introductory or defining use of a term. LaTeX-like.</p>
</dd>
<dt><code class="calibre2">\cite{reference}</code></dt>
<dd><p><a href="" id="index-_005ccite"></a></p>
<p>Indicate a reference without a direct cross-reference <em>via</em> <code class="calibre2">\link</code> (see <a href="#Cross_002dreferences">Cross-references</a>), such as the name of a book. LaTeX-like.</p>
</dd>
<dt><code class="calibre2">\acronym{acronym}</code></dt>
<dd><p><a href="" id="index-_005cacronym"></a></p>
<p>Indicate an acronym (an abbreviation written in all capital letters), such as GNU. LaTeX-like.</p>
</dd>
</dl>
<hr />
<p><a href="" id="Lists-and-tables"></a> <a href="" id="Lists-and-tables-1"></a></p>
<h3 id="lists-and-tables" class="section">2.4 Lists and tables</h3>
<p><a href="" id="index-Lists-and-tables-in-documentation"></a> <a href="" id="index-_005citemize"></a> <a href="" id="index-_005cenumerate"></a></p>
<p>The <code class="calibre2">\itemize</code> and <code class="calibre2">\enumerate</code> commands take a single argument, within which there may be one or more <code class="calibre2">\item</code> commands. The text following each <code class="calibre2">\item</code> is formatted as one or more paragraphs, suitably indented and with the first paragraph marked with a bullet point (<code class="calibre2">\itemize</code>) or a number (<code class="calibre2">\enumerate</code>).</p>
<p>Note that unlike argument lists, <code class="calibre2">\item</code> in these formats is followed by a space and the text (not enclosed in braces). For example</p>
<div class="example">
<pre class="example1"><code>  \enumerate{
    \item A database consists of one or more records, each with one or
    more named fields.
    \item Regular lines start with a non-whitespace character.
    \item Records are separated by one or more empty lines.
  }</code></pre>
</div>
<p><code class="calibre2">\itemize</code> and <code class="calibre2">\enumerate</code> commands may be nested.</p>
<p><a href="" id="index-_005cdescribe"></a></p>
<p>The <code class="calibre2">\describe</code> command is similar to <code class="calibre2">\itemize</code> but allows initial labels to be specified. Each <code class="calibre2">\item</code> takes two arguments, the label and the body of the item, in exactly the same way as an argument or value <code class="calibre2">\item</code>. <code class="calibre2">\describe</code> commands are mapped to <code class="calibre2">&lt;DL&gt;</code> lists in HTML and <code class="calibre2">\description</code> lists in LaTeX.</p>
<p><a href="" id="index-_005ctabular"></a></p>
<p>The <code class="calibre2">\tabular</code> command takes two arguments. The first gives for each of the columns the required alignment (‘l’ for left-justification, ‘r’ for right-justification or ‘c’ for centring.) The second argument consists of an arbitrary number of lines separated by <code class="calibre2">\cr</code>, and with fields separated by <code class="calibre2">\tab</code>. For example:</p>
<div class="example">
<pre class="example1"><code>  \tabular{rlll}{
    [,1] \tab Ozone   \tab numeric \tab Ozone (ppb)\cr
    [,2] \tab Solar.R \tab numeric \tab Solar R (lang)\cr
    [,3] \tab Wind    \tab numeric \tab Wind (mph)\cr
    [,4] \tab Temp    \tab numeric \tab Temperature (degrees F)\cr
    [,5] \tab Month   \tab numeric \tab Month (1--12)\cr
    [,6] \tab Day     \tab numeric \tab Day of month (1--31)
  }</code></pre>
</div>
<p>There must be the same number of fields on each line as there are alignments in the first argument, and they must be non-empty (but can contain only spaces). (There is no whitespace between <code class="calibre2">\tabular</code> and the first argument, nor between the two arguments.)</p>
<hr />
<p><a href="" id="Cross_002dreferences"></a> <a href="" id="Cross_002dreferences-1"></a></p>
<h3 id="cross-references" class="section">2.5 Cross-references</h3>
<p><a href="" id="index-Cross_002dreferences-in-documentation"></a> <a href="" id="index-_005clink"></a></p>
<p>The markup <code class="calibre2">\link{foo}</code> (usually in the combination <code class="calibre2">\code{\link{foo}}</code>) produces a hyperlink to the help for foo. Here foo is a <em>topic</em>, that is the argument of <code class="calibre2">\alias</code> markup in another Rd file (possibly in another package). Hyperlinks are supported in some of the formats to which Rd files are converted, for example HTML and PDF, but ignored in others, e.g. the text format.</p>
<p>One main usage of <code class="calibre2">\link</code> is in the <code class="calibre2">\seealso</code> section of the help page, see <a href="#Rd-format">Rd format</a>.</p>
<p>Note that whereas leading and trailing spaces are stripped when extracting a topic from a <code class="calibre2">\alias</code>, they are not stripped when looking up the topic of a <code class="calibre2">\link</code>.</p>
<p><a href="" id="index-_005clinkS4class"></a></p>
<p>You can specify a link to a different topic than its name by <code class="calibre2">\link[=dest]{name}</code> which links to topic dest with name name. This can be used to refer to the documentation for S3/4 classes, for example <code class="calibre2">\code{&quot;\link[=abc-class]{abc}&quot;}</code> would be a way to refer to the documentation of an S4 class <code class="calibre2">&quot;abc&quot;</code> defined in your package, and <code class="calibre2">\code{&quot;\link[=terms.object]{terms}&quot;}</code> to the S3 <code class="calibre2">&quot;terms&quot;</code> class (in package <strong>stats</strong>). To make these easy to read in the source file, <code class="calibre2">\code{&quot;\linkS4class{abc}&quot;}</code> expands to the form given above.</p>
<p>There are two other forms of optional argument specified as <code class="calibre2">\link[pkg]{foo}</code> and <code class="calibre2">\link[pkg:bar]{foo}</code> to link to the package <strong>pkg</strong>, to <em>files</em> foo.html and bar.html respectively. These are rarely needed, perhaps to refer to not-yet-installed packages (but there the HTML help system will resolve the link at run time) or in the normally undesirable event that more than one package offers help on a topic<a href="R-exts_split_014.html#FOOT97" id="DOCF97"><sup>97</sup></a> (in which case the present package has precedence so this is only needed to refer to other packages). They are currently only used in HTML help (and ignored for hyperlinks in LaTeX conversions of help pages), and link to the file rather than the topic (since there is no way to know which topics are in which files in an uninstalled package). The <strong>only</strong> reason to use these forms for base and recommended packages is to force a reference to a package that might be further down the search path. Because they have been frequently misused, the HTML help system looks for topic <code class="calibre2">foo</code> in package <strong>pkg</strong> if it does not find file foo.html.</p>
<hr />
<p><a href="" id="Mathematics"></a> <a href="" id="Mathematics-1"></a></p>
<h3 id="mathematics" class="section">2.6 Mathematics</h3>
<p><a href="" id="index-Mathematics-in-documentation"></a> <a href="" id="index-_005ceqn"></a> <a href="" id="index-_005cdeqn"></a></p>
<p>Mathematical formulae should be set beautifully for printed documentation yet we still want something useful for text and HTML online help. To this end, the two commands <code class="calibre2">\eqn{latex}{ascii}</code> and <code class="calibre2">\deqn{latex}{ascii}</code> are used. Whereas <code class="calibre2">\eqn</code> is used for “inline” formulae (corresponding to TeX’s <code class="calibre2">$…$</code>), <code class="calibre2">\deqn</code> gives “displayed equations” (as in LaTeX’s <code class="calibre2">displaymath</code> environment, or TeX’s <code class="calibre2">$$…$$</code>). Both arguments are treated as ‘verbatim’ text.</p>
<p>Both commands can also be used as <code class="calibre2">\eqn{latexascii}</code> (only <em>one</em> argument) which then is used for both latex and ascii. No whitespace is allowed between command and the first argument, nor between the first and second arguments.</p>
<p>The following example is from Poisson.Rd:</p>
<div class="example">
<pre class="example1"><code>  \deqn{p(x) = \frac{\lambda^x e^{-\lambda}}{x!}}{%
        p(x) = \lambda^x exp(-\lambda)/x!}
  for \eqn{x = 0, 1, 2, \ldots}.</code></pre>
</div>
<p>For text on-line help we get</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>    p(x) = lambda^x exp(-lambda)/x!

for x = 0, 1, 2, ....</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>Greek letters (both cases) will be rendered in HTML if preceded by a backslash, <code class="calibre2">\dots</code> and <code class="calibre2">\ldots</code> will be rendered as ellipses and <code class="calibre2">\sqrt</code>, <code class="calibre2">\ge</code> and <code class="calibre2">\le</code> as mathematical symbols.</p>
<p>Note that only basic LaTeX can be used, there being no provision to specify LaTeX style files such as the AMS extensions.</p>
<hr />
<p><a href="" id="Figures"></a> <a href="" id="Figures-1"></a></p>
<h3 id="figures" class="section">2.7 Figures</h3>
<p><a href="" id="index-Figures-in-documentation"></a> <a href="" id="index-_005cfigure"></a></p>
<p>To include figures in help pages, use the <code class="calibre2">\figure</code> markup. There are three forms.</p>
<p>The two commonly used simple forms are <code class="calibre2">\figure{filename}</code> and <code class="calibre2">\figure{filename}{alternate text}</code>. This will include a copy of the figure in either HTML or LaTeX output. In text output, the alternate text will be displayed instead. (When the second argument is omitted, the filename will be used.) Both the filename and the alternate text will be parsed verbatim, and should not include special characters that are significant in HTML or LaTeX.</p>
<p>The expert form is <code class="calibre2">\figure{filename}{options: string}</code>. (The word ‘options:’ must be typed exactly as shown and followed by at least one space.) In this form, the string is copied into the HTML <code class="calibre2">img</code> tag as attributes following the <code class="calibre2">src</code> attribute, or into the second argument of the <code class="calibre2">\Figure</code> macro in LaTeX, which by default is used as options to an <code class="calibre2">\includegraphics</code> call. As it is unlikely that any single string would suffice for both display modes, the expert form would normally be wrapped in conditionals. It is up to the author to make sure that legal HTML/LaTeX is used. For example, to include a logo in both HTML (using the simple form) and LaTeX (using the expert form), the following could be used:</p>
<div class="example">
<pre class="example1"><code>\if{html}{\figure{Rlogo.svg}{options: width=100 alt=&quot;R logo&quot;}}
\if{latex}{\figure{Rlogo.pdf}{options: width=0.5in}}</code></pre>
</div>
<p>The files containing the figures should be stored in the directory man/figures. Files with extensions .jpg, .jpeg, .pdf, .png and .svg from that directory will be copied to the help/figures directory at install time. (Figures in PDF format will not display in most HTML browsers, but might be the best choice in reference manuals.) Specify the filename relative to man/figures in the <code class="calibre2">\figure</code> directive.</p>
<hr />
<p><a href="" id="Insertions"></a> <a href="" id="Insertions-1"></a></p>
<h3 id="insertions" class="section">2.8 Insertions</h3>
<p><a href="" id="index-_005cR"></a></p>
<p>Use <code class="calibre2">\R</code> for the R system itself. Use <code class="calibre2">\dots</code> <a href="" id="index-_005cdots"></a> for the dots in function argument lists ‘…’, and <code class="calibre2">\ldots</code> <a href="" id="index-_005cldots"></a> for ellipsis dots in ordinary text.<a href="R-exts_split_014.html#FOOT98" id="DOCF98"><sup>98</sup></a> These can be followed by <code class="calibre2">{}</code>, and should be unless followed by whitespace.</p>
<p>After an unescaped ‘%’, you can put your own comments regarding the help text. The rest of the line (but not the newline at the end) will be completely disregarded. Therefore, you can also use it to make part of the “help” invisible.</p>
<p>You can produce a backslash (‘\’) by escaping it by another backslash. (Note that <code class="calibre2">\cr</code> is used for generating line breaks.)</p>
<p>The “comment” character ‘%’ and unpaired braces<a href="R-exts_split_014.html#FOOT99" id="DOCF99"><sup>99</sup></a> <em>almost always</em> need to be escaped by ‘\’, and ‘\\’ can be used for backslash and needs to be when there are two or more adjacent backslashes. In R-like code quoted strings are handled slightly differently; see <a href="https://developer.r-project.org/parseRd.pdf">“Parsing Rd files”</a> for details – in particular braces should not be escaped in quoted strings.</p>
<p>All of ‘% { } \’ should be escaped in LaTeX-like text.</p>
<p><a href="" id="index-_005cenc"></a></p>
<p>Text which might need to be represented differently in different encodings should be marked by <code class="calibre2">\enc</code>, e.g. <code class="calibre2">\enc{Jöreskog}{Joreskog}</code> (with no whitespace between the braces) where the first argument will be used where encodings are allowed and the second should be ASCII (and is used for e.g. the text conversion in locales that cannot represent the encoded form). (This is intended to be used for individual words, not whole sentences or paragraphs.)</p>
<hr />
<p><a href="" id="Indices"></a> <a href="" id="Indices-1"></a></p>
<h3 id="indices" class="section">2.9 Indices</h3>
<p><a href="" id="index-Indices"></a></p>
<p>The <code class="calibre2">\alias</code> command (see <a href="#Documenting-functions">Documenting functions</a>) is used to specify the “topics” documented, which should include <em>all</em> R objects in a package such as functions and variables, data sets, and S4 classes and methods (see <a href="#Documenting-S4-classes-and-methods">Documenting S4 classes and methods</a>). The on-line help system searches the index data base consisting of all alias topics.</p>
<p><a href="" id="index-_005cconcept"></a></p>
<p>In addition, it is possible to provide “concept index entries” using <code class="calibre2">\concept</code>, which can be used for <code class="calibre2">help.search()</code> lookups. E.g., file cor.test.Rd in the standard package <strong>stats</strong> contains</p>
<div class="example">
<pre class="example1"><code>\concept{Kendall correlation coefficient}
\concept{Pearson correlation coefficient}
\concept{Spearman correlation coefficient}</code></pre>
</div>
<p>so that e.g. ??Spearman will succeed in finding the help page for the test for association between paired samples using Spearman’s rho.</p>
<p>(Note that <code class="calibre2">help.search()</code> only uses “sections” of documentation objects with no additional markup.)</p>
<p>If you want to cross reference such items from other help files <em>via</em> <code class="calibre2">\link</code>, you need to use <code class="calibre2">\alias</code> and not <code class="calibre2">\concept</code>.</p>
<hr />
<p><a href="" id="Platform_002dspecific-sections"></a> <a href="" id="Platform_002dspecific-documentation"></a></p>
<h3 id="platform-specific-documentation" class="section">2.10 Platform-specific documentation</h3>
<p><a href="" id="index-Platform_002dspecific-documentation"></a></p>
<p>Sometimes the documentation needs to differ by platform. Currently two OS-specific options are available, ‘unix’ and ‘windows’, and lines in the help source file can be enclosed in</p>
<div class="example">
<pre class="example1"><code>#ifdef OS
   ...
#endif</code></pre>
</div>
<p>or</p>
<div class="example">
<pre class="example1"><code>#ifndef OS
   ...
#endif</code></pre>
</div>
<p>for OS-specific inclusion or exclusion. Such blocks should not be nested, and should be entirely within a block (that, is between the opening and closing brace of a section or item), or at top-level contain one or more complete sections.</p>
<p>If the differences between platforms are extensive or the R objects documented are only relevant to one platform, platform-specific Rd files can be put in a unix or windows subdirectory.</p>
<hr />
<p><a href="" id="Conditional-text"></a> <a href="" id="Conditional-text-1"></a></p>
<h3 id="conditional-text" class="section">2.11 Conditional text</h3>
<p><a href="" id="index-conditionals"></a> <a href="" id="index-_005cif"></a> <a href="" id="index-_005cifelse"></a> <a href="" id="index-_005cout"></a></p>
<p>Occasionally the best content for one output format is different from the best content for another. For this situation, the <code class="calibre2">\if{format}{text}</code> or <code class="calibre2">\ifelse{format}{text}{alternate}</code> markup is used. Here format is a comma separated list of formats in which the text should be rendered. The alternate will be rendered if the format does not match. Both text and alternate may be any sequence of text and markup.</p>
<p>Currently the following formats are recognized: <code class="calibre2">example</code>, <code class="calibre2">html</code>, <code class="calibre2">latex</code> and <code class="calibre2">text</code>. These select output for the corresponding targets. (Note that <code class="calibre2">example</code> refers to extracted example code rather than the displayed example in some other format.) Also accepted are <code class="calibre2">TRUE</code> (matching all formats) and <code class="calibre2">FALSE</code> (matching no formats). These could be the output of the <code class="calibre2">\Sexpr</code> macro (see <a href="#Dynamic-pages">Dynamic pages</a>).</p>
<p>The <code class="calibre2">\out{literal}</code> macro would usually be used within the text part of <code class="calibre2">\if{format}{text}</code>. It causes the renderer to output the literal text exactly, with no attempt to escape special characters. For example, use the following to output the markup necessary to display the Greek letter in LaTeX or HTML, and the text string <code class="calibre2">alpha</code> in other formats:</p>
<div class="example">
<pre class="example1"><code>\ifelse{latex}{\out{$\alpha$}}{\ifelse{html}{\out{&amp;alpha;}}{alpha}}</code></pre>
</div>
<hr />
<p><a href="" id="Dynamic-pages"></a> <a href="" id="Dynamic-pages-1"></a></p>
<h3 id="dynamic-pages" class="section">2.12 Dynamic pages</h3>
<p><a href="" id="index-dynamic-pages"></a> <a href="" id="index-_005cSexpr"></a> <a href="" id="index-_005cRdOpts"></a></p>
<p>Two macros supporting dynamically generated man pages are <code class="calibre2">\Sexpr</code> and <code class="calibre2">\RdOpts</code>. These are modelled after Sweave, and are intended to contain executable R expressions in the Rd file.</p>
<p>The main argument to <code class="calibre2">\Sexpr</code> must be valid R code that can be executed. It may also take options in square brackets before the main argument. Depending on the options, the code may be executed at package build time, package install time, or man page rendering time.</p>
<p>The options follow the same format as in Sweave, but different options are supported. Currently the allowed options and their defaults are:</p>
<ul>
<li><code class="calibre2">eval=TRUE</code> Whether the R code should be evaluated.</li>
<li><code class="calibre2">echo=FALSE</code> Whether the R code should be echoed. If <code class="calibre2">TRUE</code>, a display will be given in a preformatted block. For example, <code class="calibre2">\Sexpr[echo=TRUE]{ x &lt;- 1 }</code> will be displayed as
<div class="example">
<pre class="example1"><code>&gt; x &lt;- 1</code></pre>
</div></li>
<li><code class="calibre2">keep.source=TRUE</code> Whether to keep the author’s formatting when displaying the code, or throw it away and use a deparsed version.</li>
<li><code class="calibre2">results=text</code> How should the results be displayed? The possibilities are:
<ul>
<li>- <code class="calibre2">results=text</code> Apply <code class="calibre2">as.character()</code> to the result of the code, and insert it as a text element.</li>
<li>- <code class="calibre2">results=verbatim</code> Print the results of the code just as if it was executed at the console, and include the printed results verbatim. (Invisible results will not print.)</li>
<li>- <code class="calibre2">results=rd</code> The result is assumed to be a character vector containing markup to be passed to <code class="calibre2">parse_Rd()</code>, with the result inserted in place. This could be used to insert computed aliases, for instance. <code class="calibre2">parse_Rd()</code> is called first with <code class="calibre2">fragment = FALSE</code> to allow a single Rd section macro to be inserted. If that fails, it is called again with <code class="calibre2">fragment = TRUE</code>, the older behavior.</li>
<li>- <code class="calibre2">results=hide</code> Insert no output.</li>
</ul></li>
<li><code class="calibre2">strip.white=TRUE</code> Remove leading and trailing white space from each line of output if <code class="calibre2">strip.white=TRUE</code>. With <code class="calibre2">strip.white=all</code>, also remove blank lines.</li>
<li><p><code class="calibre2">stage=install</code> Control when this macro is run. Possible values are</p>
<ul>
<li>- <code class="calibre2">stage=build</code> The macro is run when building a source tarball.</li>
<li>- <code class="calibre2">stage=install</code> The macro is run when installing from source.</li>
<li>- <code class="calibre2">stage=render</code> The macro is run when displaying the help page.</li>
</ul>
<p>Conditionals such as <code class="calibre2">#ifdef</code> (see <a href="#Platform_002dspecific-sections">Platform-specific sections</a>) are applied after the <code class="calibre2">build</code> macros but before the <code class="calibre2">install</code> macros. In some situations (e.g. installing directly from a source directory without a tarball, or building a binary package) the above description is not literally accurate, but authors can rely on the sequence being <code class="calibre2">build</code>, <code class="calibre2">#ifdef</code>, <code class="calibre2">install</code>, <code class="calibre2">render</code>, with all stages executed.</p>
<p>Code is only run once in each stage, so a <code class="calibre2">\Sexpr[results=rd]</code> macro can output an <code class="calibre2">\Sexpr</code> macro designed for a later stage, but not for the current one or any earlier stage.</p></li>
<li><code class="calibre2">width, height, fig</code> These options are currently allowed but ignored.</li>
</ul>
<p>The <code class="calibre2">\RdOpts</code> macro is used to set new defaults for options to apply to following uses of <code class="calibre2">\Sexpr</code>.</p>
<p>For more details, see the online document <a href="https://developer.r-project.org/parseRd.pdf">“Parsing Rd files”</a>.</p>
<hr />
<p><a href="" id="User_002ddefined-macros"></a> <a href="" id="User_002ddefined-macros-1"></a></p>
<h3 id="user-defined-macros" class="section">2.13 User-defined macros</h3>
<p><a href="" id="index-user_002ddefined-macros"></a> <a href="" id="index-_005cnewcommand"></a> <a href="" id="index-_005crenewcommand"></a></p>
<p>The <code class="calibre2">\newcommand</code> and <code class="calibre2">\renewcommand</code> macros allow new macros to be defined within an Rd file. These are similar but not identical to the same-named LaTeX macros.</p>
<p>They each take two arguments which are parsed verbatim. The first is the name of the new macro including the initial backslash, and the second is the macro definition. As in LaTeX, <code class="calibre2">\newcommand</code> requires that the new macro not have been previously defined, whereas <code class="calibre2">\renewcommand</code> allows existing macros (including all built-in ones) to be replaced. (As from version 3.2.0, this test is disabled by default, but may be enabled by setting the environment variable <code class="calibre2">_WARN_DUPLICATE_RD_MACROS_</code> to a true value.)</p>
<p>Also as in LaTeX, the new macro may be defined to take arguments, and numeric placeholders such as <code class="calibre2">#1</code> are used in the macro definition. However, unlike LaTeX, the number of arguments is determined automatically from the highest placeholder number seen in the macro definition. For example, a macro definition containing <code class="calibre2">#1</code> and <code class="calibre2">#3</code> (but no other placeholders) will define a three argument macro (whose second argument will be ignored). As in LaTeX, at most 9 arguments may be defined. If the <code class="calibre2">#</code> character is followed by a non-digit it will have no special significance. All arguments to user-defined macros will be parsed as verbatim text, and simple text-substitution will be used to replace the place-holders, after which the replacement text will be parsed.</p>
<p>As of R version 3.2.0, a number of macros are defined in the file share/Rd/macros/system.Rd of the R source or home directory, and these will normally be available in all .Rd files. For example, that file contains the definition</p>
<div class="example">
<pre class="example1"><code>\newcommand{\PR}{\Sexpr[results=rd]{tools:::Rd_expr_PR(#1)}}</code></pre>
</div>
<p>which defines <code class="calibre2">\PR</code> to be a single argument macro; then code (typically used in the NEWS.Rd file) like</p>
<div class="example">
<pre class="example1"><code>\PR{1234}</code></pre>
</div>
<p>will expand to</p>
<div class="example">
<pre class="example1"><code>\Sexpr[results=rd]{tools:::Rd_expr_PR(1234)}</code></pre>
</div>
<p>when parsed.</p>
<p>Some macros that might be of general use are:</p>
<dl>
<dt><code class="calibre2">\CRANpkg{pkg}</code> <a href="" id="index-_005cCRANpkg_007bpkg_007d"></a> </dt>
<dd><p>A package on CRAN</p>
</dd>
<dt><code class="calibre2">\sspace</code> <a href="" id="index-_005csspace"></a> </dt>
<dd><p>A single space (used after a period that does not end a sentence).</p>
</dd>
<dt><code class="calibre2">\doi{numbers}</code> <a href="" id="index-_005cdoi_007bnumbers_007d"></a> </dt>
<dd><p>A digital object identifier (DOI).</p>
</dd>
</dl>
<p>See the system.Rd file in share/Rd/macros for more details and macro definitions, including macros <code class="calibre2">\packageTitle</code>, <code class="calibre2">\packageDescription</code>, <code class="calibre2">\packageAuthor</code>, <code class="calibre2">\packageMaintainer</code>, <code class="calibre2">\packageDESCRIPTION</code> and <code class="calibre2">\packageIndices</code>. <a href="" id="index-_005cpackageTitle"></a> <a href="" id="index-_005cpackageDescription"></a> <a href="" id="index-_005cpackageAuthor"></a> <a href="" id="index-_005cpackageMaintainer"></a> <a href="" id="index-_005cpackageDESCRIPTION"></a> <a href="" id="index-_005cpackageIndices"></a></p>
<p>Packages may also define their own common macros; these would be stored in an .Rd file in man/macros in the package source and will be installed into help/macros when the package is installed. A package may also use the macros from a different package by listing the other package in the ‘RdMacros’ field in the DESCRIPTION file.</p>
<hr />
<p><a href="" id="Encoding"></a> <a href="" id="Encoding-1"></a></p>
<h3 id="encoding" class="section">2.14 Encoding</h3>
<p><a href="" id="index-encoding"></a></p>
<p>Rd files are text files and so it is impossible to deduce the encoding they are written in unless ASCII: files with 8-bit characters could be UTF-8, Latin-1, Latin-9, KOI8-R, EUC-JP, <em>etc</em>. So an <code class="calibre2">\encoding{}</code> section must be used to specify the encoding if it is not ASCII. (The <code class="calibre2">\encoding{}</code> section must be on a line by itself, and in particular one containing no non-ASCII characters. The encoding declared in the DESCRIPTION file will be used if none is declared in the file.) The Rd files are converted to UTF-8 before parsing and so the preferred encoding for the files themselves is now UTF-8.</p>
<p>Wherever possible, avoid non-ASCII chars in Rd files, and even symbols such as ‘&lt;’, ‘&gt;’, ‘$’, ‘^’, ‘&amp;’, ‘|’, ‘@’, ‘~’, and ‘*’ outside ‘verbatim’ environments (since they may disappear in fonts designed to render text). (Function <code class="calibre2">showNonASCIIfile</code> in package <strong>tools</strong> can help in finding non-ASCII bytes in the files.)</p>
<p>For convenience, encoding names ‘latin1’ and ‘latin2’ are always recognized: these and ‘UTF-8’ are likely to work fairly widely. However, this does not mean that all characters in UTF-8 will be recognized, and the coverage of non-Latin characters<a href="R-exts_split_014.html#FOOT100" id="DOCF100"><sup>100</sup></a> is fairly low. Using LaTeX <code class="calibre2">inputenx</code> (see <code class="calibre2">?Rd2pdf</code> in R) will give greater coverage of UTF-8.</p>
<p>The <code class="calibre2">\enc</code> command (see <a href="#Insertions">Insertions</a>) can be used to provide transliterations which will be used in conversions that do not support the declared encoding.</p>
<p>The LaTeX conversion converts the file to UTF-8 from the declared encoding, and includes a</p>
<div class="example">
<pre class="example1"><code>\inputencoding{utf8}</code></pre>
</div>
<p>command, and this needs to be matched by a suitable invocation of the <code class="calibre2">\usepackage{inputenc}</code> command. The R utility <code class="calibre2">R CMD Rd2pdf</code> looks at the converted code and includes the encodings used: it might for example use</p>
<div class="example">
<pre class="example1"><code>\usepackage[utf8]{inputenc}</code></pre>
</div>
<p>(Use of <code class="calibre2">utf8</code> as an encoding requires LaTeX dated 2003/12/01 or later. Also, the use of Cyrillic characters in ‘UTF-8’ appears to also need ‘\usepackage[T2A]{fontenc}’, and <code class="calibre2">R CMD Rd2pdf</code> includes this conditionally on the file t2aenc.def being present and environment variable <code class="calibre2">_R_CYRILLIC_TEX_</code> being set.)</p>
<p>Note that this mechanism works best with Latin letters: the coverage of UTF-8 in LaTeX is quite low.</p>
<hr />
<p><a href="" id="Processing-documentation-files"></a> <a href="" id="Processing-documentation-files-1"></a></p>
<h3 id="processing-documentation-files" class="section">2.15 Processing documentation files</h3>
<p><a href="" id="index-Processing-Rd-format"></a></p>
<p>There are several commands to process Rd files from the system command line.</p>
<p><a href="" id="index-R-CMD-Rdconv"></a></p>
<p>Using <code class="calibre2">R CMD Rdconv</code> one can convert R documentation format to other formats, or extract the executable examples for run-time testing. The currently supported conversions are to plain text, HTML and LaTeX as well as extraction of the examples.</p>
<p><a href="" id="index-R-CMD-Rd2pdf"></a></p>
<p><code class="calibre2">R CMD Rd2pdf</code> generates PDF output from documentation in Rd files, which can be specified either explicitly or by the path to a directory with the sources of a package. In the latter case, a reference manual for all documented objects in the package is created, including the information in the DESCRIPTION files.</p>
<p><a href="" id="index-R-CMD-Sweave"></a> <a href="" id="index-R-CMD-Stangle"></a></p>
<p><code class="calibre2">R CMD Sweave</code> and <code class="calibre2">R CMD Stangle</code> process vignette-like documentation files (e.g. Sweave vignettes with extension ‘.Snw’ or ‘.Rnw’, or other non-Sweave vignettes). <code class="calibre2">R CMD Stangle</code> is used to extract the R code fragments.</p>
<p>The exact usage and a detailed list of available options for all of these commands can be obtained by running <code class="calibre2">R CMD command --help</code>, e.g., R CMD Rdconv --help. All available commands can be listed using R --help (or Rcmd --help under Windows).</p>
<p>All of these work under Windows. You may need to have installed the the tools to build packages from source as described in the “R Installation and Administration” manual, although typically all that is needed is a LaTeX installation.</p>
<hr />
<p><a href="" id="Editing-Rd-files"></a> <a href="" id="Editing-Rd-files-1"></a></p>
<h3 id="editing-rd-files" class="section">2.16 Editing Rd files</h3>
<p><a href="" id="index-Editing-Rd-files"></a></p>
<p>It can be very helpful to prepare .Rd files using a editor which knows about their syntax and will highlight commands, indent to show the structure and detect mis-matched braces, and so on.</p>
<p>The system most commonly used for this is some version of <code class="calibre2">Emacs</code> (including <code class="calibre2">XEmacs</code>) with the ESS package (<a href="https://ESS.R-project.org/" class="uri">https://ESS.R-project.org/</a>: it is often is installed with <code class="calibre2">Emacs</code> but may need to be loaded, or even installed, separately).</p>
<p>Another is the Eclipse IDE with the Stat-ET plugin (<a href="http://www.walware.de/goto/statet" class="uri">http://www.walware.de/goto/statet</a>), and (on Windows only) Tinn-R (<a href="http://sourceforge.net/projects/tinn-r/" class="uri">http://sourceforge.net/projects/tinn-r/</a>).</p>
<p>People have also used LaTeX mode in a editor, as .Rd files are rather similar to LaTeX files.</p>
<p>Some R front-ends provide editing support for .Rd files, for example RStudio (<a href="https://rstudio.org/" class="uri">https://rstudio.org/</a>).</p>
<hr />
<p><a href="" id="Tidying-and-profiling-R-code"></a> <a href="" id="Tidying-and-profiling-R-code-1"></a></p>
<div id="calibre_pb_8" class="calibre6">

</div>

<!--chapter:end:06-R-exts.Rmd-->

#  Tidying and profiling R code
<p>R code which is worth preserving in a package and perhaps making available for others to use is worth documenting, tidying up and perhaps optimizing. The last two of these activities are the subject of this chapter.</p>
<hr />
<p><a href="" id="Tidying-R-code"></a> <a href="" id="Tidying-R-code-1"></a></p>
<h3 id="tidying-r-code" class="section">3.1 Tidying R code</h3>
<p><a href="" id="index-Tidying-R-code"></a></p>
<p>R treats function code loaded from packages and code entered by users differently. By default code entered by users has the source code stored internally, and when the function is listed, the original source is reproduced. Loading code from a package (by default) discards the source code, and the function listing is re-created from the parse tree of the function.</p>
<p>Normally keeping the source code is a good idea, and in particular it avoids comments being removed from the source. However, we can make use of the ability to re-create a function listing from its parse tree to produce a tidy version of the function, for example with consistent indentation and spaces around operators. If the original source does not follow the standard format this tidied version can be much easier to read.</p>
<p>We can subvert the keeping of source in two ways.</p>
<ol>
<li>The option <code class="calibre2">keep.source</code> can be set to <code class="calibre2">FALSE</code> before the code is loaded into R.</li>
<li>The stored source code can be removed by calling the <code class="calibre2">removeSource()</code> function, for example by
<div class="example">
<pre class="example1"><code>myfun &lt;- removeSource(myfun)</code></pre>
</div></li>
</ol>
<p>In each case if we then list the function we will get the standard layout.</p>
<p>Suppose we have a file of functions myfuns.R that we want to tidy up. Create a file tidy.R containing</p>
<div class="example">
<pre class="example1"><code>source(&quot;myfuns.R&quot;, keep.source = FALSE)
dump(ls(all = TRUE), file = &quot;new.myfuns.R&quot;)</code></pre>
</div>
<p>and run R with this as the source file, for example by R --vanilla &lt; tidy.R or by pasting into an R session. Then the file new.myfuns.R will contain the functions in alphabetical order in the standard layout. Warning: comments in your functions will be lost.</p>
<p>The standard format provides a good starting point for further tidying. Although the deparsing cannot do so, we recommend the consistent use of the preferred assignment operator ‘&lt;-’ (rather than ‘=’) for assignment. Many package authors use a version of Emacs (on a Unix-alike or Windows) to edit R code, using the ESS[S] mode of the ESS Emacs package. See <a href="./R-ints.html#R-coding-standards">R coding standards</a> in R Internals for style options within the ESS[S] mode recommended for the source code of R itself.</p>
<hr />
<p><a href="" id="Profiling-R-code-for-speed"></a> <a href="" id="Profiling-R-code-for-speed-1"></a></p>
<h3 id="profiling-r-code-for-speed" class="section">3.2 Profiling R code for speed</h3>
<p><a href="" id="index-Profiling"></a> <a href="" id="index-Rprof"></a></p>
<p>It is possible to profile R code on Windows and most<a href="R-exts_split_014.html#FOOT101" id="DOCF101"><sup>101</sup></a> Unix-alike versions of R.</p>
<p>The command <code class="calibre2">Rprof</code> is used to control profiling, and its help page can be consulted for full details. Profiling works by recording at fixed intervals<a href="R-exts_split_014.html#FOOT102" id="DOCF102"><sup>102</sup></a> (by default every 20 msecs) which line in which R function is being used, and recording the results in a file (default Rprof.out in the working directory). Then the function <code class="calibre2">summaryRprof</code> or the command-line utility <code class="calibre2">R CMD Rprof Rprof.out</code> can be used to summarize the activity.</p>
<p>As an example, consider the following code (from Venables &amp; Ripley, 2002, pp. 225–6).</p>
<div class="example">
<pre class="smallexample"><code>library(MASS); library(boot)
storm.fm &lt;- nls(Time ~ b*Viscosity/(Wt - c), stormer,
                start = c(b=30.401, c=2.2183))
st &lt;- cbind(stormer, fit=fitted(storm.fm))
storm.bf &lt;- function(rs, i) {
    st$Time &lt;-  st$fit + rs[i]
    tmp &lt;- nls(Time ~ (b * Viscosity)/(Wt - c), st,
               start = coef(storm.fm))
    tmp$m$getAllPars()
}
rs &lt;- scale(resid(storm.fm), scale = FALSE) # remove the mean
Rprof(&quot;boot.out&quot;)
storm.boot &lt;- boot(rs, storm.bf, R = 4999) # slow enough to profile
Rprof(NULL)</code></pre>
</div>
<p>Having run this we can summarize the results by</p>
<div class="example">
<pre class="smallexample"><code>R CMD Rprof boot.out

Each sample represents 0.02 seconds.
Total run time: 22.52 seconds.

Total seconds: time spent in function and callees.
Self seconds: time spent in function alone.</code></pre>
<pre class="smallexample"><code></code></pre>
<pre class="smallexample"><code>   %       total       %        self
 total    seconds     self    seconds    name
 100.0     25.22       0.2      0.04     &quot;boot&quot;
  99.8     25.18       0.6      0.16     &quot;statistic&quot;
  96.3     24.30       4.0      1.02     &quot;nls&quot;
  33.9      8.56       2.2      0.56     &quot;&lt;Anonymous&gt;&quot;
  32.4      8.18       1.4      0.36     &quot;eval&quot;
  31.8      8.02       1.4      0.34     &quot;.Call&quot;
  28.6      7.22       0.0      0.00     &quot;eval.parent&quot;
  28.5      7.18       0.3      0.08     &quot;model.frame&quot;
  28.1      7.10       3.5      0.88     &quot;model.frame.default&quot;
  17.4      4.38       0.7      0.18     &quot;sapply&quot;
  15.0      3.78       3.2      0.80     &quot;nlsModel&quot;
  12.5      3.16       1.8      0.46     &quot;lapply&quot;
  12.3      3.10       2.7      0.68     &quot;assign&quot;
 ...</code></pre>
<pre class="smallexample"><code></code></pre>
<pre class="smallexample"><code>   %        self        %      total
  self    seconds     total   seconds    name
   5.7      1.44       7.5      1.88     &quot;inherits&quot;
   4.0      1.02      96.3     24.30     &quot;nls&quot;
   3.6      0.92       3.6      0.92     &quot;$&quot;
   3.5      0.88      28.1      7.10     &quot;model.frame.default&quot;
   3.2      0.80      15.0      3.78     &quot;nlsModel&quot;
   2.8      0.70       9.8      2.46     &quot;qr.coef&quot;
   2.7      0.68      12.3      3.10     &quot;assign&quot;
   2.5      0.64       2.5      0.64     &quot;.Fortran&quot;
   2.5      0.62       7.1      1.80     &quot;qr.default&quot;
   2.2      0.56      33.9      8.56     &quot;&lt;Anonymous&gt;&quot;
   2.1      0.54       5.9      1.48     &quot;unlist&quot;
   2.1      0.52       7.9      2.00     &quot;FUN&quot;
  ...</code></pre>
</div>
<p>This often produces surprising results and can be used to identify bottlenecks or pieces of R code that could benefit from being replaced by compiled code.</p>
<p>Two warnings: profiling does impose a small performance penalty, and the output files can be very large if long runs are profiled at the default sampling interval.</p>
<p>Profiling short runs can sometimes give misleading results. R from time to time performs <em>garbage collection</em> to reclaim unused memory, and this takes an appreciable amount of time which profiling will charge to whichever function happens to provoke it. It may be useful to compare profiling code immediately after a call to <code class="calibre2">gc()</code> with a profiling run without a preceding call to <code class="calibre2">gc</code>.</p>
<p>More detailed analysis of the output can be achieved by the tools in the CRAN packages <a href="https://CRAN.R-project.org/package=proftools"><strong>proftools</strong></a> and <a href="https://CRAN.R-project.org/package=profr"><strong>profr</strong></a>: in particular these allow call graphs to be studied.</p>
<hr />
<p><a href="" id="Profiling-R-code-for-memory-use"></a> <a href="" id="Profiling-R-code-for-memory-use-1"></a></p>
<h3 id="profiling-r-code-for-memory-use" class="section">3.3 Profiling R code for memory use</h3>
<p><a href="" id="index-Profiling-1"></a> <a href="" id="index-Memory-use"></a></p>
<p>Measuring memory use in R code is useful either when the code takes more memory than is conveniently available or when memory allocation and copying of objects is responsible for slow code. There are three ways to profile memory use over time in R code. All three require R to have been compiled with --enable-memory-profiling, which is not the default, but is currently used for the macOS and Windows binary distributions. All can be misleading, for different reasons.</p>
<p>In understanding the memory profiles it is useful to know a little more about R’s memory allocation. Looking at the results of <code class="calibre2">gc()</code> shows a division of memory into <code class="calibre2">Vcells</code> used to store the contents of vectors and <code class="calibre2">Ncells</code> used to store everything else, including all the administrative overhead for vectors such as type and length information. In fact the vector contents are divided into two pools. Memory for small vectors (by default 128 bytes or less) is obtained in large chunks and then parcelled out by R; memory for larger vectors is obtained directly from the operating system.</p>
<p>Some memory allocation is obvious in interpreted code, for example,</p>
<div class="example">
<pre class="smallexample"><code>y &lt;- x + 1</code></pre>
</div>
<p>allocates memory for a new vector <code class="calibre2">y</code>. Other memory allocation is less obvious and occurs because <code class="calibre2">R</code> is forced to make good on its promise of ‘call-by-value’ argument passing. When an argument is passed to a function it is not immediately copied. Copying occurs (if necessary) only when the argument is modified. This can lead to surprising memory use. For example, in the ‘survey’ package we have</p>
<div class="example">
<pre class="smallexample"><code>print.svycoxph &lt;- function (x, ...)
{
    print(x$survey.design, varnames = FALSE, design.summaries = FALSE, ...)
    x$call &lt;- x$printcall
    NextMethod()
}</code></pre>
</div>
<p>It may not be obvious that the assignment to <code class="calibre2">x$call</code> will cause the entire object <code class="calibre2">x</code> to be copied. This copying to preserve the call-by-value illusion is usually done by the internal C function <code class="calibre2">duplicate</code>.</p>
<p>The main reason that memory-use profiling is difficult is garbage collection. Memory is allocated at well-defined times in an R program, but is freed whenever the garbage collector happens to run.</p>
<hr />
<p><a href="" id="Memory-statistics-from-Rprof"></a> <a href="" id="Memory-statistics-from-Rprof-1"></a></p>
<h4 id="memory-statistics-from-rprof" class="subsection">3.3.1 Memory statistics from <code class="calibre2">Rprof</code></h4>
<p><a href="" id="index-Rprof-1"></a> <a href="" id="index-summaryRprof"></a></p>
<p>The sampling profiler <code class="calibre2">Rprof</code> described in the previous section can be given the option <code class="calibre2">memory.profiling=TRUE</code>. It then writes out the total R memory allocation in small vectors, large vectors, and cons cells or nodes at each sampling interval. It also writes out the number of calls to the internal function <code class="calibre2">duplicate</code>, which is called to copy R objects. <code class="calibre2">summaryRprof</code> provides summaries of this information. The main reason that this can be misleading is that the memory use is attributed to the function running at the end of the sampling interval. A second reason is that garbage collection can make the amount of memory in use decrease, so a function appears to use little memory. Running under <code class="calibre2">gctorture</code> helps with both problems: it slows down the code to effectively increase the sampling frequency and it makes each garbage collection release a smaller amount of memory. Changing the memory limits with <code class="calibre2">mem.limits()</code> may also be useful, to see how the code would run under different memory conditions.</p>
<hr />
<p><a href="" id="Tracking-memory-allocations"></a> <a href="" id="Tracking-memory-allocations-1"></a></p>
<h4 id="tracking-memory-allocations" class="subsection">3.3.2 Tracking memory allocations</h4>
<p><a href="" id="index-Rprofmem"></a></p>
<p>The second method of memory profiling uses a memory-allocation profiler, <code class="calibre2">Rprofmem()</code>, which writes out a stack trace to an output file every time a large vector is allocated (with a user-specified threshold for ‘large’) or a new page of memory is allocated for the R heap. Summary functions for this output are still being designed.</p>
<p>Running the example from the previous section with</p>
<div class="example">
<pre class="smallexample"><code>&gt; Rprofmem(&quot;boot.memprof&quot;,threshold=1000)
&gt; storm.boot &lt;- boot(rs, storm.bf, R = 4999)
&gt; Rprofmem(NULL)</code></pre>
</div>
<p>shows that apart from some initial and final work in <code class="calibre2">boot</code> there are no vector allocations over 1000 bytes.</p>
<hr />
<p><a href="" id="Tracing-copies-of-an-object"></a> <a href="" id="Tracing-copies-of-an-object-1"></a></p>
<h4 id="tracing-copies-of-an-object" class="subsection">3.3.3 Tracing copies of an object</h4>
<p><a href="" id="index-tracemem"></a> <a href="" id="index-untracemem"></a></p>
<p>The third method of memory profiling involves tracing copies made of a specific (presumably large) R object. Calling <code class="calibre2">tracemem</code> on an object marks it so that a message is printed to standard output when the object is copied <em>via</em> <code class="calibre2">duplicate</code> or coercion to another type, or when a new object of the same size is created in arithmetic operations. The main reason that this can be misleading is that copying of subsets or components of an object is not tracked. It may be helpful to use <code class="calibre2">tracemem</code> on these components.</p>
<p>In the example above we can run <code class="calibre2">tracemem</code> on the data frame <code class="calibre2">st</code></p>
<div class="example">
<pre class="smallexample"><code>&gt; tracemem(st)
[1] &quot;&lt;0x9abd5e0&gt;&quot;
&gt; storm.boot &lt;- boot(rs, storm.bf, R = 4)
memtrace[0x9abd5e0-&gt;0x92a6d08]: statistic boot
memtrace[0x92a6d08-&gt;0x92a6d80]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x92a6d80-&gt;0x92a6df8]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x9abd5e0-&gt;0x9271318]: statistic boot
memtrace[0x9271318-&gt;0x9271390]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x9271390-&gt;0x9271408]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x9abd5e0-&gt;0x914f558]: statistic boot
memtrace[0x914f558-&gt;0x914f5f8]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x914f5f8-&gt;0x914f670]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x9abd5e0-&gt;0x972cbf0]: statistic boot
memtrace[0x972cbf0-&gt;0x972cc68]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x972cc68-&gt;0x972cd08]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x9abd5e0-&gt;0x98ead98]: statistic boot
memtrace[0x98ead98-&gt;0x98eae10]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x98eae10-&gt;0x98eae88]: $&lt;-.data.frame $&lt;- statistic boot</code></pre>
</div>
<p>The object is duplicated fifteen times, three times for each of the <code class="calibre2">R+1</code> calls to <code class="calibre2">storm.bf</code>. This is surprising, since none of the duplications happen inside <code class="calibre2">nls</code>. Stepping through <code class="calibre2">storm.bf</code> in the debugger shows that all three happen in the line</p>
<div class="example">
<pre class="smallexample"><code>st$Time &lt;- st$fit + rs[i]</code></pre>
</div>
<p>Data frames are slower than matrices and this is an example of why. Using <code class="calibre2">tracemem(st$Viscosity)</code> does not reveal any additional copying.</p>
<hr />
<p><a href="" id="Profiling-compiled-code"></a> <a href="" id="Profiling-compiled-code-1"></a></p>
<h3 id="profiling-compiled-code" class="section">3.4 Profiling compiled code</h3>
<p><a href="" id="index-Profiling-2"></a></p>
<p>Profiling compiled code is highly system-specific, but this section contains some hints gleaned from various R users. Some methods need to be different for a compiled executable and for dynamic/shared libraries/objects as used by R packages. We know of no good way to profile DLLs on Windows.</p>
<hr />
<p><a href="" id="Linux"></a> <a href="" id="Linux-1"></a></p>
<h4 id="linux" class="subsection">3.4.1 Linux</h4>
<p>Options include using <code class="calibre2">sprof</code> for a shared object, and <code class="calibre2">oprofile</code> (see <a href="http://oprofile.sourceforge.net/" class="uri">http://oprofile.sourceforge.net/</a>) and <code class="calibre2">perf</code> (see <a href="https://perf.wiki.kernel.org/index.php/Tutorial" class="uri">https://perf.wiki.kernel.org/index.php/Tutorial</a>) for any executable or shared object.</p>
<p><a href="" id="sprof"></a></p>
<h4 id="sprof" class="subsection">3.4.1.1 sprof</h4>
<p>You can select shared objects to be profiled with <code class="calibre2">sprof</code> by setting the environment variable <code class="calibre2">LD_PROFILE</code>. For example</p>
<div class="example">
<pre class="example1"><code>% setenv LD_PROFILE /path/to/R_HOME/library/stats/libs/stats.so
R
... run the boot example
% sprof /path/to/R_HOME/library/stats/libs/stats.so \
  /var/tmp/path/to/R_HOME/library/stats/libs/stats.so.profile

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  us/call  us/call  name
 76.19      0.32     0.32        0     0.00           numeric_deriv
 16.67      0.39     0.07        0     0.00           nls_iter
  7.14      0.42     0.03        0     0.00           getListElement

rm /var/tmp/path/to/R_HOME/library/stats/libs/stats.so.profile
... to clean up ...</code></pre>
</div>
<p>It is possible that root access is needed to create the directories used for the profile data.</p>
<p><a href="" id="oprofile-and-operf"></a></p>
<h4 id="oprofile-and-operf" class="subsection">3.4.1.2 oprofile and operf</h4>
<p>The <code class="calibre2">oprofile</code> project has two modes of operation. In what is now called ‘legacy’ mode, it is uses a daemon to collect information on a process (see below). Since version 0.9.8 (August 2012), the preferred mode is to use <code class="calibre2">operf</code>, so we discuss that first. The modes differ in how the profiling data is collected: it is analysed by tools such as <code class="calibre2">opreport</code> and <code class="calibre2">oppannote</code> in both.</p>
<p>Here is an example on <code class="calibre2">x86_64</code> Linux using R 3.0.2. File pvec.R contains the part of the examples from <code class="calibre2">pvec</code> in package <strong>parallel</strong>:</p>
<div class="example">
<pre class="example1"><code>library(parallel)
N &lt;- 1e6
dates &lt;- sprintf(&#39;%04d-%02d-%02d&#39;, as.integer(2000+rnorm(N)),
                 as.integer(runif(N, 1, 12)), as.integer(runif(N, 1, 28)))
system.time(a &lt;- as.POSIXct(dates, format = &quot;%Y-%m-%d&quot;))</code></pre>
</div>
<p>with timings from the final step</p>
<div class="example">
<pre class="example1"><code>   user  system elapsed
  0.371   0.237   0.612</code></pre>
</div>
<p>R-level profiling by <code class="calibre2">Rprof</code> shows</p>
<div class="example">
<pre class="example1"><code>                     self.time self.pct total.time total.pct
&quot;strptime&quot;                1.70    41.06       1.70     41.06
&quot;as.POSIXct.POSIXlt&quot;      1.40    33.82       1.42     34.30
&quot;sprintf&quot;                 0.74    17.87       0.98     23.67
...</code></pre>
</div>
<p>so the conversion from character to <code class="calibre2">POSIXlt</code> takes most of the time.</p>
<p>This can be run under <code class="calibre2">operf</code> and analysed by</p>
<div class="example">
<pre class="example1"><code>operf R -f pvec.R
opreport
opreport -l /path/to/R_HOME/bin/exec/R
opannotate --source /path/to/R_HOME/bin/exec/R
## And for the system time
opreport -l /lib64/libc.so.6</code></pre>
</div>
<p>The first report shows where (which library etc) the time was spent:</p>
<div class="example">
<pre class="example1"><code>CPU_CLK_UNHALT...|
  samples|      %|
------------------
   166761 99.9161 Rdev
        CPU_CLK_UNHALT...|
          samples|      %|
        ------------------
            70586 42.3276 no-vmlinux
            56963 34.1585 libc-2.16.so
            36922 22.1407 R
             1584  0.9499 stats.so
              624  0.3742 libm-2.16.so
...</code></pre>
</div>
<p>The rest of the output is voluminous, and only extracts are shown below.</p>
<p>Most of the time within R is spent in</p>
<div class="example">
<pre class="example1"><code>samples  %        image name symbol name
10397    28.5123  R           R_gc_internal
5683     15.5848  R           do_sprintf
3036      8.3258  R           do_asPOSIXct
2427      6.6557  R           do_strptime
2421      6.6392  R           Rf_mkCharLenCE
1480      4.0587  R           w_strptime_internal
1202      3.2963  R           Rf_qnorm5
1165      3.1948  R           unif_rand
675       1.8511  R           mktime0
617       1.6920  R           makelt
617       1.6920  R           validate_tm
584       1.6015  R           day_of_the_week
...</code></pre>
</div>
<p><code class="calibre2">opannotate</code> shows that 31% of the time in R is spent in memory.c, 21% in datetime.c and 7% in Rstrptime.h. The analysis for libc showed that calls to <code class="calibre2">wcsftime</code> dominated, so those calls were cached for R 3.0.3: the time spent in <code class="calibre2">no-vmlinux</code> (the kernel) was reduced dramatically.</p>
<p>On platforms which support it, call graphs can be produced by <code class="calibre2">opcontrol --callgraph</code> if collected via <code class="calibre2">operf --callgraph</code>.</p>
<p>The profiling data is by default stored in sub-directory oprofile_data of the current directory, which can be removed at the end of the session.</p>
<p>Another example, from <a href="https://CRAN.R-project.org/package=sm"><strong>sm</strong></a> version 2.2-5.4. The example for <code class="calibre2">sm.variogram</code> took a long time:</p>
<div class="example">
<pre class="example1"><code>system.time(example(sm.variogram))
...
   user  system elapsed
  5.543   3.202   8.785</code></pre>
</div>
<p>including a lot of system time. Profiling just the slow part, the second plot, showed</p>
<div class="example">
<pre class="example1"><code>  samples|      %|
------------------
   381845 99.9885 R
        CPU_CLK_UNHALT...|
          samples|      %|
        ------------------
           187484 49.0995 sm.so
           169627 44.4230 no-vmlinux
            12636  3.3092 libgfortran.so.3.0.0
             6455  1.6905 R</code></pre>
</div>
<p>so the system time was almost all in the Linux kernel. It is possible to dig deeper if you have a matching uncompressed kernel with debug symbols to specify <em>via</em> --vmlinux: we did not.</p>
<p>In ‘legacy’ mode <code class="calibre2">oprofile</code> works by running a daemon which collects information. The daemon must be started as root, e.g.</p>
<div class="example">
<pre class="example1"><code>% su
% opcontrol --no-vmlinux
% (optional, some platforms) opcontrol --callgraph=5
% opcontrol --start
% exit</code></pre>
</div>
<p>Then as a user</p>
<div class="example">
<pre class="example1"><code>% R
... run the boot example
% opcontrol --dump
% opreport -l /path/to/R_HOME/library/stats/libs/stats.so
...
samples  %        symbol name
1623     75.5939  anonymous symbol from section .plt
349      16.2552  numeric_deriv
113       5.2632  nls_iter
62        2.8878  getListElement
% opreport -l /path/to/R_HOME/bin/exec/R
...
samples  %        symbol name
76052    11.9912  Rf_eval
54670     8.6198  Rf_findVarInFrame3
37814     5.9622  Rf_allocVector
31489     4.9649  Rf_duplicate
28221     4.4496  Rf_protect
26485     4.1759  Rf_cons
23650     3.7289  Rf_matchArgs
21088     3.3250  Rf_findFun
19995     3.1526  findVarLocInFrame
14871     2.3447  Rf_evalList
13794     2.1749  R_Newhashpjw
13522     2.1320  R_gc_internal
...</code></pre>
</div>
<p>Shutting down the profiler and clearing the records needs to be done as root.</p>
<hr />
<p><a href="" id="Solaris"></a> <a href="" id="Solaris-1"></a></p>
<h4 id="solaris" class="subsection">3.4.2 Solaris</h4>
<p>On 64-bit (only) Solaris, the standard profiling tool <code class="calibre2">gprof</code> collects information from shared objects compiled with -pg.</p>
<hr />
<p><a href="" id="macOS"></a> <a href="" id="macOS-1"></a></p>
<h4 id="macos" class="subsection">3.4.3 macOS</h4>
<p>Developers have recommended <code class="calibre2">sample</code> (or <code class="calibre2">Sampler.app</code>, which is a GUI version), <code class="calibre2">Shark</code> (in version of <code class="calibre2">Xcode</code> up to those for Snow Leopard), and <code class="calibre2">Instruments</code> (part of <code class="calibre2">Xcode</code>, see <a href="https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html" class="uri">https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html</a>).</p>
<hr />
<p><a href="" id="Debugging"></a> <a href="" id="Debugging-1"></a></p>
<div id="calibre_pb_10" class="calibre6">

</div>

<!--chapter:end:07-R-exts.Rmd-->

#  Debugging
<p>This chapter covers the debugging of R extensions, starting with the ways to get useful error information and moving on to how to deal with errors that crash R. For those who prefer other styles there are contributed packages such as <a href="https://CRAN.R-project.org/package=debug"><strong>debug</strong></a> on CRAN (described in an article in <a href="https://CRAN.R-project.org/doc/Rnews/Rnews_2003-3.pdf">R-News 3/3</a>). (There are notes from 2002 provided by Roger Peng at <a href="http://www.biostat.jhsph.edu/~rpeng/docs/R-debug-tools.pdf" class="uri">http://www.biostat.jhsph.edu/~rpeng/docs/R-debug-tools.pdf</a> which provide complementary examples to those given here.)</p>
<hr />
<p><a href="" id="Browsing"></a> <a href="" id="Browsing-1"></a></p>
<h3 id="browsing" class="section">4.1 Browsing</h3>
<p><a href="" id="index-browser"></a></p>
<p>Most of the R-level debugging facilities are based around the built-in browser. This can be used directly by inserting a call to <code class="calibre2">browser()</code> into the code of a function (for example, using <code class="calibre2">fix(my_function)</code> ). When code execution reaches that point in the function, control returns to the R console with a special prompt. For example</p>
<div class="example">
<pre class="example1"><code>&gt; fix(summary.data.frame) ## insert browser() call after for() loop
&gt; summary(women)
Called from: summary.data.frame(women)
Browse[1]&gt; ls()
 [1] &quot;digits&quot; &quot;i&quot;      &quot;lbs&quot;    &quot;lw&quot;     &quot;maxsum&quot; &quot;nm&quot;     &quot;nr&quot;     &quot;nv&quot;
 [9] &quot;object&quot; &quot;sms&quot;    &quot;z&quot;
Browse[1]&gt; maxsum
[1] 7
Browse[1]&gt;
     height         weight
 Min.   :58.0   Min.   :115.0
 1st Qu.:61.5   1st Qu.:124.5
 Median :65.0   Median :135.0
 Mean   :65.0   Mean   :136.7
 3rd Qu.:68.5   3rd Qu.:148.0
 Max.   :72.0   Max.   :164.0
&gt; rm(summary.data.frame)</code></pre>
</div>
<p>At the browser prompt one can enter any R expression, so for example <code class="calibre2">ls()</code> lists the objects in the current frame, and entering the name of an object will<a href="R-exts_split_014.html#FOOT103" id="DOCF103"><sup>103</sup></a> print it. The following commands are also accepted</p>
<ul>
<li><p><code class="calibre2">n</code></p>
<p>Enter ‘step-through’ mode. In this mode, hitting return executes the next line of code (more precisely one line and any continuation lines). Typing <code class="calibre2">c</code> will continue to the end of the current context, e.g. to the end of the current loop or function.</p></li>
<li><p><code class="calibre2">c</code></p>
<p>In normal mode, this quits the browser and continues execution, and just return works in the same way. <code class="calibre2">cont</code> is a synonym.</p></li>
<li><p><code class="calibre2">where</code></p>
<p>This prints the call stack. For example</p>
<div class="example">
<pre class="example1"><code>&gt; summary(women)
Called from: summary.data.frame(women)
Browse[1]&gt; where
where 1: summary.data.frame(women)
where 2: summary(women)

Browse[1]&gt;</code></pre>
</div></li>
<li><p><code class="calibre2">Q</code></p>
<p>Quit both the browser and the current expression, and return to the top-level prompt.</p></li>
</ul>
<p>Errors in code executed at the browser prompt will normally return control to the browser prompt. Objects can be altered by assignment, and will keep their changed values when the browser is exited. If really necessary, objects can be assigned to the workspace from the browser prompt (by using <code class="calibre2">&lt;&lt;-</code> if the name is not already in scope).</p>
<hr />
<p><a href="" id="Debugging-R-code"></a> <a href="" id="Debugging-R-code-1"></a></p>
<h3 id="debugging-r-code" class="section">4.2 Debugging R code</h3>
<p><a href="" id="index-traceback"></a></p>
<p>Suppose your R program gives an error message. The first thing to find out is what R was doing at the time of the error, and the most useful tool is <code class="calibre2">traceback()</code>. We suggest that this is run whenever the cause of the error is not immediately obvious. Daily, errors are reported to the R mailing lists as being in some package when <code class="calibre2">traceback()</code> would show that the error was being reported by some other package or base R. Here is an example from the regression suite.</p>
<div class="example">
<pre class="smallexample"><code>&gt; success &lt;- c(13,12,11,14,14,11,13,11,12)
&gt; failure &lt;- c(0,0,0,0,0,0,0,2,2)
&gt; resp &lt;- cbind(success, failure)
&gt; predictor &lt;- c(0, 5^(0:7))
&gt; glm(resp ~ 0+predictor, family = binomial(link=&quot;log&quot;))
Error: no valid set of coefficients has been found: please supply starting values
&gt; traceback()
3: stop(&quot;no valid set of coefficients has been found: please supply
         starting values&quot;, call. = FALSE)
2: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart,
       mustart = mustart, offset = offset, family = family, control = control,
       intercept = attr(mt, &quot;intercept&quot;) &gt; 0)
1: glm(resp ~ 0 + predictor, family = binomial(link =&quot;log&quot;))</code></pre>
</div>
<p>The calls to the active frames are given in reverse order (starting with the innermost). So we see the error message comes from an explicit check in <code class="calibre2">glm.fit</code>. (<code class="calibre2">traceback()</code> shows you all the lines of the function calls, which can be limited by setting <code class="calibre2">option</code> &quot;deparse.max.lines&quot;.)</p>
<p>Sometimes the traceback will indicate that the error was detected inside compiled code, for example (from <code class="calibre2">?nls</code>)</p>
<div class="example">
<pre class="smallexample"><code>Error in nls(y ~ a + b * x, start = list(a = 0.12345, b = 0.54321), trace = TRUE) :
        step factor 0.000488281 reduced below ‘minFactor’ of 0.000976563
&gt;  traceback()
2: .Call(R_nls_iter, m, ctrl, trace)
1: nls(y ~ a + b * x, start = list(a = 0.12345, b = 0.54321), trace = TRUE)</code></pre>
</div>
<p>This will be the case if the innermost call is to <code class="calibre2">.C</code>, <code class="calibre2">.Fortran</code>, <code class="calibre2">.Call</code>, <code class="calibre2">.External</code> or <code class="calibre2">.Internal</code>, but as it is also possible for such code to evaluate R expressions, this need not be the innermost call, as in</p>
<div class="example">
<pre class="smallexample"><code>&gt; traceback()
9: gm(a, b, x)
8: .Call(R_numeric_deriv, expr, theta, rho, dir)
7: numericDeriv(form[[3]], names(ind), env)
6: getRHS()
5: assign(&quot;rhs&quot;, getRHS(), envir = thisEnv)
4: assign(&quot;resid&quot;, .swts * (lhs - assign(&quot;rhs&quot;, getRHS(), envir = thisEnv)),
       envir = thisEnv)
3: function (newPars)
   {
       setPars(newPars)
       assign(&quot;resid&quot;, .swts * (lhs - assign(&quot;rhs&quot;, getRHS(), envir = thisEnv)),
           envir = thisEnv)
       assign(&quot;dev&quot;, sum(resid^2), envir = thisEnv)
       assign(&quot;QR&quot;, qr(.swts * attr(rhs, &quot;gradient&quot;)), envir = thisEnv)
       return(QR$rank &lt; min(dim(QR$qr)))
   }(c(-0.00760232418963883, 1.00119632515036))
2: .Call(R_nls_iter, m, ctrl, trace)
1: nls(yeps ~ gm(a, b, x), start = list(a = 0.12345, b = 0.54321))</code></pre>
</div>
<p>Occasionally <code class="calibre2">traceback()</code> does not help, and this can be the case if S4 method dispatch is involved. Consider the following example</p>
<div class="example">
<pre class="example1"><code>&gt; xyd &lt;- new(&quot;xyloc&quot;, x=runif(20), y=runif(20))
Error in as.environment(pkg) : no item called &quot;package:S4nswv&quot;
on the search list
Error in initialize(value, ...) : S language method selection got
an error when called from internal dispatch for function ‘initialize’
&gt; traceback()
2: initialize(value, ...)
1: new(&quot;xyloc&quot;, x = runif(20), y = runif(20))</code></pre>
</div>
<p>which does not help much, as there is no call to <code class="calibre2">as.environment</code> in <code class="calibre2">initialize</code> (and the note “called from internal dispatch” tells us so). In this case we searched the R sources for the quoted call, which occurred in only one place, <code class="calibre2">methods:::.asEnvironmentPackage</code>. So now we knew where the error was occurring. (This was an unusually opaque example.)</p>
<p>The error message</p>
<div class="example">
<pre class="example1"><code>evaluation nested too deeply: infinite recursion / options(expressions=)?</code></pre>
</div>
<p>can be hard to handle with the default value (5000). Unless you know that there actually is deep recursion going on, it can help to set something like</p>
<div class="example">
<pre class="example1"><code>options(expressions=500)</code></pre>
</div>
<p>and re-run the example showing the error.</p>
<p>Sometimes there is warning that clearly is the precursor to some later error, but it is not obvious where it is coming from. Setting <code class="calibre2">options(warn = 2)</code> (which turns warnings into errors) can help here.</p>
<p>Once we have located the error, we have some choices. One way to proceed is to find out more about what was happening at the time of the crash by looking a <em>post-mortem</em> dump. To do so, set <a href="" id="index-dump_002eframes"></a> <code class="calibre2">options(error=dump.frames)</code> and run the code again. Then invoke <code class="calibre2">debugger()</code> and explore the dump. Continuing our example:</p>
<div class="example">
<pre class="smallexample"><code>&gt; options(error = dump.frames)
&gt; glm(resp ~ 0 + predictor, family = binomial(link =&quot;log&quot;))
Error: no valid set of coefficients has been found: please supply starting values</code></pre>
</div>
<p>which is the same as before, but an object called <code class="calibre2">last.dump</code> has appeared in the workspace. (Such objects can be large, so remove it when it is no longer needed.) We can examine this at a later time by calling the function <code class="calibre2">debugger</code>. <a href="" id="index-debugger"></a></p>
<div class="example">
<pre class="smallexample"><code>&gt; debugger()
Message:  Error: no valid set of coefficients has been found: please supply starting values
Available environments had calls:
1: glm(resp ~ 0 + predictor, family = binomial(link = &quot;log&quot;))
2: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart, mus
3: stop(&quot;no valid set of coefficients has been found: please supply starting values
Enter an environment number, or 0 to exit  Selection:</code></pre>
</div>
<p>which gives the same sequence of calls as <code class="calibre2">traceback</code>, but in outer-first order and with only the first line of the call, truncated to the current width. However, we can now examine in more detail what was happening at the time of the error. Selecting an environment opens the browser in that frame. So we select the function call which spawned the error message, and explore some of the variables (and execute two function calls).</p>
<div class="example">
<pre class="smallexample"><code>Enter an environment number, or 0 to exit  Selection: 2
Browsing in the environment with call:
   glm.fit(x = X, y = Y, weights = weights, start = start, etas
Called from: debugger.look(ind)
Browse[1]&gt; ls()
 [1] &quot;aic&quot;        &quot;boundary&quot;   &quot;coefold&quot;    &quot;control&quot;    &quot;conv&quot;
 [6] &quot;dev&quot;        &quot;dev.resids&quot; &quot;devold&quot;     &quot;EMPTY&quot;      &quot;eta&quot;
[11] &quot;etastart&quot;   &quot;family&quot;     &quot;fit&quot;        &quot;good&quot;       &quot;intercept&quot;
[16] &quot;iter&quot;       &quot;linkinv&quot;    &quot;mu&quot;         &quot;mu.eta&quot;     &quot;mu.eta.val&quot;
[21] &quot;mustart&quot;    &quot;n&quot;          &quot;ngoodobs&quot;   &quot;nobs&quot;       &quot;nvars&quot;
[26] &quot;offset&quot;     &quot;start&quot;      &quot;valideta&quot;   &quot;validmu&quot;    &quot;variance&quot;
[31] &quot;varmu&quot;      &quot;w&quot;          &quot;weights&quot;    &quot;x&quot;          &quot;xnames&quot;
[36] &quot;y&quot;          &quot;ynames&quot;     &quot;z&quot;
Browse[1]&gt; eta
            1             2             3             4             5
 0.000000e+00 -2.235357e-06 -1.117679e-05 -5.588393e-05 -2.794197e-04
            6             7             8             9
-1.397098e-03 -6.985492e-03 -3.492746e-02 -1.746373e-01
Browse[1]&gt; valideta(eta)
[1] TRUE
Browse[1]&gt; mu
        1         2         3         4         5         6         7         8
1.0000000 0.9999978 0.9999888 0.9999441 0.9997206 0.9986039 0.9930389 0.9656755
        9
.8397616
Browse[1]&gt; validmu(mu)
[1] FALSE
Browse[1]&gt; c
Available environments had calls:
1: glm(resp ~ 0 + predictor, family = binomial(link = &quot;log&quot;))
2: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart
3: stop(&quot;no valid set of coefficients has been found: please supply starting v

Enter an environment number, or 0 to exit  Selection: 0
&gt; rm(last.dump)</code></pre>
</div>
<p>Because <code class="calibre2">last.dump</code> can be looked at later or even in another R session, post-mortem debugging is possible even for batch usage of R. We do need to arrange for the dump to be saved: this can be done either using the command-line flag --save to save the workspace at the end of the run, or <em>via</em> a setting such as</p>
<div class="example">
<pre class="example1"><code>&gt; options(error = quote({dump.frames(to.file=TRUE); q()}))</code></pre>
</div>
<p>See the help on <code class="calibre2">dump.frames</code> for further options and a worked example.</p>
<p><a href="" id="index-recover"></a></p>
<p>An alternative error action is to use the function <code class="calibre2">recover()</code>:</p>
<div class="example">
<pre class="smallexample"><code>&gt; options(error = recover)
&gt; glm(resp ~ 0 + predictor, family = binomial(link = &quot;log&quot;))
Error: no valid set of coefficients has been found: please supply starting values

Enter a frame number, or 0 to exit

1: glm(resp ~ 0 + predictor, family = binomial(link = &quot;log&quot;))
2: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart

Selection:</code></pre>
</div>
<p>which is very similar to <code class="calibre2">dump.frames</code>. However, we can examine the state of the program directly, without dumping and re-loading the dump. As its help page says, <code class="calibre2">recover</code> can be routinely used as the error action in place of <code class="calibre2">dump.calls</code> and <code class="calibre2">dump.frames</code>, since it behaves like <code class="calibre2">dump.frames</code> in non-interactive use.</p>
<p><a href="" id="index-debug"></a></p>
<p>Post-mortem debugging is good for finding out exactly what went wrong, but not necessarily why. An alternative approach is to take a closer look at what was happening just before the error, and a good way to do that is to use <code class="calibre2">debug</code>. This inserts a call to the browser at the beginning of the function, starting in step-through mode. So in our example we could use</p>
<div class="example">
<pre class="smallexample"><code>&gt; debug(glm.fit)
&gt; glm(resp ~ 0 + predictor, family = binomial(link =&quot;log&quot;))
debugging in: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart,
    mustart = mustart, offset = offset, family = family, control = control,
    intercept = attr(mt, &quot;intercept&quot;) &gt; 0)
debug: {
## lists the whole function
Browse[1]&gt;
debug: x &lt;- as.matrix(x)
...
Browse[1]&gt; start
[1] -2.235357e-06
debug: eta &lt;- drop(x %*% start)
Browse[1]&gt; eta
            1             2             3             4             5
 0.000000e+00 -2.235357e-06 -1.117679e-05 -5.588393e-05 -2.794197e-04
            6             7             8             9
-1.397098e-03 -6.985492e-03 -3.492746e-02 -1.746373e-01
Browse[1]&gt;
debug: mu &lt;- linkinv(eta &lt;- eta + offset)
Browse[1]&gt; mu
        1         2         3         4         5         6         7         8
1.0000000 0.9999978 0.9999888 0.9999441 0.9997206 0.9986039 0.9930389 0.9656755
        9
.8397616</code></pre>
</div>
<p>(The prompt <code class="calibre2">Browse[1]&gt;</code> indicates that this is the first level of browsing: it is possible to step into another function that is itself being debugged or contains a call to <code class="calibre2">browser()</code>.)</p>
<p><code class="calibre2">debug</code> can be used for hidden functions and S3 methods by e.g. <code class="calibre2">debug(stats:::predict.Arima)</code>. (It cannot be used for S4 methods, but an alternative is given on the help page for <code class="calibre2">debug</code>.) Sometimes you want to debug a function defined inside another function, e.g. the function <code class="calibre2">arimafn</code> defined inside <code class="calibre2">arima</code>. To do so, set <code class="calibre2">debug</code> on the outer function (here <code class="calibre2">arima</code>) and step through it until the inner function has been defined. Then call <code class="calibre2">debug</code> on the inner function (and use <code class="calibre2">c</code> to get out of step-through mode in the outer function).</p>
<p><a href="" id="index-undebug"></a></p>
<p>To remove debugging of a function, call <code class="calibre2">undebug</code> with the argument previously given to <code class="calibre2">debug</code>; debugging otherwise lasts for the rest of the R session (or until the function is edited or otherwise replaced).</p>
<p><a href="" id="index-trace"></a></p>
<p><code class="calibre2">trace</code> can be used to temporarily insert debugging code into a function, for example to insert a call to <code class="calibre2">browser()</code> just before the point of the error. To return to our running example</p>
<div class="example">
<pre class="example1"><code>## first get a numbered listing of the expressions of the function
&gt; page(as.list(body(glm.fit)), method=&quot;print&quot;)
&gt; trace(glm.fit, browser, at=22)
Tracing function &quot;glm.fit&quot; in package &quot;stats&quot;
[1] &quot;glm.fit&quot;
&gt; glm(resp ~ 0 + predictor, family = binomial(link =&quot;log&quot;))
Tracing glm.fit(x = X, y = Y, weights = weights, start = start,
   etastart = etastart,  .... step 22
Called from: eval(expr, envir, enclos)
Browse[1]&gt; n
## and single-step from here.
&gt; untrace(glm.fit)</code></pre>
</div>
<p>For your own functions, it may be as easy to use <code class="calibre2">fix</code> to insert temporary code, but <code class="calibre2">trace</code> can help with functions in a namespace (as can <code class="calibre2">fixInNamespace</code>). Alternatively, use <code class="calibre2">trace(,edit=TRUE)</code> to insert code visually.</p>
<hr />
<p><a href="" id="Checking-memory-access"></a> <a href="" id="Checking-memory-access-1"></a></p>
<h3 id="checking-memory-access" class="section">4.3 Checking memory access</h3>
<p>Errors in memory allocation and reading/writing outside arrays are very common causes of crashes (e.g., segfaults) on some machines. Often the crash appears long after the invalid memory access: in particular damage to the structures which R itself has allocated may only become apparent at the next garbage collection (or even at later garbage collections after objects have been deleted).</p>
<p>Note that memory access errors may be seen with LAPACK, BLAS, OpenMP and Java-using packages: some at least of these seem to be intentional, and some are related to passing characters to Fortran.</p>
<p>Some of these tools can detect mismatched allocation and deallocation. C++ programmers should note that memory allocated by <code class="calibre2">new []</code> must be freed by <code class="calibre2">delete []</code>, other uses of <code class="calibre2">new</code> by <code class="calibre2">delete</code>, and memory allocated by <code class="calibre2">malloc</code>, <code class="calibre2">calloc</code> and <code class="calibre2">realloc</code> by <code class="calibre2">free</code>. Some platforms will tolerate mismatches (perhaps with memory leaks) but others will segfault.</p>
<hr />
<p><a href="" id="Using-gctorture"></a> <a href="" id="Using-gctorture-1"></a></p>
<h4 id="using-gctorture" class="subsection">4.3.1 Using gctorture</h4>
<p><a href="" id="index-gctorture"></a></p>
<p>We can help to detect memory problems in R objects earlier by running garbage collection as often as possible. This is achieved by <code class="calibre2">gctorture(TRUE)</code>, which as described on its help page</p>
<blockquote>
<p>Provokes garbage collection on (nearly) every memory allocation. Intended to ferret out memory protection bugs. Also makes R run <em>very</em> slowly, unfortunately.</p>
</blockquote>
<p>The reference to ‘memory protection’ is to missing C-level calls to <code class="calibre2">PROTECT</code>/<code class="calibre2">UNPROTECT</code> (see <a href="R-exts_split_009.html#Garbage-Collection">Garbage Collection</a>) which if missing allow R objects to be garbage-collected when they are still in use. But it can also help with other memory-related errors.</p>
<p>Normally running under <code class="calibre2">gctorture(TRUE)</code> will just produce a crash earlier in the R program, hopefully close to the actual cause. See the next section for how to decipher such crashes.</p>
<p>It is possible to run all the examples, tests and vignettes covered by <code class="calibre2">R CMD check</code> under <code class="calibre2">gctorture(TRUE)</code> by using the option --use-gct.</p>
<p>The function <code class="calibre2">gctorture2</code> provides more refined control over the GC torture process. Its arguments <code class="calibre2">step</code>, <code class="calibre2">wait</code> and <code class="calibre2">inhibit_release</code> are documented on its help page. Environment variables can also be used at the start of the R session to turn on GC torture: <code class="calibre2">R_GCTORTURE</code> corresponds to the <code class="calibre2">step</code> argument to <code class="calibre2">gctorture2</code>, <code class="calibre2">R_GCTORTURE_WAIT</code> to <code class="calibre2">wait</code>, and <code class="calibre2">R_GCTORTURE_INHIBIT_RELEASE</code> to <code class="calibre2">inhibit_release</code>.</p>
<p>If R is configured with --enable-strict-barrier then a variety of tests for the integrity of the write barrier are enabled. In addition tests to help detect protect issues are enabled:</p>
<ul>
<li>All GCs are full GCs.</li>
<li>New nodes in small node pages are marked as <code class="calibre2">NEWSXP</code> on creation.</li>
<li>After a GC all free nodes that are not of type <code class="calibre2">NEWSXP</code> are marked as type <code class="calibre2">FREESXP</code> and their previous type is recorded.</li>
<li>Most calls to accessor functions check their <code class="calibre2">SEXP</code> inputs and <code class="calibre2">SEXP</code> outputs and signal an error if a <code class="calibre2">FREESXP</code> is found. The address of the node and the old type are included in the error message.</li>
</ul>
<p><code class="calibre2">R CMD check --use-gct</code> can be set to use <code class="calibre2">gctorture2(n)</code> rather than <code class="calibre2">gctorture(TRUE)</code> by setting environment variable <code class="calibre2">_R_CHECK_GCT_N_</code> to a positive integer value to be used as <code class="calibre2">n</code>.</p>
<p>Used with a debugger and with <code class="calibre2">gctorture</code> or <code class="calibre2">gctorture2</code> this mechanism can be helpful in isolating memory protect problems.</p>
<hr />
<p><a href="" id="Using-valgrind"></a> <a href="" id="Using-valgrind-1"></a></p>
<h4 id="using-valgrind" class="subsection">4.3.2 Using valgrind</h4>
<p>If you have access to Linux on a common CPU type or supported versions of macOS<a href="R-exts_split_014.html#FOOT104" id="DOCF104"><sup>104</sup></a> you can use <code class="calibre2">valgrind</code> (<a href="http://www.valgrind.org/" class="uri">http://www.valgrind.org/</a>, pronounced to rhyme with ‘tinned’) to check for possible problems. To run some examples under <code class="calibre2">valgrind</code> use something like</p>
<div class="example">
<pre class="example1"><code>R -d valgrind --vanilla &lt; mypkg-Ex.R
R -d &quot;valgrind --tool=memcheck --leak-check=full&quot; --vanilla &lt; mypkg-Ex.R</code></pre>
</div>
<p>where mypkg-Ex.R is a set of examples, e.g. the file created in mypkg.Rcheck by <code class="calibre2">R CMD check</code>. Occasionally this reports memory reads of ‘uninitialised values’ that are the result of compiler optimization, so can be worth checking under an unoptimized compile: for maximal information use a build with debugging symbols. We know there will be some small memory leaks from <code class="calibre2">readline</code> and R itself — these are memory areas that are in use right up to the end of the R session. Expect this to run around 20x slower than without <code class="calibre2">valgrind</code>, and in some cases much slower than that. Several versions of <code class="calibre2">valgrind</code> were not happy with some optimized BLASes that use CPU-specific instructions so you may need to build a version of R specifically to use with <code class="calibre2">valgrind</code>.</p>
<p>On platforms where <code class="calibre2">valgrind</code> is installed you can build a version of R with extra instrumentation to help <code class="calibre2">valgrind</code> detect errors in the use of memory allocated from the R heap. The <code class="calibre2">configure</code> option is --with-valgrind-instrumentation=level, where level is 0, 1 or 2. Level 0 is the default and does not add anything. Level 1 will detect some uses<a href="R-exts_split_014.html#FOOT105" id="DOCF105"><sup>105</sup></a> of uninitialised memory and has little impact on speed (compared to level 0). Level 2 will detect many other memory-use bugs<a href="R-exts_split_014.html#FOOT106" id="DOCF106"><sup>106</sup></a> but make R much slower when running under <code class="calibre2">valgrind</code>. Using this in conjunction with <code class="calibre2">gctorture</code> can be even more effective (and even slower).</p>
<p>An example of <code class="calibre2">valgrind</code> output is</p>
<div class="example">
<pre class="smallexample"><code>==12539== Invalid read of size 4
==12539==    at 0x1CDF6CBE: csc_compTr (Mutils.c:273)
==12539==    by 0x1CE07E1E: tsc_transpose (dtCMatrix.c:25)
==12539==    by 0x80A67A7: do_dotcall (dotcode.c:858)
==12539==    by 0x80CACE2: Rf_eval (eval.c:400)
==12539==    by 0x80CB5AF: R_execClosure (eval.c:658)
==12539==    by 0x80CB98E: R_execMethod (eval.c:760)
==12539==    by 0x1B93DEFA: R_standardGeneric (methods_list_dispatch.c:624)
==12539==    by 0x810262E: do_standardGeneric (objects.c:1012)
==12539==    by 0x80CAD23: Rf_eval (eval.c:403)
==12539==    by 0x80CB2F0: Rf_applyClosure (eval.c:573)
==12539==    by 0x80CADCC: Rf_eval (eval.c:414)
==12539==    by 0x80CAA03: Rf_eval (eval.c:362)
==12539==  Address 0x1C0D2EA8 is 280 bytes inside a block of size 1996 alloc&#39;d
==12539==    at 0x1B9008D1: malloc (vg_replace_malloc.c:149)
==12539==    by 0x80F1B34: GetNewPage (memory.c:610)
==12539==    by 0x80F7515: Rf_allocVector (memory.c:1915)
...</code></pre>
</div>
<p>This example is from an instrumented version of R, while tracking down a bug in the <a href="https://CRAN.R-project.org/package=Matrix"><strong>Matrix</strong></a> package in 2006. The first line indicates that R has tried to read 4 bytes from a memory address that it does not have access to. This is followed by a C stack trace showing where the error occurred. Next is a description of the memory that was accessed. It is inside a block allocated by <code class="calibre2">malloc</code>, called from <code class="calibre2">GetNewPage</code>, that is, in the internal R heap. Since this memory all belongs to R, <code class="calibre2">valgrind</code> would not (and did not) detect the problem in an uninstrumented build of R. In this example the stack trace was enough to isolate and fix the bug, which was in <code class="calibre2">tsc_transpose</code>, and in this example running under <code class="calibre2">gctorture()</code> did not provide any additional information. When the stack trace is not sufficiently informative the option --db-attach=yes to <code class="calibre2">valgrind</code> may be helpful. This starts a post-mortem debugger (by default <code class="calibre2">gdb</code>) so that variables in the C code can be inspected (see <a href="#Inspecting-R-objects">Inspecting R objects</a>).</p>
<p><code class="calibre2">valgrind</code> is good at spotting the use of uninitialized values: use option --track-origins=yes to show where these originated from. What it cannot detect is the misuse of arrays allocated on the stack: this includes C automatic variables and some<a href="R-exts_split_014.html#FOOT107" id="DOCF107"><sup>107</sup></a> Fortran arrays.</p>
<p>It is possible to run all the examples, tests and vignettes covered by <code class="calibre2">R CMD check</code> under <code class="calibre2">valgrind</code> by using the option --use-valgrind. If you do this you will need to select the <code class="calibre2">valgrind</code> options some other way, for example by having a ~/.valgrindrc file containing</p>
<div class="example">
<pre class="example1"><code>--leak-check=full
--track-origins=yes</code></pre>
</div>
<p>or setting the environment variable <code class="calibre2">VALGRIND_OPTS</code>.</p>
<p>On macOS you may need to ensure that debugging symbols are made available (so <code class="calibre2">valgrind</code> reports line numbers in files). This can usually be done with the <code class="calibre2">valgrind</code> option --dsymutil=yes to ask for the symbols to be dumped when the .so file is loaded. This will not work where packages are installed into a system area (such as the R.framework) and can be slow. Installing packages with <code class="calibre2">R CMD INSTALL --dsym</code> installs the dumped symbols. (This can also be done by setting environment variable <code class="calibre2">PKG_MAKE_DSYM</code> to a non-empty value before the <code class="calibre2">INSTALL</code>.)</p>
<p>This section has described the use of <code class="calibre2">memtest</code>, the default (and most useful) of <code class="calibre2">valgrind</code>’s tools. There are others described in its documentation: <code class="calibre2">helgrind</code> can be useful for threaded programs.</p>
<hr />
<p><a href="" id="Using-Address-Sanitizer"></a> <a href="" id="Using-the-Address-Sanitizer"></a></p>
<h4 id="using-the-address-sanitizer" class="subsection">4.3.3 Using the Address Sanitizer</h4>
<p><code class="calibre2">AddressSanitizer</code> (‘ASan’) is a tool with similar aims to the memory checker in <code class="calibre2">valgrind</code>. It is available with suitable builds<a href="R-exts_split_014.html#FOOT108" id="DOCF108"><sup>108</sup></a> of <code class="calibre2">gcc</code> and <code class="calibre2">clang</code> on common Linux and macOS platforms. See <a href="http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation" class="uri">http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation</a>, <a href="http://clang.llvm.org/docs/AddressSanitizer.html" class="uri">http://clang.llvm.org/docs/AddressSanitizer.html</a> and <a href="https://code.google.com/p/address-sanitizer/" class="uri">https://code.google.com/p/address-sanitizer/</a>.</p>
<p>More thorough checks of C++ code are done if the C++ library has been ‘annotated’: at the time of writing this applied to <code class="calibre2">std::vector</code> in <code class="calibre2">libc++</code> for use with <code class="calibre2">clang</code> and gives rise to ‘container-overflow’<a href="R-exts_split_014.html#FOOT109" id="DOCF109"><sup>109</sup></a> reports.</p>
<p>It requires code to have been compiled <em>and linked</em> with -fsanitize=address and compiling with <code class="calibre2">-fno-omit-frame-pointer</code> will give more legible reports. It has a runtime penalty of 2–3x, extended compilation times and uses substantially more memory, often 1–2GB, at run time. On 64-bit platforms it reserves (but does not allocate) 16–20TB of virtual memory: restrictive shell settings can cause problems.</p>
<p>By comparison with <code class="calibre2">valgrind</code>, ASan can detect misuse of stack and global variables but not the use of uninitialized memory.</p>
<p>Recent versions return symbolic addresses for the location of the error provided <code class="calibre2">llvm-symbolizer</code><a href="R-exts_split_014.html#FOOT110" id="DOCF110"><sup>110</sup></a> is on the path: if it is available but not on the path or has been renamed<a href="R-exts_split_014.html#FOOT111" id="DOCF111"><sup>111</sup></a>, one can use an environment variable, e.g.</p>
<div class="example">
<pre class="example1"><code>ASAN_SYMBOLIZER_PATH=/path/to/llvm-symbolizer</code></pre>
</div>
<p>An alternative is to pipe the output through <code class="calibre2">asan_symbolize.py</code><a href="R-exts_split_014.html#FOOT112" id="DOCF112"><sup>112</sup></a> and perhaps then (for compiled C++ code) <code class="calibre2">c++filt</code>. (On macOS, you may need to run <code class="calibre2">dsymutil</code> to get line-number reports.)</p>
<p>The simplest way to make use of this is to build a version of R with something like</p>
<div class="example">
<pre class="example1"><code>CC=&quot;gcc -std=gnu99 -fsanitize=address&quot;
CFLAGS=&quot;-fno-omit-frame-pointer -g -O2 -Wall -pedantic -mtune=native&quot;</code></pre>
</div>
<p>which will ensure that the <code class="calibre2">libasan</code> run-time library is compiled into the R executable. However this check can be enabled on a per-package basis by using a ~/.R/Makevars file like</p>
<div class="example">
<pre class="example1"><code>CC = gcc -std=gnu99 -fsanitize=address -fno-omit-frame-pointer
CXX = g++ -fsanitize=address -fno-omit-frame-pointer
F77 = gfortran -fsanitize=address
FC = gfortran -fsanitize=address</code></pre>
</div>
<p>(Note that <code class="calibre2">-fsanitize=address</code> has to be part of the compiler specification to ensure it is used for linking. These settings will not be honoured by packages which ignore ~/.R/Makevars.) It will be necessary to build R with</p>
<div class="example">
<pre class="example1"><code>MAIN_LDFLAGS = -fsanitize=address</code></pre>
</div>
<p>to link the runtime libraries into the R executable if it was not specified as part of ‘CC’ when R was built.</p>
<p>For options available <em>via</em> the environment variable <code class="calibre2">ASAN_OPTIONS</code> see <a href="https://code.google.com/p/address-sanitizer/wiki/AddressSanitizerFLags" class="uri">https://code.google.com/p/address-sanitizer/wiki/AddressSanitizerFLags</a>. With <code class="calibre2">gcc</code> additional control is available <em>via</em> the --param flag: see its <code class="calibre2">man</code> page.</p>
<p>For more detailed information on an error, R can be run under a debugger with a breakpoint set before the address sanitizer report is produced: for <code class="calibre2">gdb</code> or <code class="calibre2">lldb</code> you could use</p>
<div class="example">
<pre class="example1"><code>break __asan_report_error</code></pre>
</div>
<p>(See <a href="https://code.google.com/p/address-sanitizer/wiki/AddressSanitizer#gdb" class="uri">https://code.google.com/p/address-sanitizer/wiki/AddressSanitizer#gdb</a>.)</p>
<p>Recent versions<a href="R-exts_split_014.html#FOOT113" id="DOCF113"><sup>113</sup></a> added the flag -fsanitize-address-use-after-scope: see <a href="https://github.com/google/sanitizers/wiki/AddressSanitizerUseAfterScope" class="uri">https://github.com/google/sanitizers/wiki/AddressSanitizerUseAfterScope</a>.</p>
<hr />
<p><a href="" id="Using-Leak-Sanitizer"></a> <a href="" id="Using-the-Leak-Sanitizer"></a></p>
<h4 id="using-the-leak-sanitizer" class="subsection">4.3.3.1 Using the Leak Sanitizer</h4>
<p>For <code class="calibre2">x86_64</code> Linux there is a leak sanitizer, ‘LSan’: see <a href="https://code.google.com/p/address-sanitizer/wiki/LeakSanitizer" class="uri">https://code.google.com/p/address-sanitizer/wiki/LeakSanitizer</a>. This is available on recent versions of <code class="calibre2">gcc</code> and <code class="calibre2">clang</code>, and where available is compiled in as part of ASan.</p>
<p>One way to invoke this from an ASan-enabled build is by the environment variable</p>
<div class="example">
<pre class="example1"><code>ASAN_OPTIONS=&#39;detect_leaks=1&#39;</code></pre>
</div>
<p>However, this was made the default as from <code class="calibre2">clang</code> 3.5 and <code class="calibre2">gcc</code> 5.1.0.</p>
<p>When LSan is enabled, leaks give the process a failure error status (by default <code class="calibre2">23</code>). For an R package this means the R process, and as the parser retains some memory to the end of the process, if R itself was built against ASan, all runs will have a failure error status (which may include running R as part of building R itself).</p>
<p>To disable both this and some strict checking use</p>
<div class="example">
<pre class="example1"><code>setenv ASAN_OPTIONS ‘alloc_dealloc_mismatch=0:detect_leaks=0:detect_odr_violation=0’</code></pre>
</div>
<p>LSan also has a ‘stand-alone’ mode where it is compiled in using -fsanitize=leak and avoids the run-time overhead of ASan.</p>
<hr />
<p><a href="" id="Using-Undefined-Behaviour-Sanitizer"></a> <a href="" id="Using-the-Undefined-Behaviour-Sanitizer"></a></p>
<h4 id="using-the-undefined-behaviour-sanitizer" class="subsection">4.3.4 Using the Undefined Behaviour Sanitizer</h4>
<p>‘Undefined behaviour’ is where the language standard does not require particular behaviour from the compiler. Examples include division by zero (where for doubles R requires the ISO/IEC 60559 behaviour but C/C++ do not), use of zero-length arrays, shifts too far for signed types (e.g. <code class="calibre2">int x, y; y = x &lt;&lt; 31;</code>), out-of-range coercion, invalid C++ casts and mis-alignment. Not uncommon examples of out-of-range coercion in R packages are attempts to coerce a <code class="calibre2">NaN</code> or infinity to type <code class="calibre2">int</code> or <code class="calibre2">NA_INTEGER</code> to an unsigned type such as <code class="calibre2">size_t</code>. Also common is <code class="calibre2">y[x - 1]</code> forgetting that <code class="calibre2">x</code> might be <code class="calibre2">NA_INTEGER</code>.</p>
<p>‘UBSanitizer’ is a tool for C/C++ source code selected by -fsanitize=undefined in suitable builds<a href="R-exts_split_014.html#FOOT114" id="DOCF114"><sup>114</sup></a> of <code class="calibre2">clang</code> and GCC. Its (main) runtime library is linked into each package’s DLL, so it is less often needed to be included in <code class="calibre2">MAIN_LDFLAGS</code>.</p>
<p>This sanitizer can be combined with the Address Sanitizer by -fsanitize=undefined,address (where both are supported).</p>
<p>Finer control of what is checked can be achieved by other options: for <code class="calibre2">clang</code> see <a href="http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation" class="uri">http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation</a>.<a href="R-exts_split_014.html#FOOT115" id="DOCF115"><sup>115</sup></a> The current set for <code class="calibre2">clang</code> is (on a single line):</p>
<div class="example">
<pre class="example1"><code>-fsanitize=alignment,bool,bounds,enum,float-cast-overflow,
float-divide-by-zero,function,integer-divide-by-zero,nonnull-attribute,
null,object-size,pointer-overflow,return,returns-nonnull-attribute,shift,
signed-integer-overflow,unreachable,unsigned-integer-overflow,vla-bound,vptr</code></pre>
</div>
<p>(plus the more specific versions <code class="calibre2">shift-base</code> and <code class="calibre2">shift-exponent</code>) a subset of which could be combined with <code class="calibre2">address</code>, or use something like</p>
<div class="example">
<pre class="example1"><code>-fsanitize=undefined -fno-sanitize=float-divide-by-zero</code></pre>
</div>
<p>Options <code class="calibre2">function</code>, <code class="calibre2">return</code> and <code class="calibre2">vptr</code> apply only to C++: to use <code class="calibre2">vptr</code> its run-time library needs to be linked into the main R executable by building the latter with something like</p>
<div class="example">
<pre class="example1"><code>MAIN_LD=&quot;clang++ -fsanitize=undefined&quot;</code></pre>
</div>
<p>Option <code class="calibre2">float-divide-by-zero</code> is undesirable for use with R which allow such divisions as part of IEC 60559 arithmetic.</p>
<p>See <a href="https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html" class="uri">https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html</a> (or the manual for your version of GCC, installed or <em>via</em> <a href="https://gcc.gnu.org/onlinedocs/" class="uri">https://gcc.gnu.org/onlinedocs/</a>: look for ‘Program Instrumentation Options’) for the options supported by GCC: 6 and 7 support</p>
<div class="example">
<pre class="example1"><code>-fsanitize=alignment,bool,bounds,enum,integer-divide-by-zero,
nonnull-attribute,null,object-size, return,returns-nonnull-attribute,
shift,signed-integer-overflow,unreachable,vla-bound,vptr</code></pre>
</div>
<p>plus the more specific versions <code class="calibre2">shift-base</code> and <code class="calibre2">shift-exponent</code> and non-default options</p>
<div class="example">
<pre class="example1"><code>bound-strict,float-cast-overflow,float-divide-by-zero</code></pre>
</div>
<p>where <code class="calibre2">float-divide-by-zero</code> is not desirable for R uses and <code class="calibre2">bounds-strict</code> is an extension of <code class="calibre2">bounds</code>.</p>
<p>From GCC 8 <code class="calibre2">signed-integer-overflow</code> will no longer be a default part of -fsanitize=undefined, but can be specified separately.</p>
<p>Other useful flags include</p>
<div class="example">
<pre class="example1"><code>-no-fsanitize-recover</code></pre>
</div>
<p>which causes the first report to be fatal (it always is for the <code class="calibre2">unreachable</code> and <code class="calibre2">return</code> suboptions). For more detailed information on where the runtime error occurs, R can be run under a debugger with a breakpoint set before the sanitizer report is produced: for <code class="calibre2">gdb</code> or <code class="calibre2">lldb</code> you could use</p>
<div class="example">
<pre class="example1"><code>break __ubsan_handle_float_cast_overflow
break __ubsan_handle_float_cast_overflow_abort</code></pre>
</div>
<p>or similar (there are handlers for each type of undefined behaviour).</p>
<p>There are also the compiler flags -fcatch-undefined-behavior and -ftrapv, said to be more reliable in <code class="calibre2">clang</code> than <code class="calibre2">gcc</code>.</p>
<p>For more details on the topic see <a href="http://blog.regehr.org/archives/213" class="uri">http://blog.regehr.org/archives/213</a> and <a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html" class="uri">http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html</a> (which has 3 parts).</p>
<hr />
<p><a href="" id="Other-analyses-with-_0060clang_0027"></a> <a href="" id="Other-analyses-with-_0060clang_0027-1"></a></p>
<h4 id="other-analyses-with-clang" class="subsection">4.3.5 Other analyses with ‘clang’</h4>
<p>Recent versions of <code class="calibre2">clang</code> on ‘x86_64’ Linux have ‘ThreadSanitizer’ (<a href="https://code.google.com/p/thread-sanitizer/" class="uri">https://code.google.com/p/thread-sanitizer/</a>), a ‘data race detector for C/C++ programs’, and ‘MemorySanitizer’ (<a href="http://clang.llvm.org/docs/MemorySanitizer.html" class="uri">http://clang.llvm.org/docs/MemorySanitizer.html</a>, <a href="https://code.google.com/p/memory-sanitizer/wiki/MemorySanitizer" class="uri">https://code.google.com/p/memory-sanitizer/wiki/MemorySanitizer</a>) for the detection of uninitialized memory. Both are based on and provide similar functionality to tools in <code class="calibre2">valgrind</code>.</p>
<p><code class="calibre2">clang</code> has a ‘Static Analyser’ which can be run on the source files during compilation: see <a href="http://clang-analyzer.llvm.org/" class="uri">http://clang-analyzer.llvm.org/</a>.</p>
<hr />
<p><a href="" id="Using-_0060Dr_002e-Memory_0027"></a> <a href="" id="Using-_0060Dr_002e-Memory_0027-1"></a></p>
<h4 id="using-dr.-memory" class="subsection">4.3.6 Using ‘Dr. Memory’</h4>
<p>‘Dr. Memory’ from <a href="http://www.drmemory.org/" class="uri">http://www.drmemory.org/</a> is a memory checker for (currently) 32-bit Windows, Linux and macOS with similar aims to <code class="calibre2">valgrind</code>. It works with unmodified executables<a href="R-exts_split_014.html#FOOT116" id="DOCF116"><sup>116</sup></a> and detects memory access errors, uninitialized reads and memory leaks.</p>
<hr />
<p><a href="" id="Fortran-array-bounds-checking"></a> <a href="" id="Fortran-array-bounds-checking-1"></a></p>
<h4 id="fortran-array-bounds-checking" class="subsection">4.3.7 Fortran array bounds checking</h4>
<p>Most of the Fortran compilers used with R allow code to be compiled with checking of array bounds: for example <code class="calibre2">gfortran</code> has option -fbounds-check and Oracle Studio has -C. This will give an error when the upper or lower bound is exceeded, e.g.</p>
<div class="example">
<pre class="example1"><code>At line 97 of file .../src/appl/dqrdc2.f
Fortran runtime error: Index ‘1’ of dimension 1 of array ‘x’ above upper bound of 0</code></pre>
</div>
<p>One does need to be aware that lazy programmers often specify Fortran dimensions as <code class="calibre2">1</code> rather than <code class="calibre2">*</code> or a real bound and these will be reported.</p>
<p>It is easy to arrange to use this check on just the code in your package: add to ~/.R/Makevars something like (for <code class="calibre2">gfortran</code>)</p>
<div class="example">
<pre class="example1"><code>FCFLAGS = -g -O2 -mtune=native -fbounds-check
FFLAGS = -g -O2 -mtune=native -fbounds-check</code></pre>
</div>
<p>when you run <code class="calibre2">R CMD check</code>.</p>
<p>This may report incorrectly errors with the way that Fortran character variables are passed, particularly when Fortran subroutines are called from C code. This may include the use of BLAS and LAPACK subroutines in R, so it is not advisable to build R itself with bounds checking (and may not even be possible as these subroutines are called during the R build).</p>
<hr />
<p><a href="" id="Debugging-compiled-code"></a> <a href="" id="Debugging-compiled-code-1"></a></p>
<h3 id="debugging-compiled-code" class="section">4.4 Debugging compiled code</h3>
<p><a href="" id="index-Debugging"></a></p>
<p>Sooner or later programmers will be faced with the need to debug compiled code loaded into R. This section is geared to platforms using <code class="calibre2">gdb</code> with code compiled by <code class="calibre2">gcc</code>, but similar things are possible with other debuggers such as <code class="calibre2">lldb</code> (<a href="http://lldb.llvm.org/" class="uri">http://lldb.llvm.org/</a>, used on macOS) and Sun’s <code class="calibre2">dbx</code>: some debuggers have graphical front-ends available.</p>
<p>Consider first ‘crashes’, that is when R terminated unexpectedly with an illegal memory access (a ‘segfault’ or ‘bus error’), illegal instruction or similar. Unix-alike versions of R use a signal handler which aims to give some basic information. For example</p>
<div class="example">
<pre class="example1"><code> *** caught segfault ***
address 0x20000028, cause ‘memory not mapped’

Traceback:
 1: .identC(class1[[1]], class2)
 2: possibleExtends(class(sloti), classi, ClassDef2 = getClassDef(classi,
where = where))
 3: validObject(t(cu))
 4: stopifnot(validObject(cu &lt;- as(tu, &quot;dtCMatrix&quot;)), validObject(t(cu)),
validObject(t(tu)))

Possible actions:
1: abort (with core dump)
2: normal R exit
3: exit R without saving workspace
4: exit R saving workspace
Selection: 3</code></pre>
</div>
<p>Since the R process may be damaged, the only really safe options are the first or third. (Note that a core dump is only produced where enabled: a common default in a shell is to limit its size to 0, thereby disabling it.)</p>
<p>A fairly common cause of such crashes is a package which uses <code class="calibre2">.C</code> or <code class="calibre2">.Fortran</code> and writes beyond (at either end) one of the arguments it is passed. There is a good way to detect this: using <code class="calibre2">options(CBoundsCheck = TRUE)</code> (which can be selected <em>via</em> the environment variable <code class="calibre2">R_C_BOUNDS_CHECK=yes)</code> changes the way <code class="calibre2">.C</code> and <code class="calibre2">.Fortran</code> work to check if the compiled code writes in the 64 bytes at either end of an argument.</p>
<p>Another cause of a ‘crash’ is to overrun the C stack. R tries to track that in its own code, but it may happen in third-party compiled code. For modern POSIX-compliant OSes R can safely catch that and return to the top-level prompt, so one gets something like</p>
<div class="example">
<pre class="example1"><code>&gt; .C(&quot;aaa&quot;)
Error: segfault from C stack overflow
&gt;</code></pre>
</div>
<p>However, C stack overflows are fatal under Windows and normally defeat attempts at debugging on that platform. Further, the size of the stack is set when R is compiled, whereas on POSIX OSes it can be set in the shell from which R is launched.</p>
<p>If you have a crash which gives a core dump you can use something like</p>
<div class="example">
<pre class="example1"><code>gdb /path/to/R/bin/exec/R core.12345</code></pre>
</div>
<p>to examine the core dump. If core dumps are disabled or to catch errors that do not generate a dump one can run R directly under a debugger by for example</p>
<div class="example">
<pre class="example1"><code>$ R -d gdb --vanilla
...
gdb&gt; run</code></pre>
</div>
<p>at which point R will run normally, and hopefully the debugger will catch the error and return to its prompt. This can also be used to catch infinite loops or interrupt very long-running code. For a simple example</p>
<div class="example">
<pre class="example1"><code>&gt; for(i in 1:1e7) x &lt;- rnorm(100)
[hit Ctrl-C]
Program received signal SIGINT, Interrupt.
x00397682 in _int_free () from /lib/tls/libc.so.6
(gdb) where
#0  0x00397682 in _int_free () from /lib/tls/libc.so.6
#1  0x00397eba in free () from /lib/tls/libc.so.6
#2  0xb7cf2551 in R_gc_internal (size_needed=313)
    at /users/ripley/R/svn/R-devel/src/main/memory.c:743
#3  0xb7cf3617 in Rf_allocVector (type=13, length=626)
    at /users/ripley/R/svn/R-devel/src/main/memory.c:1906
#4  0xb7c3f6d3 in PutRNGstate ()
    at /users/ripley/R/svn/R-devel/src/main/RNG.c:351
#5  0xb7d6c0a5 in do_random2 (call=0x94bf7d4, op=0x92580e8, args=0x9698f98,
    rho=0x9698f28) at /users/ripley/R/svn/R-devel/src/main/random.c:183
...</code></pre>
</div>
<p>In many cases it is possible to attach a debugger to a running process: this is helpful if an alternative front-end is in use or to investigate a task that seems to be taking far too long. This is done by something like</p>
<div class="example">
<pre class="example1"><code>gdb -p pid</code></pre>
</div>
<p>where <code class="calibre2">pid</code> is the id of the R executable or front-end. This stops the process so its state can be examined: use <code class="calibre2">continue</code> to resume execution.</p>
<p>Some “tricks” worth knowing follow:</p>
<hr />
<p><a href="" id="Finding-entry-points"></a> <a href="" id="Finding-entry-points-in-dynamically-loaded-code"></a></p>
<h4 id="finding-entry-points-in-dynamically-loaded-code" class="subsection">4.4.1 Finding entry points in dynamically loaded code</h4>
<p>Under most compilation environments, compiled code dynamically loaded into R cannot have breakpoints set within it until it is loaded. To use a symbolic debugger on such dynamically loaded code under Unix-alikes use</p>
<ul>
<li>Call the debugger on the R executable, for example by R -d gdb.</li>
<li>Start R.</li>
<li>At the R prompt, use <code class="calibre2">dyn.load</code> or <code class="calibre2">library</code> to load your shared object.</li>
<li>Send an interrupt signal. This will put you back to the debugger prompt.</li>
<li>Set the breakpoints in your code.</li>
<li>Continue execution of R by typing signal 0<span>RET</span>.</li>
</ul>
<p>Under Windows signals may not be able to be used, and if so the procedure is more complicated. See the rw-FAQ and <a href="http://www.stats.uwo.ca/faculty/murdoch/software/debuggingR/gdb.shtml"><code class="calibre2">www.stats.uwo.ca/faculty/murdoch/software/debuggingR/gdb.shtml</code></a>.</p>
<hr />
<p><a href="" id="Inspecting-R-objects"></a> <a href="" id="Inspecting-R-objects-when-debugging"></a></p>
<h4 id="inspecting-r-objects-when-debugging" class="subsection">4.4.2 Inspecting R objects when debugging</h4>
<p><a href="" id="index-Inspecting-R-objects-when-debugging"></a></p>
<p>The key to inspecting R objects from compiled code is the function <code class="calibre2">PrintValue(SEXP s)</code> which uses the normal R printing mechanisms to print the R object pointed to by s, or the safer version <code class="calibre2">R_PV(SEXP s)</code> which will only print ‘objects’.</p>
<p>One way to make use of <code class="calibre2">PrintValue</code> is to insert suitable calls into the code to be debugged.</p>
<p>Another way is to call <code class="calibre2">R_PV</code> from the symbolic debugger. (<code class="calibre2">PrintValue</code> is hidden as <code class="calibre2">Rf_PrintValue</code>.) For example, from <code class="calibre2">gdb</code> we can use</p>
<div class="example">
<pre class="example1"><code>(gdb) p R_PV(ab)</code></pre>
</div>
<p>using the object <code class="calibre2">ab</code> from the convolution example, if we have placed a suitable breakpoint in the convolution C code.</p>
<p>To examine an arbitrary R object we need to work a little harder. For example, let</p>
<div class="example">
<pre class="example1"><code>R&gt; DF &lt;- data.frame(a = 1:3, b = 4:6)</code></pre>
</div>
<p>By setting a breakpoint at <code class="calibre2">do_get</code> and typing get(&quot;DF&quot;) at the R prompt, one can find out the address in memory of <code class="calibre2">DF</code>, for example</p>
<div class="example">
<pre class="example1"><code>Value returned is $1 = (SEXPREC *) 0x40583e1c
(gdb) p *$1
$2 = {
  sxpinfo = {type = 19, obj = 1, named = 1, gp = 0,
    mark = 0, debug = 0, trace = 0, = 0},
  attrib = 0x40583e80,
  u = {
    vecsxp = {
      length = 2,
      type = {c = 0x40634700 &quot;0&gt;X@D&gt;X@0&gt;X@&quot;, i = 0x40634700,
        f = 0x40634700, z = 0x40634700, s = 0x40634700},
      truelength = 1075851272,
    },
    primsxp = {offset = 2},
    symsxp = {pname = 0x2, value = 0x40634700, internal = 0x40203008},
    listsxp = {carval = 0x2, cdrval = 0x40634700, tagval = 0x40203008},
    envsxp = {frame = 0x2, enclos = 0x40634700},
    closxp = {formals = 0x2, body = 0x40634700, env = 0x40203008},
    promsxp = {value = 0x2, expr = 0x40634700, env = 0x40203008}
  }
}</code></pre>
</div>
<p>(Debugger output reformatted for better legibility).</p>
<p>Using <code class="calibre2">R_PV()</code> one can “inspect” the values of the various elements of the SEXP, for example,</p>
<div class="example">
<pre class="example1"><code>(gdb) p R_PV($1-&gt;attrib)
$names
[1] &quot;a&quot; &quot;b&quot;

$row.names
[1] &quot;1&quot; &quot;2&quot; &quot;3&quot;

$class
[1] &quot;data.frame&quot;

$3 = void</code></pre>
</div>
<p>To find out where exactly the corresponding information is stored, one needs to go “deeper”:</p>
<div class="example">
<pre class="example1"><code>(gdb) set $a = $1-&gt;attrib
(gdb) p $a-&gt;u.listsxp.tagval-&gt;u.symsxp.pname-&gt;u.vecsxp.type.c
$4 = 0x405d40e8 &quot;names&quot;
(gdb) p $a-&gt;u.listsxp.carval-&gt;u.vecsxp.type.s[1]-&gt;u.vecsxp.type.c
$5 = 0x40634378 &quot;b&quot;
(gdb) p $1-&gt;u.vecsxp.type.s[0]-&gt;u.vecsxp.type.i[0]
$6 = 1
(gdb) p $1-&gt;u.vecsxp.type.s[1]-&gt;u.vecsxp.type.i[1]
$7 = 5</code></pre>
</div>
<p>Another alternative is the <code class="calibre2">R_inspect</code> function which shows the low-level structure of the objects recursively (addresses differ from the above as this example is created on another machine):</p>
<div class="example">
<pre class="example1"><code>(gdb) p R_inspect($1)
@100954d18 19 VECSXP g0c2 [OBJ,NAM(2),ATT] (len=2, tl=0)
  @100954d50 13 INTSXP g0c2 [NAM(2)] (len=3, tl=0) 1,2,3
  @100954d88 13 INTSXP g0c2 [NAM(2)] (len=3, tl=0) 4,5,6
ATTRIB:
  @102a70140 02 LISTSXP g0c0 []
    TAG: @10083c478 01 SYMSXP g0c0 [MARK,NAM(2),gp=0x4000] &quot;names&quot;
    @100954dc0 16 STRSXP g0c2 [NAM(2)] (len=2, tl=0)
      @10099df28 09 CHARSXP g0c1 [MARK,gp=0x21] &quot;a&quot;
      @10095e518 09 CHARSXP g0c1 [MARK,gp=0x21] &quot;b&quot;
    TAG: @100859e60 01 SYMSXP g0c0 [MARK,NAM(2),gp=0x4000] &quot;row.names&quot;
    @102a6f868 13 INTSXP g0c1 [NAM(2)] (len=2, tl=1) -2147483648,-3
    TAG: @10083c948 01 SYMSXP g0c0 [MARK,gp=0x4000] &quot;class&quot;
    @102a6f838 16 STRSXP g0c1 [NAM(2)] (len=1, tl=1)
      @1008c6d48 09 CHARSXP g0c2 [MARK,gp=0x21,ATT] &quot;data.frame&quot;</code></pre>
</div>
<p>In general the representation of each object follows the format:</p>
<div class="example">
<pre class="smallexample"><code>@&lt;address&gt; &lt;type-nr&gt; &lt;type-name&gt; &lt;gc-info&gt; [&lt;flags&gt;] ...</code></pre>
</div>
<p>For a more fine-grained control over the depth of the recursion and the output of vectors <code class="calibre2">R_inspect3</code> takes additional two character() parameters: maximum depth and the maximal number of elements that will be printed for scalar vectors. The defaults in <code class="calibre2">R_inspect</code> are currently -1 (no limit) and 5 respectively.</p>
<hr />
<p><a href="" id="System-and-foreign-language-interfaces"></a> <a href="" id="System-and-foreign-language-interfaces-1"></a></p>
<div id="calibre_pb_12" class="calibre6">

</div>

<!--chapter:end:08-R-exts.Rmd-->

#  System and foreign language interfaces
<hr />
<p><a href="" id="Operating-system-access"></a> <a href="" id="Operating-system-access-1"></a></p>
<h3 id="operating-system-access" class="section">5.1 Operating system access</h3>
<p><a href="" id="index-Operating-system-access"></a></p>
<p>Access to operating system functions is <em>via</em> the R functions <code class="calibre2">system</code> and <code class="calibre2">system2</code>. <a href="" id="index-system"></a> <a href="" id="index-system2"></a> The details will differ by platform (see the on-line help), and about all that can safely be assumed is that the first argument will be a string <code class="calibre2">command</code> that will be passed for execution (not necessarily by a shell) and the second argument to <code class="calibre2">system</code> will be <code class="calibre2">internal</code> which if true will collect the output of the command into an R character vector.</p>
<p>On POSIX-compliant OSes these commands pass a command-line to a shell: Windows is not POSIX-compliant and there is a separate function <code class="calibre2">shell</code> to do so.</p>
<p>The function <code class="calibre2">system.time</code> <a href="" id="index-system_002etime"></a> is available for timing. Timing on child processes is only available on Unix-alikes, and may not be reliable there.</p>
<hr />
<p><a href="" id="Interface-functions-_002eC-and-_002eFortran"></a> <a href="" id="Interface-functions-_002eC-and-_002eFortran-1"></a></p>
<h3 id="interface-functions-.c-and-.fortran" class="section">5.2 Interface functions <code class="calibre18">.C</code> and <code class="calibre18">.Fortran</code></h3>
<p><a href="" id="index-Interfaces-to-compiled-code"></a> <a href="" id="index-_002eC"></a> <a href="" id="index-_002eFortran"></a></p>
<p>These two functions provide an interface to compiled code that has been linked into R, either at build time or <em>via</em> <code class="calibre2">dyn.load</code> (see <a href="#dyn_002eload-and-dyn_002eunload">dyn.load and dyn.unload</a>). They are primarily intended for compiled C and FORTRAN 77 code respectively, but the <code class="calibre2">.C</code> function can be used with other languages which can generate C interfaces, for example C++ (see <a href="#Interfacing-C_002b_002b-code">Interfacing C++ code</a>).</p>
<p>The first argument to each function is a character string specifying the symbol name as known<a href="R-exts_split_014.html#FOOT117" id="DOCF117"><sup>117</sup></a> to C or FORTRAN, that is the function or subroutine name. (That the symbol is loaded can be tested by, for example, <code class="calibre2">is.loaded(&quot;cg&quot;)</code>. Use the name you pass to <code class="calibre2">.C</code> or <code class="calibre2">.Fortran</code> rather than the translated symbol name.)</p>
<p>There can be up to 65 further arguments giving R objects to be passed to compiled code. Normally these are copied before being passed in, and copied again to an R list object when the compiled code returns. If the arguments are given names, these are used as names for the components in the returned list object (but not passed to the compiled code).</p>
<p>The following table gives the mapping between the modes of R atomic vectors and the types of arguments to a C function or FORTRAN subroutine.</p>
<blockquote>
<table>
<thead>
<tr class="header">
<th align="left">R storage mode</th>
<th align="left">C type</th>
<th align="left">FORTRAN type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left"><code class="calibre2">logical</code></td>
<td align="left"><code class="calibre2">int *</code></td>
<td align="left"><code class="calibre2">INTEGER</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">integer</code></td>
<td align="left"><code class="calibre2">int *</code></td>
<td align="left"><code class="calibre2">INTEGER</code></td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">double</code></td>
<td align="left"><code class="calibre2">double *</code></td>
<td align="left"><code class="calibre2">DOUBLE PRECISION</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">complex</code></td>
<td align="left"><code class="calibre2">Rcomplex *</code></td>
<td align="left"><code class="calibre2">DOUBLE COMPLEX</code></td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">character</code></td>
<td align="left"><code class="calibre2">char **</code></td>
<td align="left"><code class="calibre2">CHARACTER*255</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">raw</code></td>
<td align="left"><code class="calibre2">unsigned char *</code></td>
<td align="left">none</td>
</tr>
</tbody>
</table>
</blockquote>
<p>Do please note the first two. On the 64-bit Unix/Linux/macOS platforms, <code class="calibre2">long</code> is 64-bit whereas <code class="calibre2">int</code> and <code class="calibre2">INTEGER</code> are 32-bit. Code ported from S-PLUS (which uses <code class="calibre2">long *</code> for <code class="calibre2">logical</code> and <code class="calibre2">integer</code>) will not work on all 64-bit platforms (although it may appear to work on some, including Windows). Note also that if your compiled code is a mixture of C functions and FORTRAN subprograms the argument types must match as given in the table above.</p>
<p>C type <code class="calibre2">Rcomplex</code> is a structure with <code class="calibre2">double</code> members <code class="calibre2">r</code> and <code class="calibre2">i</code> defined in the header file R_ext/Complex.h included by R.h. (On most platforms this is stored in a way compatible with the C99 <code class="calibre2">double complex</code> type: however, it may not be possible to pass <code class="calibre2">Rcomplex</code> to a C99 function expecting a <code class="calibre2">double complex</code> argument. Nor need it be compatible with a C++ <code class="calibre2">complex</code> type. Moreover, the compatibility can depends on the optimization level set for the compiler.)</p>
<p>Only a single character string can be passed to or from FORTRAN, and the success of this is compiler-dependent. Other R objects can be passed to <code class="calibre2">.C</code>, but it is much better to use one of the other interfaces.</p>
<p>It is possible to pass numeric vectors of storage mode <code class="calibre2">double</code> to C as <code class="calibre2">float *</code> or to FORTRAN as <code class="calibre2">REAL</code> by setting the attribute <code class="calibre2">Csingle</code>, most conveniently by using the R functions <code class="calibre2">as.single</code>, <code class="calibre2">single</code> or <code class="calibre2">mode</code>. This is intended only to be used to aid interfacing existing C or FORTRAN code.</p>
<p>Logical values are sent as <code class="calibre2">0</code> (<code class="calibre2">FALSE</code>), <code class="calibre2">1</code> (<code class="calibre2">TRUE</code>) or <code class="calibre2">INT_MIN = -2147483648</code> (<code class="calibre2">NA</code>, but only if <code class="calibre2">NAOK</code> is true), and the compiled code should return one of these three values. (Non-zero values other than <code class="calibre2">INT_MIN</code> are mapped to <code class="calibre2">TRUE</code>.)</p>
<p>Unless formal argument <code class="calibre2">NAOK</code> is true, all the other arguments are checked for missing values <code class="calibre2">NA</code> and for the IEEE special values <code class="calibre2">NaN</code>, <code class="calibre2">Inf</code> and <code class="calibre2">-Inf</code>, and the presence of any of these generates an error. If it is true, these values are passed unchecked.</p>
<p>Argument <code class="calibre2">PACKAGE</code> confines the search for the symbol name to a specific shared object (or use <code class="calibre2">&quot;base&quot;</code> for code compiled into R). Its use is highly desirable, as there is no way to avoid two package writers using the same symbol name, and such name clashes are normally sufficient to cause R to crash. (If it is not present and the call is from the body of a function defined in a package namespace, the shared object loaded by the first (if any) <code class="calibre2">useDynLib</code> directive will be used.</p>
<p>Note that the compiled code should not return anything except through its arguments: C functions should be of type <code class="calibre2">void</code> and FORTRAN subprograms should be subroutines.</p>
<p>To fix ideas, let us consider a very simple example which convolves two finite sequences. (This is hard to do fast in interpreted R code, but easy in C code.) We could do this using <code class="calibre2">.C</code> by</p>
<div class="example">
<pre class="example1"><code>void convolve(double *a, int *na, double *b, int *nb, double *ab)
{
    int nab = *na + *nb - 1;

    for(int i = 0; i &lt; nab; i++)
        ab[i] = 0.0;
    for(int i = 0; i &lt; *na; i++)
        for(int j = 0; j &lt; *nb; j++)
            ab[i + j] += a[i] * b[j];
}</code></pre>
</div>
<p>called from R by</p>
<div class="example">
<pre class="example1"><code>conv &lt;- function(a, b)
    .C(&quot;convolve&quot;,
       as.double(a),
       as.integer(length(a)),
       as.double(b),
       as.integer(length(b)),
       ab = double(length(a) + length(b) - 1))$ab</code></pre>
</div>
<p>Note that we take care to coerce all the arguments to the correct R storage mode before calling <code class="calibre2">.C</code>; mistakes in matching the types can lead to wrong results or hard-to-catch errors.</p>
<p>Special care is needed in handling <code class="calibre2">character</code> vector arguments in C (or C++). On entry the contents of the elements are duplicated and assigned to the elements of a <code class="calibre2">char **</code> array, and on exit the elements of the C array are copied to create new elements of a character vector. This means that the contents of the character strings of the <code class="calibre2">char **</code> array can be changed, including to <code class="calibre2">\0</code> to shorten the string, but the strings cannot be lengthened. It is possible<a href="R-exts_split_014.html#FOOT118" id="DOCF118"><sup>118</sup></a> to allocate a new string <em>via</em> <code class="calibre2">R_alloc</code> and replace an entry in the <code class="calibre2">char **</code> array by the new string. However, when character vectors are used other than in a read-only way, the <code class="calibre2">.Call</code> interface is much to be preferred.</p>
<p>Passing character strings to FORTRAN code needs even more care, and should be avoided where possible. Only the first element of the character vector is passed in, as a fixed-length (255) character array. Up to 255 characters are passed back to a length-one character vector. How well this works (or even if it works at all) depends on the C and FORTRAN compilers on each platform (including on their options). Often what is being passed to FORTRAN is one of a small set of possible values (a factor in R terms) which could alternatively be passed as an integer code: similarly FORTRAN code that wants to generate diagnostic messages can pass an integer code to a C or R wrapper which will convert it to a character string.</p>
<p>It is possible to pass some R objects other than atomic vectors via <code class="calibre2">.C</code>, but this is only supported for historical compatibility: use the <code class="calibre2">.Call</code> or <code class="calibre2">.External</code> interfaces for such objects. Any C/C++ code that includes Rinternals.h should be called via <code class="calibre2">.Call</code> or <code class="calibre2">.External</code>.</p>
<hr />
<p><a href="" id="dyn_002eload-and-dyn_002eunload"></a> <a href="" id="dyn_002eload-and-dyn_002eunload-1"></a></p>
<h3 id="dyn.load-and-dyn.unload" class="section">5.3 <code class="calibre18">dyn.load</code> and <code class="calibre18">dyn.unload</code></h3>
<p><a href="" id="index-Dynamic-loading"></a> <a href="" id="index-dyn_002eload"></a> <a href="" id="index-dyn_002eunload"></a></p>
<p>Compiled code to be used with R is loaded as a shared object (Unix-alikes including macOS, see <a href="#Creating-shared-objects">Creating shared objects</a> for more information) or DLL (Windows).</p>
<p>The shared object/DLL is loaded by <code class="calibre2">dyn.load</code> and unloaded by <code class="calibre2">dyn.unload</code>. Unloading is not normally necessary, but it is needed to allow the DLL to be re-built on some platforms, including Windows.</p>
<p>The first argument to both functions is a character string giving the path to the object. Programmers should not assume a specific file extension for the object/DLL (such as .so) but use a construction like</p>
<div class="example">
<pre class="example1"><code>file.path(path1, path2, paste0(&quot;mylib&quot;, .Platform$dynlib.ext))</code></pre>
</div>
<p>for platform independence. On Unix-alike systems the path supplied to <code class="calibre2">dyn.load</code> can be an absolute path, one relative to the current directory or, if it starts with ‘~’, relative to the user’s home directory.</p>
<p>Loading is most often done automatically based on the <code class="calibre2">useDynLib()</code> declaration in the NAMESPACE file, but may be done explicitly <em>via</em> a call to <code class="calibre2">library.dynam</code>. <a href="" id="index-library_002edynam-1"></a> This has the form</p>
<div class="example">
<pre class="example1"><code>library.dynam(&quot;libname&quot;, package, lib.loc)</code></pre>
</div>
<p>where <code class="calibre2">libname</code> is the object/DLL name <em>with the extension omitted</em>. Note that the first argument, <code class="calibre2">chname</code>, should <strong>not</strong> be <code class="calibre2">package</code> since this will not work if the package is installed under another name.</p>
<p>Under some Unix-alike systems there is a choice of how the symbols are resolved when the object is loaded, governed by the arguments <code class="calibre2">local</code> and <code class="calibre2">now</code>. Only use these if really necessary: in particular using <code class="calibre2">now=FALSE</code> and then calling an unresolved symbol will terminate R unceremoniously.</p>
<p>R provides a way of executing some code automatically when a object/DLL is either loaded or unloaded. This can be used, for example, to register native routines with R’s dynamic symbol mechanism, initialize some data in the native code, or initialize a third party library. On loading a DLL, R will look for a routine within that DLL named <code class="calibre2">R_init_lib</code> where lib is the name of the DLL file with the extension removed. For example, in the command</p>
<div class="example">
<pre class="example1"><code>library.dynam(&quot;mylib&quot;, package, lib.loc)</code></pre>
</div>
<p>R looks for the symbol named <code class="calibre2">R_init_mylib</code>. Similarly, when unloading the object, R looks for a routine named <code class="calibre2">R_unload_lib</code>, e.g., <code class="calibre2">R_unload_mylib</code>. In either case, if the routine is present, R will invoke it and pass it a single argument describing the DLL. This is a value of type <code class="calibre2">DllInfo</code> which is defined in the Rdynload.h file in the R_ext directory.</p>
<p>Note that there are some implicit restrictions on this mechanism as the basename of the DLL needs to be both a valid file name and valid as part of a C entry point (e.g. it cannot contain ‘.’): for portable code it is best to confine DLL names to be ASCII alphanumeric plus underscore. If entry point <code class="calibre2">R_init_lib</code> is not found it is also looked for with ‘.’ replaced by ‘_’.</p>
<p>The following example shows templates for the initialization and unload routines for the <code class="calibre2">mylib</code> DLL.</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>#include &lt;R_ext/Rdynload.h&gt;

void
R_init_mylib(DllInfo *info)
{
  /* Register routines,
     allocate resources. */
}

void
R_unload_mylib(DllInfo *info)
{
  /* Release resources. */
}</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>If a shared object/DLL is loaded more than once the most recent version is used.<a href="R-exts_split_014.html#FOOT119" id="DOCF119"><sup>119</sup></a> More generally, if the same symbol name appears in several shared objects, the most recently loaded occurrence is used. The <code class="calibre2">PACKAGE</code> argument and registration (see the next section) provide good ways to avoid any ambiguity in which occurrence is meant.</p>
<p>On Unix-alikes the paths used to resolve dynamically linked dependent libraries are fixed (for security reasons) when the process is launched, so <code class="calibre2">dyn.load</code> will only look for such libraries in the locations set by the R shell script (<em>via</em> etc/ldpaths) and in the OS-specific defaults.</p>
<p>Windows allows more control (and less security) over where dependent DLLs are looked for. On all versions this includes the <code class="calibre2">PATH</code> environment variable, but with lowest priority: note that it does not include the directory from which the DLL was loaded. It is possible to add a single path with quite high priority <em>via</em> the <code class="calibre2">DLLpath</code> argument to <code class="calibre2">dyn.load</code>. This is (by default) used by <code class="calibre2">library.dynam</code> to include the package’s libs/i386 or libs/x64 directory in the DLL search path.</p>
<hr />
<p><a href="" id="Registering-native-routines"></a> <a href="" id="Registering-native-routines-1"></a></p>
<h3 id="registering-native-routines" class="section">5.4 Registering native routines</h3>
<p><a href="" id="index-Registering-native-routines"></a></p>
<p>By ‘native’ routine, we mean an entry point in compiled code.</p>
<p>In calls to <code class="calibre2">.C</code>, <code class="calibre2">.Call</code>, <code class="calibre2">.Fortran</code> and <code class="calibre2">.External</code>, R must locate the specified native routine by looking in the appropriate shared object/DLL. By default, R uses the operating-system-specific dynamic loader to lookup the symbol in all<a href="R-exts_split_014.html#FOOT120" id="DOCF120"><sup>120</sup></a> loaded DLLs and the R executable or libraries it is linked to. Alternatively, the author of the DLL can explicitly register routines with R and use a single, platform-independent mechanism for finding the routines in the DLL. One can use this registration mechanism to provide additional information about a routine, including the number and type of the arguments, and also make it available to R programmers under a different name.</p>
<p>Registering routines has two main advantages: it provides a faster<a href="R-exts_split_014.html#FOOT121" id="DOCF121"><sup>121</sup></a> way to find the address of the entry point <em>via</em> tables stored in the DLL at compilation time, and it provides a run-time check that the entry point is called with the right number of arguments and, optionally, the right argument types.</p>
<p><a href="" id="index-R_005fregisterRoutines"></a></p>
<p>To register routines with R, one calls the C routine <code class="calibre2">R_registerRoutines</code>. This is typically done when the DLL is first loaded within the initialization routine <code class="calibre2">R_init_dll name</code> described in <a href="#dyn_002eload-and-dyn_002eunload">dyn.load and dyn.unload</a>. <code class="calibre2">R_registerRoutines</code> takes 5 arguments. The first is the <code class="calibre2">DllInfo</code> object passed by R to the initialization routine. This is where R stores the information about the methods. The remaining 4 arguments are arrays describing the routines for each of the 4 different interfaces: <code class="calibre2">.C</code>, <code class="calibre2">.Call</code>, <code class="calibre2">.Fortran</code> and <code class="calibre2">.External</code>. Each argument is a <code class="calibre2">NULL</code>-terminated array of the element types given in the following table:</p>
<blockquote>
<table>
<tbody>
<tr class="odd">
<td align="left"><code class="calibre2">.C</code></td>
<td align="left"><code class="calibre2">R_CMethodDef</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">.Call</code></td>
<td align="left"><code class="calibre2">R_CallMethodDef</code></td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">.Fortran</code></td>
<td align="left"><code class="calibre2">R_FortranMethodDef</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">.External</code></td>
<td align="left"><code class="calibre2">R_ExternalMethodDef</code></td>
</tr>
</tbody>
</table>
</blockquote>
<p>Currently, the <code class="calibre2">R_ExternalMethodDef</code> type is the same as <code class="calibre2">R_CallMethodDef</code> type and contains fields for the name of the routine by which it can be accessed in R, a pointer to the actual native symbol (i.e., the routine itself), and the number of arguments the routine expects to be passed from R. For example, if we had a routine named <code class="calibre2">myCall</code> defined as</p>
<div class="example">
<pre class="example1"><code>SEXP myCall(SEXP a, SEXP b, SEXP c);</code></pre>
</div>
<p>we would describe this as</p>
<div class="example">
<pre class="example1"><code>static const R_CallMethodDef callMethods[]  = {
  {&quot;myCall&quot;, (DL_FUNC) &amp;myCall, 3},
  {NULL, NULL, 0}
};</code></pre>
</div>
<p>along with any other routines for the <code class="calibre2">.Call</code> interface. For routines with a variable number of arguments invoked <em>via</em> the <code class="calibre2">.External</code> interface, one specifies <code class="calibre2">-1</code> for the number of arguments which tells R not to check the actual number passed.</p>
<p>Routines for use with the <code class="calibre2">.C</code> and <code class="calibre2">.Fortran</code> interfaces are described with similar data structures, but which have two additional fields for describing the type and “style” of each argument. Each of these can be omitted. However, if specified, each should be an array with the same number of elements as the number of parameters for the routine. The types array should contain the <code class="calibre2">SEXP</code> types describing the expected type of the argument. (Technically, the elements of the types array are of type <code class="calibre2">R_NativePrimitiveArgType</code> which is just an unsigned integer.) The R types and corresponding type identifiers are provided in the following table:</p>
<blockquote>
<table>
<tbody>
<tr class="odd">
<td align="left"><code class="calibre2">numeric</code></td>
<td align="left"><code class="calibre2">REALSXP</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">integer</code></td>
<td align="left"><code class="calibre2">INTSXP</code></td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">logical</code></td>
<td align="left"><code class="calibre2">LGLSXP</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">single</code></td>
<td align="left"><code class="calibre2">SINGLESXP</code></td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">character</code></td>
<td align="left"><code class="calibre2">STRSXP</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">list</code></td>
<td align="left"><code class="calibre2">VECSXP</code></td>
</tr>
</tbody>
</table>
</blockquote>
<p>Consider a C routine, <code class="calibre2">myC</code>, declared as</p>
<div class="example">
<pre class="example1"><code>void myC(double *x, int *n, char **names, int *status);</code></pre>
</div>
<p>We would register it as</p>
<div class="example">
<pre class="example1"><code>static R_NativePrimitiveArgType myC_t[] = {
    REALSXP, INTSXP, STRSXP, LGLSXP
};

static const R_CMethodDef cMethods[] = {
   {&quot;myC&quot;, (DL_FUNC) &amp;myC, 4, myC_t},
   {NULL, NULL, 0, NULL}
};</code></pre>
</div>
<p>Note that <code class="calibre2">.Fortran</code> entry points are mapped to lowercase, so registration should use lowercase only.</p>
<p>Having created the arrays describing each routine, the last step is to actually register them with R. We do this by calling <code class="calibre2">R_registerRoutines</code>. For example, if we have the descriptions above for the routines accessed by the <code class="calibre2">.C</code> and <code class="calibre2">.Call</code> we would use the following code:</p>
<div class="example">
<pre class="example1"><code>void
R_init_myLib(DllInfo *info)
{
   R_registerRoutines(info, cMethods, callMethods, NULL, NULL);
}</code></pre>
</div>
<p>This routine will be invoked when R loads the shared object/DLL named <code class="calibre2">myLib</code>. The last two arguments in the call to <code class="calibre2">R_registerRoutines</code> are for the routines accessed by <code class="calibre2">.Fortran</code> and <code class="calibre2">.External</code> interfaces. In our example, these are given as <code class="calibre2">NULL</code> since we have no routines of these types.</p>
<p>When R unloads a shared object/DLL, its registrations are removed. There is no other facility for unregistering a symbol.</p>
<p>Examples of registering routines can be found in the different packages in the R source tree (e.g., <strong>stats</strong> and <strong>graphics</strong>). Also, there is a brief, high-level introduction in <em>R News</em> (volume 1/3, September 2001, pages 20–23, <a href="https://www.r-project.org/doc/Rnews/Rnews_2001-3.pdf" class="uri">https://www.r-project.org/doc/Rnews/Rnews_2001-3.pdf</a>).</p>
<p>Once routines are registered, they can be referred to as R objects if they this is arranged in the <code class="calibre2">useDynLib</code> call in the package’s NAMESPACE file (see <a href="R-exts_split_005.html#useDynLib">useDynLib</a>). So for example the <strong>stats</strong> package has</p>
<div class="example">
<pre class="example1"><code># Refer to all C/Fortran routines by their name prefixed by C_
useDynLib(stats, .registration = TRUE, .fixes = &quot;C_&quot;)</code></pre>
</div>
<p>in its NAMESPACE file, and then <code class="calibre2">ansari.test</code>’s default methods can contain</p>
<div class="example">
<pre class="example1"><code>        pansari &lt;- function(q, m, n)
            .C(C_pansari, as.integer(length(q)), p = as.double(q),
                as.integer(m), as.integer(n))$p</code></pre>
</div>
<p>This avoids the overhead of looking up an entry point each time it is used, and ensures that the entry point in the package is the one used (without a <code class="calibre2">PACKAGE = &quot;pkg&quot;</code> argument).</p>
<p><code class="calibre2">R_init_</code> routines are often of the form</p>
<div class="example">
<pre class="example1"><code>void attribute_visible R_init_mypkg(DllInfo *dll)
{
    R_registerRoutines(dll, CEntries, CallEntries, FortEntries,
                       ExternalEntries);
    R_useDynamicSymbols(dll, FALSE);
    R_forceSymbols(dll, TRUE);
...
}</code></pre>
</div>
<p><a href="" id="index-R_005fuseDynamicSymbols"></a> <a href="" id="index-R_005fforceSymbols"></a> The <code class="calibre2">R_useDynamicSymbols</code> call says the DLL is not to be searched for entry points specified by character strings so <code class="calibre2">.C</code> etc calls will only find registered symbols: the <code class="calibre2">R_forceSymbols</code> call only allows <code class="calibre2">.C</code> etc calls which specify entry points by R objects such as <code class="calibre2">C_pansari</code> (and not by character strings). Each provides some protection against accidentally finding your entry points when people supply a character string without a package, and avoids slowing down such searches. Routine <code class="calibre2">R_forceSymbols</code> is available from R 3.0.0, so packages using it should have a dependency on at least ‘R (&gt;= 3.0.0)’. (For the visibility attribute see <a href="R-exts_split_010.html#Controlling-visibility">Controlling visibility</a>.)</p>
<p>In more detail, if a package <code class="calibre2">mypkg</code> contains entry points <code class="calibre2">reg</code> and <code class="calibre2">unreg</code> and the first is registered as a 0-argument <code class="calibre2">.Call</code> routine, we could use (from code in the package)</p>
<div class="example">
<pre class="example1"><code>.Call(&quot;reg&quot;)
.Call(&quot;unreg&quot;)</code></pre>
</div>
<p>Without or with registration, these will both work. If <code class="calibre2">R_init_mypkg</code> calls <code class="calibre2">R_useDynamicSymbols(dll, FALSE)</code>, only the first will work. If in addition to registration the NAMESPACE file contains</p>
<div class="example">
<pre class="example1"><code>useDynLib(mypkg, .registration = TRUE, .fixes = &quot;C_&quot;)</code></pre>
</div>
<p>then we can call <code class="calibre2">.Call(C_reg)</code>. Finally, if <code class="calibre2">R_init_mypkg</code> also calls <code class="calibre2">R_forceSymbols(dll, TRUE)</code>, only <code class="calibre2">.Call(C_reg)</code> will work (and not <code class="calibre2">.Call(&quot;reg&quot;)</code>). This is usually what we want: it ensures that all of our own <code class="calibre2">.Call</code> calls go directly to the intended code in our package and that no one else accidentally finds our entry points. (Should someone need to call our code from outside the package, for example for debugging, they can use <code class="calibre2">.Call(mypkg:::C_reg)</code>.)</p>
<hr />
<p><a href="" id="Speed-considerations"></a> <a href="" id="Speed-considerations-1"></a></p>
<h4 id="speed-considerations" class="subsection">5.4.1 Speed considerations</h4>
<p>Sometimes registering native routines or using a <code class="calibre2">PACKAGE</code> argument can make a large difference. The results can depend quite markedly on the OS (and even if it is 32- or 64-bit), on the version of R and what else is loaded into R at the time.</p>
<p>To fix ideas, first consider <code class="calibre2">x84_64</code> OS 10.7 and R 2.15.2. A simple <code class="calibre2">.Call</code> function might be</p>
<div class="example">
<pre class="example1"><code>foo &lt;- function(x) .Call(&quot;foo&quot;, x)</code></pre>
</div>
<p>with C code</p>
<div class="example">
<pre class="example1"><code>#include &lt;Rinternals.h&gt;

SEXP foo(SEXP x)
{
    return x;
}</code></pre>
</div>
<p>If we compile with by <code class="calibre2">R CMD SHLIB foo.c</code>, load the code by <code class="calibre2">dyn.load(&quot;foo.so&quot;)</code> and run <code class="calibre2">foo(pi)</code> it took around 22 microseconds (us). Specifying the DLL by</p>
<div class="example">
<pre class="example1"><code>foo2 &lt;- function(x) .Call(&quot;foo&quot;, x, PACKAGE = &quot;foo&quot;)</code></pre>
</div>
<p>reduced the time to 1.7 us.</p>
<p>Now consider making these functions part of a package whose NAMESPACE file uses <code class="calibre2">useDynlib(foo)</code>. This immediately reduces the running time as <code class="calibre2">&quot;foo&quot;</code> will be preferentially looked for foo.dll. Without specifying <code class="calibre2">PACKAGE</code> it took about 5 us (it needs to fathom out the appropriate DLL each time it is invoked but it does not need to search all DLLs), and with the <code class="calibre2">PACKAGE</code> argument it is again about 1.7 us.</p>
<p>Next suppose the package has registered the native routine <code class="calibre2">foo</code>. Then <code class="calibre2">foo()</code> still has to find the appropriate DLL but can get to the entry point in the DLL faster, in about 4.2 us. And <code class="calibre2">foo2()</code> now takes about 1 us. If we register the symbols in the NAMESPACE file and use</p>
<div class="example">
<pre class="example1"><code>foo3 &lt;- function(x) .Call(C_foo, x)</code></pre>
</div>
<p>then the address for the native routine is looked up just once when the package is loaded, and <code class="calibre2">foo3(pi)</code> takes about 0.8 us.</p>
<p>Versions using <code class="calibre2">.C()</code> rather than <code class="calibre2">.Call()</code> took about 0.2 us longer.</p>
<p>These are all quite small differences, but C routines are not uncommonly invoked millions of times for run times of a few microseconds each, and those doing such things may wish to be aware of the differences.</p>
<p>On Linux and Solaris there is a smaller overhead in looking up symbols.</p>
<p>Symbol lookup on Windows used to be far slower, so R maintains a small cache. If the cache is currently empty enough that the symbol can be stored in the cache then the performance is similar to Linux and Solaris: if not it may be slower. R’s own code always uses registered symbols and so these never contribute to the cache: however many other packages do rely on symbol lookup.</p>
<p>In more recent versions of R all the standard packages register native symbols and do not allow symbol search, so in a new session <code class="calibre2">foo()</code> can only look in foo.so and may be as fast as <code class="calibre2">foo2()</code>. This will no longer apply when many contributed packages are loaded, and generally those last loaded are searched first. For example, consider R 3.3.2 on x86_64 Linux. In an empty R session, both <code class="calibre2">foo()</code> and <code class="calibre2">foo2()</code> took about 0.75 us; however after packages <a href="https://CRAN.R-project.org/package=igraph"><strong>igraph</strong></a> and <a href="https://CRAN.R-project.org/package=spatstat"><strong>spatstat</strong></a> had been loaded (which loaded another 12 DLLs), <code class="calibre2">foo()</code> took 3.6 us but <code class="calibre2">foo2()</code> still took about 0.80 us. Using registration in a package reduced this to 0.55 us and <code class="calibre2">foo3()</code> took 0.40 us, times which were unchanged when further packages were loaded.</p>
<hr />
<p><a href="" id="Converting-a-package-to-use-registration"></a> <a href="" id="Example_003a-converting-a-package-to-use-registration"></a></p>
<h4 id="example-converting-a-package-to-use-registration" class="subsection">5.4.2 Example: converting a package to use registration</h4>
<p>The <strong>splines</strong> package was converted to use symbol registration in 2001, but we can use it as an example<a href="R-exts_split_014.html#FOOT122" id="DOCF122"><sup>122</sup></a> of what needs to be done for a small package.</p>
<ul>
<li><p>Find the relevant entry points. This is somewhat OS-specific, but something like the following should be possible at the OS command-line</p>
<div class="example">
<pre class="example1"><code>nm -g /path/to/splines.so | grep &quot; T &quot;
000000000002670 T _spline_basis
000000000001ec0 T _spline_value</code></pre>
</div>
<p>This indicates that there are two relevant entry points. (They may or may not have a leading underscore, as here. Fortran entry points will have a trailing underscore.) Check in the R code that they are called by the package and how: in this case they are used by <code class="calibre2">.Call</code>.</p>
<p>Alternatively, examine the package’s R code for all <code class="calibre2">.C</code>, <code class="calibre2">.Fortran</code>, <code class="calibre2">.Call</code> and <code class="calibre2">.External</code> calls.</p></li>
<li><p>Construct the registration table. First write skeleton registration code, conventionally in file src/init.c (or at the end of the only C source file in the package: if included in a C++ file the ‘R_init’ function would need to be declared <code class="calibre2">extern &quot;C&quot;</code>):</p>
<div class="example">
<pre class="example1"><code>#include &lt;stdlib.h&gt; // for NULL
#include &lt;R_ext/Rdynload.h&gt;

#define CALLDEF(name, n)  {#name, (DL_FUNC) &amp;name, n}

static const R_CallMethodDef R_CallDef[] = {
   CALLDEF(spline_basis, ?),
   CALLDEF(spline_value, ?),
   {NULL, NULL, 0}
};

void R_init_splines(DllInfo *dll)
{
    R_registerRoutines(dll, NULL, R_CallDef, NULL, NULL);
}</code></pre>
</div>
<p>and then replace the <code class="calibre2">?</code> in the skeleton with the actual numbers of arguments. You will need to add declarations (also known as ‘prototypes’) of the functions unless appending to the only C source file. Some packages will already have these in a header file, or you could create one and include it in init.c, for example splines.h containing</p>
<div class="example">
<pre class="smallexample"><code>#include &lt;Rinternals.h&gt; // for SEXP
extern SEXP spline_basis(SEXP knots, SEXP order, SEXP xvals, SEXP derivs);
extern SEXP spline_value(SEXP knots, SEXP coeff, SEXP order, SEXP x, SEXP deriv);</code></pre>
</div>
<p>Tools are available to extract declarations, at least for C and C++ code: see the help file for <code class="calibre2">package_native_routine_registration_skeleton</code> in package <strong>tools</strong>. Here we could have used</p>
<div class="example">
<pre class="example1"><code>cproto -I/path/to/R/include -e splines.c</code></pre>
</div>
<p>For examples of registering other types of calls, see packages <strong>graphics</strong> and <strong>stats</strong>. In particular, when registering entry points for <code class="calibre2">.Fortran</code> one needs declarations as if called from C, such as</p>
<div class="example">
<pre class="example1"><code>#include &lt;R_ext/RS.h&gt;
void F77_NAME(supsmu)(int *n, double *x, double *y,
                      double *w, int *iper, double *span, double *alpha,
                      double *smo, double *sc, double *edf);</code></pre>
</div>
<p>One can get away with inaccurate argument lists in the declarations: it is easy to specify the arguments for <code class="calibre2">.Call</code> (all <code class="calibre2">SEXP</code>) and <code class="calibre2">.External</code> (one <code class="calibre2">SEXP</code>) and as the arguments for <code class="calibre2">.C</code> and <code class="calibre2">.Fortran</code> are all pointers, specifying them as <code class="calibre2">void *</code> suffices. (For most platforms one can omit all the arguments.)</p></li>
<li>(Optional but highly recommended.) Restrict <code class="calibre2">.Call</code> etc to using the symbols you chose to register by editing src/init.c to contain
<div class="example">
<pre class="example1"><code>void R_init_splines(DllInfo *dll)
{
    R_registerRoutines(dll, NULL, R_CallDef, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}</code></pre>
</div></li>
</ul>
<p>A skeleton for the steps so far can be made using <code class="calibre2">package_native_routine_registration_skeleton</code> in package <strong>tools</strong>. This will optionally create declarations based on the usage in the R code.</p>
<p>The remaining steps are optional but recommended.</p>
<ul>
<li>Edit the NAMESPACE file to create R objects for the registered symbols:
<div class="example">
<pre class="example1"><code>useDynLib(splines, .registration = TRUE, .fixes = &quot;C_&quot;)</code></pre>
</div></li>
<li><p>Find all the relevant calls in the R code and edit them to use the R objects. This entailed changing the lines</p>
<div class="example">
<pre class="smallexample"><code>temp &lt;- .Call(&quot;spline_basis&quot;, knots, ord, x, derivs, PACKAGE = &quot;splines&quot;)
y[accept] &lt;- .Call(&quot;spline_value&quot;, knots, coeff, ord, x[accept], deriv, PACKAGE = &quot;splines&quot;)
y = .Call(&quot;spline_value&quot;, knots, coef(object), ord, x, deriv, PACKAGE = &quot;splines&quot;)</code></pre>
</div>
<p>to</p>
<div class="example">
<pre class="smallexample"><code>temp &lt;- .Call(C_spline_basis, knots, ord, x, derivs)
y[accept] &lt;- .Call(C_spline_value, knots, coeff, ord, x[accept], deriv)
y = .Call(C_spline_value, knots, coef(object), ord, x, deriv)</code></pre>
</div>
<p>Check that there is no <code class="calibre2">exportPattern</code> directive which unintentionally exports the newly created R objects.</p></li>
<li>Restrict <code class="calibre2">.Call</code> to using the R symbols by editing src/init.c to contain
<div class="example">
<pre class="example1"><code>void R_init_splines(DllInfo *dll)
{
    R_registerRoutines(dll, NULL, R_CallDef, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    R_forceSymbols(dll, TRUE);
}</code></pre>
</div></li>
<li><p>Consider visibility. On some OSes we can hide entry points from the loader, which precludes any possible name clashes and calling them accidentally (usually with incorrect arguments and crashing the R process). If we repeat the first step we now see</p>
<div class="example">
<pre class="example1"><code>nm -g /path/to/splines.so | grep &quot; T &quot;
000000000002e00 T _R_init_splines
0000000000025e0 T _spline_basis
000000000001e20 T _spline_value</code></pre>
</div>
<p>If there were any entry points not intended to be used by the package we should try to avoid exporting them, for example by making them <code class="calibre2">static</code>. Now the two relevant entry points are only accessed <em>via</em> the registration table, we can hide them. There are two ways to do so on some Unix-alikes. We can hide individual entry points <em>via</em></p>
<div class="example">
<pre class="example1"><code>#include &lt;R_ext/Visibility.h&gt;

SEXP attribute_hidden
spline_basis(SEXP knots, SEXP order, SEXP xvals, SEXP derivs)
…

SEXP attribute_hidden
spline_value(SEXP knots, SEXP coeff, SEXP order, SEXP x, SEXP deriv)
…</code></pre>
</div>
<p>Alternatively, we can change the default visibility for all C symbols by including</p>
<div class="example">
<pre class="example1"><code>PKG_CFLAGS = $(C_VISIBILITY)</code></pre>
</div>
<p>in src/Makevars, and then we need to allow registration by declaring <code class="calibre2">R_init_splines</code> to be visible:</p>
<div class="example">
<pre class="example1"><code>#include &lt;R_ext/Visibility.h&gt;

void attribute_visible
R_init_splines(DllInfo *dll)
…</code></pre>
</div>
<p>See <a href="R-exts_split_010.html#Controlling-visibility">Controlling visibility</a> for more details, including using Fortran code and ways to restrict visibility on Windows.</p></li>
<li><p>We end up with a file src/init.c containing</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>#include &lt;stdlib.h&gt;
#include &lt;R_ext/Rdynload.h&gt;
#include &lt;R_ext/Visibility.h&gt;  // optional

#include &quot;splines.h&quot;

#define CALLDEF(name, n)  {#name, (DL_FUNC) &amp;name, n}

static const R_CallMethodDef R_CallDef[] = {
    CALLDEF(spline_basis, 4),
    CALLDEF(spline_value, 5),
    {NULL, NULL, 0}
};

void
attribute_visible  // optional
R_init_splines(DllInfo *dll)
{
    R_registerRoutines(dll, NULL, R_CallDef, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    R_forceSymbols(dll, TRUE);
}</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote></li>
</ul>
<hr />
<p><a href="" id="Linking-to-native-routines-in-other-packages"></a> <a href="" id="Linking-to-native-routines-in-other-packages-1"></a></p>
<h4 id="linking-to-native-routines-in-other-packages" class="subsection">5.4.3 Linking to native routines in other packages</h4>
<p>In addition to registering C routines to be called by R, it can at times be useful for one package to make some of its C routines available to be called by C code in another package. The interface consists of two routines declared in header R_ext/Rdynload.h as</p>
<p><a href="" id="index-R_005fRegisterCCallable"></a> <a href="" id="index-R_005fGetCCallable"></a></p>
<div class="example">
<pre class="example1"><code>void R_RegisterCCallable(const char *package, const char *name,
                         DL_FUNC fptr);
DL_FUNC R_GetCCallable(const char *package, const char *name);</code></pre>
</div>
<p>A package <strong>packA</strong> that wants to make a C routine <code class="calibre2">myCfun</code> available to C code in other packages would include the call</p>
<div class="example">
<pre class="example1"><code>R_RegisterCCallable(&quot;packA&quot;, &quot;myCfun&quot;, myCfun);</code></pre>
</div>
<p>in its initialization function <code class="calibre2">R_init_packA</code>. A package <strong>packB</strong> that wants to use this routine would retrieve the function pointer with a call of the form</p>
<div class="example">
<pre class="example1"><code>p_myCfun = R_GetCCallable(&quot;packA&quot;, &quot;myCfun&quot;);</code></pre>
</div>
<p>The author of <strong>packB</strong> is responsible for ensuring that <code class="calibre2">p_myCfun</code> has an appropriate declaration. In the future R may provide some automated tools to simplify exporting larger numbers of routines.</p>
<p>A package that wishes to make use of header files in other packages needs to declare them as a comma-separated list in the field ‘LinkingTo’ in the DESCRIPTION file. This then arranges that the include directories in the installed linked-to packages are added to the include paths for C and C++ code.</p>
<p>It must specify<a href="R-exts_split_014.html#FOOT123" id="DOCF123"><sup>123</sup></a> ‘Imports’ or ‘Depends’ of those packages, for they have to be loaded<a href="R-exts_split_014.html#FOOT124" id="DOCF124"><sup>124</sup></a> prior to this one (so the path to their compiled code has been registered).</p>
<p>CRAN examples of the use of this mechanism include <a href="https://CRAN.R-project.org/package=coxme"><strong>coxme</strong></a> linking to <a href="https://CRAN.R-project.org/package=bdsmatrix"><strong>bdsmatrix</strong></a> and <a href="https://CRAN.R-project.org/package=xts"><strong>xts</strong></a> linking to <a href="https://CRAN.R-project.org/package=zoo"><strong>zoo</strong></a></p>
<hr />
<p><a href="" id="Creating-shared-objects"></a> <a href="" id="Creating-shared-objects-1"></a></p>
<h3 id="creating-shared-objects" class="section">5.5 Creating shared objects</h3>
<p><a href="" id="index-Creating-shared-objects"></a> <a href="" id="index-R-CMD-SHLIB"></a></p>
<p>Shared objects for loading into R can be created using <code class="calibre2">R CMD SHLIB</code>. This accepts as arguments a list of files which must be object files (with extension .o) or sources for C, C++, FORTRAN 77, Fortran 9x, Objective C or Objective C++ (with extensions .c, .cc or .cpp, .f, .f90 or .f95, .m, and .mm or .M, respectively), or commands to be passed to the linker. See R CMD SHLIB --help (or the R help for <code class="calibre2">SHLIB</code>) for usage information.</p>
<p>If compiling the source files does not work “out of the box”, you can specify additional flags by setting some of the variables <a href="" id="index-PKG_005fCPPFLAGS"></a> <code class="calibre2">PKG_CPPFLAGS</code> (for the C preprocessor, typically ‘-I’ flags), <a href="" id="index-PKG_005fCFLAGS"></a> <a href="" id="index-PKG_005fCXXFLAGS"></a> <a href="" id="index-PKG_005fFFLAGS"></a> <a href="" id="index-PKG_005fFCFLAGS"></a> <a href="" id="index-PKG_005fOBJCFLAGS"></a> <a href="" id="index-PKG_005fOBJCXXFLAGS"></a> <code class="calibre2">PKG_CFLAGS</code>, <code class="calibre2">PKG_CXXFLAGS</code>, <code class="calibre2">PKG_FFLAGS</code>, <code class="calibre2">PKG_FCFLAGS</code>, <code class="calibre2">PKG_OBJCFLAGS</code>, and <code class="calibre2">PKG_OBJCXXFLAGS</code> (for the C, C++, FORTRAN 77, Fortran 9x, Objective C, and Objective C++ compilers, respectively) in the file Makevars in the compilation directory (or, of course, create the object files directly from the command line). <a href="" id="index-PKG_005fLIBS"></a> Similarly, variable <code class="calibre2">PKG_LIBS</code> in Makevars can be used for additional ‘-l’ and ‘-L’ flags to be passed to the linker when building the shared object. (Supplying linker commands as arguments to <code class="calibre2">R CMD SHLIB</code> will take precedence over <code class="calibre2">PKG_LIBS</code> in Makevars.)</p>
<p><a href="" id="index-OBJECTS-1"></a></p>
<p>It is possible to arrange to include compiled code from other languages by setting the macro ‘OBJECTS’ in file Makevars, together with suitable rules to make the objects.</p>
<p>Flags which are already set (for example in file etcR_ARCH/Makeconf) can be overridden by the environment variable <code class="calibre2">MAKEFLAGS</code> (at least for systems using a POSIX-compliant <code class="calibre2">make</code>), as in (Bourne shell syntax)</p>
<div class="example">
<pre class="example1"><code>MAKEFLAGS=&quot;CFLAGS=-O3&quot; R CMD SHLIB *.c</code></pre>
</div>
<p>It is also possible to set such variables in personal Makevars files, which are read after the local Makevars and the system makefiles or in a site-wide Makevars.site file.</p>
<p>Note that as <code class="calibre2">R CMD SHLIB</code> uses Make, it will not remake a shared object just because the flags have changed, and if test.c and test.f both exist in the current directory</p>
<div class="example">
<pre class="example1"><code>R CMD SHLIB test.f</code></pre>
</div>
<p>will compile test.c!</p>
<p>If the src subdirectory of an add-on package contains source code with one of the extensions listed above or a file Makevars but <strong>not</strong> a file Makefile, <code class="calibre2">R CMD INSTALL</code> creates a shared object (for loading into R through <code class="calibre2">useDynlib</code> in the NAMESPACE, or in the <code class="calibre2">.onLoad</code> function of the package) using the <code class="calibre2">R CMD SHLIB</code> mechanism. If file Makevars exists it is read first, then the system makefile and then any personal Makevars files.</p>
<p>If the src subdirectory of package contains a file Makefile, this is used by <code class="calibre2">R CMD INSTALL</code> in place of the <code class="calibre2">R CMD SHLIB</code> mechanism. <code class="calibre2">make</code> is called with makefiles R_HOME/etcR_ARCH/Makeconf, src/Makefile and any personal Makevars files (in that order). The first target found in src/Makefile is used.</p>
<p>It is better to make use of a Makevars file rather than a Makefile: the latter should be needed only exceptionally.</p>
<p>Under Windows the same commands work, but Makevars.win will be used in preference to Makevars, and only src/Makefile.win will be used by <code class="calibre2">R CMD INSTALL</code> with src/Makefile being ignored. For past experiences of building DLLs with a variety of compilers, see file ‘README.packages’ and <a href="http://www.stats.uwo.ca/faculty/murdoch/software/compilingDLLs/" class="uri">http://www.stats.uwo.ca/faculty/murdoch/software/compilingDLLs/</a> . Under Windows you can supply an exports definitions file called dllname-win.def: otherwise all entry points in objects (but not libraries) supplied to <code class="calibre2">R CMD SHLIB</code> will be exported from the DLL. An example is stats-win.def for the <strong>stats</strong> package: a CRAN example in package <a href="https://CRAN.R-project.org/package=fastICA"><strong>fastICA</strong></a>.</p>
<p>If you feel tempted to read the source code and subvert these mechanisms, please resist. Far too much developer time has been wasted in chasing down errors caused by failures to follow this documentation, and even more by package authors demanding explanations as to why their packages no longer work. In particular, undocumented environment or <code class="calibre2">make</code> variables are not for use by package writers and are subject to change without notice.</p>
<hr />
<p><a href="" id="Interfacing-C_002b_002b-code"></a> <a href="" id="Interfacing-C_002b_002b-code-1"></a></p>
<h3 id="interfacing-c-code" class="section">5.6 Interfacing C++ code</h3>
<p><a href="" id="index-Interfacing-C_002b_002b-code"></a> <a href="" id="index-C_002b_002b-code_002c-interfacing"></a></p>
<p>Suppose we have the following hypothetical C++ library, consisting of the two files X.h and X.cpp, and implementing the two classes <code class="calibre2">X</code> and <code class="calibre2">Y</code> which we want to use in R.</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>// X.h

class X {
public: X (); ~X ();
};

class Y {
public: Y (); ~Y ();
};</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>// X.cpp

#include &lt;R.h&gt;
#include &quot;X.h&quot;

static Y y;

X::X()  { REprintf(&quot;constructor X\n&quot;); }
X::~X() { REprintf(&quot;destructor X\n&quot;);  }
Y::Y()  { REprintf(&quot;constructor Y\n&quot;); }
Y::~Y() { REprintf(&quot;destructor Y\n&quot;);  }</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>To use with R, the only thing we have to do is writing a wrapper function and ensuring that the function is enclosed in</p>
<div class="example">
<pre class="example1"><code>extern &quot;C&quot; {

}</code></pre>
</div>
<p>For example,</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>// X_main.cpp:

#include &quot;X.h&quot;

extern &quot;C&quot; {

void X_main () {
  X x;
}

} // extern &quot;C&quot;</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>Compiling and linking should be done with the C++ compiler-linker (rather than the C compiler-linker or the linker itself); otherwise, the C++ initialization code (and hence the constructor of the static variable <code class="calibre2">Y</code>) are not called. On a properly configured system, one can simply use</p>
<div class="example">
<pre class="example1"><code>R CMD SHLIB X.cpp X_main.cpp</code></pre>
</div>
<p>to create the shared object, typically X.so (the file name extension may be different on your platform). Now starting R yields</p>
<div class="example">
<pre class="example1"><code>R version 2.14.1 Patched (2012-01-16 r58124)
Copyright (C) 2012 The R Foundation for Statistical Computing
...
Type    &quot;q()&quot; to quit R.</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>R&gt; dyn.load(paste(&quot;X&quot;, .Platform$dynlib.ext, sep = &quot;&quot;))
constructor Y
R&gt; .C(&quot;X_main&quot;)
constructor X
destructor X
list()
R&gt; q()
Save workspace image? [y/n/c]: y
destructor Y</code></pre>
</div>
<p>The R for Windows FAQ (rw-FAQ) contains details of how to compile this example under Windows.</p>
<p>Earlier versions of this example used C++ iostreams: this is best avoided. There is no guarantee that the output will appear in the R console, and indeed it will not on the R for Windows console. Use R code or the C entry points (see <a href="R-exts_split_010.html#Printing">Printing</a>) for all I/O if at all possible. Examples have been seen where merely loading a DLL that contained calls to C++ I/O upset R’s own C I/O (for example by resetting buffers on open files).</p>
<p>Most R header files can be included within C++ programs but they should <strong>not</strong> be included within an <code class="calibre2">extern &quot;C&quot;</code> block (as they include system headers<a href="R-exts_split_014.html#FOOT125" id="DOCF125"><sup>125</sup></a>). The inclusion of system headers in C++ changed in R 3.3.0<a href="R-exts_split_014.html#FOOT126" id="DOCF126"><sup>126</sup></a>, so if you care about earlier versions of R please check your package there.</p>
<p>Legacy header S.h cannot be used with C++.</p>
<p><a href="" id="External-C_002b_002b-code"></a></p>
<h4 id="external-c-code" class="subsection">5.6.1 External C++ code</h4>
<p>Quite a lot of external C++ software is header-only (e.g. most of the Boost ‘libraries’ including all those supplied by package <a href="https://CRAN.R-project.org/package=BH"><strong>BH</strong></a>, and most of Armadillo as supplied by package <a href="https://CRAN.R-project.org/package=RcppArmadillo"><strong>RcppArmadillo</strong></a>) and so is compiled when an R package which uses it is installed. This causes few problems.</p>
<p>A small number of external libraries used in R packages have a C++ interface to a library of compiled code, e.g. packages <a href="https://CRAN.R-project.org/package=rgdal"><strong>rgdal</strong></a> and <a href="https://CRAN.R-project.org/package=rjags"><strong>rjags</strong></a>. This raises many more problems! The C++ interface uses name-mangling and the ABI<a href="R-exts_split_014.html#FOOT127" id="DOCF127"><sup>127</sup></a> may depend on the compiler, version and even C++ defines<a href="R-exts_split_014.html#FOOT128" id="DOCF128"><sup>128</sup></a>, so requires the package C++ code to be compiled in exactly the same way as the library (and what that was is often undocumented). Examples include use of <code class="calibre2">g++</code> <em>vs</em> <code class="calibre2">clang++</code> or Solaris’ <code class="calibre2">CC</code>, and the two ABIs available for C++11 in <code class="calibre2">g++</code> with different defaults for GCC 4.9 and 5.x in some Linux distributions.</p>
<p>Even fewer external libraries use C++ internally but present a C interface, such as <a href="https://CRAN.R-project.org/package=rgeos"><strong>rgeos</strong></a>. These require the C++ runtime library to be linked into the package’s shared object/DLL, and this is best done by including a dummy C++ file in the package sources.</p>
<p>There is a recent trend to link to the C++ interfaces offered by C software such as <strong>hdf5</strong>, <strong>pcre</strong> and <strong>ImageMagick</strong>. Their C interfaces are much preferred for portability (and can be used from C++ code). Also, the C++ interfaces are often optional in the software build or packaged separately and so users installing from package sources are far less likely to already have them installed.</p>
<hr />
<p><a href="" id="Fortran-I_002fO"></a> <a href="" id="Fortran-I_002fO-1"></a></p>
<h3 id="fortran-io" class="section">5.7 Fortran I/O</h3>
<p>We have already warned against the use of C++ iostreams not least because output is not guaranteed to appear on the R console, and this warning applies equally to Fortran (77 or 9x) output to units <code class="calibre2">*</code> and <code class="calibre2">6</code>. See <a href="R-exts_split_010.html#Printing-from-FORTRAN">Printing from FORTRAN</a>, which describes workarounds.</p>
<p>In the past most Fortran compilers implemented I/O on top of the C I/O system and so the two interworked successfully. This was true of <code class="calibre2">g77</code>, but it is less true of <code class="calibre2">gfortran</code> as used in <code class="calibre2">gcc</code> 4 and later. In particular, any package that makes use of Fortran I/O will when compiled on Windows interfere with C I/O: when the Fortran I/O is initialized (typically when the package is loaded) the C <code class="calibre2">stdout</code> and <code class="calibre2">stderr</code> are switched to LF line endings. (Function <code class="calibre2">init</code> in file src/modules/lapack/init_win.c shows how to mitigate this.)</p>
<hr />
<p><a href="" id="Linking-to-other-packages"></a> <a href="" id="Linking-to-other-packages-1"></a></p>
<h3 id="linking-to-other-packages" class="section">5.8 Linking to other packages</h3>
<p>It is not in general possible to link a DLL in package <strong>packA</strong> to a DLL provided by package <strong>packB</strong> (for the security reasons mentioned in <a href="#dyn_002eload-and-dyn_002eunload">dyn.load and dyn.unload</a>, and also because some platforms distinguish between shared objects and dynamic libraries), but it is on Windows.</p>
<p>Note that there can be tricky versioning issues here, as package <strong>packB</strong> could be re-installed after package <strong>packA</strong> — it is desirable that the API provided by package <strong>packB</strong> remains backwards-compatible.</p>
<p>Shipping a static library in package <strong>packB</strong> for other packages to link to avoids most of the difficulties.</p>
<hr />
<p><a href="" id="Unix_002dalikes"></a> <a href="" id="Unix_002dalikes-1"></a></p>
<h4 id="unix-alikes" class="subsection">5.8.1 Unix-alikes</h4>
<p>It is possible to link a shared object in package <strong>packA</strong> to a library provided by package <strong>packB</strong> under limited circumstances on a Unix-alike OS. There are severe portability issues, so this is not recommended for a distributed package.</p>
<p>This is easiest if <strong>packB</strong> provides a static library packB/lib/libpackB.a. (Note using directory lib rather than libs is conventional, and architecture-specific sub-directories may be needed and are assumed in the sample code below. The code in the static library will need to be compiled with <code class="calibre2">PIC</code> flags on platforms where it matters.) Then as the code from package <strong>packB</strong> is incorporated when package <strong>packA</strong> is installed, we only need to find the static library at install time for package <strong>packA</strong>. The only issue is to find package <strong>packB</strong>, and for that we can ask R by something like (long lines broken for display here)</p>
<div class="example">
<pre class="example1"><code>PKGB_PATH=‘echo ’library(packB);
  cat(system.file(&quot;lib&quot;,  package=&quot;packB&quot;, mustWork=TRUE))&#39; \
 | &quot;${R_HOME}/bin/R&quot; --vanilla --slave`
PKG_LIBS=&quot;$(PKGB_PATH)$(R_ARCH)/libpackB.a&quot;</code></pre>
</div>
<p>For a dynamic library packB/lib/libpackB.so (packB/lib/libpackB.dylib on macOS: note that you cannot link to a shared object, .so, on that platform) we could use</p>
<div class="example">
<pre class="example1"><code>PKGB_PATH=‘echo ’library(packB);
  cat(system.file(&quot;lib&quot;, package=&quot;packB&quot;, mustWork=TRUE))&#39; \
 | &quot;${R_HOME}/bin/R&quot; --vanilla --slave`
PKG_LIBS=-L&quot;$(PKGB_PATH)$(R_ARCH)&quot; -lpackB</code></pre>
</div>
<p>This will work for installation, but very likely not when package <code class="calibre2">packB</code> is loaded, as the path to package <strong>packB</strong>’s lib directory is not in the <code class="calibre2">ld.so</code><a href="R-exts_split_014.html#FOOT129" id="DOCF129"><sup>129</sup></a> search path. You can arrange to put it there <strong>before</strong> R is launched by setting (on some platforms) <code class="calibre2">LD_RUN_PATH</code> or <code class="calibre2">LD_LIBRARY_PATH</code> or adding to the <code class="calibre2">ld.so</code> cache (see <code class="calibre2">man ldconfig</code>). On platforms that support it, the path to the directory containing the dynamic library can be hardcoded at install time (which assumes that the location of package <strong>packB</strong> will not be changed nor the package updated to a changed API). On systems with the <code class="calibre2">gcc</code> or <code class="calibre2">clang</code> and the GNU linker (e.g. Linux) and some others this can be done by e.g.</p>
<div class="example">
<pre class="example1"><code>PKGB_PATH=‘echo ’library(packB);
  cat(system.file(&quot;lib&quot;, package=&quot;packB&quot;, mustWork=TRUE)))&#39; \
 | &quot;${R_HOME}/bin/R&quot; --vanilla --slave`
PKG_LIBS=-L&quot;$(PKGB_PATH)$(R_ARCH)&quot; -Wl,-rpath,&quot;$(PKGB_PATH)$(R_ARCH)&quot; -lpackB</code></pre>
</div>
<p>Some other systems (e.g. Solaris with its native linker) use -Rdir rather than -rpath,dir (and this is accepted by the compiler as well as the linker).</p>
<p>It may be possible to figure out what is required semi-automatically from the result of <code class="calibre2">R CMD libtool --config</code> (look for ‘hardcode’).</p>
<p>Making headers provided by package <strong>packB</strong> available to the code to be compiled in package <strong>packA</strong> can be done by the <code class="calibre2">LinkingTo</code> mechanism (see <a href="#Registering-native-routines">Registering native routines</a>).</p>
<hr />
<p><a href="" id="Windows"></a> <a href="" id="Windows-1"></a></p>
<h4 id="windows" class="subsection">5.8.2 Windows</h4>
<p>Suppose package <strong>packA</strong> wants to make use of compiled code provided by <strong>packB</strong> in DLL packB/libs/exB.dll, possibly the package’s DLL packB/libs/packB.dll. (This can be extended to linking to more than one package in a similar way.) There are three issues to be addressed:</p>
<ul>
<li><p>Making headers provided by package <strong>packB</strong> available to the code to be compiled in package <strong>packA</strong>.</p>
<p>This is done by the <code class="calibre2">LinkingTo</code> mechanism (see <a href="#Registering-native-routines">Registering native routines</a>).</p></li>
<li><p>preparing <code class="calibre2">packA.dll</code> to link to packB/libs/exB.dll.</p>
<p>This needs an entry in Makevars.win of the form</p>
<div class="example">
<pre class="example1"><code>PKG_LIBS= -L&lt;something&gt; -lexB</code></pre>
</div>
<p>and one possibility is that <code class="calibre2">&lt;something&gt;</code> is the path to the installed pkgB/libs directory. To find that we need to ask R where it is by something like</p>
<div class="example">
<pre class="example1"><code>PKGB_PATH=‘echo ’library(packB);
  cat(system.file(&quot;libs&quot;, package=&quot;packB&quot;, mustWork=TRUE))&#39; \
 | rterm --vanilla --slave`
PKG_LIBS= -L&quot;$(PKGB_PATH)$(R_ARCH)&quot; -lexB</code></pre>
</div>
<p>Another possibility is to use an import library, shipping with package <strong>packA</strong> an exports file exB.def. Then Makevars.win could contain</p>
<div class="example">
<pre class="example1"><code>PKG_LIBS= -L. -lexB

all: $(SHLIB) before

before: libexB.dll.a
libexB.dll.a: exB.def</code></pre>
</div>
<p>and then installing package <strong>packA</strong> will make and use the import library for exB.dll. (One way to prepare the exports file is to use pexports.exe.)</p></li>
<li><p>loading packA.dll which depends on exB.dll.</p>
<p>If <code class="calibre2">exB.dll</code> was used by package <strong>packB</strong> (because it is in fact packB.dll or packB.dll depends on it) and <strong>packB</strong> has been loaded before <strong>packA</strong>, then nothing more needs to be done as exB.dll will already be loaded into the R executable. (This is the most common scenario.)</p>
<p>More generally, we can use the <code class="calibre2">DLLpath</code> argument to <code class="calibre2">library.dynam</code> to ensure that <code class="calibre2">exB.dll</code> is found, for example by setting</p>
<div class="example">
<pre class="example1"><code>library.dynam(&quot;packA&quot;, pkg, lib,
              DLLpath = system.file(&quot;libs&quot;, package=&quot;packB&quot;))</code></pre>
</div>
<p>Note that <code class="calibre2">DLLpath</code> can only set one path, and so for linking to two or more packages you would need to resort to setting environment variable <code class="calibre2">PATH</code>.</p></li>
</ul>
<hr />
<p><a href="" id="Handling-R-objects-in-C"></a> <a href="" id="Handling-R-objects-in-C-1"></a></p>
<h3 id="handling-r-objects-in-c" class="section">5.9 Handling R objects in C</h3>
<p><a href="" id="index-Handling-R-objects-in-C"></a></p>
<p>Using C code to speed up the execution of an R function is often very fruitful. Traditionally this has been done <em>via</em> the <code class="calibre2">.C</code> function in R. However, if a user wants to write C code using internal R data structures, then that can be done using the <code class="calibre2">.Call</code> and <code class="calibre2">.External</code> functions. The syntax for the calling function in R in each case is similar to that of <code class="calibre2">.C</code>, but the two functions have different C interfaces. Generally the <code class="calibre2">.Call</code> interface is simpler to use, but <code class="calibre2">.External</code> is a little more general. <a href="" id="index-_002eCall"></a> <a href="" id="index-_002eExternal"></a></p>
<p>A call to <code class="calibre2">.Call</code> is very similar to <code class="calibre2">.C</code>, for example</p>
<div class="example">
<pre class="example1"><code>.Call(&quot;convolve2&quot;, a, b)</code></pre>
</div>
<p>The first argument should be a character string giving a C symbol name of code that has already been loaded into R. Up to 65 R objects can passed as arguments. The C side of the interface is</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

SEXP convolve2(SEXP a, SEXP b)
 ...</code></pre>
</div>
<p>A call to <code class="calibre2">.External</code> is almost identical</p>
<div class="example">
<pre class="example1"><code>.External(&quot;convolveE&quot;, a, b)</code></pre>
</div>
<p>but the C side of the interface is different, having only one argument</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

SEXP convolveE(SEXP args)
 ...</code></pre>
</div>
<p>Here <code class="calibre2">args</code> is a <code class="calibre2">LISTSXP</code>, a Lisp-style pairlist from which the arguments can be extracted.</p>
<p>In each case the R objects are available for manipulation <em>via</em> a set of functions and macros defined in the header file Rinternals.h or some S-compatibility macros<a href="R-exts_split_014.html#FOOT130" id="DOCF130"><sup>130</sup></a> defined in Rdefines.h. See <a href="#Interface-functions-_002eCall-and-_002eExternal">Interface functions .Call and .External</a> for details on <code class="calibre2">.Call</code> and <code class="calibre2">.External</code>.</p>
<p>Before you decide to use <code class="calibre2">.Call</code> or <code class="calibre2">.External</code>, you should look at other alternatives. First, consider working in interpreted R code; if this is fast enough, this is normally the best option. You should also see if using <code class="calibre2">.C</code> is enough. If the task to be performed in C is simple enough involving only atomic vectors and requiring no call to R, <code class="calibre2">.C</code> suffices. A great deal of useful code was written using just <code class="calibre2">.C</code> before <code class="calibre2">.Call</code> and <code class="calibre2">.External</code> were available. These interfaces allow much more control, but they also impose much greater responsibilities so need to be used with care. Neither <code class="calibre2">.Call</code> nor <code class="calibre2">.External</code> copy their arguments: you should treat arguments you receive through these interfaces as read-only.</p>
<p>To handle R objects from within C code we use the macros and functions that have been used to implement the core parts of R. A public<a href="R-exts_split_014.html#FOOT131" id="DOCF131"><sup>131</sup></a> subset of these is defined in the header file Rinternals.h in the directory R_INCLUDE_DIR (default R_HOME/include) that should be available on any R installation.</p>
<p>A substantial amount of R, including the standard packages, is implemented using the functions and macros described here, so the R source code provides a rich source of examples and “how to do it”: do make use of the source code for inspirational examples.</p>
<p>It is necessary to know something about how R objects are handled in C code. All the R objects you will deal with will be handled with the type <em>SEXP</em><a href="R-exts_split_014.html#FOOT132" id="DOCF132"><sup>132</sup></a>, which is a pointer to a structure with typedef <code class="calibre2">SEXPREC</code>. Think of this structure as a <em>variant type</em> that can handle all the usual types of R objects, that is vectors of various modes, functions, environments, language objects and so on. The details are given later in this section and in <a href="./R-ints.html#R-Internal-Structures">R Internal Structures</a> in R Internals, but for most purposes the programmer does not need to know them. Think rather of a model such as that used by Visual Basic, in which R objects are handed around in C code (as they are in interpreted R code) as the variant type, and the appropriate part is extracted for, for example, numerical calculations, only when it is needed. As in interpreted R code, much use is made of coercion to force the variant object to the right type.</p>
<hr />
<p><a href="" id="Garbage-Collection"></a> <a href="" id="Handling-the-effects-of-garbage-collection"></a></p>
<h4 id="handling-the-effects-of-garbage-collection" class="subsection">5.9.1 Handling the effects of garbage collection</h4>
<p><a href="" id="index-Garbage-collection"></a> <a href="" id="index-PROTECT"></a> <a href="" id="index-UNPROTECT"></a></p>
<p>We need to know a little about the way R handles memory allocation. The memory allocated for R objects is not freed by the user; instead, the memory is from time to time <em>garbage collected</em>. That is, some or all of the allocated memory not being used is freed or marked as re-usable.</p>
<p>The R object types are represented by a C structure defined by a typedef <code class="calibre2">SEXPREC</code> in Rinternals.h. It contains several things among which are pointers to data blocks and to other <code class="calibre2">SEXPREC</code>s. A <code class="calibre2">SEXP</code> is simply a pointer to a <code class="calibre2">SEXPREC</code>.</p>
<p>If you create an R object in your C code, you must tell R that you are using the object by using the <code class="calibre2">PROTECT</code> macro on a pointer to the object. This tells R that the object is in use so it is not destroyed during garbage collection. Notice that it is the object which is protected, not the pointer variable. It is a common mistake to believe that if you invoked <code class="calibre2">PROTECT(p)</code> at some point then p is protected from then on, but that is not true once a new object is assigned to p.</p>
<p>Protecting an R object automatically protects all the R objects pointed to in the corresponding <code class="calibre2">SEXPREC</code>, for example all elements of a protected list are automatically protected.</p>
<p>The programmer is solely responsible for housekeeping the calls to <code class="calibre2">PROTECT</code>. There is a corresponding macro <code class="calibre2">UNPROTECT</code> that takes as argument an <code class="calibre2">int</code> giving the number of objects to unprotect when they are no longer needed. The protection mechanism is stack-based, so <code class="calibre2">UNPROTECT(n)</code> unprotects the last n objects which were protected. The calls to <code class="calibre2">PROTECT</code> and <code class="calibre2">UNPROTECT</code> must balance when the user’s code returns. R will warn about <code class="calibre2">&quot;stack imbalance in .Call&quot;</code> (or <code class="calibre2">.External</code>) if the housekeeping is wrong.</p>
<p>Here is a small example of creating an R numeric vector in C code:</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

    SEXP ab;
      ....
    ab = PROTECT(allocVector(REALSXP, 2));
    REAL(ab)[0] = 123.45;
    REAL(ab)[1] = 67.89;
    UNPROTECT(1);</code></pre>
</div>
<p>Now, the reader may ask how the R object could possibly get removed during those manipulations, as it is just our C code that is running. As it happens, we can do without the protection in this example, but in general we do not know (nor want to know) what is hiding behind the R macros and functions we use, and any of them might cause memory to be allocated, hence garbage collection and hence our object <code class="calibre2">ab</code> to be removed. It is usually wise to err on the side of caution and assume that any of the R macros and functions might remove the object.</p>
<p>In some cases it is necessary to keep better track of whether protection is really needed. Be particularly aware of situations where a large number of objects are generated. The pointer protection stack has a fixed size (default 10,000) and can become full. It is not a good idea then to just <code class="calibre2">PROTECT</code> everything in sight and <code class="calibre2">UNPROTECT</code> several thousand objects at the end. It will almost invariably be possible to either assign the objects as part of another object (which automatically protects them) or unprotect them immediately after use.</p>
<p>Protection is not needed for objects which R already knows are in use. In particular, this applies to function arguments.</p>
<p>There is a less-used macro <code class="calibre2">UNPROTECT_PTR(s)</code> that unprotects the object pointed to by the <code class="calibre2">SEXP</code> s, even if it is not the top item on the pointer protection stack. This is rarely needed outside the parser (the R sources currently have three examples, one in src/main/plot3d.c). <a href="" id="index-UNPROTECT_005fPTR"></a></p>
<p>Sometimes an object is changed (for example duplicated, coerced or grown) yet the current value needs to be protected. For these cases <code class="calibre2">PROTECT_WITH_INDEX</code> saves an index of the protection location that can be used to replace the protected value using <code class="calibre2">REPROTECT</code>. <a href="" id="index-PROTECT_005fWITH_005fINDEX"></a> <a href="" id="index-REPROTECT"></a> For example (from the internal code for <code class="calibre2">optim</code>)</p>
<div class="example">
<pre class="example1"><code>    PROTECT_INDEX ipx;

    ....
    PROTECT_WITH_INDEX(s = eval(OS-&gt;R_fcall, OS-&gt;R_env), &amp;ipx);
    REPROTECT(s = coerceVector(s, REALSXP), ipx);</code></pre>
</div>
<p>Note that it is dangerous to mix <code class="calibre2">UNPROTECT_PTR</code> with <code class="calibre2">PROTECT_WITH_INDEX</code>, as the former changes the protection locations of objects that were protected after the one being unprotected.</p>
<p><a href="" id="index-R_005fPreserveObject"></a> <a href="" id="index-R_005fReleaseObject"></a></p>
<p>There is another way to avoid the affects of garbage collection: a call to <code class="calibre2">R_PreserveObject</code> adds an object to an internal list of objects not to be collects, and a subsequent call to <code class="calibre2">R_ReleaseObject</code> removes it from that list. This provides a way for objects which are not returned as part of R objects to be protected across calls to compiled code: on the other hand it becomes the user’s responsibility to release them when they are no longer needed (and this often requires the use of a finalizer). It is less efficient that the normal protection mechanism, and should be used sparingly.</p>
<hr />
<p><a href="" id="Allocating-storage"></a> <a href="" id="Allocating-storage-1"></a></p>
<h4 id="allocating-storage" class="subsection">5.9.2 Allocating storage</h4>
<p><a href="" id="index-Allocating-storage"></a></p>
<p>For many purposes it is sufficient to allocate R objects and manipulate those. There are quite a few <code class="calibre2">allocXxx</code> functions defined in Rinternals.h—you may want to explore them.</p>
<p><a href="" id="index-allocVector"></a></p>
<p>One that is commonly used is <code class="calibre2">allocVector</code>, the C-level equivalent of R-level <code class="calibre2">vector()</code> and its wrappers such as <code class="calibre2">integer()</code> and <code class="calibre2">character()</code>. One distinction is that whereas the R functions always initialize the elements of the vector, <code class="calibre2">allocVector</code> only does so for lists, expressions and character vectors (the cases where the elements are themselves R objects).</p>
<p>If storage is required for C objects during the calculations this is best allocating by calling <code class="calibre2">R_alloc</code>; see <a href="R-exts_split_010.html#Memory-allocation">Memory allocation</a>. All of these memory allocation routines do their own error-checking, so the programmer may assume that they will raise an error and not return if the memory cannot be allocated.</p>
<hr />
<p><a href="" id="Details-of-R-types"></a> <a href="" id="Details-of-R-types-1"></a></p>
<h4 id="details-of-r-types" class="subsection">5.9.3 Details of R types</h4>
<p><a href="" id="index-Details-of-R-types"></a></p>
<p>Users of the Rinternals.h macros will need to know how the R types are known internally. The different R data types are represented in C by <em>SEXPTYPE</em>. Some of these are familiar from R and some are internal data types. The usual R object modes are given in the table.</p>
<blockquote>
<table>
<thead>
<tr class="header">
<th align="left">SEXPTYPE</th>
<th align="left">R equivalent</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left"><code class="calibre2">REALSXP</code></td>
<td align="left">numeric with storage mode <code class="calibre2">double</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">INTSXP</code></td>
<td align="left">integer</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">CPLXSXP</code></td>
<td align="left">complex</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">LGLSXP</code></td>
<td align="left">logical</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">STRSXP</code></td>
<td align="left">character</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">VECSXP</code></td>
<td align="left">list (generic vector)</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">LISTSXP</code></td>
<td align="left">pairlist</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">DOTSXP</code></td>
<td align="left">a ‘…’ object</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">NILSXP</code></td>
<td align="left">NULL</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">SYMSXP</code></td>
<td align="left">name/symbol</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">CLOSXP</code></td>
<td align="left">function or function closure</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">ENVSXP</code></td>
<td align="left">environment</td>
</tr>
</tbody>
</table>
</blockquote>
<p>Among the important internal <code class="calibre2">SEXPTYPE</code>s are <code class="calibre2">LANGSXP</code>, <code class="calibre2">CHARSXP</code>, <code class="calibre2">PROMSXP</code>, etc. (<strong>N.B.</strong>: although it is possible to return objects of internal types, it is unsafe to do so as assumptions are made about how they are handled which may be violated at user-level evaluation.) More details are given in <a href="./R-ints.html#R-Internal-Structures">R Internal Structures</a> in R Internals.</p>
<p>Unless you are very sure about the type of the arguments, the code should check the data types. Sometimes it may also be necessary to check data types of objects created by evaluating an R expression in the C code. You can use functions like <code class="calibre2">isReal</code>, <code class="calibre2">isInteger</code> and <code class="calibre2">isString</code> to do type checking. See the header file Rinternals.h for definitions of other such functions. All of these take a <code class="calibre2">SEXP</code> as argument and return 1 or 0 to indicate TRUE or FALSE.</p>
<p>What happens if the <code class="calibre2">SEXP</code> is not of the correct type? Sometimes you have no other option except to generate an error. You can use the function <code class="calibre2">error</code> for this. It is usually better to coerce the object to the correct type. For example, if you find that an <code class="calibre2">SEXP</code> is of the type <code class="calibre2">INTEGER</code>, but you need a <code class="calibre2">REAL</code> object, you can change the type by using</p>
<div class="example">
<pre class="example1"><code>newSexp = PROTECT(coerceVector(oldSexp, REALSXP));</code></pre>
</div>
<p>Protection is needed as a new <em>object</em> is created; the object formerly pointed to by the <code class="calibre2">SEXP</code> is still protected but now unused.<a href="R-exts_split_014.html#FOOT133" id="DOCF133"><sup>133</sup></a></p>
<p>All the coercion functions do their own error-checking, and generate <code class="calibre2">NA</code>s with a warning or stop with an error as appropriate.</p>
<p>Note that these coercion functions are <em>not</em> the same as calling <code class="calibre2">as.numeric</code> (and so on) in R code, as they do not dispatch on the class of the object. Thus it is normally preferable to do the coercion in the calling R code.</p>
<p>So far we have only seen how to create and coerce R objects from C code, and how to extract the numeric data from numeric R vectors. These can suffice to take us a long way in interfacing R objects to numerical algorithms, but we may need to know a little more to create useful return objects.</p>
<hr />
<p><a href="" id="Attributes"></a> <a href="" id="Attributes-1"></a></p>
<h4 id="attributes" class="subsection">5.9.4 Attributes</h4>
<p><a href="" id="index-Attributes"></a></p>
<p>Many R objects have attributes: some of the most useful are classes and the <code class="calibre2">dim</code> and <code class="calibre2">dimnames</code> that mark objects as matrices or arrays. It can also be helpful to work with the <code class="calibre2">names</code> attribute of vectors.</p>
<p>To illustrate this, let us write code to take the outer product of two vectors (which <code class="calibre2">outer</code> and <code class="calibre2">%o%</code> already do). As usual the R code is simple</p>
<div class="example">
<pre class="example1"><code>out &lt;- function(x, y)
{
    storage.mode(x) &lt;- storage.mode(y) &lt;- &quot;double&quot;
    .Call(&quot;out&quot;, x, y)
}</code></pre>
</div>
<p>where we expect <code class="calibre2">x</code> and <code class="calibre2">y</code> to be numeric vectors (possibly integer), possibly with names. This time we do the coercion in the calling R code.</p>
<p>C code to do the computations is</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

SEXP out(SEXP x, SEXP y)
{
    int nx = length(x), ny = length(y);
    SEXP ans = PROTECT(allocMatrix(REALSXP, nx, ny));
    double *rx = REAL(x), *ry = REAL(y), *rans = REAL(ans);
    for(int i = 0; i &lt; nx; i++) {
        double tmp = rx[i];
        for(int j = 0; j &lt; ny; j++)
            rans[i + nx*j] = tmp * ry[j];
    }
    UNPROTECT(1);
    return ans;
}</code></pre>
</div>
<p>Note the way <code class="calibre2">REAL</code> is used: as it is a function call it can be considerably faster to store the result and index that.</p>
<p>However, we would like to set the <code class="calibre2">dimnames</code> of the result. We can use</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;
</code></pre>
<pre class="example1"><code>SEXP out(SEXP x, SEXP y)
{
    int nx = length(x), ny = length(y);
    SEXP ans = PROTECT(allocMatrix(REALSXP, nx, ny));
    double *rx = REAL(x), *ry = REAL(y), *rans = REAL(ans);

    for(int i = 0; i &lt; nx; i++) {
      double tmp = rx[i];
      for(int j = 0; j &lt; ny; j++)
        rans[i + nx*j] = tmp * ry[j];
    }

    SEXP dimnames = PROTECT(allocVector(VECSXP, 2));
    SET_VECTOR_ELT(dimnames, 0, getAttrib(x, R_NamesSymbol));
    SET_VECTOR_ELT(dimnames, 1, getAttrib(y, R_NamesSymbol));
    setAttrib(ans, R_DimNamesSymbol, dimnames);</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>    UNPROTECT(2);
    return ans;
}</code></pre>
</div>
<p>This example introduces several new features. The <code class="calibre2">getAttrib</code> and <code class="calibre2">setAttrib</code> <a href="" id="index-getAttrib"></a> <a href="" id="index-setAttrib"></a> functions get and set individual attributes. Their second argument is a <code class="calibre2">SEXP</code> defining the name in the symbol table of the attribute we want; these and many such symbols are defined in the header file Rinternals.h.</p>
<p>There are shortcuts here too: the functions <code class="calibre2">namesgets</code>, <code class="calibre2">dimgets</code> and <code class="calibre2">dimnamesgets</code> are the internal versions of the default methods of <code class="calibre2">names&lt;-</code>, <code class="calibre2">dim&lt;-</code> and <code class="calibre2">dimnames&lt;-</code> (for vectors and arrays), and there are functions such as <code class="calibre2">GetMatrixDimnames</code> and <code class="calibre2">GetArrayDimnames</code>.</p>
<p>What happens if we want to add an attribute that is not pre-defined? We need to add a symbol for it <em>via</em> a call to <a href="" id="index-install"></a> <code class="calibre2">install</code>. Suppose for illustration we wanted to add an attribute <code class="calibre2">&quot;version&quot;</code> with value <code class="calibre2">3.0</code>. We could use</p>
<div class="example">
<pre class="example1"><code>    SEXP version;
    version = PROTECT(allocVector(REALSXP, 1));
    REAL(version)[0] = 3.0;
    setAttrib(ans, install(&quot;version&quot;), version);
    UNPROTECT(1);</code></pre>
</div>
<p>Using <code class="calibre2">install</code> when it is not needed is harmless and provides a simple way to retrieve the symbol from the symbol table if it is already installed. However, the lookup takes a non-trivial amount of time, so consider code such as</p>
<div class="example">
<pre class="example1"><code>static SEXP VerSymbol = NULL;
...
    if (VerSymbol == NULL) VerSymbol = install(&quot;version&quot;);</code></pre>
</div>
<p>if it is to be done frequently.</p>
<p>This example can be simplified by another convenience function:</p>
<div class="example">
<pre class="example1"><code>    SEXP version = PROTECT(ScalarReal(3.0));
    setAttrib(ans, install(&quot;version&quot;), version);
    UNPROTECT(1);</code></pre>
</div>
<hr />
<p><a href="" id="Classes"></a> <a href="" id="Classes-1"></a></p>
<h4 id="classes" class="subsection">5.9.5 Classes</h4>
<p><a href="" id="index-Classes"></a></p>
<p>In R the class is just the attribute named <code class="calibre2">&quot;class&quot;</code> so it can be handled as such, but there is a shortcut <code class="calibre2">classgets</code>. Suppose we want to give the return value in our example the class <code class="calibre2">&quot;mat&quot;</code>. We can use</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;
      ....
    SEXP ans, dim, dimnames, class;
      ....
    class = PROTECT(allocVector(STRSXP, 1));
    SET_STRING_ELT(class, 0, mkChar(&quot;mat&quot;));
    classgets(ans, class);
    UNPROTECT(4);
    return ans;
}</code></pre>
</div>
<p>As the value is a character vector, we have to know how to create that from a C character array, which we do using the function <code class="calibre2">mkChar</code>.</p>
<hr />
<p><a href="" id="Handling-lists"></a> <a href="" id="Handling-lists-1"></a></p>
<h4 id="handling-lists" class="subsection">5.9.6 Handling lists</h4>
<p><a href="" id="index-Handling-lists"></a></p>
<p>Some care is needed with lists, as R moved early on from using LISP-like lists (now called “pairlists”) to S-like generic vectors. As a result, the appropriate test for an object of mode <code class="calibre2">list</code> is <code class="calibre2">isNewList</code>, and we need <code class="calibre2">allocVector(VECSXP, n</code>) and <em>not</em> <code class="calibre2">allocList(n)</code>.</p>
<p>List elements can be retrieved or set by direct access to the elements of the generic vector. Suppose we have a list object</p>
<div class="example">
<pre class="example1"><code>a &lt;- list(f = 1, g = 2, h = 3)</code></pre>
</div>
<p>Then we can access <code class="calibre2">a$g</code> as <code class="calibre2">a[[2]]</code> by</p>
<div class="example">
<pre class="example1"><code>    double g;
      ....
    g = REAL(VECTOR_ELT(a, 1))[0];</code></pre>
</div>
<p>This can rapidly become tedious, and the following function (based on one in package <strong>stats</strong>) is very useful:</p>
<div class="example">
<pre class="example1"><code>/* get the list element named str, or return NULL */

SEXP getListElement(SEXP list, const char *str)
{
    SEXP elmt = R_NilValue, names = getAttrib(list, R_NamesSymbol);</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>    for (int i = 0; i &lt; length(list); i++)
        if(strcmp(CHAR(STRING_ELT(names, i)), str) == 0) {
           elmt = VECTOR_ELT(list, i);
           break;
        }
    return elmt;
}</code></pre>
</div>
<p>and enables us to say</p>
<div class="example">
<pre class="example1"><code>  double g;
  g = REAL(getListElement(a, &quot;g&quot;))[0];</code></pre>
</div>
<hr />
<p><a href="" id="Handling-character-data"></a> <a href="" id="Handling-character-data-1"></a></p>
<h4 id="handling-character-data" class="subsection">5.9.7 Handling character data</h4>
<p><a href="" id="index-handling-character-data"></a></p>
<p>R character vectors are stored as <code class="calibre2">STRSXP</code>s, a vector type like <code class="calibre2">VECSXP</code> where every element is of type <code class="calibre2">CHARSXP</code>. The <code class="calibre2">CHARSXP</code> elements of <code class="calibre2">STRSXP</code>s are accessed using <code class="calibre2">STRING_ELT</code> and <code class="calibre2">SET_STRING_ELT</code>.</p>
<p><code class="calibre2">CHARSXP</code>s are read-only objects and must never be modified. In particular, the C-style string contained in a <code class="calibre2">CHARSXP</code> should be treated as read-only and for this reason the <code class="calibre2">CHAR</code> function used to access the character data of a <code class="calibre2">CHARSXP</code> returns <code class="calibre2">(const char *)</code> (this also allows compilers to issue warnings about improper use). Since <code class="calibre2">CHARSXP</code>s are immutable, the same <code class="calibre2">CHARSXP</code> can be shared by any <code class="calibre2">STRSXP</code> needing an element representing the same string. R maintains a global cache of <code class="calibre2">CHARSXP</code>s so that there is only ever one <code class="calibre2">CHARSXP</code> representing a given string in memory.</p>
<p><a href="" id="index-mkChar"></a> <a href="" id="index-mkCharLen"></a></p>
<p>You can obtain a <code class="calibre2">CHARSXP</code> by calling <code class="calibre2">mkChar</code> and providing a nul-terminated C-style string. This function will return a pre-existing <code class="calibre2">CHARSXP</code> if one with a matching string already exists, otherwise it will create a new one and add it to the cache before returning it to you. The variant <code class="calibre2">mkCharLen</code> can be used to create a <code class="calibre2">CHARSXP</code> from part of a buffer and will ensure null-termination.</p>
<p>Note that R character strings are restricted to <code class="calibre2">2^31 - 1</code> bytes, and hence so should the input to <code class="calibre2">mkChar</code> be (C allows longer strings on 64-bit platforms).</p>
<hr />
<p><a href="" id="Finding-and-setting-variables"></a> <a href="" id="Finding-and-setting-variables-1"></a></p>
<h4 id="finding-and-setting-variables" class="subsection">5.9.8 Finding and setting variables</h4>
<p><a href="" id="index-Finding-variables"></a> <a href="" id="index-Setting-variables"></a></p>
<p>It will be usual that all the R objects needed in our C computations are passed as arguments to <code class="calibre2">.Call</code> or <code class="calibre2">.External</code>, but it is possible to find the values of R objects from within the C given their names. The following code is the equivalent of <code class="calibre2">get(name, envir = rho)</code>.</p>
<div class="example">
<pre class="example1"><code>SEXP getvar(SEXP name, SEXP rho)
{
    SEXP ans;

    if(!isString(name) || length(name) != 1)
        error(&quot;name is not a single string&quot;);
    if(!isEnvironment(rho))
        error(&quot;rho should be an environment&quot;);
    ans = findVar(installChar(STRING_ELT(name, 0)), rho);
    Rprintf(&quot;first value is %f\n&quot;, REAL(ans)[0]);
    return R_NilValue;
}</code></pre>
</div>
<p>The main work is done by <a href="" id="index-findVar"></a> <code class="calibre2">findVar</code>, but to use it we need to install <code class="calibre2">name</code> as a name in the symbol table. As we wanted the value for internal use, we return <code class="calibre2">NULL</code>.</p>
<p>Similar functions with syntax</p>
<div class="example">
<pre class="example1"><code>void defineVar(SEXP symbol, SEXP value, SEXP rho)
void setVar(SEXP symbol, SEXP value, SEXP rho)</code></pre>
</div>
<p><a href="" id="index-defineVar"></a> <a href="" id="index-setVar"></a></p>
<p>can be used to assign values to R variables. <code class="calibre2">defineVar</code> creates a new binding or changes the value of an existing binding in the specified environment frame; it is the analogue of <code class="calibre2">assign(symbol, value, envir = rho, inherits = FALSE)</code>, but unlike <code class="calibre2">assign</code>, <code class="calibre2">defineVar</code> does not make a copy of the object <code class="calibre2">value</code>.<a href="R-exts_split_014.html#FOOT134" id="DOCF134"><sup>134</sup></a> <code class="calibre2">setVar</code> searches for an existing binding for <code class="calibre2">symbol</code> in <code class="calibre2">rho</code> or its enclosing environments. If a binding is found, its value is changed to <code class="calibre2">value</code>. Otherwise, a new binding with the specified value is created in the global environment. This corresponds to <code class="calibre2">assign(symbol, value, envir = rho, inherits = TRUE)</code>.</p>
<hr />
<p><a href="" id="Some-convenience-functions"></a> <a href="" id="Some-convenience-functions-1"></a></p>
<h4 id="some-convenience-functions" class="subsection">5.9.9 Some convenience functions</h4>
<p>Some operations are done so frequently that there are convenience functions to handle them. (All these are provided via the header file Rinternals.h.)</p>
<p>Suppose we wanted to pass a single logical argument <code class="calibre2">ignore_quotes</code>: we could use</p>
<div class="example">
<pre class="example1"><code>    int ign = asLogical(ignore_quotes);
    if(ign == NA_LOGICAL) error(&quot;&#39;ignore_quotes&#39; must be TRUE or FALSE&quot;);</code></pre>
</div>
<p>which will do any coercion needed (at least from a vector argument), and return <code class="calibre2">NA_LOGICAL</code> if the value passed was <code class="calibre2">NA</code> or coercion failed. There are also <code class="calibre2">asInteger</code>, <code class="calibre2">asReal</code> and <code class="calibre2">asComplex</code>. The function <code class="calibre2">asChar</code> returns a <code class="calibre2">CHARSXP</code>. All of these functions ignore any elements of an input vector after the first.</p>
<p>To return a length-one real vector we can use</p>
<div class="example">
<pre class="example1"><code>    double x;

    ...
    return ScalarReal(x);</code></pre>
</div>
<p>and there are versions of this for all the atomic vector types (those for a length-one character vector being <code class="calibre2">ScalarString</code> with argument a <code class="calibre2">CHARSXP</code> and <code class="calibre2">mkString</code> with argument <code class="calibre2">const char *</code>).</p>
<p>Some of the <code class="calibre2">isXXXX</code> functions differ from their apparent R-level counterparts: for example <code class="calibre2">isVector</code> is true for any atomic vector type (<code class="calibre2">isVectorAtomic</code>) and for lists and expressions (<code class="calibre2">isVectorList</code>) (with no check on attributes). <code class="calibre2">isMatrix</code> is a test of a length-2 <code class="calibre2">&quot;dim&quot;</code> attribute.</p>
<p>There are a series of small macros/functions to help construct pairlists and language objects (whose internal structures just differ by <code class="calibre2">SEXPTYPE</code>). Function <code class="calibre2">CONS(u, v)</code> is the basic building block: it constructs a pairlist from <code class="calibre2">u</code> followed by <code class="calibre2">v</code> (which is a pairlist or <code class="calibre2">R_NilValue</code>). <code class="calibre2">LCONS</code> is a variant that constructs a language object. Functions <code class="calibre2">list1</code> to <code class="calibre2">list6</code> construct a pairlist from one to six items, and <code class="calibre2">lang1</code> to <code class="calibre2">lang6</code> do the same for a language object (a function to call plus zero to five arguments). Functions <code class="calibre2">elt</code> and <code class="calibre2">lastElt</code> find the ith element and the last element of a pairlist, and <code class="calibre2">nthcdr</code> returns a pointer to the nth position in the pairlist (whose <code class="calibre2">CAR</code> is the nth item).</p>
<p>Functions <code class="calibre2">str2type</code> and <code class="calibre2">type2str</code> map R length-one character strings to and from <code class="calibre2">SEXPTYPE</code> numbers, and <code class="calibre2">type2char</code> maps numbers to C character strings.</p>
<hr />
<p><a href="" id="Semi_002dinternal-convenience-functions"></a> <a href="" id="Semi_002dinternal-convenience-functions-1"></a></p>
<h4 id="semi-internal-convenience-functions" class="subsection">5.9.9.1 Semi-internal convenience functions</h4>
<p>There is quite a collection of functions that may be used in your C code <em>if</em> you are willing to adapt to rare “API” changes. These typically contain “workhorses” of their R counterparts.</p>
<p>Functions <code class="calibre2">any_duplicated</code> and <code class="calibre2">any_duplicated3</code> are fast versions of R’s <code class="calibre2">any(duplicated(.))</code>.</p>
<p>Function <code class="calibre2">R_compute_identical</code> corresponds to R’s <code class="calibre2">identical</code> function.</p>
<hr />
<p><a href="" id="Named-objects-and-copying"></a> <a href="" id="Named-objects-and-copying-1"></a></p>
<h4 id="named-objects-and-copying" class="subsection">5.9.10 Named objects and copying</h4>
<p><a href="" id="index-duplicate"></a> <a href="" id="index-Copying-objects"></a></p>
<p>When assignments are done in R such as</p>
<div class="example">
<pre class="example1"><code>x &lt;- 1:10
y &lt;- x</code></pre>
</div>
<p>the named object is not necessarily copied, so after those two assignments <code class="calibre2">y</code> and <code class="calibre2">x</code> are bound to the same <code class="calibre2">SEXPREC</code> (the structure a <code class="calibre2">SEXP</code> points to). This means that any code which alters one of them has to make a copy before modifying the copy if the usual R semantics are to apply. Note that whereas <code class="calibre2">.C</code> and <code class="calibre2">.Fortran</code> do copy their arguments (unless the dangerous <code class="calibre2">dup = FALSE</code> is used), <code class="calibre2">.Call</code> and <code class="calibre2">.External</code> do not. So <code class="calibre2">duplicate</code> is commonly called on arguments to <code class="calibre2">.Call</code> before modifying them.</p>
<p>However, at least some of this copying is unneeded. In the first assignment shown, <code class="calibre2">x &lt;- 1:10</code>, R first creates an object with value <code class="calibre2">1:10</code> and then assigns it to <code class="calibre2">x</code> but if <code class="calibre2">x</code> is modified no copy is necessary as the temporary object with value <code class="calibre2">1:10</code> cannot be referred to again. R distinguishes between named and unnamed objects <em>via</em> a field in a <code class="calibre2">SEXPREC</code> that can be accessed <em>via</em> the macros <code class="calibre2">NAMED</code> and <code class="calibre2">SET_NAMED</code>. This can take values</p>
<dl>
<dt><code class="calibre2">0</code></dt>
<dd><p>The object is not bound to any symbol</p>
</dd>
<dt><code class="calibre2">1</code></dt>
<dd><p>The object has been bound to exactly one symbol</p>
</dd>
<dt><code class="calibre2">2</code></dt>
<dd><p>The object has potentially been bound to two or more symbols, and one should act as if another variable is currently bound to this value.</p>
</dd>
</dl>
<p>Note the past tenses: R does not do full reference counting and there may currently be fewer bindings.</p>
<p>It is safe to modify the value of any <code class="calibre2">SEXP</code> for which <code class="calibre2">NAMED(foo)</code> is zero, and if <code class="calibre2">NAMED(foo)</code> is two, the value should be duplicated (<em>via</em> a call to <code class="calibre2">duplicate</code>) before any modification. Note that it is the responsibility of the author of the code making the modification to do the duplication, even if it is <code class="calibre2">x</code> whose value is being modified after <code class="calibre2">y &lt;- x</code>.</p>
<p>The case <code class="calibre2">NAMED(foo) == 1</code> allows some optimization, but it can be ignored (and duplication done whenever <code class="calibre2">NAMED(foo) &gt; 0</code>). (This optimization is not currently usable in user code.) It is intended for use within replacement functions. Suppose we used</p>
<div class="example">
<pre class="example1"><code>x &lt;- 1:10
foo(x) &lt;- 3</code></pre>
</div>
<p>which is computed as</p>
<div class="example">
<pre class="example1"><code>x &lt;- 1:10
x &lt;- &quot;foo&lt;-&quot;(x, 3)</code></pre>
</div>
<p>Then inside <code class="calibre2">&quot;foo&lt;-&quot;</code> the object pointing to the current value of <code class="calibre2">x</code> will have <code class="calibre2">NAMED(foo)</code> as one, and it would be safe to modify it as the only symbol bound to it is <code class="calibre2">x</code> and that will be rebound immediately. (Provided the remaining code in <code class="calibre2">&quot;foo&lt;-&quot;</code> make no reference to <code class="calibre2">x</code>, and no one is going to attempt a direct call such as <code class="calibre2">y &lt;- &quot;foo&lt;-&quot;(x)</code>.)</p>
<p>This mechanism is likely to be replaced in future versions of R.</p>
<hr />
<p><a href="" id="Interface-functions-_002eCall-and-_002eExternal"></a> <a href="" id="Interface-functions-_002eCall-and-_002eExternal-1"></a></p>
<h3 id="interface-functions-.call-and-.external" class="section">5.10 Interface functions <code class="calibre18">.Call</code> and <code class="calibre18">.External</code></h3>
<p><a href="" id="index-Interfaces-to-compiled-code-1"></a></p>
<p>In this section we consider the details of the R/C interfaces.</p>
<p>These two interfaces have almost the same functionality. <code class="calibre2">.Call</code> is based on the interface of the same name in S version 4, and <code class="calibre2">.External</code> is based on R’s <code class="calibre2">.Internal</code>. <code class="calibre2">.External</code> is more complex but allows a variable number of arguments.</p>
<hr />
<p><a href="" id="Calling-_002eCall"></a> <a href="" id="Calling-_002eCall-1"></a></p>
<h4 id="calling-.call" class="subsection">5.10.1 Calling <code class="calibre2">.Call</code></h4>
<p><a href="" id="index-_002eCall-1"></a></p>
<p>Let us convert our finite convolution example to use <code class="calibre2">.Call</code>. The calling function in R is</p>
<div class="example">
<pre class="example1"><code>conv &lt;- function(a, b) .Call(&quot;convolve2&quot;, a, b)</code></pre>
</div>
<p>which could hardly be simpler, but as we shall see all the type coercion is transferred to the C code, which is</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

SEXP convolve2(SEXP a, SEXP b)
{
    int na, nb, nab;
    double *xa, *xb, *xab;
    SEXP ab;

    a = PROTECT(coerceVector(a, REALSXP));
    b = PROTECT(coerceVector(b, REALSXP));
    na = length(a); nb = length(b); nab = na + nb - 1;
    ab = PROTECT(allocVector(REALSXP, nab));
    xa = REAL(a); xb = REAL(b); xab = REAL(ab);
    for(int i = 0; i &lt; nab; i++) xab[i] = 0.0;
    for(int i = 0; i &lt; na; i++)
        for(int j = 0; j &lt; nb; j++) xab[i + j] += xa[i] * xb[j];
    UNPROTECT(3);
    return ab;
}</code></pre>
</div>
<hr />
<p><a href="" id="Calling-_002eExternal"></a> <a href="" id="Calling-_002eExternal-1"></a></p>
<h4 id="calling-.external" class="subsection">5.10.2 Calling <code class="calibre2">.External</code></h4>
<p><a href="" id="index-_002eExternal-1"></a></p>
<p>We can use the same example to illustrate <code class="calibre2">.External</code>. The R code changes only by replacing <code class="calibre2">.Call</code> by <code class="calibre2">.External</code></p>
<div class="example">
<pre class="example1"><code>conv &lt;- function(a, b) .External(&quot;convolveE&quot;, a, b)</code></pre>
</div>
<p>but the main change is how the arguments are passed to the C code, this time as a single SEXP. The only change to the C code is how we handle the arguments.</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

SEXP convolveE(SEXP args)
{
    int i, j, na, nb, nab;
    double *xa, *xb, *xab;
    SEXP a, b, ab;

    a = PROTECT(coerceVector(CADR(args), REALSXP));
    b = PROTECT(coerceVector(CADDR(args), REALSXP));
    ...
}</code></pre>
</div>
<p>Once again we do not need to protect the arguments, as in the R side of the interface they are objects that are already in use. The macros</p>
<div class="example">
<pre class="example1"><code>  first = CADR(args);
  second = CADDR(args);
  third = CADDDR(args);
  fourth = CAD4R(args);</code></pre>
</div>
<p>provide convenient ways to access the first four arguments. More generally we can use the <a href="" id="index-CAR"></a> <a href="" id="index-CDR"></a> <code class="calibre2">CDR</code> and <code class="calibre2">CAR</code> macros as in</p>
<div class="example">
<pre class="example1"><code>  args = CDR(args); a = CAR(args);
  args = CDR(args); b = CAR(args);</code></pre>
</div>
<p>which clearly allows us to extract an unlimited number of arguments (whereas <code class="calibre2">.Call</code> has a limit, albeit at 65 not a small one).</p>
<p>More usefully, the <code class="calibre2">.External</code> interface provides an easy way to handle calls with a variable number of arguments, as <code class="calibre2">length(args)</code> will give the number of arguments supplied (of which the first is ignored). We may need to know the names (‘tags’) given to the actual arguments, which we can by using the <code class="calibre2">TAG</code> macro and using something like the following example, that prints the names and the first value of its arguments if they are vector types.</p>
<div class="example">
<pre class="example1"><code>SEXP showArgs(SEXP args)
{
    args = CDR(args); /* skip ‘name’ */
    for(int i = 0; args != R_NilValue; i++, args = CDR(args)) {
        const char *name =
            isNull(TAG(args)) ? &quot;&quot; : CHAR(PRINTNAME(TAG(args)));
        SEXP el = CAR(args);
        if (length(el) == 0) {
            Rprintf(&quot;[%d] ‘%s’ R type, length 0\n&quot;, i+1, name);
           continue;
        }</code></pre>
<pre class="example1"><code>        switch(TYPEOF(el)) {
        case REALSXP:
            Rprintf(&quot;[%d] ‘%s’ %f\n&quot;, i+1, name, REAL(el)[0]);
            break;</code></pre>
<pre class="example1"><code>        case LGLSXP:
        case INTSXP:
            Rprintf(&quot;[%d] ‘%s’ %d\n&quot;, i+1, name, INTEGER(el)[0]);
            break;</code></pre>
<pre class="example1"><code>        case CPLXSXP:
        {
            Rcomplex cpl = COMPLEX(el)[0];
            Rprintf(&quot;[%d] ‘%s’ %f + %fi\n&quot;, i+1, name, cpl.r, cpl.i);
        }
            break;</code></pre>
<pre class="example1"><code>        case STRSXP:
            Rprintf(&quot;[%d] ‘%s’ %s\n&quot;, i+1, name,
                   CHAR(STRING_ELT(el, 0)));
           break;</code></pre>
<pre class="example1"><code>        default:
            Rprintf(&quot;[%d] ‘%s’ R type\n&quot;, i+1, name);
       }
    }
    return R_NilValue;
}</code></pre>
</div>
<p>This can be called by the wrapper function</p>
<div class="example">
<pre class="example1"><code>showArgs &lt;- function(...) invisible(.External(&quot;showArgs&quot;, ...))</code></pre>
</div>
<p>Note that this style of programming is convenient but not necessary, as an alternative style is</p>
<div class="example">
<pre class="example1"><code>showArgs1 &lt;- function(...) invisible(.Call(&quot;showArgs1&quot;, list(...)))</code></pre>
</div>
<p>The (very similar) C code is in the scripts.</p>
<hr />
<p><a href="" id="Missing-and-special-values"></a> <a href="" id="Missing-and-special-values-1"></a></p>
<h4 id="missing-and-special-values" class="subsection">5.10.3 Missing and special values</h4>
<p><a href="" id="index-Missing-values"></a> <a href="" id="index-IEEE-special-values"></a></p>
<p>One piece of error-checking the <code class="calibre2">.C</code> call does (unless <code class="calibre2">NAOK</code> is true) is to check for missing (<code class="calibre2">NA</code>) and IEEE special values (<code class="calibre2">Inf</code>, <code class="calibre2">-Inf</code> and <code class="calibre2">NaN</code>) and give an error if any are found. With the <code class="calibre2">.Call</code> interface these will be passed to our code. In this example the special values are no problem, as IEC60559 arithmetic will handle them correctly. In the current implementation this is also true of <code class="calibre2">NA</code> as it is a type of <code class="calibre2">NaN</code>, but it is unwise to rely on such details. Thus we will re-write the code to handle <code class="calibre2">NA</code>s using macros defined in R_ext/Arith.h included by R.h.</p>
<p>The code changes are the same in any of the versions of <code class="calibre2">convolve2</code> or <code class="calibre2">convolveE</code>:</p>
<div class="example">
<pre class="example1"><code>    ...
  for(int i = 0; i &lt; na; i++)
    for(int j = 0; j &lt; nb; j++)
        if(ISNA(xa[i]) || ISNA(xb[j]) || ISNA(xab[i + j]))
            xab[i + j] = NA_REAL;
        else
            xab[i + j] += xa[i] * xb[j];
    ...</code></pre>
</div>
<p><a href="" id="index-ISNA"></a> <a href="" id="index-ISNAN"></a></p>
<p>Note that the <code class="calibre2">ISNA</code> macro, and the similar macros <code class="calibre2">ISNAN</code> (which checks for <code class="calibre2">NaN</code> or <code class="calibre2">NA</code>) and <code class="calibre2">R_FINITE</code> (which is false for <code class="calibre2">NA</code> and all the special values), only apply to numeric values of type <code class="calibre2">double</code>. Missingness of integers, logicals and character strings can be tested by equality to the constants <code class="calibre2">NA_INTEGER</code>, <code class="calibre2">NA_LOGICAL</code> and <code class="calibre2">NA_STRING</code>. These and <code class="calibre2">NA_REAL</code> can be used to set elements of R vectors to <code class="calibre2">NA</code>.</p>
<p>The constants <code class="calibre2">R_NaN</code>, <code class="calibre2">R_PosInf</code> and <code class="calibre2">R_NegInf</code> can be used to set <code class="calibre2">double</code>s to the special values.</p>
<hr />
<p><a href="" id="Evaluating-R-expressions-from-C"></a> <a href="" id="Evaluating-R-expressions-from-C-1"></a></p>
<h3 id="evaluating-r-expressions-from-c" class="section">5.11 Evaluating R expressions from C</h3>
<p><a href="" id="index-Evaluating-R-expressions-from-C"></a></p>
<p>The main function we will use is</p>
<div class="example">
<pre class="example1"><code>SEXP eval(SEXP expr, SEXP rho);</code></pre>
</div>
<p>the equivalent of the interpreted R code <code class="calibre2">eval(expr, envir = rho)</code> (so <code class="calibre2">rho</code> must be an environment), although we can also make use of <code class="calibre2">findVar</code>, <code class="calibre2">defineVar</code> and <code class="calibre2">findFun</code> (which restricts the search to functions).</p>
<p>To see how this might be applied, here is a simplified internal version of <code class="calibre2">lapply</code> for expressions, used as</p>
<div class="example">
<pre class="example1"><code>a &lt;- list(a = 1:5, b = rnorm(10), test = runif(100))
.Call(&quot;lapply&quot;, a, quote(sum(x)), new.env())</code></pre>
</div>
<p>with C code</p>
<div class="example">
<pre class="example1"><code>SEXP lapply(SEXP list, SEXP expr, SEXP rho)
{
    int n = length(list);
    SEXP ans;

    if(!isNewList(list)) error(&quot;&#39;list&#39; must be a list&quot;);
    if(!isEnvironment(rho)) error(&quot;&#39;rho&#39; should be an environment&quot;);
    ans = PROTECT(allocVector(VECSXP, n));
    for(int i = 0; i &lt; n; i++) {
        defineVar(install(&quot;x&quot;), VECTOR_ELT(list, i), rho);
        SET_VECTOR_ELT(ans, i, eval(expr, rho));
    }
    setAttrib(ans, R_NamesSymbol, getAttrib(list, R_NamesSymbol));
    UNPROTECT(1);
    return ans;
}</code></pre>
</div>
<p>It would be closer to <code class="calibre2">lapply</code> if we could pass in a function rather than an expression. One way to do this is <em>via</em> interpreted R code as in the next example, but it is possible (if somewhat obscure) to do this in C code. The following is based on the code in src/main/optimize.c.</p>
<div class="example">
<pre class="example1"><code>SEXP lapply2(SEXP list, SEXP fn, SEXP rho)
{
    int n = length(list);
    SEXP R_fcall, ans;

    if(!isNewList(list)) error(&quot;&#39;list&#39; must be a list&quot;);
    if(!isFunction(fn)) error(&quot;&#39;fn&#39; must be a function&quot;);
    if(!isEnvironment(rho)) error(&quot;&#39;rho&#39; should be an environment&quot;);
    R_fcall = PROTECT(lang2(fn, R_NilValue));
    ans = PROTECT(allocVector(VECSXP, n));
    for(int i = 0; i &lt; n; i++) {
        SETCADR(R_fcall, VECTOR_ELT(list, i));
        SET_VECTOR_ELT(ans, i, eval(R_fcall, rho));
    }
    setAttrib(ans, R_NamesSymbol, getAttrib(list, R_NamesSymbol));
    UNPROTECT(2);
    return ans;
}</code></pre>
</div>
<p>used by</p>
<div class="example">
<pre class="example1"><code>.Call(&quot;lapply2&quot;, a, sum, new.env())</code></pre>
</div>
<p>Function <code class="calibre2">lang2</code> creates an executable pairlist of two elements, but this will only be clear to those with a knowledge of a LISP-like language.</p>
<p>As a more comprehensive example of constructing an R call in C code and evaluating, consider the following fragment of <code class="calibre2">printAttributes</code> in src/main/print.c.</p>
<div class="example">
<pre class="example1"><code>    /* Need to construct a call to
       print(CAR(a), digits=digits)
       based on the R_print structure, then eval(call, env).
       See do_docall for the template for this sort of thing.
    */
    SEXP s, t;
    t = s = PROTECT(allocList(3));
    SET_TYPEOF(s, LANGSXP);
    SETCAR(t, install(&quot;print&quot;)); t = CDR(t);
    SETCAR(t,  CAR(a)); t = CDR(t);
    SETCAR(t, ScalarInteger(digits));
    SET_TAG(t, install(&quot;digits&quot;));
    eval(s, env);
    UNPROTECT(1);</code></pre>
</div>
<p>At this point <code class="calibre2">CAR(a)</code> is the R object to be printed, the current attribute. There are three steps: the call is constructed as a pairlist of length 3, the list is filled in, and the expression represented by the pairlist is evaluated.</p>
<p>A pairlist is quite distinct from a generic vector list, the only user-visible form of list in R. A pairlist is a linked list (with <code class="calibre2">CDR(t)</code> computing the next entry), with items (accessed by <code class="calibre2">CAR(t)</code>) and names or tags (set by <code class="calibre2">SET_TAG</code>). In this call there are to be three items, a symbol (pointing to the function to be called) and two argument values, the first unnamed and the second named. Setting the type to <code class="calibre2">LANGSXP</code> makes this a call which can be evaluated.</p>
<hr />
<p><a href="" id="Zero_002dfinding"></a> <a href="" id="Zero_002dfinding-1"></a></p>
<h4 id="zero-finding" class="subsection">5.11.1 Zero-finding</h4>
<p><a href="" id="index-Zero_002dfinding"></a></p>
<p>In this section we re-work the example of Becker, Chambers &amp; Wilks (1988, pp.~205–10) on finding a zero of a univariate function. The R code and an example are</p>
<div class="example">
<pre class="example1"><code>zero &lt;- function(f, guesses, tol = 1e-7) {
    f.check &lt;- function(x) {
        x &lt;- f(x)
        if(!is.numeric(x)) stop(&quot;Need a numeric result&quot;)
        as.double(x)
    }
    .Call(&quot;zero&quot;, body(f.check), as.double(guesses), as.double(tol),
          new.env())
}

cube1 &lt;- function(x) (x^2 + 1) * (x - 1.5)
zero(cube1, c(0, 5))</code></pre>
</div>
<p>where this time we do the coercion and error-checking in the R code. The C code is</p>
<div class="example">
<pre class="example1"><code>SEXP mkans(double x)
{
    // no need for PROTECT() here, as REAL(.) does not allocate:
    SEXP ans = allocVector(REALSXP, 1);
    REAL(ans)[0] = x;
    return ans;
}</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>double feval(double x, SEXP f, SEXP rho)
{
    // a version with (too) much PROTECT()ion .. &quot;better safe than sorry&quot;
    SEXP symbol, value;
    PROTECT(symbol = install(&quot;x&quot;));
    PROTECT(value = mkans(x));
    defineVar(symbol, value, rho);
    UNPROTECT(2);
    return(REAL(eval(f, rho))[0]);
}</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>SEXP zero(SEXP f, SEXP guesses, SEXP stol, SEXP rho)
{
    double x0 = REAL(guesses)[0], x1 = REAL(guesses)[1],
           tol = REAL(stol)[0];
    double f0, f1, fc, xc;</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>    if(tol &lt;= 0.0) error(&quot;non-positive tol value&quot;);
    f0 = feval(x0, f, rho); f1 = feval(x1, f, rho);
    if(f0 == 0.0) return mkans(x0);
    if(f1 == 0.0) return mkans(x1);
    if(f0*f1 &gt; 0.0) error(&quot;x[0] and x[1] have the same sign&quot;);</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>    for(;;) {
        xc = 0.5*(x0+x1);
        if(fabs(x0-x1) &lt; tol) return  mkans(xc);
        fc = feval(xc, f, rho);
        if(fc == 0) return  mkans(xc);
        if(f0*fc &gt; 0.0) {
            x0 = xc; f0 = fc;
        } else {
            x1 = xc; f1 = fc;
        }
    }
}</code></pre>
</div>
<hr />
<p><a href="" id="Calculating-numerical-derivatives"></a> <a href="" id="Calculating-numerical-derivatives-1"></a></p>
<h4 id="calculating-numerical-derivatives" class="subsection">5.11.2 Calculating numerical derivatives</h4>
<p><a href="" id="index-Numerical-derivatives"></a></p>
<p>We will use a longer example (by Saikat DebRoy) to illustrate the use of evaluation and <code class="calibre2">.External</code>. This calculates numerical derivatives, something that could be done as effectively in interpreted R code but may be needed as part of a larger C calculation.</p>
<p>An interpreted R version and an example are</p>
<div class="example">
<pre class="example1"><code>numeric.deriv &lt;- function(expr, theta, rho=sys.frame(sys.parent()))
{
    eps &lt;- sqrt(.Machine$double.eps)
    ans &lt;- eval(substitute(expr), rho)
    grad &lt;- matrix(, length(ans), length(theta),
                   dimnames=list(NULL, theta))
    for (i in seq_along(theta)) {
        old &lt;- get(theta[i], envir=rho)
        delta &lt;- eps * max(1, abs(old))
        assign(theta[i], old+delta, envir=rho)
        ans1 &lt;- eval(substitute(expr), rho)
        assign(theta[i], old, envir=rho)
        grad[, i] &lt;- (ans1 - ans)/delta
    }
    attr(ans, &quot;gradient&quot;) &lt;- grad
    ans
}
omega &lt;- 1:5; x &lt;- 1; y &lt;- 2
numeric.deriv(sin(omega*x*y), c(&quot;x&quot;, &quot;y&quot;))</code></pre>
</div>
<p>where <code class="calibre2">expr</code> is an expression, <code class="calibre2">theta</code> a character vector of variable names and <code class="calibre2">rho</code> the environment to be used.</p>
<p>For the compiled version the call from R will be</p>
<div class="example">
<pre class="example1"><code>.External(&quot;numeric_deriv&quot;, expr, theta, rho)</code></pre>
</div>
<p>with example usage</p>
<div class="example">
<pre class="example1"><code>.External(&quot;numeric_deriv&quot;, quote(sin(omega*x*y)),
          c(&quot;x&quot;, &quot;y&quot;), .GlobalEnv)</code></pre>
</div>
<p>Note the need to quote the expression to stop it being evaluated in the caller.</p>
<p>Here is the complete C code which we will explain section by section.</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt; /* for DOUBLE_EPS */
#include &lt;Rinternals.h&gt;

SEXP numeric_deriv(SEXP args)
{
    SEXP theta, expr, rho, ans, ans1, gradient, par, dimnames;
    double tt, xx, delta, eps = sqrt(DOUBLE_EPS), *rgr, *rans;
    int i, start;</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>    expr = CADR(args);
    if(!isString(theta = CADDR(args)))
        error(&quot;theta should be of type character&quot;);
    if(!isEnvironment(rho = CADDDR(args)))
        error(&quot;rho should be an environment&quot;);</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>    ans = PROTECT(coerceVector(eval(expr, rho), REALSXP));
    gradient = PROTECT(allocMatrix(REALSXP, LENGTH(ans), LENGTH(theta)));
    rgr = REAL(gradient); rans = REAL(ans);</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>    for(i = 0, start = 0; i &lt; LENGTH(theta); i++, start += LENGTH(ans)) {
        par = PROTECT(findVar(installChar(STRING_ELT(theta, i)), rho));
        tt = REAL(par)[0];
        xx = fabs(tt);
        delta = (xx &lt; 1) ? eps : xx*eps;
        REAL(par)[0] += delta;
        ans1 = PROTECT(coerceVector(eval(expr, rho), REALSXP));
        for(int j = 0; j &lt; LENGTH(ans); j++)
            rgr[j + start] = (REAL(ans1)[j] - rans[j])/delta;
        REAL(par)[0] = tt;
        UNPROTECT(2); /* par, ans1 */
    }</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>    dimnames = PROTECT(allocVector(VECSXP, 2));
    SET_VECTOR_ELT(dimnames, 1,  theta);
    dimnamesgets(gradient, dimnames);
    setAttrib(ans, install(&quot;gradient&quot;), gradient);
    UNPROTECT(3); /* ans  gradient  dimnames */
    return ans;
}</code></pre>
</div>
<p>The code to handle the arguments is</p>
<div class="example">
<pre class="example1"><code>    expr = CADR(args);
    if(!isString(theta = CADDR(args)))
        error(&quot;theta should be of type character&quot;);
    if(!isEnvironment(rho = CADDDR(args)))
        error(&quot;rho should be an environment&quot;);</code></pre>
</div>
<p>Note that we check for correct types of <code class="calibre2">theta</code> and <code class="calibre2">rho</code> but do not check the type of <code class="calibre2">expr</code>. That is because <code class="calibre2">eval</code> can handle many types of R objects other than <code class="calibre2">EXPRSXP</code>. There is no useful coercion we can do, so we stop with an error message if the arguments are not of the correct mode.</p>
<p>The first step in the code is to evaluate the expression in the environment <code class="calibre2">rho</code>, by</p>
<div class="example">
<pre class="example1"><code>    ans = PROTECT(coerceVector(eval(expr, rho), REALSXP));</code></pre>
</div>
<p>We then allocate space for the calculated derivative by</p>
<div class="example">
<pre class="example1"><code>    gradient = PROTECT(allocMatrix(REALSXP, LENGTH(ans), LENGTH(theta)));</code></pre>
</div>
<p>The first argument to <code class="calibre2">allocMatrix</code> gives the <code class="calibre2">SEXPTYPE</code> of the matrix: here we want it to be <code class="calibre2">REALSXP</code>. The other two arguments are the numbers of rows and columns. (Note that <code class="calibre2">LENGTH</code> is intended to be used for vectors: <code class="calibre2">length</code> is more generally applicable.)</p>
<div class="example">
<pre class="example1"><code>    for(i = 0, start = 0; i &lt; LENGTH(theta); i++, start += LENGTH(ans)) {
        par = PROTECT(findVar(installChar(STRING_ELT(theta, i)), rho));</code></pre>
</div>
<p>Here, we are entering a for loop. We loop through each of the variables. In the <code class="calibre2">for</code> loop, we first create a symbol corresponding to the <code class="calibre2">i</code>’th element of the <code class="calibre2">STRSXP</code> <code class="calibre2">theta</code>. Here, <code class="calibre2">STRING_ELT(theta, i)</code> accesses the <code class="calibre2">i</code>’th element of the <code class="calibre2">STRSXP</code> <code class="calibre2">theta</code>. Macro <code class="calibre2">CHAR()</code> extracts the actual character representation<a href="R-exts_split_014.html#FOOT135" id="DOCF135"><sup>135</sup></a> of it: it returns a pointer. We then install the name and use <code class="calibre2">findVar</code> to find its value.</p>
<div class="example">
<pre class="example1"><code>        tt = REAL(par)[0];
        xx = fabs(tt);
        delta = (xx &lt; 1) ? eps : xx*eps;
        REAL(par)[0] += delta;
        ans1 = PROTECT(coerceVector(eval(expr, rho), REALSXP));</code></pre>
</div>
<p>We first extract the real value of the parameter, then calculate <code class="calibre2">delta</code>, the increment to be used for approximating the numerical derivative. Then we change the value stored in <code class="calibre2">par</code> (in environment <code class="calibre2">rho</code>) by <code class="calibre2">delta</code> and evaluate <code class="calibre2">expr</code> in environment <code class="calibre2">rho</code> again. Because we are directly dealing with original R memory locations here, R does the evaluation for the changed parameter value.</p>
<div class="example">
<pre class="example1"><code>        for(int j = 0; j &lt; LENGTH(ans); j++)
            rgr[j + start] = (REAL(ans1)[j] - rans[j])/delta;
        REAL(par)[0] = tt;
        UNPROTECT(2);
    }</code></pre>
</div>
<p>Now, we compute the <code class="calibre2">i</code>’th column of the gradient matrix. Note how it is accessed: R stores matrices by column (like FORTRAN).</p>
<div class="example">
<pre class="example1"><code>    dimnames = PROTECT(allocVector(VECSXP, 2));
    SET_VECTOR_ELT(dimnames, 1, theta);
    dimnamesgets(gradient, dimnames);
    setAttrib(ans, install(&quot;gradient&quot;), gradient);
    UNPROTECT(3);
    return ans;
}</code></pre>
</div>
<p>First we add column names to the gradient matrix. This is done by allocating a list (a <code class="calibre2">VECSXP</code>) whose first element, the row names, is <code class="calibre2">NULL</code> (the default) and the second element, the column names, is set as <code class="calibre2">theta</code>. This list is then assigned as the attribute having the symbol <code class="calibre2">R_DimNamesSymbol</code>. Finally we set the gradient matrix as the gradient attribute of <code class="calibre2">ans</code>, unprotect the remaining protected locations and return the answer <code class="calibre2">ans</code>.</p>
<hr />
<p><a href="" id="Parsing-R-code-from-C"></a> <a href="" id="Parsing-R-code-from-C-1"></a></p>
<h3 id="parsing-r-code-from-c" class="section">5.12 Parsing R code from C</h3>
<p><a href="" id="index-Parsing-R-code-from-C"></a></p>
<p>Suppose an R extension want to accept an R expression from the user and evaluate it. The previous section covered evaluation, but the expression will be entered as text and needs to be parsed first. A small part of R’s parse interface is declared in header file R_ext/Parse.h<a href="R-exts_split_014.html#FOOT136" id="DOCF136"><sup>136</sup></a>.</p>
<p>An example of the usage can be found in the (example) Windows package <strong>windlgs</strong> included in the R source tree. The essential part is</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;
#include &lt;R_ext/Parse.h&gt;

SEXP menu_ttest3()
{
    char cmd[256];
    SEXP cmdSexp, cmdexpr, ans = R_NilValue;
    ParseStatus status;
   ...
    if(done == 1) {
        cmdSexp = PROTECT(allocVector(STRSXP, 1));
        SET_STRING_ELT(cmdSexp, 0, mkChar(cmd));
        cmdexpr = PROTECT(R_ParseVector(cmdSexp, -1, &amp;status, R_NilValue));
        if (status != PARSE_OK) {
            UNPROTECT(2);
            error(&quot;invalid call %s&quot;, cmd);
        }
        /* Loop is needed here as EXPSEXP will be of length &gt; 1 */
        for(int i = 0; i &lt; length(cmdexpr); i++)
            ans = eval(VECTOR_ELT(cmdexpr, i), R_GlobalEnv);
        UNPROTECT(2);
    }
    return ans;
}</code></pre>
</div>
<p>Note that a single line of text may give rise to more than one R expression.</p>
<p><a href="" id="index-R_005fParseVector"></a></p>
<p><code class="calibre2">R_ParseVector</code> is essentially the code used to implement <code class="calibre2">parse(text=)</code> at R level. The first argument is a character vector (corresponding to <code class="calibre2">text</code>) and the second the maximal number of expressions to parse (corresponding to <code class="calibre2">n</code>). The third argument is a pointer to a variable of an enumeration type, and it is normal (as <code class="calibre2">parse</code> does) to regard all values other than <code class="calibre2">PARSE_OK</code> as an error. Other values which might be returned are <code class="calibre2">PARSE_INCOMPLETE</code> (an incomplete expression was found) and <code class="calibre2">PARSE_ERROR</code> (a syntax error), in both cases the value returned being <code class="calibre2">R_NilValue</code>. The fourth argument is a length one character vector to be used as a filename in error messages, a <code class="calibre2">srcfile</code> object or the R <code class="calibre2">NULL</code> object (as in the example above). If a <code class="calibre2">srcfile</code> object was used, a <code class="calibre2">srcref</code> attribute would be attached to the result, containing a list of <code class="calibre2">srcref</code> objects of the same length as the expression, to allow it to be echoed with its original formatting.</p>
<hr />
<p><a href="" id="Accessing-source-references"></a> <a href="" id="Accessing-source-references-1"></a></p>
<h4 id="accessing-source-references" class="subsection">5.12.1 Accessing source references</h4>
<p>The source references added by the parser are recorded by R’s evaluator as it evaluates code. Two functions make these available to debuggers running C code: <a href="" id="index-R_005fSrcref"></a> <a href="" id="index-R_005fGetCurrentSrcref"></a> <a href="" id="index-R_005fGetSrcFilename"></a></p>
<div class="example">
<pre class="example1"><code>SEXP R_GetCurrentSrcref(int skip);</code></pre>
</div>
<p>This function checks <code class="calibre2">R_Srcref</code> and the current evaluation stack for entries that contain source reference information. The <code class="calibre2">skip</code> argument tells how many source references to skip before returning the <code class="calibre2">SEXP</code> of the <code class="calibre2">srcref</code> object, counting from the top of the stack. If <code class="calibre2">skip &lt; 0</code>, <code class="calibre2">abs(skip)</code> locations are counted up from the bottom of the stack. If too few or no source references are found, <code class="calibre2">NULL</code> is returned.</p>
<div class="example">
<pre class="example1"><code>SEXP R_GetSrcFilename(SEXP srcref);</code></pre>
</div>
<p>This function extracts the filename from the source reference for display, returning a length 1 character vector containing the filename. If no name is found, <code class="calibre2">&quot;&quot;</code> is returned.</p>
<hr />
<p><a href="" id="External-pointers-and-weak-references"></a> <a href="" id="External-pointers-and-weak-references-1"></a></p>
<h3 id="external-pointers-and-weak-references" class="section">5.13 External pointers and weak references</h3>
<p>The <code class="calibre2">SEXPTYPE</code>s <code class="calibre2">EXTPTRSXP</code> and <code class="calibre2">WEAKREFSXP</code> can be encountered at R level, but are created in C code.</p>
<p><a href="" id="index-external-pointer"></a></p>
<p>External pointer <code class="calibre2">SEXP</code>s are intended to handle references to C structures such as ‘handles’, and are used for this purpose in package <a href="https://CRAN.R-project.org/package=RODBC"><strong>RODBC</strong></a> for example. They are unusual in their copying semantics in that when an R object is copied, the external pointer object is not duplicated. (For this reason external pointers should only be used as part of an object with normal semantics, for example an attribute or an element of a list.)</p>
<p>An external pointer is created by</p>
<div class="example">
<pre class="example1"><code>SEXP R_MakeExternalPtr(void *p, SEXP tag, SEXP prot);</code></pre>
</div>
<p>where <code class="calibre2">p</code> is the pointer (and hence this cannot portably be a function pointer), and <code class="calibre2">tag</code> and <code class="calibre2">prot</code> are references to ordinary R objects which will remain in existence (be protected from garbage collection) for the lifetime of the external pointer object. A useful convention is to use the <code class="calibre2">tag</code> field for some form of type identification and the <code class="calibre2">prot</code> field for protecting the memory that the external pointer represents, if that memory is allocated from the R heap. Both <code class="calibre2">tag</code> and <code class="calibre2">prot</code> can be <code class="calibre2">R_NilValue</code>, and often are.</p>
<p>An alternative way as from R 3.4.0 to create an external pointer from a function pointer is</p>
<div class="example">
<pre class="example1"><code>typedef void * (*R_DL_FUNC)();
SEXP R_MakeExternalPtrFn(R_DL_FUNC p, SEXP tag, SEXP prot);</code></pre>
</div>
<p>The elements of an external pointer can be accessed and set <em>via</em></p>
<div class="example">
<pre class="example1"><code>void *R_ExternalPtrAddr(SEXP s);
DL_FUNC R_ExternalPtrAddrFn(SEXP s);
SEXP R_ExternalPtrTag(SEXP s);
SEXP R_ExternalPtrProtected(SEXP s);
void R_ClearExternalPtr(SEXP s);
void R_SetExternalPtrAddr(SEXP s, void *p);
void R_SetExternalPtrTag(SEXP s, SEXP tag);
void R_SetExternalPtrProtected(SEXP s, SEXP p);</code></pre>
</div>
<p>Clearing a pointer sets its value to the C <code class="calibre2">NULL</code> pointer.</p>
<p><a href="" id="index-finalizer"></a></p>
<p>An external pointer object can have a <em>finalizer</em>, a piece of code to be run when the object is garbage collected. This can be R code or C code, and the various interfaces are, respectively.</p>
<div class="example">
<pre class="example1"><code>void R_RegisterFinalizerEx(SEXP s, SEXP fun, Rboolean onexit);

typedef void (*R_CFinalizer_t)(SEXP);
void R_RegisterCFinalizerEx(SEXP s, R_CFinalizer_t fun, Rboolean onexit);</code></pre>
</div>
<p>The R function indicated by <code class="calibre2">fun</code> should be a function of a single argument, the object to be finalized. R does not perform a garbage collection when shutting down, and the <code class="calibre2">onexit</code> argument of the extended forms can be used to ask that the finalizer be run during a normal shutdown of the R session. It is suggested that it is good practice to clear the pointer on finalization.</p>
<p>The only R level function for interacting with external pointers is <code class="calibre2">reg.finalizer</code> which can be used to set a finalizer.</p>
<p>It is probably not a good idea to allow an external pointer to be <code class="calibre2">save</code>d and then reloaded, but if this happens the pointer will be set to the C <code class="calibre2">NULL</code> pointer.</p>
<p>Finalizers can be run at many places in the code base and much of it, including the R interpreter, is not re-entrant. So great care is needed in choosing the code to be run in a finalizer. Finalizers are marked to be run at garbage collection but only run at a somewhat safe point thereafter.</p>
<p><a href="" id="index-weak-reference"></a></p>
<p>Weak references are used to allow the programmer to maintain information on entities without preventing the garbage collection of the entities once they become unreachable.</p>
<p>A weak reference contains a key and a value. The value is reachable is if it either reachable directly or <em>via</em> weak references with reachable keys. Once a value is determined to be unreachable during garbage collection, the key and value are set to <code class="calibre2">R_NilValue</code> and the finalizer will be run later in the garbage collection.</p>
<p>Weak reference objects are created by one of</p>
<div class="example">
<pre class="example1"><code>SEXP R_MakeWeakRef(SEXP key, SEXP val, SEXP fin, Rboolean onexit);
SEXP R_MakeWeakRefC(SEXP key, SEXP val, R_CFinalizer_t fin,
                    Rboolean onexit);</code></pre>
</div>
<p>where the R or C finalizer are specified in exactly the same way as for an external pointer object (whose finalization interface is implemented <em>via</em> weak references).</p>
<p>The parts can be accessed <em>via</em></p>
<div class="example">
<pre class="example1"><code>SEXP R_WeakRefKey(SEXP w);
SEXP R_WeakRefValue(SEXP w);
void R_RunWeakRefFinalizer(SEXP w);</code></pre>
</div>
<p>A toy example of the use of weak references can be found at <a href="http://homepage.stat.uiowa.edu/~luke/R/references/weakfinex.html"><code class="calibre2">homepage.stat.uiowa.edu/~luke/R/references/weakfinex.html</code></a>, but that is used to add finalizers to external pointers which can now be done more directly. At the time of writing no CRAN or Bioconductor package uses weak references.</p>
<hr />
<p><a href="" id="An-external-pointer-example"></a> <a href="" id="An-example-2"></a></p>
<h4 id="an-example" class="subsection">5.13.1 An example</h4>
<p>Package <a href="https://CRAN.R-project.org/package=RODBC"><strong>RODBC</strong></a> uses external pointers to maintain its <em>channels</em>, connections to databases. There can be several connections open at once, and the status information for each is stored in a C structure (pointed to by <code class="calibre2">thisHandle</code> in the code extract below) that is returned <em>via</em> an external pointer as part of the RODBC ‘channel’ (as the <code class="calibre2">&quot;handle_ptr&quot;</code> attribute). The external pointer is created by</p>
<div class="example">
<pre class="example1"><code>    SEXP ans, ptr;
    ans = PROTECT(allocVector(INTSXP, 1));
    ptr = R_MakeExternalPtr(thisHandle, install(&quot;RODBC_channel&quot;), R_NilValue);
    PROTECT(ptr);
    R_RegisterCFinalizerEx(ptr, chanFinalizer, TRUE);
            ...
    /* return the channel no */
    INTEGER(ans)[0] = nChannels;
    /* and the connection string as an attribute */
    setAttrib(ans, install(&quot;connection.string&quot;), constr);
    setAttrib(ans, install(&quot;handle_ptr&quot;), ptr);
    UNPROTECT(3);
    return ans;</code></pre>
</div>
<p>Note the symbol given to identify the usage of the external pointer, and the use of the finalizer. Since the final argument when registering the finalizer is <code class="calibre2">TRUE</code>, the finalizer will be run at the end of the R session (unless it crashes). This is used to close and clean up the connection to the database. The finalizer code is simply</p>
<div class="example">
<pre class="example1"><code>static void chanFinalizer(SEXP ptr)
{
    if(!R_ExternalPtrAddr(ptr)) return;
    inRODBCClose(R_ExternalPtrAddr(ptr));
    R_ClearExternalPtr(ptr); /* not really needed */
}</code></pre>
</div>
<p>Clearing the pointer and checking for a <code class="calibre2">NULL</code> pointer avoids any possibility of attempting to close an already-closed channel.</p>
<p>R’s connections provide another example of using external pointers, in that case purely to be able to use a finalizer to close and destroy the connection if it is no longer is use.</p>
<hr />
<p><a href="" id="Vector-accessor-functions"></a> <a href="" id="Vector-accessor-functions-1"></a></p>
<h3 id="vector-accessor-functions" class="section">5.14 Vector accessor functions</h3>
<p>The vector accessors like <code class="calibre2">REAL</code> and <code class="calibre2">INTEGER</code> and <code class="calibre2">VECTOR_ELT</code> are <em>functions</em> when used in R extensions. (For efficiency they are macros when used in the R source code, apart from <code class="calibre2">SET_STRING_ELT</code> and <code class="calibre2">SET_VECTOR_ELT</code> which are always functions.)</p>
<p>The accessor functions check that they are being used on an appropriate type of <code class="calibre2">SEXP</code>.</p>
<p>If efficiency is essential, the macro versions of the accessors can be obtained by defining ‘USE_RINTERNALS’ before including Rinternals.h. If you find it necessary to do so, please do test that your code compiles without ‘USE_RINTERNALS’ defined, as this provides a stricter test that the accessors have been used correctly. Note too that the use of ‘USE_RINTERNALS’ when the header is included in C++ code is not supported: doing so may use C99 features which are not necessarily supported by the C++ compiler. Nor is use with Rdefines.h supported.</p>
<hr />
<p><a href="" id="Character-encoding-issues"></a> <a href="" id="Character-encoding-issues-1"></a></p>
<h3 id="character-encoding-issues" class="section">5.15 Character encoding issues</h3>
<p><a href="" id="index-translateChar"></a> <a href="" id="index-translateCharUTF8"></a></p>
<p><code class="calibre2">CHARSXP</code>s can be marked as coming from a known encoding (Latin-1 or UTF-8). This is mainly intended for human-readable output, and most packages can just treat such <code class="calibre2">CHARSXP</code>s as a whole. However, if they need to be interpreted as characters or output at C level then it would normally be correct to ensure that they are converted to the encoding of the current locale: this can be done by accessing the data in the <code class="calibre2">CHARSXP</code> by <code class="calibre2">translateChar</code> rather than by <code class="calibre2">CHAR</code>. If re-encoding is needed this allocates memory with <code class="calibre2">R_alloc</code> which thus persists to the end of the <code class="calibre2">.Call</code>/<code class="calibre2">.External</code> call unless <code class="calibre2">vmaxset</code> is used (see <a href="R-exts_split_010.html#Transient-storage-allocation">Transient storage allocation</a>).</p>
<p>There is a similar function <code class="calibre2">translateCharUTF8</code> which converts to UTF-8: this has the advantage that a faithful translation is almost always possible (whereas only a few languages can be represented in the encoding of the current locale unless that is UTF-8).</p>
<p><a href="" id="index-getCharCE"></a> <a href="" id="index-mkCharCE"></a></p>
<p>There is a public interface to the encoding marked on <code class="calibre2">CHARXSXPs</code> <em>via</em></p>
<div class="example">
<pre class="example1"><code>typedef enum {CE_NATIVE, CE_UTF8, CE_LATIN1, CE_SYMBOL, CE_ANY} cetype_t;
cetype_t getCharCE(SEXP);
SEXP mkCharCE(const char *, cetype_t);</code></pre>
</div>
<p>Only <code class="calibre2">CE_UTF8</code> and <code class="calibre2">CE_LATIN1</code> are marked on <code class="calibre2">CHARSXPs</code> (and so <code class="calibre2">Rf_getCharCE</code> will only return one of the first three), and these should only be used on non-ASCII strings. Value <code class="calibre2">CE_SYMBOL</code> is used internally to indicate Adobe Symbol encoding. Value <code class="calibre2">CE_ANY</code> is used to indicate a character string that will not need re-encoding – this is used for character strings known to be in ASCII, and can also be used as an input parameter where the intention is that the string is treated as a series of bytes. (See the comments under <code class="calibre2">mkChar</code> about the length of input allowed.)</p>
<p>Function</p>
<p><a href="" id="index-reEnc"></a></p>
<div class="example">
<pre class="example1"><code>const char *reEnc(const char *x, cetype_t ce_in, cetype_t ce_out,
                  int subst);</code></pre>
</div>
<p>can be used to re-encode character strings: like <code class="calibre2">translateChar</code> it returns a string allocated by <code class="calibre2">R_alloc</code>. This can translate from <code class="calibre2">CE_SYMBOL</code> to <code class="calibre2">CE_UTF8</code>, but not conversely. Argument <code class="calibre2">subst</code> controls what to do with untranslatable characters or invalid input: this is done byte-by-byte with <code class="calibre2">1</code> indicates to output hex of the form <code class="calibre2">&lt;a0&gt;</code>, and <code class="calibre2">2</code> to replace by <code class="calibre2">.</code>, with any other value causing the byte to produce no output.</p>
<p><a href="" id="index-mkCharLenCE"></a></p>
<p>There is also</p>
<div class="example">
<pre class="example1"><code>SEXP mkCharLenCE(const char *, size_t, cetype_t);</code></pre>
</div>
<p>to create marked character strings of a given length.</p>
<hr />
<p><a href="" id="The-R-API"></a> <a href="" id="The-R-API_003a-entry-points-for-C-code"></a></p>
<div id="calibre_pb_14" class="calibre6">

</div>

<!--chapter:end:09-R-exts.Rmd-->

#  The R API: entry points for C code
<p>There are a large number of entry points in the R executable/DLL that can be called from C code (and some that can be called from FORTRAN code). Only those documented here are stable enough that they will only be changed with considerable notice.</p>
<p>The recommended procedure to use these is to include the header file R.h in your C code by</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;</code></pre>
</div>
<p>This will include several other header files from the directory R_INCLUDE_DIR/R_ext, and there are other header files there that can be included too, but many of the features they contain should be regarded as undocumented and unstable.</p>
<p>Most of these header files, including all those included by R.h, can be used from C++ code.</p>
<blockquote>
<p><strong>Note:</strong> Because R re-maps many of its external names to avoid clashes with user code, it is <em>essential</em> to include the appropriate header files when using these entry points.</p>
</blockquote>
<p>This remapping can cause problems<a href="R-exts_split_014.html#FOOT137" id="DOCF137"><sup>137</sup></a>, and can be eliminated by defining <code class="calibre2">R_NO_REMAP</code> and prepending ‘Rf_’ to <em>all</em> the function names used from Rinternals.h and R_ext/Error.h. These problems can usually be avoided by including other headers (such as system headers and those for external software used by the package) before R.h.</p>
<p>We can classify the entry points as</p>
<dl>
<dt><em>API</em></dt>
<dd><p>Entry points which are documented in this manual and declared in an installed header file. These can be used in distributed packages and will only be changed after deprecation.</p>
</dd>
<dt><em>public</em></dt>
<dd><p>Entry points declared in an installed header file that are exported on all R platforms but are not documented and subject to change without notice.</p>
</dd>
<dt><em>private</em></dt>
<dd><p>Entry points that are used when building R and exported on all R platforms but are not declared in the installed header files. Do not use these in distributed code.</p>
</dd>
<dt><em>hidden</em></dt>
<dd><p>Entry points that are where possible (Windows and some modern Unix-alike compilers/loaders when using R as a shared library) not exported.</p>
</dd>
</dl>
<hr />
<p><a href="" id="Memory-allocation"></a> <a href="" id="Memory-allocation-1"></a></p>
<h3 id="memory-allocation" class="section">6.1 Memory allocation</h3>
<p><a href="" id="index-Memory-allocation-from-C"></a></p>
<p>There are two types of memory allocation available to the C programmer, one in which R manages the clean-up and the other in which user has full control (and responsibility).</p>
<hr />
<p><a href="" id="Transient-storage-allocation"></a> <a href="" id="Transient-storage-allocation-1"></a></p>
<h4 id="transient-storage-allocation" class="subsection">6.1.1 Transient storage allocation</h4>
<p><a href="" id="index-R_005falloc"></a> <a href="" id="index-R_005fallocLD"></a> <a href="" id="index-S_005falloc"></a> <a href="" id="index-S_005frealloc"></a> <a href="" id="index-vmaxget"></a> <a href="" id="index-vmaxset"></a></p>
<p>Here R will reclaim the memory at the end of the call to <code class="calibre2">.C</code>, <code class="calibre2">.Call</code> or <code class="calibre2">.External</code>. Use</p>
<div class="example">
<pre class="example1"><code>char *R_alloc(size_t n, int size)</code></pre>
</div>
<p>which allocates n units of size bytes each. A typical usage (from package <strong>stats</strong>) is</p>
<div class="example">
<pre class="example1"><code>x = (int *) R_alloc(nrows(merge)+2, sizeof(int));</code></pre>
</div>
<p>(<code class="calibre2">size_t</code> is defined in stddef.h which the header defining <code class="calibre2">R_alloc</code> includes.)</p>
<p>There is a similar call, <code class="calibre2">S_alloc</code> (for compatibility with older versions of S) which zeroes the memory allocated,</p>
<div class="example">
<pre class="example1"><code>char *S_alloc(long n, int size)</code></pre>
</div>
<p>and</p>
<div class="example">
<pre class="example1"><code>char *S_realloc(char *p, long new, long old, int size)</code></pre>
</div>
<p>which changes the allocation size from old to new units, and zeroes the additional units.</p>
<p>For compatibility with current versions of S, header S.h (only) defines wrapper macros equivalent to</p>
<div class="example">
<pre class="example1"><code>type* Salloc(long n, int type)
type* Srealloc(char *p, long new, long old, int type)</code></pre>
</div>
<p>This memory is taken from the heap, and released at the end of the <code class="calibre2">.C</code>, <code class="calibre2">.Call</code> or <code class="calibre2">.External</code> call. Users can also manage it, by noting the current position with a call to <code class="calibre2">vmaxget</code> and subsequently clearing memory allocated by a call to <code class="calibre2">vmaxset</code>. An example might be</p>
<div class="example">
<pre class="example1"><code>void *vmax = vmaxget()
// a loop involving the use of R_alloc at each iteration
vmaxset(vmax)</code></pre>
</div>
<p>This is only recommended for experts.</p>
<p>Note that this memory will be freed on error or user interrupt (if allowed: see <a href="#Allowing-interrupts">Allowing interrupts</a>).</p>
<p>The memory returned is only guaranteed to be aligned as required for <code class="calibre2">double</code> pointers: take precautions if casting to a pointer which needs more. There is also</p>
<div class="example">
<pre class="example1"><code>long double *R_allocLD(size_t n)</code></pre>
</div>
<p>which is guaranteed to have the 16-byte alignment needed for <code class="calibre2">long double</code> pointers on some platforms.</p>
<p>These functions should only be used in code called by <code class="calibre2">.C</code> etc, never from front-ends. They are not thread-safe.</p>
<hr />
<p><a href="" id="User_002dcontrolled-memory"></a> <a href="" id="User_002dcontrolled-memory-1"></a></p>
<h4 id="user-controlled-memory" class="subsection">6.1.2 User-controlled memory</h4>
<p><a href="" id="index-Calloc"></a> <a href="" id="index-Realloc"></a> <a href="" id="index-Free"></a></p>
<p>The other form of memory allocation is an interface to <code class="calibre2">malloc</code>, the interface providing R error handling. This memory lasts until freed by the user and is additional to the memory allocated for the R workspace.</p>
<p>The interface functions are</p>
<div class="example">
<pre class="example1"><code>type* Calloc(size_t n, type)
type* Realloc(any *p, size_t n, type)
void Free(any *p)</code></pre>
</div>
<p>providing analogues of <code class="calibre2">calloc</code>, <code class="calibre2">realloc</code> and <code class="calibre2">free</code>. If there is an error during allocation it is handled by R, so if these routines return the memory has been successfully allocated or freed. <code class="calibre2">Free</code> will set the pointer p to <code class="calibre2">NULL</code>. (Some but not all versions of S do so.)</p>
<p>Users should arrange to <code class="calibre2">Free</code> this memory when no longer needed, including on error or user interrupt. This can often be done most conveniently from an <code class="calibre2">on.exit</code> action in the calling R function – see <code class="calibre2">pwilcox</code> for an example.</p>
<p>Do not assume that memory allocated by <code class="calibre2">Calloc</code>/<code class="calibre2">Realloc</code> comes from the same pool as used by <code class="calibre2">malloc</code>: in particular do not use <code class="calibre2">free</code> or <code class="calibre2">strdup</code> with it.</p>
<p>Memory obtained by these functions should be aligned in the same way as <code class="calibre2">malloc</code>, that is ‘suitably aligned for any kind of variable’.</p>
<p>These entry points need to be prefixed by <code class="calibre2">R_</code> if <code class="calibre2">STRICT_R_HEADERS</code> has been defined.</p>
<hr />
<p><a href="" id="Error-handling"></a> <a href="" id="Error-handling-1"></a></p>
<h3 id="error-handling" class="section">6.2 Error handling</h3>
<p><a href="" id="index-Error-handling-from-C"></a></p>
<p>The basic error handling routines are the equivalents of <code class="calibre2">stop</code> and <code class="calibre2">warning</code> in R code, and use the same interface.</p>
<div class="example">
<pre class="example1"><code>void error(const char * format, ...);
void warning(const char * format, ...);</code></pre>
</div>
<p>These have the same call sequences as calls to <code class="calibre2">printf</code>, but in the simplest case can be called with a single character string argument giving the error message. (Don’t do this if the string contains ‘%’ or might otherwise be interpreted as a format.)</p>
<p>If <code class="calibre2">STRICT_R_HEADERS</code> is not defined there is also an S-compatibility interface which uses calls of the form</p>
<div class="example">
<pre class="example1"><code>PROBLEM ...... ERROR
MESSAGE ...... WARN
PROBLEM ...... RECOVER(NULL_ENTRY)
MESSAGE ...... WARNING(NULL_ENTRY)</code></pre>
</div>
<p>the last two being the forms available in all S versions. Here ‘......’ is a set of arguments to <code class="calibre2">printf</code>, so can be a string or a format string followed by arguments separated by commas.</p>
<hr />
<p><a href="" id="Error-handling-from-FORTRAN"></a> <a href="" id="Error-handling-from-FORTRAN-1"></a></p>
<h4 id="error-handling-from-fortran" class="subsection">6.2.1 Error handling from FORTRAN</h4>
<p><a href="" id="index-Error-handling-from-FORTRAN"></a></p>
<p>There are two interface function provided to call <code class="calibre2">error</code> and <code class="calibre2">warning</code> from FORTRAN code, in each case with a simple character string argument. They are defined as</p>
<div class="example">
<pre class="example1"><code>subroutine rexit(message)
subroutine rwarn(message)</code></pre>
</div>
<p>Messages of more than 255 characters are truncated, with a warning.</p>
<hr />
<p><a href="" id="Random-numbers"></a> <a href="" id="Random-number-generation"></a></p>
<h3 id="random-number-generation" class="section">6.3 Random number generation</h3>
<p><a href="" id="index-Random-numbers-in-C"></a> <a href="" id="index-unif_005frand"></a> <a href="" id="index-norm_005frand"></a> <a href="" id="index-exp_005frand"></a> <a href="" id="index-GetRNGstate"></a> <a href="" id="index-PutRNGstate"></a> <a href="" id="index-_002eRandom_002eseed"></a> <a href="" id="index-seed_005fin"></a> <a href="" id="index-seed_005fout"></a></p>
<p>The interface to R’s internal random number generation routines is</p>
<div class="example">
<pre class="example1"><code>double unif_rand();
double norm_rand();
double exp_rand();</code></pre>
</div>
<p>giving one uniform, normal or exponential pseudo-random variate. However, before these are used, the user must call</p>
<div class="example">
<pre class="example1"><code>GetRNGstate();</code></pre>
</div>
<p>and after all the required variates have been generated, call</p>
<div class="example">
<pre class="example1"><code>PutRNGstate();</code></pre>
</div>
<p>These essentially read in (or create) <code class="calibre2">.Random.seed</code> and write it out after use.</p>
<p>File S.h defines <code class="calibre2">seed_in</code> and <code class="calibre2">seed_out</code> for S-compatibility rather than <code class="calibre2">GetRNGstate</code> and <code class="calibre2">PutRNGstate</code>. These take a <code class="calibre2">long *</code> argument which is ignored.</p>
<p>The random number generator is private to R; there is no way to select the kind of RNG or set the seed except by evaluating calls to the R functions.</p>
<p>The C code behind R’s <code class="calibre2">rxxx</code> functions can be accessed by including the header file Rmath.h; See <a href="#Distribution-functions">Distribution functions</a>. Those calls generate a single variate and should also be enclosed in calls to <code class="calibre2">GetRNGstate</code> and <code class="calibre2">PutRNGstate</code>.</p>
<hr />
<p><a href="" id="Missing-and-IEEE-values"></a> <a href="" id="Missing-and-IEEE-special-values"></a></p>
<h3 id="missing-and-ieee-special-values" class="section">6.4 Missing and IEEE special values</h3>
<p><a href="" id="index-Missing-values-1"></a> <a href="" id="index-IEEE-special-values-1"></a> <a href="" id="index-ISNA-1"></a> <a href="" id="index-ISNAN-1"></a> <a href="" id="index-R_005fFINITE"></a> <a href="" id="index-R_005fIsNaN"></a> <a href="" id="index-R_005fPosInf"></a> <a href="" id="index-R_005fNegInf"></a> <a href="" id="index-NA_005fREAL"></a></p>
<p>A set of functions is provided to test for <code class="calibre2">NA</code>, <code class="calibre2">Inf</code>, <code class="calibre2">-Inf</code> and <code class="calibre2">NaN</code>. These functions are accessed <em>via</em> macros:</p>
<div class="example">
<pre class="example1"><code>ISNA(x)        True for R’s NA only
ISNAN(x)       True for R’s NA and IEEE NaN
R_FINITE(x)    False for Inf, -Inf, NA, NaN</code></pre>
</div>
<p>and <em>via</em> function <code class="calibre2">R_IsNaN</code> which is true for <code class="calibre2">NaN</code> but not <code class="calibre2">NA</code>.</p>
<p>Do use <code class="calibre2">R_FINITE</code> rather than <code class="calibre2">isfinite</code> or <code class="calibre2">finite</code>; the latter is often mendacious and <code class="calibre2">isfinite</code> is only available on a some platforms, on which <code class="calibre2">R_FINITE</code> is a macro expanding to <code class="calibre2">isfinite</code>.</p>
<p>Currently in C code <code class="calibre2">ISNAN</code> is a macro calling <code class="calibre2">isnan</code>. (Since this gives problems on some C++ systems, if the R headers is called from C++ code a function call is used.)</p>
<p>You can check for <code class="calibre2">Inf</code> or <code class="calibre2">-Inf</code> by testing equality to <code class="calibre2">R_PosInf</code> or <code class="calibre2">R_NegInf</code>, and set (but not test) an <code class="calibre2">NA</code> as <code class="calibre2">NA_REAL</code>.</p>
<p>All of the above apply to <em>double</em> variables only. For integer variables there is a variable accessed by the macro <code class="calibre2">NA_INTEGER</code> which can used to set or test for missingness.</p>
<hr />
<p><a href="" id="Printing"></a> <a href="" id="Printing-1"></a></p>
<h3 id="printing" class="section">6.5 Printing</h3>
<p><a href="" id="index-Printing-from-C"></a> <a href="" id="index-Rprintf"></a> <a href="" id="index-REprintf"></a> <a href="" id="index-Rvprintf"></a> <a href="" id="index-REvprintf"></a></p>
<p>The most useful function for printing from a C routine compiled into R is <code class="calibre2">Rprintf</code>. This is used in exactly the same way as <code class="calibre2">printf</code>, but is guaranteed to write to R’s output (which might be a GUI console rather than a file, and can be re-directed by <code class="calibre2">sink</code>). It is wise to write complete lines (including the <code class="calibre2">&quot;\n&quot;</code>) before returning to R. It is defined in R_ext/Print.h.</p>
<p>The function <code class="calibre2">REprintf</code> is similar but writes on the error stream (<code class="calibre2">stderr</code>) which may or may not be different from the standard output stream.</p>
<p>Functions <code class="calibre2">Rvprintf</code> and <code class="calibre2">REvprintf</code> are analogues using the <code class="calibre2">vprintf</code> interface. Because that is a C99<a href="R-exts_split_014.html#FOOT138" id="DOCF138"><sup>138</sup></a> interface, they are only defined by R_ext/Print.h in C++ code if the macro <code class="calibre2">R_USE_C99_IN_CXX</code> is defined when it is included.</p>
<p>Another circumstance when it may be important to use these functions is when using parallel computation on a cluster of computational nodes, as their output will be re-directed/logged appropriately.</p>
<hr />
<p><a href="" id="Printing-from-FORTRAN"></a> <a href="" id="Printing-from-FORTRAN-1"></a></p>
<h4 id="printing-from-fortran" class="subsection">6.5.1 Printing from FORTRAN</h4>
<p><a href="" id="index-Printing-from-FORTRAN"></a></p>
<p>On many systems FORTRAN <code class="calibre2">write</code> and <code class="calibre2">print</code> statements can be used, but the output may not interleave well with that of C, and will be invisible on GUI interfaces. They are not portable and best avoided.</p>
<p>Three subroutines are provided to ease the output of information from FORTRAN code.</p>
<div class="example">
<pre class="example1"><code>subroutine dblepr(label, nchar, data, ndata)
subroutine realpr(label, nchar, data, ndata)
subroutine intpr (label, nchar, data, ndata)</code></pre>
</div>
<p>Here label is a character label of up to 255 characters, nchar is its length (which can be <code class="calibre2">-1</code> if the whole label is to be used), and data is an array of length at least ndata of the appropriate type (<code class="calibre2">double precision</code>, <code class="calibre2">real</code> and <code class="calibre2">integer</code> respectively). These routines print the label on one line and then print data as if it were an R vector on subsequent line(s). They work with zero ndata, and so can be used to print a label alone.</p>
<hr />
<p><a href="" id="Calling-C-from-FORTRAN-and-vice-versa"></a> <a href="" id="Calling-C-from-FORTRAN-and-vice-versa-1"></a></p>
<h3 id="calling-c-from-fortran-and-vice-versa" class="section">6.6 Calling C from FORTRAN and vice versa</h3>
<p><a href="" id="index-Calling-C-from-FORTRAN-and-vice-versa"></a></p>
<p>Naming conventions for symbols generated by FORTRAN differ by platform: it is not safe to assume that FORTRAN names appear to C with a trailing underscore. To help cover up the platform-specific differences there is a set of macros that should be used.</p>
<dl>
<dt><code class="calibre2">F77_SUB(name)</code></dt>
<dd><p>to define a function in C to be called from FORTRAN</p>
</dd>
<dt><code class="calibre2">F77_NAME(name)</code></dt>
<dd><p>to declare a FORTRAN routine in C before use</p>
</dd>
<dt><code class="calibre2">F77_CALL(name)</code></dt>
<dd><p>to call a FORTRAN routine from C</p>
</dd>
<dt><code class="calibre2">F77_COMDECL(name)</code></dt>
<dd><p>to declare a FORTRAN common block in C</p>
</dd>
<dt><code class="calibre2">F77_COM(name)</code></dt>
<dd><p>to access a FORTRAN common block from C</p>
</dd>
</dl>
<p>On most current platforms these are all the same, but it is unwise to rely on this. Note that names with underscores are not legal in FORTRAN 77, and are not portably handled by the above macros. (Also, all FORTRAN names for use by R are lower case, but this is not enforced by the macros.)</p>
<p>For example, suppose we want to call R’s normal random numbers from FORTRAN. We need a C wrapper along the lines of</p>
<p><a href="" id="index-Random-numbers-in-FORTRAN"></a></p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;

void F77_SUB(rndstart)(void) { GetRNGstate(); }
void F77_SUB(rndend)(void) { PutRNGstate(); }
double F77_SUB(normrnd)(void) { return norm_rand(); }</code></pre>
</div>
<p>to be called from FORTRAN as in</p>
<div class="example">
<pre class="example1"><code>      subroutine testit()
      double precision normrnd, x
      call rndstart()
      x = normrnd()
      call dblepr(&quot;X was&quot;, 5, x, 1)
      call rndend()
      end</code></pre>
</div>
<p>Note that this is not guaranteed to be portable, for the return conventions might not be compatible between the C and FORTRAN compilers used. (Passing values <em>via</em> arguments is safer.)</p>
<p>The standard packages, for example <strong>stats</strong>, are a rich source of further examples.</p>
<p>Passing character strings from C to FORTRAN 77 or <em>vice versa</em> is not portable (and to Fortran 90 or later is even less so). We have found that it helps to ensure that a C string to be passed is followed by several <code class="calibre2">nul</code>s (and not just the one needed as a C terminator). But for maximal portability character strings in FORTRAN should be avoided.</p>
<hr />
<p><a href="" id="Numerical-analysis-subroutines"></a> <a href="" id="Numerical-analysis-subroutines-1"></a></p>
<h3 id="numerical-analysis-subroutines" class="section">6.7 Numerical analysis subroutines</h3>
<p><a href="" id="index-Numerical-analysis-subroutines-from-C"></a></p>
<p>R contains a large number of mathematical functions for its own use, for example numerical linear algebra computations and special functions.</p>
<p>The header files R_ext/BLAS.h, R_ext/Lapack.h and R_ext/Linpack.h contains declarations of the BLAS, LAPACK and LINPACK linear algebra functions included in R. These are expressed as calls to FORTRAN subroutines, and they will also be usable from users’ FORTRAN code. Although not part of the official API, this set of subroutines is unlikely to change (but might be supplemented).</p>
<p>The header file Rmath.h lists many other functions that are available and documented in the following subsections. Many of these are C interfaces to the code behind R functions, so the R function documentation may give further details.</p>
<hr />
<p><a href="" id="Distribution-functions"></a> <a href="" id="Distribution-functions-1"></a></p>
<h4 id="distribution-functions" class="subsection">6.7.1 Distribution functions</h4>
<p><a href="" id="index-Distribution-functions-from-C"></a></p>
<p>The routines used to calculate densities, cumulative distribution functions and quantile functions for the standard statistical distributions are available as entry points.</p>
<p>The arguments for the entry points follow the pattern of those for the normal distribution:</p>
<div class="example">
<pre class="example1"><code>double dnorm(double x, double mu, double sigma, int give_log);
double pnorm(double x, double mu, double sigma, int lower_tail,
             int give_log);
double qnorm(double p, double mu, double sigma, int lower_tail,
             int log_p);
double rnorm(double mu, double sigma);</code></pre>
</div>
<p>That is, the first argument gives the position for the density and CDF and probability for the quantile function, followed by the distribution’s parameters. Argument lower_tail should be <code class="calibre2">TRUE</code> (or <code class="calibre2">1</code>) for normal use, but can be <code class="calibre2">FALSE</code> (or <code class="calibre2">0</code>) if the probability of the upper tail is desired or specified.</p>
<p>Finally, give_log should be non-zero if the result is required on log scale, and log_p should be non-zero if p has been specified on log scale.</p>
<p>Note that you directly get the cumulative (or “integrated”) <em>hazard</em> function, H(t) = - log(1 - F(t)), by using</p>
<div class="example">
<pre class="example1"><code>- pdist(t, ..., /*lower_tail = */ FALSE, /* give_log = */ TRUE)</code></pre>
</div>
<p>or shorter (and more cryptic) <code class="calibre2">- pdist(t, ..., 0, 1)</code>. <a href="" id="index-cumulative-hazard"></a></p>
<p>The random-variate generation routine <code class="calibre2">rnorm</code> returns one normal variate. See <a href="#Random-numbers">Random numbers</a>, for the protocol in using the random-variate routines. <a href="" id="index-Random-numbers-in-C-1"></a></p>
<p>Note that these argument sequences are (apart from the names and that <code class="calibre2">rnorm</code> has no n) mainly the same as the corresponding R functions of the same name, so the documentation of the R functions can be used. Note that the exponential and gamma distributions are parametrized by <code class="calibre2">scale</code> rather than <code class="calibre2">rate</code>.</p>
<p>For reference, the following table gives the basic name (to be prefixed by ‘d’, ‘p’, ‘q’ or ‘r’ apart from the exceptions noted) and distribution-specific arguments for the complete set of distributions.</p>
<blockquote>
<table>
<tbody>
<tr class="odd">
<td align="left">beta</td>
<td align="left"><code class="calibre2">beta</code></td>
<td align="left"><code class="calibre2">a</code>, <code class="calibre2">b</code></td>
</tr>
<tr class="even">
<td align="left">non-central beta</td>
<td align="left"><code class="calibre2">nbeta</code></td>
<td align="left"><code class="calibre2">a</code>, <code class="calibre2">b</code>, <code class="calibre2">ncp</code></td>
</tr>
<tr class="odd">
<td align="left">binomial</td>
<td align="left"><code class="calibre2">binom</code></td>
<td align="left"><code class="calibre2">n</code>, <code class="calibre2">p</code></td>
</tr>
<tr class="even">
<td align="left">Cauchy</td>
<td align="left"><code class="calibre2">cauchy</code></td>
<td align="left"><code class="calibre2">location</code>, <code class="calibre2">scale</code></td>
</tr>
<tr class="odd">
<td align="left">chi-squared</td>
<td align="left"><code class="calibre2">chisq</code></td>
<td align="left"><code class="calibre2">df</code></td>
</tr>
<tr class="even">
<td align="left">non-central chi-squared</td>
<td align="left"><code class="calibre2">nchisq</code></td>
<td align="left"><code class="calibre2">df</code>, <code class="calibre2">ncp</code></td>
</tr>
<tr class="odd">
<td align="left">exponential</td>
<td align="left"><code class="calibre2">exp</code></td>
<td align="left"><code class="calibre2">scale</code> (and <strong>not</strong> <code class="calibre2">rate</code>)</td>
</tr>
<tr class="even">
<td align="left">F</td>
<td align="left"><code class="calibre2">f</code></td>
<td align="left"><code class="calibre2">n1</code>, <code class="calibre2">n2</code></td>
</tr>
<tr class="odd">
<td align="left">non-central F</td>
<td align="left"><code class="calibre2">nf</code></td>
<td align="left"><code class="calibre2">n1</code>, <code class="calibre2">n2</code>, <code class="calibre2">ncp</code></td>
</tr>
<tr class="even">
<td align="left">gamma</td>
<td align="left"><code class="calibre2">gamma</code></td>
<td align="left"><code class="calibre2">shape</code>, <code class="calibre2">scale</code></td>
</tr>
<tr class="odd">
<td align="left">geometric</td>
<td align="left"><code class="calibre2">geom</code></td>
<td align="left"><code class="calibre2">p</code></td>
</tr>
<tr class="even">
<td align="left">hypergeometric</td>
<td align="left"><code class="calibre2">hyper</code></td>
<td align="left"><code class="calibre2">NR</code>, <code class="calibre2">NB</code>, <code class="calibre2">n</code></td>
</tr>
<tr class="odd">
<td align="left">logistic</td>
<td align="left"><code class="calibre2">logis</code></td>
<td align="left"><code class="calibre2">location</code>, <code class="calibre2">scale</code></td>
</tr>
<tr class="even">
<td align="left">lognormal</td>
<td align="left"><code class="calibre2">lnorm</code></td>
<td align="left"><code class="calibre2">logmean</code>, <code class="calibre2">logsd</code></td>
</tr>
<tr class="odd">
<td align="left">negative binomial</td>
<td align="left"><code class="calibre2">nbinom</code></td>
<td align="left"><code class="calibre2">size</code>, <code class="calibre2">prob</code></td>
</tr>
<tr class="even">
<td align="left">normal</td>
<td align="left"><code class="calibre2">norm</code></td>
<td align="left"><code class="calibre2">mu</code>, <code class="calibre2">sigma</code></td>
</tr>
<tr class="odd">
<td align="left">Poisson</td>
<td align="left"><code class="calibre2">pois</code></td>
<td align="left"><code class="calibre2">lambda</code></td>
</tr>
<tr class="even">
<td align="left">Student’s t</td>
<td align="left"><code class="calibre2">t</code></td>
<td align="left"><code class="calibre2">n</code></td>
</tr>
<tr class="odd">
<td align="left">non-central t</td>
<td align="left"><code class="calibre2">nt</code></td>
<td align="left"><code class="calibre2">df</code>, <code class="calibre2">delta</code></td>
</tr>
<tr class="even">
<td align="left">Studentized range</td>
<td align="left"><code class="calibre2">tukey</code> (*)</td>
<td align="left"><code class="calibre2">rr</code>, <code class="calibre2">cc</code>, <code class="calibre2">df</code></td>
</tr>
<tr class="odd">
<td align="left">uniform</td>
<td align="left"><code class="calibre2">unif</code></td>
<td align="left"><code class="calibre2">a</code>, <code class="calibre2">b</code></td>
</tr>
<tr class="even">
<td align="left">Weibull</td>
<td align="left"><code class="calibre2">weibull</code></td>
<td align="left"><code class="calibre2">shape</code>, <code class="calibre2">scale</code></td>
</tr>
<tr class="odd">
<td align="left">Wilcoxon rank sum</td>
<td align="left"><code class="calibre2">wilcox</code></td>
<td align="left"><code class="calibre2">m</code>, <code class="calibre2">n</code></td>
</tr>
<tr class="even">
<td align="left">Wilcoxon signed rank</td>
<td align="left"><code class="calibre2">signrank</code></td>
<td align="left"><code class="calibre2">n</code></td>
</tr>
</tbody>
</table>
</blockquote>
<p>Entries marked with an asterisk only have ‘p’ and ‘q’ functions available, and none of the non-central distributions have ‘r’ functions. After a call to <code class="calibre2">dwilcox</code>, <code class="calibre2">pwilcox</code> or <code class="calibre2">qwilcox</code> the function <code class="calibre2">wilcox_free()</code> should be called, and similarly for the signed rank functions.</p>
<p>(If remapping is suppressed, the Normal distribution names are <code class="calibre2">Rf_dnorm4</code>, <code class="calibre2">Rf_pnorm5</code> and <code class="calibre2">Rf_qnorm5</code>.)</p>
<p>For the negative binomial distribution (‘nbinom’), in addition to the <code class="calibre2">(size, prob)</code> parametrization, the alternative <code class="calibre2">(size, mu)</code> parametrization is provided as well by functions ‘[dpqr]nbinom_mu()’, see ?NegBinomial in R.</p>
<p>Functions <code class="calibre2">dpois_raw(x, *)</code> and <code class="calibre2">dbinom_raw(x, *)</code> are versions of the Poisson and binomial probability mass functions which work continuously in <code class="calibre2">x</code>, whereas <code class="calibre2">dbinom(x,*)</code> and <code class="calibre2">dpois(x,*)</code> only return non zero values for integer <code class="calibre2">x</code>.</p>
<div class="example">
<pre class="example1"><code>double dbinom_raw(double x, double n, double p, double q, int give_log)
double dpois_raw (double x, double lambda, int give_log)</code></pre>
</div>
<p>Note that <code class="calibre2">dbinom_raw()</code> gets both p and q = 1-p which may be advantageous when one of them is close to 1.</p>
<hr />
<p><a href="" id="Mathematical-functions"></a> <a href="" id="Mathematical-functions-1"></a></p>
<h4 id="mathematical-functions" class="subsection">6.7.2 Mathematical functions</h4>
<p><a href="" id="index-gammafn"></a> <a href="" id="index-lgammafn"></a> <a href="" id="index-digamma"></a> <a href="" id="index-trigamma"></a> <a href="" id="index-tetragamma"></a> <a href="" id="index-pentagamma"></a> <a href="" id="index-psigamma"></a> <a href="" id="index-Gamma-function"></a></p>
<dl>
<dt><a href="" id="index-gammafn-1"></a>Function: <em>double</em> <strong>gammafn</strong> <em>(double x)</em><br />
<a href="" id="index-lgammafn-1"></a>Function: <em>double</em> <strong>lgammafn</strong> <em>(double x)</em><br />
<a href="" id="index-digamma-1"></a>Function: <em>double</em> <strong>digamma</strong> <em>(double x)</em><br />
<a href="" id="index-trigamma-1"></a>Function: <em>double</em> <strong>trigamma</strong> <em>(double x)</em><br />
<a href="" id="index-tetragamma-1"></a>Function: <em>double</em> <strong>tetragamma</strong> <em>(double x)</em><br />
<a href="" id="index-pentagamma-1"></a>Function: <em>double</em> <strong>pentagamma</strong> <em>(double x)</em><br />
<a href="" id="index-psigamma-1"></a>Function: <em>double</em> <strong>psigamma</strong> <em>(double x, double deriv)</em></dt>
<dd><p>The Gamma function, the natural logarithm of its absolute value and first four derivatives and the n-th derivative of Psi, the digamma function, which is the derivative of <code class="calibre2">lgammafn</code>. In other words, <code class="calibre2">digamma(x)</code> is the same as <code class="calibre2">psigamma(x,0)</code>, <code class="calibre2">trigamma(x) == psigamma(x,1)</code>, etc.</p>
</dd>
</dl>
<p><a href="" id="index-beta"></a> <a href="" id="index-lbeta"></a> <a href="" id="index-Beta-function"></a></p>
<dl>
<dt><a href="" id="index-beta-1"></a>Function: <em>double</em> <strong>beta</strong> <em>(double a, double b)</em><br />
<a href="" id="index-lbeta-1"></a>Function: <em>double</em> <strong>lbeta</strong> <em>(double a, double b)</em></dt>
<dd><p>The (complete) Beta function and its natural logarithm.</p>
</dd>
</dl>
<p><a href="" id="index-choose"></a> <a href="" id="index-lchoose"></a></p>
<dl>
<dt><a href="" id="index-choose-1"></a>Function: <em>double</em> <strong>choose</strong> <em>(double n, double k)</em><br />
<a href="" id="index-lchoose-1"></a>Function: <em>double</em> <strong>lchoose</strong> <em>(double n, double k)</em></dt>
<dd><p>The number of combinations of k items chosen from from n and the natural logarithm of its absolute value, generalized to arbitrary real n. k is rounded to the nearest integer (with a warning if needed).</p>
</dd>
</dl>
<p><a href="" id="index-bessel_005fi"></a> <a href="" id="index-bessel_005fj"></a> <a href="" id="index-bessel_005fk"></a> <a href="" id="index-bessel_005fy"></a> <a href="" id="index-Bessel-functions"></a></p>
<dl>
<dt><a href="" id="index-bessel_005fi-1"></a>Function: <em>double</em> <strong>bessel_i</strong> <em>(double x, double nu, double expo)</em><br />
<a href="" id="index-bessel_005fj-1"></a>Function: <em>double</em> <strong>bessel_j</strong> <em>(double x, double nu)</em><br />
<a href="" id="index-bessel_005fk-1"></a>Function: <em>double</em> <strong>bessel_k</strong> <em>(double x, double nu, double expo)</em><br />
<a href="" id="index-bessel_005fy-1"></a>Function: <em>double</em> <strong>bessel_y</strong> <em>(double x, double nu)</em></dt>
<dd><p>Bessel functions of types I, J, K and Y with index nu. For <code class="calibre2">bessel_i</code> and <code class="calibre2">bessel_k</code> there is the option to return <span class="nolinebreak">exp(-</span>x) I(x; nu) or exp(x) K(x; nu) if expo is 2. (Use <code class="calibre2">expo == 1</code> for unscaled values.)</p>
</dd>
</dl>
<hr />
<p><a href="" id="Numerical-Utilities"></a> <a href="" id="Numerical-Utilities-1"></a></p>
<h4 id="numerical-utilities" class="subsection">6.7.3 Numerical Utilities</h4>
<p>There are a few other numerical utility functions available as entry points.</p>
<dl>
<dt><a href="" id="index-R_005fpow"></a>Function: <em>double</em> <strong>R_pow</strong> <em>(double x, double y)</em><br />
<a href="" id="index-R_005fpow_005fdi"></a>Function: <em>double</em> <strong>R_pow_di</strong> <em>(double x, int i)</em></dt>
<dd><p><code class="calibre2">R_pow(x, y)</code> and <code class="calibre2">R_pow_di(x, i)</code> compute <code class="calibre2">x^y</code> and <code class="calibre2">x^i</code>, respectively using <code class="calibre2">R_FINITE</code> checks and returning the proper result (the same as R) for the cases where x, y or i are 0 or missing or infinite or <code class="calibre2">NaN</code>.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-log1p"></a>Function: <em>double</em> <strong>log1p</strong> <em>(double x)</em></dt>
<dd><p>Computes <code class="calibre2">log(1 + x)</code> (<em>log 1 <strong>p</strong>lus x</em>), accurately even for small x, i.e., |x| &lt;&lt; 1.</p>
<p>This should be provided by your platform, in which case it is not included in Rmath.h, but is (probably) in math.h which Rmath.h includes (except under C++, so it may not be declared for C++98).</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-log1pmx"></a>Function: <em>double</em> <strong>log1pmx</strong> <em>(double x)</em></dt>
<dd><p>Computes <code class="calibre2">log(1 + x) - x</code> (<em>log 1 <strong>p</strong>lus x <strong>m</strong>inus <strong>x</strong></em>), accurately even for small x, i.e., |x| &lt;&lt; 1.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-log1pexp"></a>Function: <em>double</em> <strong>log1pexp</strong> <em>(double x)</em></dt>
<dd><p>Computes <code class="calibre2">log(1 + exp(x))</code> (<em>log 1 <strong>p</strong>lus <strong>exp</strong></em>), accurately, notably for large x, e.g., x &gt; 720.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-expm1"></a>Function: <em>double</em> <strong>expm1</strong> <em>(double x)</em></dt>
<dd><p>Computes <code class="calibre2">exp(x) - 1</code> (<em>exp x <strong>m</strong>inus 1</em>), accurately even for small x, i.e., |x| &lt;&lt; 1.</p>
<p>This should be provided by your platform, in which case it is not included in Rmath.h, but is (probably) in math.h which Rmath.h includes (except under C++, so it may not be declared for C++98).</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-lgamma1p"></a>Function: <em>double</em> <strong>lgamma1p</strong> <em>(double x)</em></dt>
<dd><p>Computes <code class="calibre2">log(gamma(x + 1))</code> (<em>log(gamma(1 <strong>p</strong>lus x))</em>), accurately even for small x, i.e., 0 &lt; x &lt; 0.5.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-cospi"></a>Function: <em>double</em> <strong>cospi</strong> <em>(double x)</em></dt>
<dd><p>Computes <code class="calibre2">cos(pi * x)</code> (where <code class="calibre2">pi</code> is 3.14159...), accurately, notably for half integer x.</p>
<p>This might be provided by your platform<a href="R-exts_split_014.html#FOOT139" id="DOCF139"><sup>139</sup></a>, in which case it is not included in Rmath.h, but is in math.h which Rmath.h includes. (Ensure that neither math.h nor cmath is included before Rmath.h or define</p>
<div class="example">
<pre class="example1"><code>#define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1</code></pre>
</div>
<p>before the first inclusion.)</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-sinpi"></a>Function: <em>double</em> <strong>sinpi</strong> <em>(double x)</em></dt>
<dd><p>Computes <code class="calibre2">sin(pi * x)</code> accurately, notably for (half) integer x.</p>
<p>This might be provided by your platform, in which case it is not included in Rmath.h, but is in math.h which Rmath.h includes (but see the comments for <code class="calibre2">cospi</code>).</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-tanpi"></a>Function: <em>double</em> <strong>tanpi</strong> <em>(double x)</em></dt>
<dd><p>Computes <code class="calibre2">tan(pi * x)</code> accurately, notably for (half) integer x.</p>
<p>This might be provided by your platform, in which case it is not included in Rmath.h, but is in math.h which Rmath.h includes (but see the comments for <code class="calibre2">cospi</code>).</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-logspace_005fadd"></a>Function: <em>double</em> <strong>logspace_add</strong> <em>(double logx, double logy)</em><br />
<a href="" id="index-logspace_005fsub"></a>Function: <em>double</em> <strong>logspace_sub</strong> <em>(double logx, double logy)</em><br />
<a href="" id="index-logspace_005fsum"></a>Function: <em>double</em> <strong>logspace_sum</strong> <em>(const double* logx, int n)</em></dt>
<dd><p>Compute the log of a sum or difference from logs of terms, i.e., “x + y” as <code class="calibre2">log (exp(logx) + exp(logy))</code> and “x - y” as <code class="calibre2">log (exp(logx) - exp(logy))</code>, and “sum_i x[i]” as <code class="calibre2">log (sum[i = 1:n exp(logx[i])] )</code> without causing unnecessary overflows or throwing away too much accuracy.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-imax2"></a>Function: <em>int</em> <strong>imax2</strong> <em>(int x, int y)</em><br />
<a href="" id="index-imin2"></a>Function: <em>int</em> <strong>imin2</strong> <em>(int x, int y)</em><br />
<a href="" id="index-fmax2"></a>Function: <em>double</em> <strong>fmax2</strong> <em>(double x, double y)</em><br />
<a href="" id="index-fmin2"></a>Function: <em>double</em> <strong>fmin2</strong> <em>(double x, double y)</em></dt>
<dd><p>Return the larger (<code class="calibre2">max</code>) or smaller (<code class="calibre2">min</code>) of two integer or double numbers, respectively. Note that <code class="calibre2">fmax2</code> and <code class="calibre2">fmin2</code> differ from C99/C++11’s <code class="calibre2">fmax</code> and <code class="calibre2">fmin</code> when one of the arguments is a <code class="calibre2">NaN</code>: these versions return <code class="calibre2">NaN</code>.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-sign"></a>Function: <em>double</em> <strong>sign</strong> <em>(double x)</em></dt>
<dd><p>Compute the <em>signum</em> function, where sign(x) is 1, 0, or <em>-1</em>, when x is positive, 0, or negative, respectively, and <code class="calibre2">NaN</code> if <code class="calibre2">x</code> is a <code class="calibre2">NaN</code>.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-fsign"></a>Function: <em>double</em> <strong>fsign</strong> <em>(double x, double y)</em></dt>
<dd><p>Performs “transfer of sign” and is defined as |x| * sign(y).</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-fprec"></a>Function: <em>double</em> <strong>fprec</strong> <em>(double x, double digits)</em></dt>
<dd><p>Returns the value of x rounded to digits decimal digits (after the decimal point).</p>
<p>This is the function used by R’s <code class="calibre2">signif()</code>.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-fround"></a>Function: <em>double</em> <strong>fround</strong> <em>(double x, double digits)</em></dt>
<dd><p>Returns the value of x rounded to digits <em>significant</em> decimal digits.</p>
<p>This is the function used by R’s <code class="calibre2">round()</code>. (Note that C99/C++11 provide a <code class="calibre2">round</code> function but C++98 need not.)</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-ftrunc"></a>Function: <em>double</em> <strong>ftrunc</strong> <em>(double x)</em></dt>
<dd><p>Returns the value of x truncated (to an integer value) towards zero.</p>
<p>(Note that C99/C++11 provide a <code class="calibre2">round</code> function but C++98 need not.)</p>
</dd>
</dl>
<hr />
<p><a href="" id="Mathematical-constants"></a> <a href="" id="Mathematical-constants-1"></a></p>
<h4 id="mathematical-constants" class="subsection">6.7.4 Mathematical constants</h4>
<p><a href="" id="index-M_005fE"></a> <a href="" id="index-M_005fPI"></a></p>
<p>R has a set of commonly used mathematical constants encompassing constants defined by POSIX and usually<a href="R-exts_split_014.html#FOOT140" id="DOCF140"><sup>140</sup></a> found in math.h (but maybe not in the C++ header cmath) and contains further ones that are used in statistical computations. These are defined to (at least) 30 digits accuracy in Rmath.h. The following definitions use <code class="calibre2">ln(x)</code> for the natural logarithm (<code class="calibre2">log(x)</code> in R).</p>
<blockquote>
<table>
<thead>
<tr class="header">
<th align="left">Name</th>
<th align="left">Definition (<code class="calibre2">ln = log</code>)</th>
<th align="left">round(<em>value</em>, 7)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left"><code class="calibre2">M_E</code></td>
<td align="left"><em>e</em></td>
<td align="left">2.7182818</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">M_LOG2E</code></td>
<td align="left">log2(<em>e</em>)</td>
<td align="left">1.4426950</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">M_LOG10E</code></td>
<td align="left">log10(<em>e</em>)</td>
<td align="left">0.4342945</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">M_LN2</code></td>
<td align="left">ln(2)</td>
<td align="left">0.6931472</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">M_LN10</code></td>
<td align="left">ln(10)</td>
<td align="left">2.3025851</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">M_PI</code></td>
<td align="left">pi</td>
<td align="left">3.1415927</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">M_PI_2</code></td>
<td align="left">pi/2</td>
<td align="left">1.5707963</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">M_PI_4</code></td>
<td align="left">pi/4</td>
<td align="left">0.7853982</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">M_1_PI</code></td>
<td align="left">1/pi</td>
<td align="left">0.3183099</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">M_2_PI</code></td>
<td align="left">2/pi</td>
<td align="left">0.6366198</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">M_2_SQRTPI</code></td>
<td align="left">2/sqrt(pi)</td>
<td align="left">1.1283792</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">M_SQRT2</code></td>
<td align="left">sqrt(2)</td>
<td align="left">1.4142136</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">M_SQRT1_2</code></td>
<td align="left">1/sqrt(2)</td>
<td align="left">0.7071068</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">M_SQRT_3</code></td>
<td align="left">sqrt(3)</td>
<td align="left">1.7320508</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">M_SQRT_32</code></td>
<td align="left">sqrt(32)</td>
<td align="left">5.6568542</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">M_LOG10_2</code></td>
<td align="left">log10(2)</td>
<td align="left">0.3010300</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">M_2PI</code></td>
<td align="left">2*pi</td>
<td align="left">6.2831853</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">M_SQRT_PI</code></td>
<td align="left">sqrt(pi)</td>
<td align="left">1.7724539</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">M_1_SQRT_2PI</code></td>
<td align="left">1/sqrt(2*pi)</td>
<td align="left">0.3989423</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">M_SQRT_2dPI</code></td>
<td align="left">sqrt(2/pi)</td>
<td align="left">0.7978846</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">M_LN_SQRT_PI</code></td>
<td align="left">ln(sqrt(pi))</td>
<td align="left">0.5723649</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">M_LN_SQRT_2PI</code></td>
<td align="left">ln(sqrt(2*pi))</td>
<td align="left">0.9189385</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">M_LN_SQRT_PId2</code></td>
<td align="left">ln(sqrt(pi/2))</td>
<td align="left">0.2257914</td>
</tr>
</tbody>
</table>
</blockquote>
<p>There are a set of constants (<code class="calibre2">PI</code>, <code class="calibre2">DOUBLE_EPS</code>) (and so on) defined (unless <code class="calibre2">STRICT_R_HEADERS</code> is defined) in the included header R_ext/Constants.h, mainly for compatibility with S.</p>
<p><a href="" id="index-TRUE"></a> <a href="" id="index-FALSE"></a></p>
<p>Further, the included header R_ext/Boolean.h has enumeration constants <code class="calibre2">TRUE</code> and <code class="calibre2">FALSE</code> of type <code class="calibre2">Rboolean</code> in order to provide a way of using “logical” variables in C consistently. This can conflict with other software: for example it conflicts with the headers in IJG’s <code class="calibre2">jpeg-9</code> (but not earlier versions).</p>
<hr />
<p><a href="" id="Optimization"></a> <a href="" id="Optimization-1"></a></p>
<h3 id="optimization" class="section">6.8 Optimization</h3>
<p><a href="" id="index-optimization"></a></p>
<p>The C code underlying <code class="calibre2">optim</code> can be accessed directly. The user needs to supply a function to compute the function to be minimized, of the type</p>
<div class="example">
<pre class="example1"><code>typedef double optimfn(int n, double *par, void *ex);</code></pre>
</div>
<p>where the first argument is the number of parameters in the second argument. The third argument is a pointer passed down from the calling routine, normally used to carry auxiliary information.</p>
<p>Some of the methods also require a gradient function</p>
<div class="example">
<pre class="example1"><code>typedef void optimgr(int n, double *par, double *gr, void *ex);</code></pre>
</div>
<p>which passes back the gradient in the <code class="calibre2">gr</code> argument. No function is provided for finite-differencing, nor for approximating the Hessian at the result.</p>
<p>The interfaces (defined in header R_ext/Applic.h) are</p>
<ul>
<li>Nelder Mead: <a href="" id="index-nmmin"></a>
<div class="example">
<pre class="example1"><code>void nmmin(int n, double *xin, double *x, double *Fmin, optimfn fn,
           int *fail, double abstol, double intol, void *ex,
           double alpha, double beta, double gamma, int trace,
           int *fncount, int maxit);</code></pre>
</div></li>
<li>BFGS: <a href="" id="index-vmmin"></a>
<div class="example">
<pre class="example1"><code>void vmmin(int n, double *x, double *Fmin,
           optimfn fn, optimgr gr, int maxit, int trace,
           int *mask, double abstol, double reltol, int nREPORT,
           void *ex, int *fncount, int *grcount, int *fail);</code></pre>
</div></li>
<li>Conjugate gradients: <a href="" id="index-cgmin"></a>
<div class="example">
<pre class="example1"><code>void cgmin(int n, double *xin, double *x, double *Fmin,
           optimfn fn, optimgr gr, int *fail, double abstol,
           double intol, void *ex, int type, int trace,
           int *fncount, int *grcount, int maxit);</code></pre>
</div></li>
<li>Limited-memory BFGS with bounds: <a href="" id="index-lbfgsb"></a>
<div class="example">
<pre class="example1"><code>void lbfgsb(int n, int lmm, double *x, double *lower,
            double *upper, int *nbd, double *Fmin, optimfn fn,
            optimgr gr, int *fail, void *ex, double factr,
            double pgtol, int *fncount, int *grcount,
            int maxit, char *msg, int trace, int nREPORT);</code></pre>
</div></li>
<li>Simulated annealing: <a href="" id="index-samin"></a>
<div class="example">
<pre class="example1"><code>void samin(int n, double *x, double *Fmin, optimfn fn, int maxit,
           int tmax, double temp, int trace, void *ex);</code></pre>
</div></li>
</ul>
<p>Many of the arguments are common to the various methods. <code class="calibre2">n</code> is the number of parameters, <code class="calibre2">x</code> or <code class="calibre2">xin</code> is the starting parameters on entry and <code class="calibre2">x</code> the final parameters on exit, with final value returned in <code class="calibre2">Fmin</code>. Most of the other parameters can be found from the help page for <code class="calibre2">optim</code>: see the source code src/appl/lbfgsb.c for the values of <code class="calibre2">nbd</code>, which specifies which bounds are to be used.</p>
<hr />
<p><a href="" id="Integration"></a> <a href="" id="Integration-1"></a></p>
<h3 id="integration" class="section">6.9 Integration</h3>
<p><a href="" id="index-integration"></a></p>
<p>The C code underlying <code class="calibre2">integrate</code> can be accessed directly. The user needs to supply a <em>vectorizing</em> C function to compute the function to be integrated, of the type</p>
<div class="example">
<pre class="example1"><code>typedef void integr_fn(double *x, int n, void *ex);</code></pre>
</div>
<p>where <code class="calibre2">x[]</code> is both input and output and has length <code class="calibre2">n</code>, i.e., a C function, say <code class="calibre2">fn</code>, of type <code class="calibre2">integr_fn</code> must basically do <code class="calibre2">for(i in 1:n) x[i] := f(x[i], ex)</code>. The vectorization requirement can be used to speed up the integrand instead of calling it <code class="calibre2">n</code> times. Note that in the current implementation built on QUADPACK, <code class="calibre2">n</code> will be either 15 or 21. The <code class="calibre2">ex</code> argument is a pointer passed down from the calling routine, normally used to carry auxiliary information.</p>
<p>There are interfaces (defined in header R_ext/Applic.h) for integrals over finite and infinite intervals (or “ranges” or “integration boundaries”).</p>
<ul>
<li>Finite: <a href="" id="index-Rdqags"></a>
<div class="example">
<pre class="example1"><code>void Rdqags(integr_fn f, void *ex, double *a, double *b,
            double *epsabs, double *epsrel,
            double *result, double *abserr, int *neval, int *ier,
            int *limit, int *lenw, int *last,
            int *iwork, double *work);</code></pre>
</div></li>
<li>Infinite: <a href="" id="index-Rdqagi"></a>
<div class="example">
<pre class="example1"><code>void Rdqagi(integr_fn f, void *ex, double *bound, int *inf,
            double *epsabs, double *epsrel,
            double *result, double *abserr, int *neval, int *ier,
            int *limit, int *lenw, int *last,
            int *iwork, double *work);</code></pre>
</div></li>
</ul>
<p>Only the 3rd and 4th argument differ for the two integrators; for the finite range integral using <code class="calibre2">Rdqags</code>, <code class="calibre2">a</code> and <code class="calibre2">b</code> are the integration interval bounds, whereas for an infinite range integral using <code class="calibre2">Rdqagi</code>, <code class="calibre2">bound</code> is the finite bound of the integration (if the integral is not doubly-infinite) and <code class="calibre2">inf</code> is a code indicating the kind of integration range,</p>
<dl>
<dt><code class="calibre2">inf = 1</code></dt>
<dd><p>corresponds to (bound, +Inf),</p>
</dd>
<dt><code class="calibre2">inf = -1</code></dt>
<dd><p>corresponds to (-Inf, bound),</p>
</dd>
<dt><code class="calibre2">inf = 2</code></dt>
<dd><p>corresponds to (-Inf, +Inf),</p>
</dd>
</dl>
<p><code class="calibre2">f</code> and <code class="calibre2">ex</code> define the integrand function, see above; <code class="calibre2">epsabs</code> and <code class="calibre2">epsrel</code> specify the absolute and relative accuracy requested, <code class="calibre2">result</code>, <code class="calibre2">abserr</code> and <code class="calibre2">last</code> are the output components <code class="calibre2">value</code>, <code class="calibre2">abs.err</code> and <code class="calibre2">subdivisions</code> of the R function integrate, where <code class="calibre2">neval</code> gives the number of integrand function evaluations, and the error code <code class="calibre2">ier</code> is translated to R’s <code class="calibre2">integrate() $ message</code>, look at that function definition. <code class="calibre2">limit</code> corresponds to <code class="calibre2">integrate(..., subdivisions = *)</code>. It seems you should always define the two work arrays and the length of the second one as</p>
<div class="example">
<pre class="example1"><code>    lenw = 4 * limit;
    iwork =   (int *) R_alloc(limit, sizeof(int));
    work = (double *) R_alloc(lenw,  sizeof(double));</code></pre>
</div>
<p>The comments in the source code in src/appl/integrate.c give more details, particularly about reasons for failure (<code class="calibre2">ier &gt;= 1</code>).</p>
<hr />
<p><a href="" id="Utility-functions"></a> <a href="" id="Utility-functions-1"></a></p>
<h3 id="utility-functions" class="section">6.10 Utility functions</h3>
<p><a href="" id="index-Sort-functions-from-C"></a></p>
<p>R has a fairly comprehensive set of sort routines which are made available to users’ C code. The following is declared in header file Rinternals.h.</p>
<dl>
<dt><a href="" id="index-R_005forderVector"></a>Function: <em>void</em> <strong>R_orderVector</strong> <em>(int* indx, int n, SEXP arglist, Rboolean nalast, Rboolean decreasing)</em><br />
<a href="" id="index-R_005forderVector1"></a>Function: <em>void</em> <strong>R_orderVector1</strong> <em>(int* indx, int n, SEXP x, Rboolean nalast, Rboolean decreasing)</em></dt>
<dd><p><code class="calibre2">R_orderVector()</code> corresponds to R’s <code class="calibre2">order(..., na.last, decreasing)</code>. More specifically, <code class="calibre2">indx &lt;- order(x, y, na.last, decreasing)</code> corresponds to <code class="calibre2">R_orderVector(indx, n, Rf_lang2(x, y), nalast, decreasing)</code> and for three vectors, <code class="calibre2">Rf_lang3(x,y,z)</code> is used as arglist.</p>
<p>Both <code class="calibre2">R_orderVector</code> and <code class="calibre2">R_orderVector1</code> assume the vector <code class="calibre2">indx</code> to be allocated to length &gt;= n. On return, <code class="calibre2">indx[]</code> contains a permutation of <code class="calibre2">0:(n-1)</code>, i.e., 0-based C indices (and not 1-based R indices, as R’s <code class="calibre2">order()</code>).</p>
<p>When ordering only one vector, <code class="calibre2">R_orderVector1</code> is faster and corresponds (but is 0-based) to R’s <code class="calibre2">indx &lt;- order(x, na.last, decreasing)</code>. It was added in R 3.3.0.</p>
</dd>
</dl>
<p>All other sort routines are declared in header file R_ext/Utils.h (included by R.h) and include the following.</p>
<dl>
<dt><a href="" id="index-R_005fisort"></a>Function: <em>void</em> <strong>R_isort</strong> <em>(int* x, int n)</em><br />
<a href="" id="index-R_005frsort"></a>Function: <em>void</em> <strong>R_rsort</strong> <em>(double* x, int n)</em><br />
<a href="" id="index-R_005fcsort"></a>Function: <em>void</em> <strong>R_csort</strong> <em>(Rcomplex* x, int n)</em><br />
<a href="" id="index-rsort_005fwith_005findex"></a>Function: <em>void</em> <strong>rsort_with_index</strong> <em>(double* x, int* index, int n)</em></dt>
<dd><p>The first three sort integer, real (double) and complex data respectively. (Complex numbers are sorted by the real part first then the imaginary part.) <code class="calibre2">NA</code>s are sorted last.</p>
<p><code class="calibre2">rsort_with_index</code> sorts on x, and applies the same permutation to index. <code class="calibre2">NA</code>s are sorted last.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-revsort"></a>Function: <em>void</em> <strong>revsort</strong> <em>(double* x, int* index, int n)</em></dt>
<dd><p>Is similar to <code class="calibre2">rsort_with_index</code> but sorts into decreasing order, and <code class="calibre2">NA</code>s are not handled.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-iPsort"></a>Function: <em>void</em> <strong>iPsort</strong> <em>(int* x, int n, int k)</em><br />
<a href="" id="index-rPsort"></a>Function: <em>void</em> <strong>rPsort</strong> <em>(double* x, int n, int k)</em><br />
<a href="" id="index-cPsort"></a>Function: <em>void</em> <strong>cPsort</strong> <em>(Rcomplex* x, int n, int k)</em></dt>
<dd><p>These all provide (very) partial sorting: they permute x so that <code class="calibre2">x[k]</code> is in the correct place with smaller values to the left, larger ones to the right.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-R_005fqsort"></a>Function: <em>void</em> <strong>R_qsort</strong> <em>(double *v, size_t i, size_t j)</em><br />
<a href="" id="index-R_005fqsort_005fI"></a>Function: <em>void</em> <strong>R_qsort_I</strong> <em>(double *v, int *I, int i, int j)</em><br />
<a href="" id="index-R_005fqsort_005fint"></a>Function: <em>void</em> <strong>R_qsort_int</strong> <em>(int *iv, size_t i, size_t j)</em><br />
<a href="" id="index-R_005fqsort_005fint_005fI"></a>Function: <em>void</em> <strong>R_qsort_int_I</strong> <em>(int *iv, int *I, int i, int j)</em></dt>
<dd><p>These routines sort <code class="calibre2">v[i:j]</code> or <code class="calibre2">iv[i:j]</code> (using 1-indexing, i.e., <code class="calibre2">v[1]</code> is the first element) calling the quicksort algorithm as used by R’s <code class="calibre2">sort(v, method = &quot;quick&quot;)</code> and documented on the help page for the R function <code class="calibre2">sort</code>. The <code class="calibre2">..._I()</code> versions also return the <code class="calibre2">sort.index()</code> vector in <code class="calibre2">I</code>. Note that the ordering is <em>not</em> stable, so tied values may be permuted.</p>
<p>Note that <code class="calibre2">NA</code>s are not handled (explicitly) and you should use different sorting functions if <code class="calibre2">NA</code>s can be present.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-qsort4"></a>Function: <em>subroutine</em> <strong>qsort4</strong> <em>(double precision v, integer indx, integer ii, integer jj)</em><br />
<a href="" id="index-qsort3"></a>Function: <em>subroutine</em> <strong>qsort3</strong> <em>(double precision v, integer ii, integer jj)</em></dt>
<dd><p>The FORTRAN interface routines for sorting double precision vectors are <code class="calibre2">qsort3</code> and <code class="calibre2">qsort4</code>, equivalent to <code class="calibre2">R_qsort</code> and <code class="calibre2">R_qsort_I</code>, respectively.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-R_005fmax_005fcol"></a>Function: <em>void</em> <strong>R_max_col</strong> <em>(double* matrix, int* nr, int* nc, int* maxes, int* ties_meth)</em></dt>
<dd><p>Given the nr by nc matrix <code class="calibre2">matrix</code> in column-major (“FORTRAN”) order, <code class="calibre2">R_max_col()</code> returns in <code class="calibre2">maxes[i-1]</code> the column number of the maximal element in the i-th row (the same as R’s <code class="calibre2">max.col()</code> function). In the case of ties (multiple maxima), <code class="calibre2">*ties_meth</code> is an integer code in <code class="calibre2">1:3</code> determining the method: 1 = “random”, 2 = “first” and 3 = “last”. See R’s help page <code class="calibre2">?max.col</code>.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-findInterval"></a>Function: <em>int</em> <strong>findInterval</strong> <em>(double* xt, int n, double x, Rboolean rightmost_closed, Rboolean all_inside, int ilo, int* mflag)</em><br />
<a href="" id="index-findInterval2_0028double_002a"></a>Function: <em>int</em> <strong>findInterval2(double*</strong> <em>xt, int n, double x, Rboolean rightmost_closed, Rboolean all_inside, Rboolean left_open, int ilo, int* mflag)</em></dt>
<dd><p>Given the ordered vector xt of length n, return the interval or index of x in <code class="calibre2">xt[]</code>, typically max(<em>i</em>; 1 &lt;= i &lt;= n &amp; <em>xt[i]</em> &lt;= x) where we use 1-indexing as in R and FORTRAN (but not C). If rightmost_closed is true, also returns <em>n-1</em> if x equals <em>xt[n]</em>. If all_inside is not 0, the result is coerced to lie in <code class="calibre2">1:(n-1)</code> even when x is outside the xt[] range. On return, <code class="calibre2">*mflag</code> equals <em>-1</em> if x &lt; xt[1], <em>+1</em> if x &gt;= xt[n], and 0 otherwise.</p>
<p>The algorithm is particularly fast when ilo is set to the last result of <code class="calibre2">findInterval()</code> and x is a value of a sequence which is increasing or decreasing for subsequent calls.</p>
<p><code class="calibre2">findInterval2()</code> is a generalization of <code class="calibre2">findInterval()</code>, with an extra <code class="calibre2">Rboolean</code> argument left_open. Setting <code class="calibre2">left_open = TRUE</code> basically replaces all left-closed right-open intervals t) by left-open ones t], see the help page of R function <code class="calibre2">findInterval</code> for details.</p>
<p>There is also an <code class="calibre2">F77_CALL(interv)()</code> version of <code class="calibre2">findInterval()</code> with the same arguments, but all pointers.</p>
</dd>
</dl>
<p>A system-independent interface to produce the name of a temporary file is provided as</p>
<dl>
<dt><a href="" id="index-R_005ftmpnam"></a>Function: <em>char *</em> <strong>R_tmpnam</strong> <em>(const char *prefix, const char *tmpdir)</em><br />
<a href="" id="index-R_005ftmpnam2"></a>Function: <em>char *</em> <strong>R_tmpnam2</strong> <em>(const char *prefix, const char *tmpdir, const char *fileext)</em></dt>
<dd><p>Return a pathname for a temporary file with name beginning with prefix and ending with fileext in directory tmpdir. A <code class="calibre2">NULL</code> prefix or extension is replaced by <code class="calibre2">&quot;&quot;</code>. Note that the return value is <code class="calibre2">malloc</code>ed and should be <code class="calibre2">free</code>d when no longer needed (unlike the system call <code class="calibre2">tmpnam</code>).</p>
</dd>
</dl>
<p>There is also the internal function used to expand file names in several R functions, and called directly by <code class="calibre2">path.expand</code>.</p>
<dl>
<dt><a href="" id="index-R_005fExpandFileName"></a>Function: <em>const char *</em> <strong>R_ExpandFileName</strong> <em>(const char *fn)</em></dt>
<dd><p>Expand a path name fn by replacing a leading tilde by the user’s home directory (if defined). The precise meaning is platform-specific; it will usually be taken from the environment variable <code class="calibre2">HOME</code> if this is defined.</p>
</dd>
</dl>
<p>For historical reasons there are FORTRAN interfaces to functions <code class="calibre2">D1MACH</code> and <code class="calibre2">I1MACH</code>. These can be called from C code as e.g. <code class="calibre2">F77_CALL(d1mach)(4)</code>. Note that these are emulations of the original functions by Fox, Hall and Schryer on NetLib at <a href="http://www.netlib.org/slatec/src/" class="uri">http://www.netlib.org/slatec/src/</a> for IEC 60559 arithmetic (required by R).</p>
<hr />
<p><a href="" id="Re_002dencoding"></a> <a href="" id="Re_002dencoding-1"></a></p>
<h3 id="re-encoding" class="section">6.11 Re-encoding</h3>
<p>R has its own C-level interface to the encoding conversion capabilities provided by <code class="calibre2">iconv</code> because there are incompatibilities between the declarations in different implementations of <code class="calibre2">iconv</code>.</p>
<p>These are declared in header file R_ext/Riconv.h.</p>
<p><a href="" id="index-Riconv_005fopen"></a>Function: <em>void *</em> <strong>Riconv_open</strong> <em>(const char *to, const char *from)</em></p>
<p>Set up a pointer to an encoding object to be used to convert between two encodings: <code class="calibre2">&quot;&quot;</code> indicates the current locale.</p>
<p><a href="" id="index-Riconv"></a>Function: <em>size_t</em> <strong>Riconv</strong> <em>(void *cd, const char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft)</em></p>
<p>Convert as much as possible of <code class="calibre2">inbuf</code> to <code class="calibre2">outbuf</code>. Initially the <code class="calibre2">int</code> variables indicate the number of bytes available in the buffers, and they are updated (and the <code class="calibre2">char</code> pointers are updated to point to the next free byte in the buffer). The return value is the number of characters converted, or <code class="calibre2">(size_t)-1</code> (beware: <code class="calibre2">size_t</code> is usually an unsigned type). It should be safe to assume that an error condition sets <code class="calibre2">errno</code> to one of <code class="calibre2">E2BIG</code> (the output buffer is full), <code class="calibre2">EILSEQ</code> (the input cannot be converted, and might be invalid in the encoding specified) or <code class="calibre2">EINVAL</code> (the input does not end with a complete multi-byte character).</p>
<p><a href="" id="index-Riconv_005fclose"></a>Function: <em>int</em> <strong>Riconv_close</strong> <em>(void * cd)</em></p>
<p>Free the resources of an encoding object.</p>
<hr />
<p><a href="" id="Allowing-interrupts"></a> <a href="" id="Allowing-interrupts-1"></a></p>
<h3 id="allowing-interrupts" class="section">6.12 Allowing interrupts</h3>
<p><a href="" id="index-Interrupts"></a></p>
<p>No port of R can be interrupted whilst running long computations in compiled code, so programmers should make provision for the code to be interrupted at suitable points by calling from C</p>
<div class="example">
<pre class="example1"><code>#include &lt;R_ext/Utils.h&gt;

void R_CheckUserInterrupt(void);</code></pre>
</div>
<p>and from FORTRAN</p>
<div class="example">
<pre class="example1"><code>subroutine rchkusr()</code></pre>
</div>
<p>These check if the user has requested an interrupt, and if so branch to R’s error handling functions.</p>
<p>Note that it is possible that the code behind one of the entry points defined here if called from your C or FORTRAN code could be interruptible or generate an error and so not return to your code.</p>
<hr />
<p><a href="" id="Platform-and-version-information"></a> <a href="" id="Platform-and-version-information-1"></a></p>
<h3 id="platform-and-version-information" class="section">6.13 Platform and version information</h3>
<p><a href="" id="index-Version-information-from-C"></a> <a href="" id="index-OpenMP-1"></a> <a href="" id="index-R_005fVersion"></a></p>
<p>The header files define <code class="calibre2">USING_R</code>, which can be used to test if the code is indeed being used with R.</p>
<p>Header file Rconfig.h (included by R.h) is used to define platform-specific macros that are mainly for use in other header files. The macro <code class="calibre2">WORDS_BIGENDIAN</code> is defined on big-endian<a href="R-exts_split_014.html#FOOT141" id="DOCF141"><sup>141</sup></a> systems (e.g. most OSes on Sparc and PowerPC hardware) and not on little-endian systems (nowadays all the commoner R platforms). It can be useful when manipulating binary files. NB: these macros apply only to the C compiler used to build R, not necessarily to another C or C++ compiler.</p>
<p>Header file Rversion.h (<strong>not</strong> included by R.h) defines a macro <code class="calibre2">R_VERSION</code> giving the version number encoded as an integer, plus a macro <code class="calibre2">R_Version</code> to do the encoding. This can be used to test if the version of R is late enough, or to include back-compatibility features. For protection against very old versions of R which did not have this macro, use a construction such as</p>
<div class="example">
<pre class="example1"><code>#if defined(R_VERSION) &amp;&amp; R_VERSION &gt;= R_Version(3, 1, 0)
  ...
#endif</code></pre>
</div>
<p>More detailed information is available in the macros <code class="calibre2">R_MAJOR</code>, <code class="calibre2">R_MINOR</code>, <code class="calibre2">R_YEAR</code>, <code class="calibre2">R_MONTH</code> and <code class="calibre2">R_DAY</code>: see the header file Rversion.h for their format. Note that the minor version includes the patchlevel (as in ‘2.2’).</p>
<p>Packages which use <code class="calibre2">alloca</code> need to ensure it is defined: as it is part of neither C nor POSIX there is no standard way to do so. One can use</p>
<div class="example">
<pre class="example1"><code>#include &lt;Rconfig.h&gt; // for HAVE_ALLOCA_H
#ifdef __GNUC__
// this covers gcc, clang, icc
# undef alloca
# define alloca(x) __builtin_alloca((x))
#elif defined(HAVE_ALLOCA_H)
// needed for native compilers on Solaris and AIX
# include &lt;alloca.h&gt;
#endif</code></pre>
</div>
<p>(and this should be included before standard C headers such as stdlib.h, since on some platforms these include malloc.h which may have a conflicting definition), which suffices for known R platforms.</p>
<hr />
<p><a href="" id="Inlining-C-functions"></a> <a href="" id="Inlining-C-functions-1"></a></p>
<h3 id="inlining-c-functions" class="section">6.14 Inlining C functions</h3>
<p><a href="" id="index-R_005fINLINE"></a></p>
<p>The C99 keyword <code class="calibre2">inline</code> should be recognized by all compilers nowadays used to build R. Portable code which might be used with earlier versions of R can be written using the macro <code class="calibre2">R_INLINE</code> (defined in file Rconfig.h included by R.h), as for example from package <a href="https://CRAN.R-project.org/package=cluster"><strong>cluster</strong></a></p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;

static R_INLINE int ind_2(int l, int j)
{
...
}</code></pre>
</div>
<p>Be aware that using inlining with functions in more than one compilation unit is almost impossible to do portably, see <a href="http://www.greenend.org.uk/rjk/2003/03/inline.html" class="uri">http://www.greenend.org.uk/rjk/2003/03/inline.html</a>, so this usage is for <code class="calibre2">static</code> functions as in the example. All the R configure code has checked is that <code class="calibre2">R_INLINE</code> can be used in a single C file with the compiler used to build R. We recommend that packages making extensive use of inlining include their own configure code.</p>
<hr />
<p><a href="" id="Controlling-visibility"></a> <a href="" id="Controlling-visibility-1"></a></p>
<h3 id="controlling-visibility" class="section">6.15 Controlling visibility</h3>
<p><a href="" id="index-Visibility"></a></p>
<p>Header R_ext/Visibility.h has some definitions for controlling the visibility of entry points. These are only effective when ‘HAVE_VISIBILITY_ATTRIBUTE’ is defined – this is checked when R is configured and recorded in header Rconfig.h (included by R_ext/Visibility.h). It is often defined on modern Unix-alikes with a recent compiler<a href="R-exts_split_014.html#FOOT142" id="DOCF142"><sup>142</sup></a>, but not supported on macOS nor Windows. Minimizing the visibility of symbols in a shared library will both speed up its loading (unlikely to be significant) and reduce the possibility of linking to other entry points of the same name.</p>
<p>C/C++ entry points prefixed by <code class="calibre2">attribute_hidden</code> will not be visible in the shared object. There is no comparable mechanism for FORTRAN entry points, but there is a more comprehensive scheme used by, for example package <strong>stats</strong>. Most compilers which allow control of visibility will allow control of visibility for all symbols <em>via</em> a flag, and where known the flag is encapsulated in the macros ‘C_VISIBILITY’ and <code class="calibre2">F77_VISIBILITY</code> for C and FORTRAN compilers. These are defined in etc/Makeconf and so available for normal compilation of package code. For example, src/Makevars could include</p>
<div class="example">
<pre class="example1"><code>PKG_CFLAGS=$(C_VISIBILITY)
PKG_FFLAGS=$(F77_VISIBILITY)</code></pre>
</div>
<p>This would end up with <strong>no</strong> visible entry points, which would be pointless. However, the effect of the flags can be overridden by using the <code class="calibre2">attribute_visible</code> prefix. A shared object which registers its entry points needs only for have one visible entry point, its initializer, so for example package <strong>stats</strong> has</p>
<div class="example">
<pre class="example1"><code>void attribute_visible R_init_stats(DllInfo *dll)
{
    R_registerRoutines(dll, CEntries, CallEntries, FortEntries, NULL);
    R_useDynamicSymbols(dll, FALSE);
...
}</code></pre>
</div>
<p>The visibility mechanism is not available on Windows, but there is an equally effective way to control which entry points are visible, by supplying a definitions file pkgnme/src/pkgname-win.def: only entry points listed in that file will be visible. Again using <strong>stats</strong> as an example, it has</p>
<div class="example">
<pre class="example1"><code>LIBRARY stats.dll
EXPORTS
 R_init_stats</code></pre>
</div>
<hr />
<p><a href="" id="Standalone-Mathlib"></a> <a href="" id="Using-these-functions-in-your-own-C-code"></a></p>
<h3 id="using-these-functions-in-your-own-c-code" class="section">6.16 Using these functions in your own C code</h3>
<p>It is possible to build <code class="calibre2">Mathlib</code>, the R set of mathematical functions documented in Rmath.h, as a standalone library libRmath under both Unix-alikes and Windows. (This includes the functions documented in <a href="#Numerical-analysis-subroutines">Numerical analysis subroutines</a> as from that header file.)</p>
<p>The library is not built automatically when R is installed, but can be built in the directory src/nmath/standalone in the R sources: see the file README there. To use the code in your own C program include</p>
<div class="example">
<pre class="example1"><code>#define MATHLIB_STANDALONE
#include &lt;Rmath.h&gt;</code></pre>
</div>
<p>and link against ‘-lRmath’ (and perhaps ‘-lm’). There is an example file test.c.</p>
<p>A little care is needed to use the random-number routines. You will need to supply the uniform random number generator</p>
<div class="example">
<pre class="example1"><code>double unif_rand(void)</code></pre>
</div>
<p>or use the one supplied (and with a dynamic library or DLL you will have to use the one supplied, which is the Marsaglia-multicarry with an entry points</p>
<div class="example">
<pre class="example1"><code>set_seed(unsigned int, unsigned int)</code></pre>
</div>
<p>to set its seeds and</p>
<div class="example">
<pre class="example1"><code>get_seed(unsigned int *, unsigned int *)</code></pre>
</div>
<p>to read the seeds).</p>
<hr />
<p><a href="" id="Organization-of-header-files"></a> <a href="" id="Organization-of-header-files-1"></a></p>
<h3 id="organization-of-header-files" class="section">6.17 Organization of header files</h3>
<p>The header files which R installs are in directory R_INCLUDE_DIR (default R_HOME/include). This currently includes</p>
<blockquote>
<table>
<tbody>
<tr class="odd">
<td align="left">R.h</td>
<td align="left">includes many other files</td>
</tr>
<tr class="even">
<td align="left">S.h</td>
<td align="left">different version for code ported from S</td>
</tr>
<tr class="odd">
<td align="left">Rinternals.h</td>
<td align="left">definitions for using R’s internal structures</td>
</tr>
<tr class="even">
<td align="left">Rdefines.h</td>
<td align="left">macros for an S-like interface to the above (no longer maintained)</td>
</tr>
<tr class="odd">
<td align="left">Rmath.h</td>
<td align="left">standalone math library</td>
</tr>
<tr class="even">
<td align="left">Rversion.h</td>
<td align="left">R version information</td>
</tr>
<tr class="odd">
<td align="left">Rinterface.h</td>
<td align="left">for add-on front-ends (Unix-alikes only)</td>
</tr>
<tr class="even">
<td align="left">Rembedded.h</td>
<td align="left">for add-on front-ends</td>
</tr>
<tr class="odd">
<td align="left">R_ext/Applic.h</td>
<td align="left">optimization and integration</td>
</tr>
<tr class="even">
<td align="left">R_ext/BLAS.h</td>
<td align="left">C definitions for BLAS routines</td>
</tr>
<tr class="odd">
<td align="left">R_ext/Callbacks.h</td>
<td align="left">C (and R function) top-level task handlers</td>
</tr>
<tr class="even">
<td align="left">R_ext/GetX11Image.h</td>
<td align="left">X11Image interface used by package <strong>trkplot</strong></td>
</tr>
<tr class="odd">
<td align="left">R_ext/Lapack.h</td>
<td align="left">C definitions for some LAPACK routines</td>
</tr>
<tr class="even">
<td align="left">R_ext/Linpack.h</td>
<td align="left">C definitions for some LINPACK routines, not all of which are included in R</td>
</tr>
<tr class="odd">
<td align="left">R_ext/Parse.h</td>
<td align="left">a small part of R’s parse interface: not part of the stable API.</td>
</tr>
<tr class="even">
<td align="left">R_ext/RStartup.h</td>
<td align="left">for add-on front-ends</td>
</tr>
<tr class="odd">
<td align="left">R_ext/Rdynload.h</td>
<td align="left">needed to register compiled code in packages</td>
</tr>
<tr class="even">
<td align="left">R_ext/R-ftp-http.h</td>
<td align="left">interface to internal method of <code class="calibre2">download.file</code></td>
</tr>
<tr class="odd">
<td align="left">R_ext/Riconv.h</td>
<td align="left">interface to <code class="calibre2">iconv</code></td>
</tr>
<tr class="even">
<td align="left">R_ext/Visibility.h</td>
<td align="left">definitions controlling visibility</td>
</tr>
<tr class="odd">
<td align="left">R_ext/eventloop.h</td>
<td align="left">for add-on front-ends and for packages that need to share in the R event loops (not Windows)</td>
</tr>
</tbody>
</table>
</blockquote>
<p>The following headers are included by R.h:</p>
<blockquote>
<table>
<tbody>
<tr class="odd">
<td align="left">Rconfig.h</td>
<td align="left">configuration info that is made available</td>
</tr>
<tr class="even">
<td align="left">R_ext/Arith.h</td>
<td align="left">handling for <code class="calibre2">NA</code>s, <code class="calibre2">NaN</code>s, <code class="calibre2">Inf</code>/<code class="calibre2">-Inf</code></td>
</tr>
<tr class="odd">
<td align="left">R_ext/Boolean.h</td>
<td align="left"><code class="calibre2">TRUE</code>/<code class="calibre2">FALSE</code> type</td>
</tr>
<tr class="even">
<td align="left">R_ext/Complex.h</td>
<td align="left">C typedefs for R’s <code class="calibre2">complex</code></td>
</tr>
<tr class="odd">
<td align="left">R_ext/Constants.h</td>
<td align="left">constants</td>
</tr>
<tr class="even">
<td align="left">R_ext/Error.h</td>
<td align="left">error handling</td>
</tr>
<tr class="odd">
<td align="left">R_ext/Memory.h</td>
<td align="left">memory allocation</td>
</tr>
<tr class="even">
<td align="left">R_ext/Print.h</td>
<td align="left"><code class="calibre2">Rprintf</code> and variations.</td>
</tr>
<tr class="odd">
<td align="left">R_ext/RS.h</td>
<td align="left">definitions common to R.h and S.h, including <code class="calibre2">F77_CALL</code> etc.</td>
</tr>
<tr class="even">
<td align="left">R_ext/Random.h</td>
<td align="left">random number generation</td>
</tr>
<tr class="odd">
<td align="left">R_ext/Utils.h</td>
<td align="left">sorting and other utilities</td>
</tr>
<tr class="even">
<td align="left">R_ext/libextern.h</td>
<td align="left">definitions for exports from R.dll on Windows.</td>
</tr>
</tbody>
</table>
</blockquote>
<p>The graphics systems are exposed in headers R_ext/GraphicsEngine.h, R_ext/GraphicsDevice.h (which it includes) and R_ext/QuartzDevice.h. Facilities for defining custom connection implementations are provided in R_ext/Connections.h, but make sure you consult the file before use.</p>
<p>Let us re-iterate the advice to include system headers before the R header files, especially Rinternals.h (included by Rdefines.h) and Rmath.h, which redefine names which may be used in system headers (fewer if ‘R_NO_REMAP’ is defined, or ‘R_NO_REMAP_RMATH’ for Rmath.h).</p>
<hr />
<p><a href="" id="Generic-functions-and-methods"></a> <a href="" id="Generic-functions-and-methods-1"></a></p>
<div id="calibre_pb_16" class="calibre6">

</div>

<!--chapter:end:10-R-exts.Rmd-->

#  Generic functions and methods
<p><a href="" id="index-Generic-functions"></a> <a href="" id="index-Method-functions"></a></p>
<p>R programmers will often want to add methods for existing generic functions, and may want to add new generic functions or make existing functions generic. In this chapter we give guidelines for doing so, with examples of the problems caused by not adhering to them.</p>
<p>This chapter only covers the ‘informal’ class system copied from S3, and not with the S4 (formal) methods of package <strong>methods</strong>.</p>
<p>First, a <em>caveat</em>: a function named <code class="calibre2">gen.cl</code> will be invoked by the generic <code class="calibre2">gen</code> for class <code class="calibre2">cl</code>, so do not name functions in this style unless they are intended to be methods.</p>
<p>The key function for methods is <code class="calibre2">NextMethod</code>, which dispatches the next method. It is quite typical for a method function to make a few changes to its arguments, dispatch to the next method, receive the results and modify them a little. An example is</p>
<div class="example">
<pre class="example1"><code>t.data.frame &lt;- function(x)
{
    x &lt;- as.matrix(x)
    NextMethod(&quot;t&quot;)
}</code></pre>
</div>
<p>Note that the example above works because there is a <em>next</em> method, the default method, not that a new method is selected when the class is changed.</p>
<p><em>Any</em> method a programmer writes may be invoked from another method by <code class="calibre2">NextMethod</code>, <em>with the arguments appropriate to the previous method</em>. Further, the programmer cannot predict which method <code class="calibre2">NextMethod</code> will pick (it might be one not yet dreamt of), and the end user calling the generic needs to be able to pass arguments to the next method. For this to work</p>
<blockquote>
<p><em>A method must have all the arguments of the generic, including <code class="calibre2">…</code> if the generic does.</em></p>
</blockquote>
<p>It is a grave misunderstanding to think that a method needs only to accept the arguments it needs. The original S version of <code class="calibre2">predict.lm</code> did not have a <code class="calibre2">…</code> argument, although <code class="calibre2">predict</code> did. It soon became clear that <code class="calibre2">predict.glm</code> needed an argument <code class="calibre2">dispersion</code> to handle over-dispersion. As <code class="calibre2">predict.lm</code> had neither a <code class="calibre2">dispersion</code> nor a <code class="calibre2">…</code> argument, <code class="calibre2">NextMethod</code> could no longer be used. (The legacy, two direct calls to <code class="calibre2">predict.lm</code>, lives on in <code class="calibre2">predict.glm</code> in R, which is based on the workaround for S3 written by Venables &amp; Ripley.)</p>
<p>Further, the user is entitled to use positional matching when calling the generic, and the arguments to a method called by <code class="calibre2">UseMethod</code> are those of the call to the generic. Thus</p>
<blockquote>
<p><em>A method must have arguments in exactly the same order as the generic.</em></p>
</blockquote>
<p>To see the scale of this problem, consider the generic function <code class="calibre2">scale</code>, defined as</p>
<div class="example">
<pre class="example1"><code>scale &lt;- function (x, center = TRUE, scale = TRUE)
    UseMethod(&quot;scale&quot;)</code></pre>
</div>
<p>Suppose an unthinking package writer created methods such as</p>
<div class="example">
<pre class="example1"><code>scale.foo &lt;- function(x, scale = FALSE, ...) { }</code></pre>
</div>
<p>Then for <code class="calibre2">x</code> of class <code class="calibre2">&quot;foo&quot;</code> the calls</p>
<div class="example">
<pre class="example1"><code>scale(x, , TRUE)
scale(x, scale = TRUE)</code></pre>
</div>
<p>would do most likely do different things, to the justifiable consternation of the end user.</p>
<p>To add a further twist, which default is used when a user calls <code class="calibre2">scale(x)</code> in our example? What if</p>
<div class="example">
<pre class="example1"><code>scale.bar &lt;- function(x, center, scale = TRUE) NextMethod(&quot;scale&quot;)</code></pre>
</div>
<p>and <code class="calibre2">x</code> has class <code class="calibre2">c(&quot;bar&quot;, &quot;foo&quot;)</code>? It is the default specified in the method that is used, but the default specified in the generic may be the one the user sees. This leads to the recommendation:</p>
<blockquote>
<p><em>If the generic specifies defaults, all methods should use the same defaults.</em></p>
</blockquote>
<p>An easy way to follow these recommendations is to always keep generics simple, e.g.</p>
<div class="example">
<pre class="example1"><code>scale &lt;- function(x, ...) UseMethod(&quot;scale&quot;)</code></pre>
</div>
<p>Only add parameters and defaults to the generic if they make sense in all possible methods implementing it.</p>
<hr />
<p><a href="" id="Adding-new-generics"></a> <a href="" id="Adding-new-generics-1"></a></p>
<h3 id="adding-new-generics" class="section">7.1 Adding new generics</h3>
<p>When creating a new generic function, bear in mind that its argument list will be the maximal set of arguments for methods, including those written elsewhere years later. So choosing a good set of arguments may well be an important design issue, and there need to be good arguments <em>not</em> to include a <code class="calibre2">…</code> argument.</p>
<p>If a <code class="calibre2">…</code> argument is supplied, some thought should be given to its position in the argument sequence. Arguments which follow <code class="calibre2">…</code> must be named in calls to the function, and they must be named in full (partial matching is suppressed after <code class="calibre2">…</code>). Formal arguments before <code class="calibre2">…</code> can be partially matched, and so may ‘swallow’ actual arguments intended for <code class="calibre2">…</code>. Although it is commonplace to make the <code class="calibre2">…</code> argument the last one, that is not always the right choice.</p>
<p>Sometimes package writers want to make generic a function in the base package, and request a change in R. This may be justifiable, but making a function generic with the old definition as the default method does have a small performance cost. It is never necessary, as a package can take over a function in the base package and make it generic by something like</p>
<div class="example">
<pre class="example1"><code>foo &lt;- function(object, ...) UseMethod(&quot;foo&quot;)
foo.default &lt;- function(object, ...) base::foo(object)</code></pre>
</div>
<p>Earlier versions of this manual suggested assigning <code class="calibre2">foo.default &lt;- base::foo</code>. This is <strong>not</strong> a good idea, as it captures the base function at the time of installation and it might be changed as R is patched or updated.</p>
<p>The same idea can be applied for functions in other packages with namespaces.</p>
<hr />
<p><a href="" id="Linking-GUIs-and-other-front_002dends-to-R"></a> <a href="" id="Linking-GUIs-and-other-front_002dends-to-R-1"></a></p>
<div id="calibre_pb_18" class="calibre6">

</div>

<!--chapter:end:11-R-exts.Rmd-->

#  Linking GUIs and other front-ends to R
<p>There are a number of ways to build front-ends to R: we take this to mean a GUI or other application that has the ability to submit commands to R and perhaps to receive results back (not necessarily in a text format). There are other routes besides those described here, for example the package <a href="https://CRAN.R-project.org/package=Rserve"><strong>Rserve</strong></a> (from CRAN, see also <a href="https://www.rforge.net/Rserve/" class="uri">https://www.rforge.net/Rserve/</a>) and connections to Java in ‘JRI’ (part of the <a href="https://CRAN.R-project.org/package=rJava"><strong>rJava</strong></a> package on CRAN) and the Omegahat/Bioconductor package ‘SJava’.</p>
<p>Note that the APIs described in this chapter are only intended to be used in an alternative front-end: they are not part of the API made available for R packages and can be dangerous to use in a conventional package (although packages may contain alternative front-ends). Conversely some of the functions from the API (such as <code class="calibre2">R_alloc</code>) should not be used in front-ends.</p>
<hr />
<p><a href="" id="Embedding-R-under-Unix_002dalikes"></a> <a href="" id="Embedding-R-under-Unix_002dalikes-1"></a></p>
<h3 id="embedding-r-under-unix-alikes" class="section">8.1 Embedding R under Unix-alikes</h3>
<p>R can be built as a shared library<a href="R-exts_split_014.html#FOOT143" id="DOCF143"><sup>143</sup></a> if configured with --enable-R-shlib. This shared library can be used to run R from alternative front-end programs. We will assume this has been done for the rest of this section. Also, it can be built as a static library if configured with --enable-R-static-lib, and that can be used in a very similar way (at least on Linux: on other platforms one needs to ensure that all the symbols exported by libR.a are linked into the front-end).</p>
<p>The command-line R front-end, R_HOME/bin/exec/R, is one such example, and the former GNOME (see package <strong>gnomeGUI</strong> on CRAN’s ‘Archive’ area) and macOS consoles are others. The source for R_HOME/bin/exec/R is in file src/main/Rmain.c and is very simple</p>
<div class="example">
<pre class="example1"><code>int Rf_initialize_R(int ac, char **av); /* in ../unix/system.c */
void Rf_mainloop();                     /* in main.c */

extern int R_running_as_main_program;   /* in ../unix/system.c */

int main(int ac, char **av)
{
    R_running_as_main_program = 1;
    Rf_initialize_R(ac, av);
    Rf_mainloop(); /* does not return */
    return 0;
}</code></pre>
</div>
<p>indeed, misleadingly simple. Remember that R_HOME/bin/exec/R is run from a shell script R_HOME/bin/R which sets up the environment for the executable, and this is used for</p>
<ul>
<li>Setting <code class="calibre2">R_HOME</code> and checking it is valid, as well as the path <code class="calibre2">R_SHARE_DIR</code> and <code class="calibre2">R_DOC_DIR</code> to the installed share and doc directory trees. Also setting <code class="calibre2">R_ARCH</code> if needed.</li>
<li>Setting <code class="calibre2">LD_LIBRARY_PATH</code> to include the directories used in linking R. This is recorded as the default setting of <code class="calibre2">R_LD_LIBRARY_PATH</code> in the shell script R_HOME/etcR_ARCH/ldpaths.</li>
<li>Processing some of the arguments, for example to run R under a debugger and to launch alternative front-ends to provide GUIs.</li>
</ul>
<p>The first two of these can be achieved for your front-end by running it <em>via</em> <code class="calibre2">R CMD</code>. So, for example</p>
<div class="example">
<pre class="example1"><code>R CMD /usr/local/lib/R/bin/exec/R
R CMD exec/R</code></pre>
</div>
<p>will both work in a standard R installation. (<code class="calibre2">R CMD</code> looks first for executables in R_HOME/bin. These command-lines need modification if a sub-architecture is in use.) If you do not want to run your front-end in this way, you need to ensure that <code class="calibre2">R_HOME</code> is set and <code class="calibre2">LD_LIBRARY_PATH</code> is suitable. (The latter might well be, but modern Unix/Linux systems do not normally include /usr/local/lib (/usr/local/lib64 on some architectures), and R does look there for system components.)</p>
<p>The other senses in which this example is too simple are that all the internal defaults are used and that control is handed over to the R main loop. There are a number of small examples<a href="R-exts_split_014.html#FOOT144" id="DOCF144"><sup>144</sup></a> in the tests/Embedding directory. These make use of <code class="calibre2">Rf_initEmbeddedR</code> in src/main/Rembedded.c, and essentially use</p>
<div class="example">
<pre class="example1"><code>#include &lt;Rembedded.h&gt;

int main(int ac, char **av)
{
    /* do some setup */
    Rf_initEmbeddedR(argc, argv);
    /* do some more setup */

    /* submit some code to R, which is done interactively via
        run_Rmainloop();

        A possible substitute for a pseudo-console is

        R_ReplDLLinit();
        while(R_ReplDLLdo1() &gt; 0) {
        /* add user actions here if desired */
       }

     */
    Rf_endEmbeddedR(0);
    /* final tidying up after R is shutdown */
    return 0;
}</code></pre>
</div>
<p>If you do not want to pass R arguments, you can fake an <code class="calibre2">argv</code> array, for example by</p>
<div class="example">
<pre class="example1"><code>    char *argv[]= {&quot;REmbeddedPostgres&quot;, &quot;--silent&quot;};
    Rf_initEmbeddedR(sizeof(argv)/sizeof(argv[0]), argv);</code></pre>
</div>
<p>However, to make a GUI we usually do want to run <code class="calibre2">run_Rmainloop</code> after setting up various parts of R to talk to our GUI, and arranging for our GUI callbacks to be called during the R mainloop.</p>
<p>One issue to watch is that on some platforms <code class="calibre2">Rf_initEmbeddedR</code> and <code class="calibre2">Rf_endEmbeddedR</code> change the settings of the FPU (e.g. to allow errors to be trapped and to make use of extended precision registers).</p>
<p>The standard code sets up a session temporary directory in the usual way, <em>unless</em> <code class="calibre2">R_TempDir</code> is set to a non-NULL value before <code class="calibre2">Rf_initEmbeddedR</code> is called. In that case the value is assumed to contain an existing writable directory (no check is done), and it is not cleaned up when R is shut down.</p>
<p><code class="calibre2">Rf_initEmbeddedR</code> sets R to be in interactive mode: you can set <code class="calibre2">R_Interactive</code> (defined in Rinterface.h) subsequently to change this.</p>
<p>Note that R expects to be run with the locale category ‘LC_NUMERIC’ set to its default value of <code class="calibre2">C</code>, and so should not be embedded into an application which changes that.</p>
<p>It is the user’s responsibility to attempt to initialize only once. To protect the R interpreter, <code class="calibre2">Rf_initialize_R</code> will exit the process if re-initialization is attempted.</p>
<hr />
<p><a href="" id="Compiling-against-the-R-library"></a> <a href="" id="Compiling-against-the-R-library-1"></a></p>
<h4 id="compiling-against-the-r-library" class="subsection">8.1.1 Compiling against the R library</h4>
<p>Suitable flags to compile and link against the R (shared or static) library can be found by</p>
<div class="example">
<pre class="example1"><code>R CMD config --cppflags
R CMD config --ldflags</code></pre>
</div>
<p>(These apply only to an uninstalled copy or a standard install.)</p>
<p>If R is installed, <code class="calibre2">pkg-config</code> is available and neither sub-architectures nor a macOS framework have been used, alternatives for a shared R library are</p>
<div class="example">
<pre class="example1"><code>pkg-config --cflags libR
pkg-config --libs libR</code></pre>
</div>
<p>and for a static R library</p>
<div class="example">
<pre class="example1"><code>pkg-config --cflags libR
pkg-config --libs --static libR</code></pre>
</div>
<p>(This may work for an installed OS framework if <code class="calibre2">pkg-config</code> is taught where to look for libR.pc: it is installed inside the framework.)</p>
<p>However, a more comprehensive way is to set up a Makefile to compile the front-end. Suppose file myfe.c is to be compiled to myfe. A suitable Makefile might be</p>
<div class="example">
<pre class="example1"><code>include ${R_HOME}/etc${R_ARCH}/Makeconf
all: myfe

## The following is not needed, but avoids PIC flags.
myfe.o: myfe.c
        $(CC) $(ALL_CPPFLAGS) $(CFLAGS) -c myfe.c -o $@

## replace $(LIBR) $(LIBS) by $(STATIC_LIBR) if R was build with a static libR
myfe: myfe.o
        $(MAIN_LINK) -o $@ myfe.o $(LIBR) $(LIBS)</code></pre>
</div>
<p>invoked as</p>
<div class="example">
<pre class="example1"><code>R CMD make
R CMD myfe</code></pre>
</div>
<p>Additional flags which <code class="calibre2">$(MAIN_LINK)</code> includes are, amongst others, those to select OpenMP and --export-dynamic for the GNU linker on some platforms. In principle <code class="calibre2">$(LIBS)</code> is not needed when using a shared R library as libR is linked against those libraries, but some platforms need the executable also linked against them.</p>
<hr />
<p><a href="" id="Setting-R-callbacks"></a> <a href="" id="Setting-R-callbacks-1"></a></p>
<h4 id="setting-r-callbacks" class="subsection">8.1.2 Setting R callbacks</h4>
<p>For Unix-alikes there is a public header file Rinterface.h that makes it possible to change the standard callbacks used by R in a documented way. This defines pointers (if <code class="calibre2">R_INTERFACE_PTRS</code> is defined)</p>
<div class="example">
<pre class="example1"><code>extern void (*ptr_R_Suicide)(const char *);
extern void (*ptr_R_ShowMessage)(const char *);
extern int  (*ptr_R_ReadConsole)(const char *, unsigned char *, int, int);
extern void (*ptr_R_WriteConsole)(const char *, int);
extern void (*ptr_R_WriteConsoleEx)(const char *, int, int);
extern void (*ptr_R_ResetConsole)();
extern void (*ptr_R_FlushConsole)();
extern void (*ptr_R_ClearerrConsole)();
extern void (*ptr_R_Busy)(int);
extern void (*ptr_R_CleanUp)(SA_TYPE, int, int);
extern int  (*ptr_R_ShowFiles)(int, const char **, const char **,
                               const char *, Rboolean, const char *);
extern int  (*ptr_R_ChooseFile)(int, char *, int);
extern int  (*ptr_R_EditFile)(const char *);
extern void (*ptr_R_loadhistory)(SEXP, SEXP, SEXP, SEXP);
extern void (*ptr_R_savehistory)(SEXP, SEXP, SEXP, SEXP);
extern void (*ptr_R_addhistory)(SEXP, SEXP, SEXP, SEXP);
// added in R 3.0.0
extern int  (*ptr_R_EditFiles)(int, const char **, const char **, const char *);
extern SEXP (*ptr_do_selectlist)(SEXP, SEXP, SEXP, SEXP);
extern SEXP (*ptr_do_dataentry)(SEXP, SEXP, SEXP, SEXP);
extern SEXP (*ptr_do_dataviewer)(SEXP, SEXP, SEXP, SEXP);
extern void (*ptr_R_ProcessEvents)();</code></pre>
</div>
<p>which allow standard R callbacks to be redirected to your GUI. What these do is generally documented in the file src/unix/system.txt.</p>
<dl>
<dt><a href="" id="index-R_005fShowMessage"></a>Function: <em>void</em> <strong>R_ShowMessage</strong> <em>(char *message)</em></dt>
<dd><p>This should display the message, which may have multiple lines: it should be brought to the user’s attention immediately.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-R_005fBusy"></a>Function: <em>void</em> <strong>R_Busy</strong> <em>(int which)</em></dt>
<dd><p>This function invokes actions (such as change of cursor) when R embarks on an extended computation (<code class="calibre2">which=1</code>) and when such a state terminates (<code class="calibre2">which=0</code>).</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-R_005fReadConsole"></a>Function: <em>int</em> <strong>R_ReadConsole</strong> <em>(const char *prompt, unsigned char *buf, int buflen, int hist)</em><br />
<a href="" id="index-R_005fWriteConsole"></a>Function: <em>void</em> <strong>R_WriteConsole</strong> <em>(const char *buf, int buflen)</em><br />
<a href="" id="index-R_005fWriteConsoleEx"></a>Function: <em>void</em> <strong>R_WriteConsoleEx</strong> <em>(const char *buf, int buflen, int otype)</em><br />
<a href="" id="index-R_005fResetConsole"></a>Function: <em>void</em> <strong>R_ResetConsole</strong> <em>()</em><br />
<a href="" id="index-R_005fFlushConsole"></a>Function: <em>void</em> <strong>R_FlushConsole</strong> <em>()</em><br />
<a href="" id="index-R_005fClearErrConsole"></a>Function: <em>void</em> <strong>R_ClearErrConsole</strong> <em>()</em></dt>
<dd><p>These functions interact with a console.</p>
<p><code class="calibre2">R_ReadConsole</code> prints the given prompt at the console and then does a <code class="calibre2">fgets(3)</code>–like operation, transferring up to buflen characters into the buffer buf. The last two bytes should be set to ‘&quot;\n\0&quot;’ to preserve sanity. If hist is non-zero, then the line should be added to any command history which is being maintained. The return value is 0 is no input is available and &gt;0 otherwise.</p>
<p><code class="calibre2">R_WriteConsoleEx</code> writes the given buffer to the console, otype specifies the output type (regular output or warning/error). Call to <code class="calibre2">R_WriteConsole(buf, buflen)</code> is equivalent to <code class="calibre2">R_WriteConsoleEx(buf, buflen, 0)</code>. To ensure backward compatibility of the callbacks, <code class="calibre2">ptr_R_WriteConsoleEx</code> is used only if <code class="calibre2">ptr_R_WriteConsole</code> is set to <code class="calibre2">NULL</code>. To ensure that <code class="calibre2">stdout()</code> and <code class="calibre2">stderr()</code> connections point to the console, set the corresponding files to <code class="calibre2">NULL</code> <em>via</em></p>
<div class="example">
<pre class="example1"><code>      R_Outputfile = NULL;
      R_Consolefile = NULL;</code></pre>
</div>
<p><code class="calibre2">R_ResetConsole</code> is called when the system is reset after an error. <code class="calibre2">R_FlushConsole</code> is called to flush any pending output to the system console. <code class="calibre2">R_ClearerrConsole</code> clears any errors associated with reading from the console.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-R_005fShowFiles"></a>Function: <em>int</em> <strong>R_ShowFiles</strong> <em>(int nfile, const char **file, const char **headers, const char *wtitle, Rboolean del, const char *pager)</em></dt>
<dd><p>This function is used to display the contents of files.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-R_005fChooseFile"></a>Function: <em>int</em> <strong>R_ChooseFile</strong> <em>(int new, char *buf, int len)</em></dt>
<dd><p>Choose a file and return its name in buf of length len. Return value is 0 for success, &gt; 0 otherwise.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-R_005fEditFile"></a>Function: <em>int</em> <strong>R_EditFile</strong> <em>(const char *buf)</em></dt>
<dd><p>Send a file to an editor window.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-R_005fEditFiles"></a>Function: <em>int</em> <strong>R_EditFiles</strong> <em>(int nfile, const char **file, const char **title, const char *editor)</em></dt>
<dd><p>Send nfile files to an editor, with titles possibly to be used for the editor window(s).</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-R_005floadhistory"></a>Function: <em>SEXP</em> <strong>R_loadhistory</strong> <em>(SEXP, SEXP, SEXP, SEXP);</em><br />
<a href="" id="index-R_005fsavehistory"></a>Function: <em>SEXP</em> <strong>R_savehistory</strong> <em>(SEXP, SEXP, SEXP, SEXP);</em><br />
<a href="" id="index-R_005faddhistory"></a>Function: <em>SEXP</em> <strong>R_addhistory</strong> <em>(SEXP, SEXP, SEXP, SEXP);</em></dt>
<dd><p><code class="calibre2">.Internal</code> functions for <code class="calibre2">loadhistory</code>, <code class="calibre2">savehistory</code> and <code class="calibre2">timestamp</code>.</p>
<p>If the console has no history mechanism these can be as simple as</p>
<div class="example">
<pre class="example1"><code>SEXP R_loadhistory (SEXP call, SEXP op, SEXP args, SEXP env)
{
    errorcall(call, &quot;loadhistory is not implemented&quot;);
    return R_NilValue;
}
SEXP R_savehistory (SEXP call, SEXP op , SEXP args, SEXP env)
{
    errorcall(call, &quot;savehistory is not implemented&quot;);
    return R_NilValue;
}
SEXP R_addhistory (SEXP call, SEXP op , SEXP args, SEXP env)
{
    return R_NilValue;
}</code></pre>
</div>
<p>The <code class="calibre2">R_addhistory</code> function should return silently if no history mechanism is present, as a user may be calling <code class="calibre2">timestamp</code> purely to write the time stamp to the console.</p>
</dd>
</dl>
<dl>
<dt><a href="" id="index-R_005fSuicide"></a>Function: <em>void</em> <strong>R_Suicide</strong> <em>(const char *message)</em></dt>
<dd><p>This should abort R as rapidly as possible, displaying the message. A possible implementation is</p>
<div class="example">
<pre class="example1"><code>void R_Suicide (const char *message)
{
    char  pp[1024];
    snprintf(pp, 1024, &quot;Fatal error: %s\n&quot;, s);
    R_ShowMessage(pp);
    R_CleanUp(SA_SUICIDE, 2, 0);
}</code></pre>
</div>
</dd>
</dl>
<dl>
<dt><a href="" id="index-R_005fCleanUp"></a>Function: <em>void</em> <strong>R_CleanUp</strong> <em>(SA_TYPE saveact, int status, int RunLast)</em></dt>
<dd><p>This function invokes any actions which occur at system termination. It needs to be quite complex:</p>
<div class="example">
<pre class="example1"><code>#include &lt;Rinterface.h&gt;
#include &lt;Rembedded.h&gt;    /* for Rf_KillAllDevices */

void R_CleanUp (SA_TYPE saveact, int status, int RunLast)
{
    if(saveact == SA_DEFAULT) saveact = SaveAction;
    if(saveact == SA_SAVEASK) {
       /* ask what to do and set saveact */
    }
    switch (saveact) {
    case SA_SAVE:
        if(runLast) R_dot_Last();
        if(R_DirtyImage) R_SaveGlobalEnv();
        /* save the console history in R_HistoryFile */
        break;
    case SA_NOSAVE:
        if(runLast) R_dot_Last();
        break;
    case SA_SUICIDE:
    default:
        break;
    }

    R_RunExitFinalizers();
    /* clean up after the editor e.g. CleanEd() */

    R_CleanTempDir();

    /* close all the graphics devices */
    if(saveact != SA_SUICIDE) Rf_KillAllDevices();
    fpu_setup(FALSE);

    exit(status);
}</code></pre>
</div>
</dd>
</dl>
<p>These callbacks should never be changed in a running R session (and hence cannot be called from an extension package).</p>
<dl>
<dt><a href="" id="index-R_005fdataentry"></a>Function: <em>SEXP</em> <strong>R_dataentry</strong> <em>(SEXP, SEXP, SEXP, SEXP);</em><br />
<a href="" id="index-R_005fdataviewer"></a>Function: <em>SEXP</em> <strong>R_dataviewer</strong> <em>(SEXP, SEXP, SEXP, SEXP);</em><br />
<a href="" id="index-R_005fselectlist"></a>Function: <em>SEXP</em> <strong>R_selectlist</strong> <em>(SEXP, SEXP, SEXP, SEXP);</em></dt>
<dd><p><code class="calibre2">.External</code> functions for <code class="calibre2">dataentry</code> (and <code class="calibre2">edit</code> on matrices and data frames), <code class="calibre2">View</code> and <code class="calibre2">select.list</code>. These can be changed if they are not currently in use.</p>
</dd>
</dl>
<hr />
<p><a href="" id="Registering-symbols"></a> <a href="" id="Registering-symbols-1"></a></p>
<h4 id="registering-symbols" class="subsection">8.1.3 Registering symbols</h4>
<p>An application embedding R needs a different way of registering symbols because it is not a dynamic library loaded by R as would be the case with a package. Therefore R reserves a special <code class="calibre2">DllInfo</code> entry for the embedding application such that it can register symbols to be used with <code class="calibre2">.C</code>, <code class="calibre2">.Call</code> etc. This entry can be obtained by calling <code class="calibre2">getEmbeddingDllInfo</code>, so a typical use is</p>
<div class="example">
<pre class="example1"><code>DllInfo *info = R_getEmbeddingDllInfo();
R_registerRoutines(info, cMethods, callMethods, NULL, NULL);</code></pre>
</div>
<p>The native routines defined by <code class="calibre2">cMethods</code> and <code class="calibre2">callMethods</code> should be present in the embedding application. See <a href="R-exts_split_009.html#Registering-native-routines">Registering native routines</a> for details on registering symbols in general.</p>
<hr />
<p><a href="" id="Meshing-event-loops"></a> <a href="" id="Meshing-event-loops-1"></a></p>
<h4 id="meshing-event-loops" class="subsection">8.1.4 Meshing event loops</h4>
<p>One of the most difficult issues in interfacing R to a front-end is the handling of event loops, at least if a single thread is used. R uses events and timers for</p>
<ul>
<li>Running X11 windows such as the graphics device and data editor, and interacting with them (e.g., using <code class="calibre2">locator()</code>).</li>
<li>Supporting Tcl/Tk events for the <strong>tcltk</strong> package (for at least the X11 version of Tk).</li>
<li>Preparing input.</li>
<li>Timing operations, for example for profiling R code and <code class="calibre2">Sys.sleep()</code>.</li>
<li>Interrupts, where permitted.</li>
</ul>
<p>Specifically, the Unix-alike command-line version of R runs separate event loops for</p>
<ul>
<li>Preparing input at the console command-line, in file src/unix/sys-unix.c.</li>
<li>Waiting for a response from a socket in the internal functions underlying FTP and HTTP transfers in <code class="calibre2">download.file()</code> and for direct socket access, in files src/modules/internet/nanoftp.c, src/modules/internet/nanohttp.c and src/modules/internet/Rsock.c</li>
<li>Mouse and window events when displaying the X11-based dataentry window, in file src/modules/X11/dataentry.c. This is regarded as <em>modal</em>, and no other events are serviced whilst it is active.</li>
</ul>
<p>There is a protocol for adding event handlers to the first two types of event loops, using types and functions declared in the header R_ext/eventloop.h and described in comments in file src/unix/sys-std.c. It is possible to add (or remove) an input handler for events on a particular file descriptor, or to set a polling interval (<em>via</em> <code class="calibre2">R_wait_usec</code>) and a function to be called periodically <em>via</em> <code class="calibre2">R_PolledEvents</code>: the polling mechanism is used by the <strong>tcltk</strong> package.</p>
<p>It is not intended that these facilities are used by packages, but if they are needed exceptionally, the package should ensure that it cleans up and removes its handlers when its namespace is unloaded. Note that the header sys/select.h is needed<a href="R-exts_split_014.html#FOOT145" id="DOCF145"><sup>145</sup></a>: users should check this is available and define <code class="calibre2">HAVE_SYS_SELECT_H</code> before including R_ext/eventloop.h. (It is often the case that another header will include sys/select.h before eventloop.h is processed, but this should not be relied on.)</p>
<p>An alternative front-end needs both to make provision for other R events whilst waiting for input, and to ensure that it is not frozen out during events of the second type. The ability to add a polled handler as <code class="calibre2">R_timeout_handler</code> is used by the <strong>tcltk</strong> package.</p>
<hr />
<p><a href="" id="Threading-issues"></a> <a href="" id="Threading-issues-1"></a></p>
<h4 id="threading-issues" class="subsection">8.1.5 Threading issues</h4>
<p>Embedded R is designed to be run in the main thread, and all the testing is done in that context. There is a potential issue with the stack-checking mechanism where threads are involved. This uses two variables declared in Rinterface.h (if <code class="calibre2">CSTACK_DEFNS</code> is defined) as</p>
<div class="example">
<pre class="example1"><code>extern uintptr_t R_CStackLimit; /* C stack limit */
extern uintptr_t R_CStackStart; /* Initial stack address */</code></pre>
</div>
<p>Note that <code class="calibre2">uintptr_t</code> is an optional C99 type for which a substitute is defined in R, so your code needs to define <code class="calibre2">HAVE_UINTPTR_T</code> appropriately. To do so, test if the type is defined in C header stdint.h or C++ header cstdint and if so include the header and define <code class="calibre2">HAVE_UINTPTR_T</code> before including Rinterface.h. (As from R 3.4.0 for C code one can simply include Rconfig.h, possibly <em>via</em> R.h, and for C++11 code Rinterface.h will include the header cstdint.)</p>
<p>These will be set<a href="R-exts_split_014.html#FOOT146" id="DOCF146"><sup>146</sup></a> when <code class="calibre2">Rf_initialize_R</code> is called, to values appropriate to the main thread. Stack-checking can be disabled by setting <code class="calibre2">R_CStackLimit = (uintptr_t)-1</code> immediately after <code class="calibre2">Rf_initialize_R</code> is called, but it is better to if possible set appropriate values. (What these are and how to determine them are OS-specific, and the stack size limit may differ for secondary threads. If you have a choice of stack size, at least 10Mb is recommended.)</p>
<p>You may also want to consider how signals are handled: R sets signal handlers for several signals, including <code class="calibre2">SIGINT</code>, <code class="calibre2">SIGSEGV</code>, <code class="calibre2">SIGPIPE</code>, <code class="calibre2">SIGUSR1</code> and <code class="calibre2">SIGUSR2</code>, but these can all be suppressed by setting the variable <code class="calibre2">R_SignalHandlers</code> (declared in Rinterface.h) to <code class="calibre2">0</code>.</p>
<p>Note that these variables must not be changed by an R <strong>package</strong>: a package should not call R internals which makes use of the stack-checking mechanism on a secondary thread.</p>
<hr />
<p><a href="" id="Embedding-R-under-Windows"></a> <a href="" id="Embedding-R-under-Windows-1"></a></p>
<h3 id="embedding-r-under-windows" class="section">8.2 Embedding R under Windows</h3>
<p>All Windows interfaces to R call entry points in the DLL R.dll, directly or indirectly. Simpler applications may find it easier to use the indirect route <em>via</em> (D)COM.</p>
<hr />
<p><a href="" id="Using-_0028D_0029COM"></a> <a href="" id="Using-_0028D_0029COM-1"></a></p>
<h4 id="using-dcom" class="subsection">8.2.1 Using (D)COM</h4>
<p>(D)COM is a standard Windows mechanism used for communication between Windows applications. One application (here R) is run as COM server which offers services to clients, here the front-end calling application. The services are described in a ‘Type Library’ and are (more or less) language-independent, so the calling application can be written in C or C++ or Visual Basic or Perl or Python and so on. The ‘D’ in (D)COM refers to ‘distributed’, as the client and server can be running on different machines.</p>
<p>The basic R distribution is not a (D)COM server, but two addons are currently available that interface directly with R and provide a (D)COM server:</p>
<ul>
<li><p>There is a (D)COM server called <code class="calibre2">StatConnector</code> written by Thomas Baier available <em>via</em> <a href="http://sunsite.univie.ac.at/rcom/" class="uri">http://sunsite.univie.ac.at/rcom/</a>, which works with R packages to support transfer of data to and from R and remote execution of R commands, as well as embedding of an R graphics window.</p>
<p>Recent versions have usage restrictions.</p></li>
<li>Another (D)COM server, <code class="calibre2">RDCOMServer</code>, may be available from Omegahat, <a href="http://www.omegahat.net/" class="uri">http://www.omegahat.net/</a>. Its philosophy is discussed in <a href="http://www.omegahat.net/RDCOMServer/Docs/Paradigm.html" class="uri">http://www.omegahat.net/RDCOMServer/Docs/Paradigm.html</a> and is very different from the purpose of this section.</li>
</ul>
<hr />
<p><a href="" id="Calling-R_002edll-directly"></a> <a href="" id="Calling-R_002edll-directly-1"></a></p>
<h4 id="calling-r.dll-directly" class="subsection">8.2.2 Calling R.dll directly</h4>
<p>The <code class="calibre2">R</code> DLL is mainly written in C and has <code class="calibre2">_cdecl</code> entry points. Calling it directly will be tricky except from C code (or C++ with a little care).</p>
<p>There is a version of the Unix-alike interface calling</p>
<div class="example">
<pre class="example1"><code>int Rf_initEmbeddedR(int ac, char **av);
void Rf_endEmbeddedR(int fatal);</code></pre>
</div>
<p>which is an entry point in R.dll. Examples of its use (and a suitable Makefile.win) can be found in the tests/Embedding directory of the sources. You may need to ensure that R_HOME/bin is in your <code class="calibre2">PATH</code> so the R DLLs are found.</p>
<p>Examples of calling R.dll directly are provided in the directory src/gnuwin32/front-ends, including a simple command-line front end rtest.c whose code is</p>
<div class="example">
<pre class="smallexample"><code>#define Win32
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;
#include &lt;Rversion.h&gt;
#define LibExtern __declspec(dllimport) extern
#include &lt;Rembedded.h&gt;
#include &lt;R_ext/RStartup.h&gt;
/* for askok and askyesnocancel */
#include &lt;graphapp.h&gt;

/* for signal-handling code */
#include &lt;psignal.h&gt;

/* simple input, simple output */

/* This version blocks all events: a real one needs to call ProcessEvents
   frequently. See rterm.c and ../system.c for one approach using
   a separate thread for input.
*/
int myReadConsole(const char *prompt, char *buf, int len, int addtohistory)
{
    fputs(prompt, stdout);
    fflush(stdout);
    if(fgets(buf, len, stdin)) return 1; else return 0;
}

void myWriteConsole(const char *buf, int len)
{
    printf(&quot;%s&quot;, buf);
}

void myCallBack(void)
{
    /* called during i/o, eval, graphics in ProcessEvents */
}

void myBusy(int which)
{
    /* set a busy cursor ... if which = 1, unset if which = 0 */
}

static void my_onintr(int sig) { UserBreak = 1; }

int main (int argc, char **argv)
{
    structRstart rp;
    Rstart Rp = &amp;rp;
    char Rversion[25], *RHome;

    sprintf(Rversion, &quot;%s.%s&quot;, R_MAJOR, R_MINOR);
    if(strcmp(getDLLVersion(), Rversion) != 0) {
        fprintf(stderr, &quot;Error: R.DLL version does not match\n&quot;);
        exit(1);
    }

    R_setStartTime();
    R_DefParams(Rp);
    if((RHome = get_R_HOME()) == NULL) {
        fprintf(stderr, &quot;R_HOME must be set in the environment or Registry\n&quot;);
        exit(1);
    }
    Rp-&gt;rhome = RHome;
    Rp-&gt;home = getRUser();
    Rp-&gt;CharacterMode = LinkDLL;
    Rp-&gt;ReadConsole = myReadConsole;
    Rp-&gt;WriteConsole = myWriteConsole;
    Rp-&gt;CallBack = myCallBack;
    Rp-&gt;ShowMessage = askok;
    Rp-&gt;YesNoCancel = askyesnocancel;
    Rp-&gt;Busy = myBusy;

    Rp-&gt;R_Quiet = TRUE;        /* Default is FALSE */
    Rp-&gt;R_Interactive = FALSE; /* Default is TRUE */
    Rp-&gt;RestoreAction = SA_RESTORE;
    Rp-&gt;SaveAction = SA_NOSAVE;
    R_SetParams(Rp);
    R_set_command_line_arguments(argc, argv);

    FlushConsoleInputBuffer(GetStdHandle(STD_INPUT_HANDLE));

    signal(SIGBREAK, my_onintr);
    GA_initapp(0, 0);
    readconsolecfg();
    setup_Rmainloop();
#ifdef SIMPLE_CASE
    run_Rmainloop();
#else
    R_ReplDLLinit();
    while(R_ReplDLLdo1() &gt; 0) {
/* add user actions here if desired */
    }
/* only get here on EOF (not q()) */
#endif
    Rf_endEmbeddedR(0);
    return 0;
}</code></pre>
</div>
<p>The ideas are</p>
<ul>
<li>Check that the front-end and the linked R.dll match – other front-ends may allow a looser match.</li>
<li>Find and set the R home directory and the user’s home directory. The former may be available from the Windows Registry: it will be in <code class="calibre2">HKEY_LOCAL_MACHINE\Software\R-core\R\InstallPath</code> from an administrative install and <code class="calibre2">HKEY_CURRENT_USER\Software\R-core\R\InstallPath</code> otherwise, if selected during installation (as it is by default).</li>
<li>Define startup conditions and callbacks <em>via</em> the <code class="calibre2">Rstart</code> structure. <code class="calibre2">R_DefParams</code> sets the defaults, and <code class="calibre2">R_SetParams</code> sets updated values.</li>
<li>Record the command-line arguments used by <code class="calibre2">R_set_command_line_arguments</code> for use by the R function <code class="calibre2">commandArgs()</code>.</li>
<li>Set up the signal handler and the basic user interface.</li>
<li>Run the main R loop, possibly with our actions intermeshed.</li>
<li>Arrange to clean up.</li>
</ul>
<p>An underlying theme is the need to keep the GUI ‘alive’, and this has not been done in this example. The R callback <code class="calibre2">R_ProcessEvents</code> needs to be called frequently to ensure that Windows events in R windows are handled expeditiously. Conversely, R needs to allow the GUI code (which is running in the same process) to update itself as needed – two ways are provided to allow this:</p>
<ul>
<li><code class="calibre2">R_ProcessEvents</code> calls the callback registered by <code class="calibre2">Rp-&gt;callback</code>. A version of this is used to run package Tcl/Tk for <strong>tcltk</strong> under Windows, for the code is
<div class="example">
<pre class="example1"><code>void R_ProcessEvents(void)
{
    while (peekevent()) doevent(); /* Windows events for GraphApp */
    if (UserBreak) { UserBreak = FALSE; onintr(); }
    R_CallBackHook();
    if(R_tcldo) R_tcldo();
}</code></pre>
</div></li>
<li>The mainloop can be split up to allow the calling application to take some action after each line of input has been dealt with: see the alternative code below <code class="calibre2">#ifdef SIMPLE_CASE</code>.</li>
</ul>
<p>It may be that no R GraphApp windows need to be considered, although these include pagers, the <code class="calibre2">windows()</code> graphics device, the R data and script editors and various popups such as <code class="calibre2">choose.file()</code> and <code class="calibre2">select.list()</code>. It would be possible to replace all of these, but it seems easier to allow GraphApp to handle most of them.</p>
<p>It is possible to run R in a GUI in a single thread (as RGui.exe shows) but it will normally be easier<a href="R-exts_split_014.html#FOOT147" id="DOCF147"><sup>147</sup></a> to use multiple threads.</p>
<p>Note that R’s own front ends use a stack size of 10Mb, whereas MinGW executables default to 2Mb, and Visual C++ ones to 1Mb. The latter stack sizes are too small for a number of R applications, so general-purpose front-ends should use a larger stack size.</p>
<hr />
<p><a href="" id="Finding-R_005fHOME"></a> <a href="" id="Finding-R_005fHOME-1"></a></p>
<h4 id="finding-r_home" class="subsection">8.2.3 Finding R_HOME</h4>
<p>Both applications which embed R and those which use a <code class="calibre2">system</code> call to invoke R (as <code class="calibre2">Rscript.exe</code>, <code class="calibre2">Rterm.exe</code> or <code class="calibre2">R.exe</code>) need to be able to find the R bin directory. The simplest way to do so is the ask the user to set an environment variable <code class="calibre2">R_HOME</code> and use that, but naive users may be flummoxed as to how to do so or what value to use.</p>
<p>The R for Windows installers have for a long time allowed the value of <code class="calibre2">R_HOME</code> to be recorded in the Windows Registry: this is optional but selected by default. <em>Where</em> it is recorded has changed over the years to allow for multiple versions of R to be installed at once, and to allow 32- and 64-bit versions of R to be installed on the same machine.</p>
<p>The basic Registry location is <code class="calibre2">Software\R-core\R</code>. For an administrative install this is under <code class="calibre2">HKEY_LOCAL_MACHINE</code> and on a 64-bit OS <code class="calibre2">HKEY_LOCAL_MACHINE\Software\R-core\R</code> is by default redirected for a 32-bit application, so a 32-bit application will see the information for the last 32-bit install, and a 64-bit application that for the last 64-bit install. For a personal install, the information is under <code class="calibre2">HKEY_CURRENT_USER\Software\R-core\R</code> which is seen by both 32-bit and 64-bit applications and so records the last install of either architecture. To circumvent this, there are locations <code class="calibre2">Software\R-core\R32</code> and <code class="calibre2">Software\R-core\R64</code> which always refer to one architecture.</p>
<p>When R is installed and recording is not disabled then two string values are written at that location for keys <code class="calibre2">InstallPath</code> and <code class="calibre2">Current Version</code>, and these keys are removed when R is uninstalled. To allow information about other installed versions to be retained, there is also a key named something like <code class="calibre2">3.0.0</code> or <code class="calibre2">3.0.0 patched</code> or <code class="calibre2">3.1.0 Pre-release</code> with a value for <code class="calibre2">InstallPath</code>.</p>
<p>So a comprehensive algorithm to search for <code class="calibre2">R_HOME</code> is something like</p>
<ul>
<li>Decide which of personal or administrative installs should have precedence. There are arguments both ways: we find that with roaming profiles that <code class="calibre2">HKEY_CURRENT_USER\Software</code> often gets reverted to an earlier version. Do the following for one or both of <code class="calibre2">HKEY_CURRENT_USER</code> and <code class="calibre2">HKEY_LOCAL_MACHINE</code>.</li>
<li>If the desired architecture is known, look in <code class="calibre2">Software\R-core\R32</code> or <code class="calibre2">Software\R-core\R64</code>, and if that does not exist or the architecture is immaterial, in <code class="calibre2">Software\R-core\R</code>.</li>
<li>If key <code class="calibre2">InstallPath</code> exists then this is <code class="calibre2">R_HOME</code> (recorded using backslashes). If it does not, look for version-specific keys like <code class="calibre2">2.11.0 alpha</code>, pick the latest (which is of itself a complicated algorithm as <code class="calibre2">2.11.0 patched &gt; 2.11.0 &gt; 2.11.0 alpha &gt; 2.8.1</code>) and use its value for <code class="calibre2">InstallPath</code>.</li>
</ul>
<hr />
<p><a href="" id="Function-and-variable-index"></a> <a href="" id="Function-and-variable-index-1"></a></p>

<!--chapter:end:12-R-exts.Rmd-->

# Function and variable index
<table>
<tbody>
<tr class="odd">
<td align="left">Jump to:  </td>
<td align="left"><a href="#Function-and-variable-index_vr_symbol-1" class="summary-letter"><strong>.</strong></a>   <a href="#Function-and-variable-index_vr_symbol-2" class="summary-letter"><strong>\</strong></a>  <br />
<a href="#Function-and-variable-index_vr_letter-A" class="summary-letter"><strong>A</strong></a>   <a href="#Function-and-variable-index_vr_letter-B" class="summary-letter"><strong>B</strong></a>   <a href="#Function-and-variable-index_vr_letter-C" class="summary-letter"><strong>C</strong></a>   <a href="#Function-and-variable-index_vr_letter-D" class="summary-letter"><strong>D</strong></a>   <a href="#Function-and-variable-index_vr_letter-E" class="summary-letter"><strong>E</strong></a>   <a href="#Function-and-variable-index_vr_letter-F" class="summary-letter"><strong>F</strong></a>   <a href="#Function-and-variable-index_vr_letter-G" class="summary-letter"><strong>G</strong></a>   <a href="#Function-and-variable-index_vr_letter-I" class="summary-letter"><strong>I</strong></a>   <a href="#Function-and-variable-index_vr_letter-L" class="summary-letter"><strong>L</strong></a>   <a href="#Function-and-variable-index_vr_letter-M" class="summary-letter"><strong>M</strong></a>   <a href="#Function-and-variable-index_vr_letter-N" class="summary-letter"><strong>N</strong></a>   <a href="#Function-and-variable-index_vr_letter-O" class="summary-letter"><strong>O</strong></a>   <a href="#Function-and-variable-index_vr_letter-P" class="summary-letter"><strong>P</strong></a>   <a href="#Function-and-variable-index_vr_letter-Q" class="summary-letter"><strong>Q</strong></a>   <a href="#Function-and-variable-index_vr_letter-R" class="summary-letter"><strong>R</strong></a>   <a href="#Function-and-variable-index_vr_letter-S" class="summary-letter"><strong>S</strong></a>   <a href="#Function-and-variable-index_vr_letter-T" class="summary-letter"><strong>T</strong></a>   <a href="#Function-and-variable-index_vr_letter-U" class="summary-letter"><strong>U</strong></a>   <a href="#Function-and-variable-index_vr_letter-V" class="summary-letter"><strong>V</strong></a>  </td>
</tr>
</tbody>
</table>
<p>Index Entry</p>
<p> </p>
<p>Section</p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_symbol-1">.</a></p>
<p><a href="R-exts_split_009.html#index-_002eC"><code class="calibre2">.C</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Interface-functions-_002eC-and-_002eFortran">Interface functions .C and .Fortran</a></p>
<p><a href="R-exts_split_009.html#index-_002eCall"><code class="calibre2">.Call</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Handling-R-objects-in-C">Handling R objects in C</a></p>
<p><a href="R-exts_split_009.html#index-_002eCall-1"><code class="calibre2">.Call</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Calling-_002eCall">Calling .Call</a></p>
<p><a href="R-exts_split_009.html#index-_002eExternal"><code class="calibre2">.External</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Handling-R-objects-in-C">Handling R objects in C</a></p>
<p><a href="R-exts_split_009.html#index-_002eExternal-1"><code class="calibre2">.External</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Calling-_002eExternal">Calling .External</a></p>
<p><a href="R-exts_split_009.html#index-_002eFortran"><code class="calibre2">.Fortran</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Interface-functions-_002eC-and-_002eFortran">Interface functions .C and .Fortran</a></p>
<p><a href="R-exts_split_005.html#index-_002eLast_002elib"><code class="calibre2">.Last.lib</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Load-hooks">Load hooks</a></p>
<p><a href="R-exts_split_005.html#index-_002eonAttach"><code class="calibre2">.onAttach</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Load-hooks">Load hooks</a></p>
<p><a href="R-exts_split_005.html#index-_002eonDetach"><code class="calibre2">.onDetach</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Load-hooks">Load hooks</a></p>
<p><a href="R-exts_split_005.html#index-_002eonLoad"><code class="calibre2">.onLoad</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Load-hooks">Load hooks</a></p>
<p><a href="R-exts_split_005.html#index-_002eonUnload"><code class="calibre2">.onUnload</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Load-hooks">Load hooks</a></p>
<p><a href="R-exts_split_010.html#index-_002eRandom_002eseed"><code class="calibre2">.Random.seed</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Random-numbers">Random numbers</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_symbol-2">\</a></p>
<p><a href="R-exts_split_006.html#index-_005cacronym"><code class="calibre2">\acronym</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005calias"><code class="calibre2">\alias</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005carguments"><code class="calibre2">\arguments</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005cauthor"><code class="calibre2">\author</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005cbold"><code class="calibre2">\bold</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005ccite"><code class="calibre2">\cite</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005ccode"><code class="calibre2">\code</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005ccommand"><code class="calibre2">\command</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005cconcept"><code class="calibre2">\concept</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Indices">Indices</a></p>
<p><a href="R-exts_split_006.html#index-_005ccr"><code class="calibre2">\cr</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Sectioning">Sectioning</a></p>
<p><a href="R-exts_split_006.html#index-_005cCRANpkg_007bpkg_007d"><code class="calibre2">\CRANpkg{pkg}</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#User_002ddefined-macros">User-defined macros</a></p>
<p><a href="R-exts_split_006.html#index-_005cdeqn"><code class="calibre2">\deqn</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Mathematics">Mathematics</a></p>
<p><a href="R-exts_split_006.html#index-_005cdescribe"><code class="calibre2">\describe</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Lists-and-tables">Lists and tables</a></p>
<p><a href="R-exts_split_006.html#index-_005cdescription"><code class="calibre2">\description</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005cdetails"><code class="calibre2">\details</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005cdfn"><code class="calibre2">\dfn</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005cdoi_007bnumbers_007d"><code class="calibre2">\doi{numbers}</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#User_002ddefined-macros">User-defined macros</a></p>
<p><a href="R-exts_split_006.html#index-_005cdontrun"><code class="calibre2">\dontrun</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005cdontshow"><code class="calibre2">\dontshow</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005cdots"><code class="calibre2">\dots</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Insertions">Insertions</a></p>
<p><a href="R-exts_split_006.html#index-_005cdQuote"><code class="calibre2">\dQuote</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005cemail"><code class="calibre2">\email</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005cemph"><code class="calibre2">\emph</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005cenc"><code class="calibre2">\enc</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Insertions">Insertions</a></p>
<p><a href="R-exts_split_006.html#index-_005cenumerate"><code class="calibre2">\enumerate</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Lists-and-tables">Lists and tables</a></p>
<p><a href="R-exts_split_006.html#index-_005cenv"><code class="calibre2">\env</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005ceqn"><code class="calibre2">\eqn</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Mathematics">Mathematics</a></p>
<p><a href="R-exts_split_006.html#index-_005cexamples"><code class="calibre2">\examples</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005cfigure"><code class="calibre2">\figure</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Figures">Figures</a></p>
<p><a href="R-exts_split_006.html#index-_005cfile"><code class="calibre2">\file</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005cformat"><code class="calibre2">\format</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-data-sets">Documenting data sets</a></p>
<p><a href="R-exts_split_006.html#index-_005chref"><code class="calibre2">\href</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005cif"><code class="calibre2">\if</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Conditional-text">Conditional text</a></p>
<p><a href="R-exts_split_006.html#index-_005cifelse"><code class="calibre2">\ifelse</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Conditional-text">Conditional text</a></p>
<p><a href="R-exts_split_006.html#index-_005citemize"><code class="calibre2">\itemize</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Lists-and-tables">Lists and tables</a></p>
<p><a href="R-exts_split_006.html#index-_005ckbd"><code class="calibre2">\kbd</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005ckeyword"><code class="calibre2">\keyword</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005cldots"><code class="calibre2">\ldots</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Insertions">Insertions</a></p>
<p><a href="R-exts_split_006.html#index-_005clink"><code class="calibre2">\link</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Cross_002dreferences">Cross-references</a></p>
<p><a href="R-exts_split_006.html#index-_005cmethod"><code class="calibre2">\method</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005cname"><code class="calibre2">\name</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005cnewcommand"><code class="calibre2">\newcommand</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#User_002ddefined-macros">User-defined macros</a></p>
<p><a href="R-exts_split_006.html#index-_005cnote"><code class="calibre2">\note</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005coption"><code class="calibre2">\option</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005cout"><code class="calibre2">\out</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Conditional-text">Conditional text</a></p>
<p><a href="R-exts_split_006.html#index-_005cpackageAuthor"><code class="calibre2">\packageAuthor</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#User_002ddefined-macros">User-defined macros</a></p>
<p><a href="R-exts_split_006.html#index-_005cpackageDescription"><code class="calibre2">\packageDescription</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#User_002ddefined-macros">User-defined macros</a></p>
<p><a href="R-exts_split_006.html#index-_005cpackageDESCRIPTION"><code class="calibre2">\packageDESCRIPTION</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#User_002ddefined-macros">User-defined macros</a></p>
<p><a href="R-exts_split_006.html#index-_005cpackageIndices"><code class="calibre2">\packageIndices</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#User_002ddefined-macros">User-defined macros</a></p>
<p><a href="R-exts_split_006.html#index-_005cpackageMaintainer"><code class="calibre2">\packageMaintainer</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#User_002ddefined-macros">User-defined macros</a></p>
<p><a href="R-exts_split_006.html#index-_005cpackageTitle"><code class="calibre2">\packageTitle</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#User_002ddefined-macros">User-defined macros</a></p>
<p><a href="R-exts_split_006.html#index-_005cpkg"><code class="calibre2">\pkg</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005cpreformatted"><code class="calibre2">\preformatted</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005cR"><code class="calibre2">\R</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Insertions">Insertions</a></p>
<p><a href="R-exts_split_006.html#index-_005cRdOpts"><code class="calibre2">\RdOpts</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Dynamic-pages">Dynamic pages</a></p>
<p><a href="R-exts_split_006.html#index-_005creferences"><code class="calibre2">\references</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005crenewcommand"><code class="calibre2">\renewcommand</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#User_002ddefined-macros">User-defined macros</a></p>
<p><a href="R-exts_split_006.html#index-_005cS3method"><code class="calibre2">\S3method</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005csamp"><code class="calibre2">\samp</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005csection"><code class="calibre2">\section</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Sectioning">Sectioning</a></p>
<p><a href="R-exts_split_006.html#index-_005cseealso"><code class="calibre2">\seealso</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005cSexpr"><code class="calibre2">\Sexpr</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Dynamic-pages">Dynamic pages</a></p>
<p><a href="R-exts_split_006.html#index-_005csource"><code class="calibre2">\source</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-data-sets">Documenting data sets</a></p>
<p><a href="R-exts_split_006.html#index-_005csQuote"><code class="calibre2">\sQuote</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005csspace"><code class="calibre2">\sspace</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#User_002ddefined-macros">User-defined macros</a></p>
<p><a href="R-exts_split_006.html#index-_005cstrong"><code class="calibre2">\strong</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005ctabular"><code class="calibre2">\tabular</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Lists-and-tables">Lists and tables</a></p>
<p><a href="R-exts_split_006.html#index-_005ctitle"><code class="calibre2">\title</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005curl"><code class="calibre2">\url</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005cusage"><code class="calibre2">\usage</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005cvalue"><code class="calibre2">\value</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Documenting-functions">Documenting functions</a></p>
<p><a href="R-exts_split_006.html#index-_005cvar"><code class="calibre2">\var</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-_005cverb"><code class="calibre2">\verb</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-A">A</a></p>
<p><a href="R-exts_split_009.html#index-allocVector"><code class="calibre2">allocVector</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Allocating-storage">Allocating storage</a></p>
<p><a href="R-exts_split_004.html#index-AUTHORS"><code class="calibre2">AUTHORS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Package-subdirectories">Package subdirectories</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-B">B</a></p>
<p><a href="R-exts_split_010.html#index-bessel_005fi"><code class="calibre2">bessel_i</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-bessel_005fi-1"><code class="calibre2">bessel_i</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-bessel_005fj"><code class="calibre2">bessel_j</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-bessel_005fj-1"><code class="calibre2">bessel_j</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-bessel_005fk"><code class="calibre2">bessel_k</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-bessel_005fk-1"><code class="calibre2">bessel_k</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-bessel_005fy"><code class="calibre2">bessel_y</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-bessel_005fy-1"><code class="calibre2">bessel_y</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-beta"><code class="calibre2">beta</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-beta-1"><code class="calibre2">beta</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_004.html#index-BLAS_005fLIBS"><code class="calibre2">BLAS_LIBS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Using-Makevars">Using Makevars</a></p>
<p><a href="R-exts_split_008.html#index-browser"><code class="calibre2">browser</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_008.html#Browsing">Browsing</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-C">C</a></p>
<p><a href="R-exts_split_010.html#index-Calloc"><code class="calibre2">Calloc</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#User_002dcontrolled-memory">User-controlled memory</a></p>
<p><a href="R-exts_split_009.html#index-CAR"><code class="calibre2">CAR</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Calling-_002eExternal">Calling .External</a></p>
<p><a href="R-exts_split_009.html#index-CDR"><code class="calibre2">CDR</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Calling-_002eExternal">Calling .External</a></p>
<p><a href="R-exts_split_010.html#index-cgmin"><code class="calibre2">cgmin</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Optimization">Optimization</a></p>
<p><a href="R-exts_split_010.html#index-choose"><code class="calibre2">choose</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-choose-1"><code class="calibre2">choose</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_004.html#index-CITATION"><code class="calibre2">CITATION</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Package-subdirectories">Package subdirectories</a></p>
<p><a href="R-exts_split_005.html#index-CITATION-1"><code class="calibre2">CITATION</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Preparing-translations">Preparing translations</a></p>
<p><a href="R-exts_split_004.html#index-COPYRIGHTS"><code class="calibre2">COPYRIGHTS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#The-DESCRIPTION-file">The DESCRIPTION file</a></p>
<p><a href="R-exts_split_004.html#index-COPYRIGHTS-1"><code class="calibre2">COPYRIGHTS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Package-subdirectories">Package subdirectories</a></p>
<p><a href="R-exts_split_010.html#index-cospi"><code class="calibre2">cospi</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_010.html#index-cPsort"><code class="calibre2">cPsort</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-D">D</a></p>
<p><a href="R-exts_split_008.html#index-debug"><code class="calibre2">debug</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_008.html#Debugging-R-code">Debugging R code</a></p>
<p><a href="R-exts_split_008.html#index-debugger"><code class="calibre2">debugger</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_008.html#Debugging-R-code">Debugging R code</a></p>
<p><a href="R-exts_split_009.html#index-defineVar"><code class="calibre2">defineVar</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Finding-and-setting-variables">Finding and setting variables</a></p>
<p><a href="R-exts_split_010.html#index-digamma"><code class="calibre2">digamma</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-digamma-1"><code class="calibre2">digamma</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_008.html#index-dump_002eframes"><code class="calibre2">dump.frames</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_008.html#Debugging-R-code">Debugging R code</a></p>
<p><a href="R-exts_split_009.html#index-duplicate"><code class="calibre2">duplicate</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Named-objects-and-copying">Named objects and copying</a></p>
<p><a href="R-exts_split_009.html#index-dyn_002eload"><code class="calibre2">dyn.load</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#dyn_002eload-and-dyn_002eunload">dyn.load and dyn.unload</a></p>
<p><a href="R-exts_split_009.html#index-dyn_002eunload"><code class="calibre2">dyn.unload</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#dyn_002eload-and-dyn_002eunload">dyn.load and dyn.unload</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-E">E</a></p>
<p><a href="R-exts_split_010.html#index-expm1"><code class="calibre2">expm1</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_005.html#index-export"><code class="calibre2">export</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Specifying-imports-and-exports">Specifying imports and exports</a></p>
<p><a href="R-exts_split_005.html#index-exportClasses"><code class="calibre2">exportClasses</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Namespaces-with-S4-classes-and-methods">Namespaces with S4 classes and methods</a></p>
<p><a href="R-exts_split_005.html#index-exportClassPattern"><code class="calibre2">exportClassPattern</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Namespaces-with-S4-classes-and-methods">Namespaces with S4 classes and methods</a></p>
<p><a href="R-exts_split_005.html#index-exportMethods"><code class="calibre2">exportMethods</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Namespaces-with-S4-classes-and-methods">Namespaces with S4 classes and methods</a></p>
<p><a href="R-exts_split_005.html#index-exportPattern"><code class="calibre2">exportPattern</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Specifying-imports-and-exports">Specifying imports and exports</a></p>
<p><a href="R-exts_split_005.html#index-exportPattern-1"><code class="calibre2">exportPattern</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Namespaces-with-S4-classes-and-methods">Namespaces with S4 classes and methods</a></p>
<p><a href="R-exts_split_010.html#index-exp_005frand"><code class="calibre2">exp_rand</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Random-numbers">Random numbers</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-F">F</a></p>
<p><a href="R-exts_split_010.html#index-FALSE"><code class="calibre2">FALSE</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-constants">Mathematical constants</a></p>
<p><a href="R-exts_split_010.html#index-findInterval"><code class="calibre2">findInterval</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_010.html#index-findInterval2_0028double_002a"><code class="calibre2">findInterval2(double*</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_009.html#index-findVar"><code class="calibre2">findVar</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Finding-and-setting-variables">Finding and setting variables</a></p>
<p><a href="R-exts_split_004.html#index-FLIBS"><code class="calibre2">FLIBS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Using-Makevars">Using Makevars</a></p>
<p><a href="R-exts_split_010.html#index-fmax2"><code class="calibre2">fmax2</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_010.html#index-fmin2"><code class="calibre2">fmin2</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_010.html#index-fprec"><code class="calibre2">fprec</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_010.html#index-Free"><code class="calibre2">Free</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#User_002dcontrolled-memory">User-controlled memory</a></p>
<p><a href="R-exts_split_010.html#index-fround"><code class="calibre2">fround</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_010.html#index-fsign"><code class="calibre2">fsign</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_010.html#index-ftrunc"><code class="calibre2">ftrunc</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-G">G</a></p>
<p><a href="R-exts_split_010.html#index-gammafn"><code class="calibre2">gammafn</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-gammafn-1"><code class="calibre2">gammafn</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_008.html#index-gctorture"><code class="calibre2">gctorture</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_008.html#Using-gctorture">Using gctorture</a></p>
<p><a href="R-exts_split_009.html#index-getAttrib"><code class="calibre2">getAttrib</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Attributes">Attributes</a></p>
<p><a href="R-exts_split_009.html#index-getCharCE"><code class="calibre2">getCharCE</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Character-encoding-issues">Character encoding issues</a></p>
<p><a href="R-exts_split_010.html#index-GetRNGstate"><code class="calibre2">GetRNGstate</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Random-numbers">Random numbers</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-I">I</a></p>
<p><a href="R-exts_split_010.html#index-imax2"><code class="calibre2">imax2</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_010.html#index-imin2"><code class="calibre2">imin2</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_005.html#index-import"><code class="calibre2">import</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Specifying-imports-and-exports">Specifying imports and exports</a></p>
<p><a href="R-exts_split_005.html#index-importClassesFrom"><code class="calibre2">importClassesFrom</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Namespaces-with-S4-classes-and-methods">Namespaces with S4 classes and methods</a></p>
<p><a href="R-exts_split_005.html#index-importFrom"><code class="calibre2">importFrom</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Specifying-imports-and-exports">Specifying imports and exports</a></p>
<p><a href="R-exts_split_005.html#index-importMethodsFrom"><code class="calibre2">importMethodsFrom</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Namespaces-with-S4-classes-and-methods">Namespaces with S4 classes and methods</a></p>
<p><a href="R-exts_split_009.html#index-install"><code class="calibre2">install</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Attributes">Attributes</a></p>
<p><a href="R-exts_split_010.html#index-iPsort"><code class="calibre2">iPsort</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_009.html#index-ISNA"><code class="calibre2">ISNA</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Missing-and-special-values">Missing and special values</a></p>
<p><a href="R-exts_split_010.html#index-ISNA-1"><code class="calibre2">ISNA</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Missing-and-IEEE-values">Missing and IEEE values</a></p>
<p><a href="R-exts_split_009.html#index-ISNAN"><code class="calibre2">ISNAN</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Missing-and-special-values">Missing and special values</a></p>
<p><a href="R-exts_split_010.html#index-ISNAN-1"><code class="calibre2">ISNAN</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Missing-and-IEEE-values">Missing and IEEE values</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-L">L</a></p>
<p><a href="R-exts_split_004.html#index-LAPACK_005fLIBS"><code class="calibre2">LAPACK_LIBS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Using-Makevars">Using Makevars</a></p>
<p><a href="R-exts_split_010.html#index-lbeta"><code class="calibre2">lbeta</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-lbeta-1"><code class="calibre2">lbeta</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-lbfgsb"><code class="calibre2">lbfgsb</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Optimization">Optimization</a></p>
<p><a href="R-exts_split_010.html#index-lchoose"><code class="calibre2">lchoose</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-lchoose-1"><code class="calibre2">lchoose</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-lgamma1p"><code class="calibre2">lgamma1p</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_010.html#index-lgammafn"><code class="calibre2">lgammafn</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-lgammafn-1"><code class="calibre2">lgammafn</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_004.html#index-library_002edynam"><code class="calibre2">library.dynam</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Package-subdirectories">Package subdirectories</a></p>
<p><a href="R-exts_split_009.html#index-library_002edynam-1"><code class="calibre2">library.dynam</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#dyn_002eload-and-dyn_002eunload">dyn.load and dyn.unload</a></p>
<p><a href="R-exts_split_010.html#index-log1p"><code class="calibre2">log1p</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_010.html#index-log1pexp"><code class="calibre2">log1pexp</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_010.html#index-log1pmx"><code class="calibre2">log1pmx</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_010.html#index-logspace_005fadd"><code class="calibre2">logspace_add</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_010.html#index-logspace_005fsub"><code class="calibre2">logspace_sub</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_010.html#index-logspace_005fsum"><code class="calibre2">logspace_sum</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-M">M</a></p>
<p><a href="R-exts_split_009.html#index-mkChar"><code class="calibre2">mkChar</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Handling-character-data">Handling character data</a></p>
<p><a href="R-exts_split_009.html#index-mkCharCE"><code class="calibre2">mkCharCE</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Character-encoding-issues">Character encoding issues</a></p>
<p><a href="R-exts_split_009.html#index-mkCharLen"><code class="calibre2">mkCharLen</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Handling-character-data">Handling character data</a></p>
<p><a href="R-exts_split_009.html#index-mkCharLenCE"><code class="calibre2">mkCharLenCE</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Character-encoding-issues">Character encoding issues</a></p>
<p><a href="R-exts_split_010.html#index-M_005fE"><code class="calibre2">M_E</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-constants">Mathematical constants</a></p>
<p><a href="R-exts_split_010.html#index-M_005fPI"><code class="calibre2">M_PI</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-constants">Mathematical constants</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-N">N</a></p>
<p><a href="R-exts_split_010.html#index-NA_005fREAL"><code class="calibre2">NA_REAL</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Missing-and-IEEE-values">Missing and IEEE values</a></p>
<p><a href="R-exts_split_004.html#index-NEWS_002eRd"><code class="calibre2">NEWS.Rd</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Package-subdirectories">Package subdirectories</a></p>
<p><a href="R-exts_split_010.html#index-nmmin"><code class="calibre2">nmmin</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Optimization">Optimization</a></p>
<p><a href="R-exts_split_010.html#index-norm_005frand"><code class="calibre2">norm_rand</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Random-numbers">Random numbers</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-O">O</a></p>
<p><a href="R-exts_split_004.html#index-OBJECTS"><code class="calibre2">OBJECTS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Using-Makevars">Using Makevars</a></p>
<p><a href="R-exts_split_009.html#index-OBJECTS-1"><code class="calibre2">OBJECTS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Creating-shared-objects">Creating shared objects</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-P">P</a></p>
<p><a href="R-exts_split_010.html#index-pentagamma"><code class="calibre2">pentagamma</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-pentagamma-1"><code class="calibre2">pentagamma</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_009.html#index-PKG_005fCFLAGS"><code class="calibre2">PKG_CFLAGS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Creating-shared-objects">Creating shared objects</a></p>
<p><a href="R-exts_split_009.html#index-PKG_005fCPPFLAGS"><code class="calibre2">PKG_CPPFLAGS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Creating-shared-objects">Creating shared objects</a></p>
<p><a href="R-exts_split_009.html#index-PKG_005fCXXFLAGS"><code class="calibre2">PKG_CXXFLAGS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Creating-shared-objects">Creating shared objects</a></p>
<p><a href="R-exts_split_009.html#index-PKG_005fFCFLAGS"><code class="calibre2">PKG_FCFLAGS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Creating-shared-objects">Creating shared objects</a></p>
<p><a href="R-exts_split_009.html#index-PKG_005fFFLAGS"><code class="calibre2">PKG_FFLAGS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Creating-shared-objects">Creating shared objects</a></p>
<p><a href="R-exts_split_009.html#index-PKG_005fLIBS"><code class="calibre2">PKG_LIBS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Creating-shared-objects">Creating shared objects</a></p>
<p><a href="R-exts_split_009.html#index-PKG_005fOBJCFLAGS"><code class="calibre2">PKG_OBJCFLAGS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Creating-shared-objects">Creating shared objects</a></p>
<p><a href="R-exts_split_009.html#index-PKG_005fOBJCXXFLAGS"><code class="calibre2">PKG_OBJCXXFLAGS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Creating-shared-objects">Creating shared objects</a></p>
<p><a href="R-exts_split_006.html#index-prompt"><code class="calibre2">prompt</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Rd-format">Rd format</a></p>
<p><a href="R-exts_split_009.html#index-PROTECT"><code class="calibre2">PROTECT</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Garbage-Collection">Garbage Collection</a></p>
<p><a href="R-exts_split_009.html#index-PROTECT_005fWITH_005fINDEX"><code class="calibre2">PROTECT_WITH_INDEX</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Garbage-Collection">Garbage Collection</a></p>
<p><a href="R-exts_split_010.html#index-psigamma"><code class="calibre2">psigamma</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-psigamma-1"><code class="calibre2">psigamma</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-PutRNGstate"><code class="calibre2">PutRNGstate</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Random-numbers">Random numbers</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-Q">Q</a></p>
<p><a href="R-exts_split_010.html#index-qsort3"><code class="calibre2">qsort3</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_010.html#index-qsort4"><code class="calibre2">qsort4</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-R">R</a></p>
<p><a href="R-exts_split_004.html#index-R-CMD-build"><code class="calibre2">R CMD build</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Building-package-tarballs">Building package tarballs</a></p>
<p><a href="R-exts_split_004.html#index-R-CMD-check"><code class="calibre2">R CMD check</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Checking-packages">Checking packages</a></p>
<p><a href="R-exts_split_004.html#index-R-CMD-config"><code class="calibre2">R CMD config</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Configure-and-cleanup">Configure and cleanup</a></p>
<p><a href="R-exts_split_006.html#index-R-CMD-Rd2pdf"><code class="calibre2">R CMD Rd2pdf</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Processing-documentation-files">Processing documentation files</a></p>
<p><a href="R-exts_split_006.html#index-R-CMD-Rdconv"><code class="calibre2">R CMD Rdconv</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Processing-documentation-files">Processing documentation files</a></p>
<p><a href="R-exts_split_009.html#index-R-CMD-SHLIB"><code class="calibre2">R CMD SHLIB</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Creating-shared-objects">Creating shared objects</a></p>
<p><a href="R-exts_split_006.html#index-R-CMD-Stangle"><code class="calibre2">R CMD Stangle</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Processing-documentation-files">Processing documentation files</a></p>
<p><a href="R-exts_split_006.html#index-R-CMD-Sweave"><code class="calibre2">R CMD Sweave</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Processing-documentation-files">Processing documentation files</a></p>
<p><a href="R-exts_split_010.html#index-Rdqagi"><code class="calibre2">Rdqagi</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Integration">Integration</a></p>
<p><a href="R-exts_split_010.html#index-Rdqags"><code class="calibre2">Rdqags</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Integration">Integration</a></p>
<p><a href="R-exts_split_010.html#index-Realloc"><code class="calibre2">Realloc</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#User_002dcontrolled-memory">User-controlled memory</a></p>
<p><a href="R-exts_split_008.html#index-recover"><code class="calibre2">recover</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_008.html#Debugging-R-code">Debugging R code</a></p>
<p><a href="R-exts_split_009.html#index-reEnc"><code class="calibre2">reEnc</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Character-encoding-issues">Character encoding issues</a></p>
<p><a href="R-exts_split_010.html#index-REprintf"><code class="calibre2">REprintf</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Printing">Printing</a></p>
<p><a href="R-exts_split_009.html#index-REPROTECT"><code class="calibre2">REPROTECT</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Garbage-Collection">Garbage Collection</a></p>
<p><a href="R-exts_split_010.html#index-REvprintf"><code class="calibre2">REvprintf</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Printing">Printing</a></p>
<p><a href="R-exts_split_010.html#index-revsort"><code class="calibre2">revsort</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_010.html#index-Riconv"><code class="calibre2">Riconv</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Re_002dencoding">Re-encoding</a></p>
<p><a href="R-exts_split_010.html#index-Riconv_005fclose"><code class="calibre2">Riconv_close</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Re_002dencoding">Re-encoding</a></p>
<p><a href="R-exts_split_010.html#index-Riconv_005fopen"><code class="calibre2">Riconv_open</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Re_002dencoding">Re-encoding</a></p>
<p><a href="R-exts_split_010.html#index-Rprintf"><code class="calibre2">Rprintf</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Printing">Printing</a></p>
<p><a href="R-exts_split_007.html#index-Rprof"><code class="calibre2">Rprof</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_007.html#Profiling-R-code-for-speed">Profiling R code for speed</a></p>
<p><a href="R-exts_split_007.html#index-Rprof-1"><code class="calibre2">Rprof</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_007.html#Memory-statistics-from-Rprof">Memory statistics from Rprof</a></p>
<p><a href="R-exts_split_007.html#index-Rprofmem"><code class="calibre2">Rprofmem</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_007.html#Tracking-memory-allocations">Tracking memory allocations</a></p>
<p><a href="R-exts_split_010.html#index-rPsort"><code class="calibre2">rPsort</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_010.html#index-rsort_005fwith_005findex"><code class="calibre2">rsort_with_index</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_010.html#index-Rvprintf"><code class="calibre2">Rvprintf</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Printing">Printing</a></p>
<p><a href="R-exts_split_012.html#index-R_005faddhistory"><code class="calibre2">R_addhistory</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_010.html#index-R_005falloc"><code class="calibre2">R_alloc</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Transient-storage-allocation">Transient storage allocation</a></p>
<p><a href="R-exts_split_010.html#index-R_005fallocLD"><code class="calibre2">R_allocLD</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Transient-storage-allocation">Transient storage allocation</a></p>
<p><a href="R-exts_split_012.html#index-R_005fBusy"><code class="calibre2">R_Busy</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_012.html#index-R_005fChooseFile"><code class="calibre2">R_ChooseFile</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_012.html#index-R_005fCleanUp"><code class="calibre2">R_CleanUp</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_012.html#index-R_005fClearErrConsole"><code class="calibre2">R_ClearErrConsole</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_010.html#index-R_005fcsort"><code class="calibre2">R_csort</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_012.html#index-R_005fdataentry"><code class="calibre2">R_dataentry</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_012.html#index-R_005fdataviewer"><code class="calibre2">R_dataviewer</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_012.html#index-R_005fEditFile"><code class="calibre2">R_EditFile</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_012.html#index-R_005fEditFiles"><code class="calibre2">R_EditFiles</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_010.html#index-R_005fExpandFileName"><code class="calibre2">R_ExpandFileName</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_010.html#index-R_005fFINITE"><code class="calibre2">R_FINITE</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Missing-and-IEEE-values">Missing and IEEE values</a></p>
<p><a href="R-exts_split_012.html#index-R_005fFlushConsole"><code class="calibre2">R_FlushConsole</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_009.html#index-R_005fforceSymbols"><code class="calibre2">R_forceSymbols</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Registering-native-routines">Registering native routines</a></p>
<p><a href="R-exts_split_009.html#index-R_005fGetCCallable"><code class="calibre2">R_GetCCallable</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Linking-to-native-routines-in-other-packages">Linking to native routines in other packages</a></p>
<p><a href="R-exts_split_009.html#index-R_005fGetCurrentSrcref"><code class="calibre2">R_GetCurrentSrcref</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Accessing-source-references">Accessing source references</a></p>
<p><a href="R-exts_split_009.html#index-R_005fGetSrcFilename"><code class="calibre2">R_GetSrcFilename</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Accessing-source-references">Accessing source references</a></p>
<p><a href="R-exts_split_010.html#index-R_005fINLINE"><code class="calibre2">R_INLINE</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Inlining-C-functions">Inlining C functions</a></p>
<p><a href="R-exts_split_010.html#index-R_005fIsNaN"><code class="calibre2">R_IsNaN</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Missing-and-IEEE-values">Missing and IEEE values</a></p>
<p><a href="R-exts_split_010.html#index-R_005fisort"><code class="calibre2">R_isort</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_004.html#index-R_005fLIBRARY_005fDIR"><code class="calibre2">R_LIBRARY_DIR</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Configure-and-cleanup">Configure and cleanup</a></p>
<p><a href="R-exts_split_012.html#index-R_005floadhistory"><code class="calibre2">R_loadhistory</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_010.html#index-R_005fmax_005fcol"><code class="calibre2">R_max_col</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_010.html#index-R_005fNegInf"><code class="calibre2">R_NegInf</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Missing-and-IEEE-values">Missing and IEEE values</a></p>
<p><a href="R-exts_split_010.html#index-R_005forderVector"><code class="calibre2">R_orderVector</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_010.html#index-R_005forderVector1"><code class="calibre2">R_orderVector1</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_004.html#index-R_005fPACKAGE_005fDIR"><code class="calibre2">R_PACKAGE_DIR</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Configure-and-cleanup">Configure and cleanup</a></p>
<p><a href="R-exts_split_004.html#index-R_005fPACKAGE_005fNAME"><code class="calibre2">R_PACKAGE_NAME</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Configure-and-cleanup">Configure and cleanup</a></p>
<p><a href="R-exts_split_009.html#index-R_005fParseVector"><code class="calibre2">R_ParseVector</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Parsing-R-code-from-C">Parsing R code from C</a></p>
<p><a href="R-exts_split_010.html#index-R_005fPosInf"><code class="calibre2">R_PosInf</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Missing-and-IEEE-values">Missing and IEEE values</a></p>
<p><a href="R-exts_split_010.html#index-R_005fpow"><code class="calibre2">R_pow</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_010.html#index-R_005fpow_005fdi"><code class="calibre2">R_pow_di</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_009.html#index-R_005fPreserveObject"><code class="calibre2">R_PreserveObject</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Garbage-Collection">Garbage Collection</a></p>
<p><a href="R-exts_split_010.html#index-R_005fqsort"><code class="calibre2">R_qsort</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_010.html#index-R_005fqsort_005fI"><code class="calibre2">R_qsort_I</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_010.html#index-R_005fqsort_005fint"><code class="calibre2">R_qsort_int</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_010.html#index-R_005fqsort_005fint_005fI"><code class="calibre2">R_qsort_int_I</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_012.html#index-R_005fReadConsole"><code class="calibre2">R_ReadConsole</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_009.html#index-R_005fRegisterCCallable"><code class="calibre2">R_RegisterCCallable</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Linking-to-native-routines-in-other-packages">Linking to native routines in other packages</a></p>
<p><a href="R-exts_split_009.html#index-R_005fregisterRoutines"><code class="calibre2">R_registerRoutines</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Registering-native-routines">Registering native routines</a></p>
<p><a href="R-exts_split_009.html#index-R_005fReleaseObject"><code class="calibre2">R_ReleaseObject</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Garbage-Collection">Garbage Collection</a></p>
<p><a href="R-exts_split_012.html#index-R_005fResetConsole"><code class="calibre2">R_ResetConsole</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_010.html#index-R_005frsort"><code class="calibre2">R_rsort</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_012.html#index-R_005fsavehistory"><code class="calibre2">R_savehistory</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_012.html#index-R_005fselectlist"><code class="calibre2">R_selectlist</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_012.html#index-R_005fShowFiles"><code class="calibre2">R_ShowFiles</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_012.html#index-R_005fShowMessage"><code class="calibre2">R_ShowMessage</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_009.html#index-R_005fSrcref"><code class="calibre2">R_Srcref</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Accessing-source-references">Accessing source references</a></p>
<p><a href="R-exts_split_012.html#index-R_005fSuicide"><code class="calibre2">R_Suicide</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_010.html#index-R_005ftmpnam"><code class="calibre2">R_tmpnam</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_010.html#index-R_005ftmpnam2"><code class="calibre2">R_tmpnam2</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_009.html#index-R_005fuseDynamicSymbols"><code class="calibre2">R_useDynamicSymbols</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Registering-native-routines">Registering native routines</a></p>
<p><a href="R-exts_split_010.html#index-R_005fVersion"><code class="calibre2">R_Version</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Platform-and-version-information">Platform and version information</a></p>
<p><a href="R-exts_split_012.html#index-R_005fWriteConsole"><code class="calibre2">R_WriteConsole</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<p><a href="R-exts_split_012.html#index-R_005fWriteConsoleEx"><code class="calibre2">R_WriteConsoleEx</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_012.html#Setting-R-callbacks">Setting R callbacks</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-S">S</a></p>
<p><a href="R-exts_split_005.html#index-S3method"><code class="calibre2">S3method</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Registering-S3-methods">Registering S3 methods</a></p>
<p><a href="R-exts_split_004.html#index-SAFE_005fFFLAGS"><code class="calibre2">SAFE_FFLAGS</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Using-Makevars">Using Makevars</a></p>
<p><a href="R-exts_split_010.html#index-samin"><code class="calibre2">samin</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Optimization">Optimization</a></p>
<p><a href="R-exts_split_010.html#index-seed_005fin"><code class="calibre2">seed_in</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Random-numbers">Random numbers</a></p>
<p><a href="R-exts_split_010.html#index-seed_005fout"><code class="calibre2">seed_out</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Random-numbers">Random numbers</a></p>
<p><a href="R-exts_split_009.html#index-setAttrib"><code class="calibre2">setAttrib</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Attributes">Attributes</a></p>
<p><a href="R-exts_split_009.html#index-setVar"><code class="calibre2">setVar</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Finding-and-setting-variables">Finding and setting variables</a></p>
<p><a href="R-exts_split_010.html#index-sign"><code class="calibre2">sign</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_010.html#index-sinpi"><code class="calibre2">sinpi</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_007.html#index-summaryRprof"><code class="calibre2">summaryRprof</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_007.html#Memory-statistics-from-Rprof">Memory statistics from Rprof</a></p>
<p><a href="R-exts_split_009.html#index-system"><code class="calibre2">system</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Operating-system-access">Operating system access</a></p>
<p><a href="R-exts_split_009.html#index-system_002etime"><code class="calibre2">system.time</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Operating-system-access">Operating system access</a></p>
<p><a href="R-exts_split_009.html#index-system2"><code class="calibre2">system2</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Operating-system-access">Operating system access</a></p>
<p><a href="R-exts_split_010.html#index-S_005falloc"><code class="calibre2">S_alloc</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Transient-storage-allocation">Transient storage allocation</a></p>
<p><a href="R-exts_split_010.html#index-S_005frealloc"><code class="calibre2">S_realloc</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Transient-storage-allocation">Transient storage allocation</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-T">T</a></p>
<p><a href="R-exts_split_010.html#index-tanpi"><code class="calibre2">tanpi</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-Utilities">Numerical Utilities</a></p>
<p><a href="R-exts_split_010.html#index-tetragamma"><code class="calibre2">tetragamma</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-tetragamma-1"><code class="calibre2">tetragamma</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_008.html#index-trace"><code class="calibre2">trace</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_008.html#Debugging-R-code">Debugging R code</a></p>
<p><a href="R-exts_split_008.html#index-traceback"><code class="calibre2">traceback</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_008.html#Debugging-R-code">Debugging R code</a></p>
<p><a href="R-exts_split_007.html#index-tracemem"><code class="calibre2">tracemem</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_007.html#Tracing-copies-of-an-object">Tracing copies of an object</a></p>
<p><a href="R-exts_split_009.html#index-translateChar"><code class="calibre2">translateChar</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Character-encoding-issues">Character encoding issues</a></p>
<p><a href="R-exts_split_009.html#index-translateCharUTF8"><code class="calibre2">translateCharUTF8</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Character-encoding-issues">Character encoding issues</a></p>
<p><a href="R-exts_split_010.html#index-trigamma"><code class="calibre2">trigamma</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-trigamma-1"><code class="calibre2">trigamma</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-TRUE"><code class="calibre2">TRUE</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-constants">Mathematical constants</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-U">U</a></p>
<p><a href="R-exts_split_008.html#index-undebug"><code class="calibre2">undebug</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_008.html#Debugging-R-code">Debugging R code</a></p>
<p><a href="R-exts_split_010.html#index-unif_005frand"><code class="calibre2">unif_rand</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Random-numbers">Random numbers</a></p>
<p><a href="R-exts_split_009.html#index-UNPROTECT"><code class="calibre2">UNPROTECT</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Garbage-Collection">Garbage Collection</a></p>
<p><a href="R-exts_split_009.html#index-UNPROTECT_005fPTR"><code class="calibre2">UNPROTECT_PTR</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Garbage-Collection">Garbage Collection</a></p>
<p><a href="R-exts_split_007.html#index-untracemem"><code class="calibre2">untracemem</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_007.html#Tracing-copies-of-an-object">Tracing copies of an object</a></p>
<p><a href="R-exts_split_005.html#index-useDynLib"><code class="calibre2">useDynLib</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#useDynLib">useDynLib</a></p>
<hr />
<p><a href="" id="Function-and-variable-index_vr_letter-V">V</a></p>
<p><a href="R-exts_split_010.html#index-vmaxget"><code class="calibre2">vmaxget</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Transient-storage-allocation">Transient storage allocation</a></p>
<p><a href="R-exts_split_010.html#index-vmaxset"><code class="calibre2">vmaxset</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Transient-storage-allocation">Transient storage allocation</a></p>
<p><a href="R-exts_split_010.html#index-vmmin"><code class="calibre2">vmmin</code></a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Optimization">Optimization</a></p>
<hr />
<table>
<tbody>
<tr class="odd">
<td align="left">Jump to:  </td>
<td align="left"><a href="#Function-and-variable-index_vr_symbol-1" class="summary-letter"><strong>.</strong></a>   <a href="#Function-and-variable-index_vr_symbol-2" class="summary-letter"><strong>\</strong></a>  <br />
<a href="#Function-and-variable-index_vr_letter-A" class="summary-letter"><strong>A</strong></a>   <a href="#Function-and-variable-index_vr_letter-B" class="summary-letter"><strong>B</strong></a>   <a href="#Function-and-variable-index_vr_letter-C" class="summary-letter"><strong>C</strong></a>   <a href="#Function-and-variable-index_vr_letter-D" class="summary-letter"><strong>D</strong></a>   <a href="#Function-and-variable-index_vr_letter-E" class="summary-letter"><strong>E</strong></a>   <a href="#Function-and-variable-index_vr_letter-F" class="summary-letter"><strong>F</strong></a>   <a href="#Function-and-variable-index_vr_letter-G" class="summary-letter"><strong>G</strong></a>   <a href="#Function-and-variable-index_vr_letter-I" class="summary-letter"><strong>I</strong></a>   <a href="#Function-and-variable-index_vr_letter-L" class="summary-letter"><strong>L</strong></a>   <a href="#Function-and-variable-index_vr_letter-M" class="summary-letter"><strong>M</strong></a>   <a href="#Function-and-variable-index_vr_letter-N" class="summary-letter"><strong>N</strong></a>   <a href="#Function-and-variable-index_vr_letter-O" class="summary-letter"><strong>O</strong></a>   <a href="#Function-and-variable-index_vr_letter-P" class="summary-letter"><strong>P</strong></a>   <a href="#Function-and-variable-index_vr_letter-Q" class="summary-letter"><strong>Q</strong></a>   <a href="#Function-and-variable-index_vr_letter-R" class="summary-letter"><strong>R</strong></a>   <a href="#Function-and-variable-index_vr_letter-S" class="summary-letter"><strong>S</strong></a>   <a href="#Function-and-variable-index_vr_letter-T" class="summary-letter"><strong>T</strong></a>   <a href="#Function-and-variable-index_vr_letter-U" class="summary-letter"><strong>U</strong></a>   <a href="#Function-and-variable-index_vr_letter-V" class="summary-letter"><strong>V</strong></a>  </td>
</tr>
</tbody>
</table>
<hr />
<p><a href="" id="Concept-index"></a> <a href="" id="Concept-index-1"></a></p>

<!--chapter:end:13-R-exts.Rmd-->

# Concept index
<table>
<tbody>
<tr class="odd">
<td align="left">Jump to:  </td>
<td align="left"><a href="#Concept-index_cp_symbol-1" class="summary-letter"><strong>.</strong></a>   <a href="#Concept-index_cp_symbol-2" class="summary-letter"><strong>\</strong></a>  <br />
<a href="#Concept-index_cp_letter-A" class="summary-letter"><strong>A</strong></a>   <a href="#Concept-index_cp_letter-B" class="summary-letter"><strong>B</strong></a>   <a href="#Concept-index_cp_letter-C" class="summary-letter"><strong>C</strong></a>   <a href="#Concept-index_cp_letter-D" class="summary-letter"><strong>D</strong></a>   <a href="#Concept-index_cp_letter-E" class="summary-letter"><strong>E</strong></a>   <a href="#Concept-index_cp_letter-F" class="summary-letter"><strong>F</strong></a>   <a href="#Concept-index_cp_letter-G" class="summary-letter"><strong>G</strong></a>   <a href="#Concept-index_cp_letter-H" class="summary-letter"><strong>H</strong></a>   <a href="#Concept-index_cp_letter-I" class="summary-letter"><strong>I</strong></a>   <a href="#Concept-index_cp_letter-L" class="summary-letter"><strong>L</strong></a>   <a href="#Concept-index_cp_letter-M" class="summary-letter"><strong>M</strong></a>   <a href="#Concept-index_cp_letter-N" class="summary-letter"><strong>N</strong></a>   <a href="#Concept-index_cp_letter-O" class="summary-letter"><strong>O</strong></a>   <a href="#Concept-index_cp_letter-P" class="summary-letter"><strong>P</strong></a>   <a href="#Concept-index_cp_letter-R" class="summary-letter"><strong>R</strong></a>   <a href="#Concept-index_cp_letter-S" class="summary-letter"><strong>S</strong></a>   <a href="#Concept-index_cp_letter-T" class="summary-letter"><strong>T</strong></a>   <a href="#Concept-index_cp_letter-U" class="summary-letter"><strong>U</strong></a>   <a href="#Concept-index_cp_letter-V" class="summary-letter"><strong>V</strong></a>   <a href="#Concept-index_cp_letter-W" class="summary-letter"><strong>W</strong></a>   <a href="#Concept-index_cp_letter-Z" class="summary-letter"><strong>Z</strong></a>  </td>
</tr>
</tbody>
</table>
<p>Index Entry</p>
<p> </p>
<p>Section</p>
<hr />
<p><a href="" id="Concept-index_cp_symbol-1">.</a></p>
<p><a href="R-exts_split_005.html#index-_002einstall_005fextras-file">.install_extras file</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Writing-package-vignettes">Writing package vignettes</a></p>
<p><a href="R-exts_split_004.html#index-_002eRbuildignore-file">.Rbuildignore file</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Building-package-tarballs">Building package tarballs</a></p>
<p><a href="R-exts_split_004.html#index-_002eRinstignore-file">.Rinstignore file</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Package-subdirectories">Package subdirectories</a></p>
<hr />
<p><a href="" id="Concept-index_cp_symbol-2">\</a></p>
<p><a href="R-exts_split_006.html#index-_005clinkS4class">\linkS4class</a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Cross_002dreferences">Cross-references</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-A">A</a></p>
<p><a href="R-exts_split_009.html#index-Allocating-storage">Allocating storage</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Allocating-storage">Allocating storage</a></p>
<p><a href="R-exts_split_009.html#index-Attributes">Attributes</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Attributes">Attributes</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-B">B</a></p>
<p><a href="R-exts_split_010.html#index-Bessel-functions">Bessel functions</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_010.html#index-Beta-function">Beta function</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_004.html#index-Building-binary-packages">Building binary packages</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Building-binary-packages">Building binary packages</a></p>
<p><a href="R-exts_split_004.html#index-Building-source-packages">Building source packages</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Building-package-tarballs">Building package tarballs</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-C">C</a></p>
<p><a href="R-exts_split_009.html#index-C_002b_002b-code_002c-interfacing">C++ code, interfacing</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Interfacing-C_002b_002b-code">Interfacing C++ code</a></p>
<p><a href="R-exts_split_010.html#index-Calling-C-from-FORTRAN-and-vice-versa">Calling C from FORTRAN and vice versa</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Calling-C-from-FORTRAN-and-vice-versa">Calling C from FORTRAN and vice versa</a></p>
<p><a href="R-exts_split_004.html#index-Checking-packages">Checking packages</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Checking-packages">Checking packages</a></p>
<p><a href="R-exts_split_004.html#index-citation">citation</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Package-subdirectories">Package subdirectories</a></p>
<p><a href="R-exts_split_005.html#index-citation-1">citation</a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Preparing-translations">Preparing translations</a></p>
<p><a href="R-exts_split_009.html#index-Classes">Classes</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Classes">Classes</a></p>
<p><a href="R-exts_split_004.html#index-cleanup-file">cleanup file</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Package-structure">Package structure</a></p>
<p><a href="R-exts_split_006.html#index-conditionals">conditionals</a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Conditional-text">Conditional text</a></p>
<p><a href="R-exts_split_004.html#index-configure-file">configure file</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Package-structure">Package structure</a></p>
<p><a href="R-exts_split_009.html#index-Copying-objects">Copying objects</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Named-objects-and-copying">Named objects and copying</a></p>
<p><a href="R-exts_split_004.html#index-CRAN">CRAN</a>:</p>
<p> </p>
<p><a href="R-exts_split_003.html#Creating-R-packages">Creating R packages</a></p>
<p><a href="R-exts_split_004.html#index-Creating-packages">Creating packages</a>:</p>
<p> </p>
<p><a href="R-exts_split_003.html#Creating-R-packages">Creating R packages</a></p>
<p><a href="R-exts_split_009.html#index-Creating-shared-objects">Creating shared objects</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Creating-shared-objects">Creating shared objects</a></p>
<p><a href="R-exts_split_006.html#index-Cross_002dreferences-in-documentation">Cross-references in documentation</a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Cross_002dreferences">Cross-references</a></p>
<p><a href="R-exts_split_010.html#index-cumulative-hazard">cumulative hazard</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Distribution-functions">Distribution functions</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-D">D</a></p>
<p><a href="R-exts_split_008.html#index-Debugging">Debugging</a>:</p>
<p> </p>
<p><a href="R-exts_split_008.html#Debugging-compiled-code">Debugging compiled code</a></p>
<p><a href="R-exts_split_004.html#index-DESCRIPTION-file">DESCRIPTION file</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#The-DESCRIPTION-file">The DESCRIPTION file</a></p>
<p><a href="R-exts_split_009.html#index-Details-of-R-types">Details of R types</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Details-of-R-types">Details of R types</a></p>
<p><a href="R-exts_split_010.html#index-Distribution-functions-from-C">Distribution functions from C</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Distribution-functions">Distribution functions</a></p>
<p><a href="R-exts_split_006.html#index-Documentation_002c-writing">Documentation, writing</a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Writing-R-documentation-files">Writing R documentation files</a></p>
<p><a href="R-exts_split_009.html#index-Dynamic-loading">Dynamic loading</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#dyn_002eload-and-dyn_002eunload">dyn.load and dyn.unload</a></p>
<p><a href="R-exts_split_006.html#index-dynamic-pages">dynamic pages</a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Dynamic-pages">Dynamic pages</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-E">E</a></p>
<p><a href="R-exts_split_006.html#index-Editing-Rd-files">Editing Rd files</a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Editing-Rd-files">Editing Rd files</a></p>
<p><a href="R-exts_split_006.html#index-encoding">encoding</a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Encoding">Encoding</a></p>
<p><a href="R-exts_split_010.html#index-Error-handling-from-C">Error handling from C</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Error-handling">Error handling</a></p>
<p><a href="R-exts_split_010.html#index-Error-handling-from-FORTRAN">Error handling from FORTRAN</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Error-handling-from-FORTRAN">Error handling from FORTRAN</a></p>
<p><a href="R-exts_split_009.html#index-Evaluating-R-expressions-from-C">Evaluating R expressions from C</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Evaluating-R-expressions-from-C">Evaluating R expressions from C</a></p>
<p><a href="R-exts_split_009.html#index-external-pointer">external pointer</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#External-pointers-and-weak-references">External pointers and weak references</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-F">F</a></p>
<p><a href="R-exts_split_006.html#index-Figures-in-documentation">Figures in documentation</a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Figures">Figures</a></p>
<p><a href="R-exts_split_009.html#index-finalizer">finalizer</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#External-pointers-and-weak-references">External pointers and weak references</a></p>
<p><a href="R-exts_split_009.html#index-Finding-variables">Finding variables</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Finding-and-setting-variables">Finding and setting variables</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-G">G</a></p>
<p><a href="R-exts_split_010.html#index-Gamma-function">Gamma function</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Mathematical-functions">Mathematical functions</a></p>
<p><a href="R-exts_split_009.html#index-Garbage-collection">Garbage collection</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Garbage-Collection">Garbage Collection</a></p>
<p><a href="R-exts_split_011.html#index-Generic-functions">Generic functions</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Generic-functions-and-methods">Generic functions and methods</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-H">H</a></p>
<p><a href="R-exts_split_009.html#index-handling-character-data">handling character data</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Handling-character-data">Handling character data</a></p>
<p><a href="R-exts_split_009.html#index-Handling-lists">Handling lists</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Handling-lists">Handling lists</a></p>
<p><a href="R-exts_split_009.html#index-Handling-R-objects-in-C">Handling R objects in C</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Handling-R-objects-in-C">Handling R objects in C</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-I">I</a></p>
<p><a href="R-exts_split_009.html#index-IEEE-special-values">IEEE special values</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Missing-and-special-values">Missing and special values</a></p>
<p><a href="R-exts_split_010.html#index-IEEE-special-values-1">IEEE special values</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Missing-and-IEEE-values">Missing and IEEE values</a></p>
<p><a href="R-exts_split_004.html#index-INDEX-file">INDEX file</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#The-INDEX-file">The INDEX file</a></p>
<p><a href="R-exts_split_006.html#index-Indices">Indices</a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Indices">Indices</a></p>
<p><a href="R-exts_split_008.html#index-Inspecting-R-objects-when-debugging">Inspecting R objects when debugging</a>:</p>
<p> </p>
<p><a href="R-exts_split_008.html#Inspecting-R-objects">Inspecting R objects</a></p>
<p><a href="R-exts_split_010.html#index-integration">integration</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Integration">Integration</a></p>
<p><a href="R-exts_split_009.html#index-Interfaces-to-compiled-code">Interfaces to compiled code</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Interface-functions-_002eC-and-_002eFortran">Interface functions .C and .Fortran</a></p>
<p><a href="R-exts_split_009.html#index-Interfaces-to-compiled-code-1">Interfaces to compiled code</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Interface-functions-_002eCall-and-_002eExternal">Interface functions .Call and .External</a></p>
<p><a href="R-exts_split_009.html#index-Interfacing-C_002b_002b-code">Interfacing C++ code</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Interfacing-C_002b_002b-code">Interfacing C++ code</a></p>
<p><a href="R-exts_split_010.html#index-Interrupts">Interrupts</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Allowing-interrupts">Allowing interrupts</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-L">L</a></p>
<p><a href="R-exts_split_004.html#index-LICENCE-file">LICENCE file</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Licensing">Licensing</a></p>
<p><a href="R-exts_split_004.html#index-LICENSE-file">LICENSE file</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Licensing">Licensing</a></p>
<p><a href="R-exts_split_006.html#index-Lists-and-tables-in-documentation">Lists and tables in documentation</a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Lists-and-tables">Lists and tables</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-M">M</a></p>
<p><a href="R-exts_split_006.html#index-Marking-text-in-documentation">Marking text in documentation</a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Marking-text">Marking text</a></p>
<p><a href="R-exts_split_006.html#index-Mathematics-in-documentation">Mathematics in documentation</a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Mathematics">Mathematics</a></p>
<p><a href="R-exts_split_010.html#index-Memory-allocation-from-C">Memory allocation from C</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Memory-allocation">Memory allocation</a></p>
<p><a href="R-exts_split_007.html#index-Memory-use">Memory use</a>:</p>
<p> </p>
<p><a href="R-exts_split_007.html#Profiling-R-code-for-memory-use">Profiling R code for memory use</a></p>
<p><a href="R-exts_split_011.html#index-Method-functions">Method functions</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Generic-functions-and-methods">Generic functions and methods</a></p>
<p><a href="R-exts_split_009.html#index-Missing-values">Missing values</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Missing-and-special-values">Missing and special values</a></p>
<p><a href="R-exts_split_010.html#index-Missing-values-1">Missing values</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Missing-and-IEEE-values">Missing and IEEE values</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-N">N</a></p>
<p><a href="R-exts_split_005.html#index-namespaces">namespaces</a>:</p>
<p> </p>
<p><a href="R-exts_split_005.html#Package-namespaces">Package namespaces</a></p>
<p><a href="R-exts_split_004.html#index-news">news</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Package-subdirectories">Package subdirectories</a></p>
<p><a href="R-exts_split_010.html#index-Numerical-analysis-subroutines-from-C">Numerical analysis subroutines from C</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Numerical-analysis-subroutines">Numerical analysis subroutines</a></p>
<p><a href="R-exts_split_009.html#index-Numerical-derivatives">Numerical derivatives</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Calculating-numerical-derivatives">Calculating numerical derivatives</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-O">O</a></p>
<p><a href="R-exts_split_004.html#index-OpenMP">OpenMP</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#OpenMP-support">OpenMP support</a></p>
<p><a href="R-exts_split_010.html#index-OpenMP-1">OpenMP</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Platform-and-version-information">Platform and version information</a></p>
<p><a href="R-exts_split_009.html#index-Operating-system-access">Operating system access</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Operating-system-access">Operating system access</a></p>
<p><a href="R-exts_split_010.html#index-optimization">optimization</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Optimization">Optimization</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-P">P</a></p>
<p><a href="R-exts_split_004.html#index-Package-builder">Package builder</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Building-package-tarballs">Building package tarballs</a></p>
<p><a href="R-exts_split_004.html#index-Package-structure">Package structure</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Package-structure">Package structure</a></p>
<p><a href="R-exts_split_004.html#index-Package-subdirectories">Package subdirectories</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Package-subdirectories">Package subdirectories</a></p>
<p><a href="R-exts_split_004.html#index-Packages">Packages</a>:</p>
<p> </p>
<p><a href="R-exts_split_003.html#Creating-R-packages">Creating R packages</a></p>
<p><a href="R-exts_split_009.html#index-Parsing-R-code-from-C">Parsing R code from C</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Parsing-R-code-from-C">Parsing R code from C</a></p>
<p><a href="R-exts_split_006.html#index-Platform_002dspecific-documentation">Platform-specific documentation</a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Platform_002dspecific-sections">Platform-specific sections</a></p>
<p><a href="R-exts_split_010.html#index-Printing-from-C">Printing from C</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Printing">Printing</a></p>
<p><a href="R-exts_split_010.html#index-Printing-from-FORTRAN">Printing from FORTRAN</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Printing-from-FORTRAN">Printing from FORTRAN</a></p>
<p><a href="R-exts_split_006.html#index-Processing-Rd-format">Processing Rd format</a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#Processing-documentation-files">Processing documentation files</a></p>
<p><a href="R-exts_split_007.html#index-Profiling">Profiling</a>:</p>
<p> </p>
<p><a href="R-exts_split_007.html#Profiling-R-code-for-speed">Profiling R code for speed</a></p>
<p><a href="R-exts_split_007.html#index-Profiling-1">Profiling</a>:</p>
<p> </p>
<p><a href="R-exts_split_007.html#Profiling-R-code-for-memory-use">Profiling R code for memory use</a></p>
<p><a href="R-exts_split_007.html#index-Profiling-2">Profiling</a>:</p>
<p> </p>
<p><a href="R-exts_split_007.html#Profiling-compiled-code">Profiling compiled code</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-R">R</a></p>
<p><a href="R-exts_split_010.html#index-Random-numbers-in-C">Random numbers in C</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Random-numbers">Random numbers</a></p>
<p><a href="R-exts_split_010.html#index-Random-numbers-in-C-1">Random numbers in C</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Distribution-functions">Distribution functions</a></p>
<p><a href="R-exts_split_010.html#index-Random-numbers-in-FORTRAN">Random numbers in FORTRAN</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Calling-C-from-FORTRAN-and-vice-versa">Calling C from FORTRAN and vice versa</a></p>
<p><a href="R-exts_split_009.html#index-Registering-native-routines">Registering native routines</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Registering-native-routines">Registering native routines</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-S">S</a></p>
<p><a href="R-exts_split_009.html#index-Setting-variables">Setting variables</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Finding-and-setting-variables">Finding and setting variables</a></p>
<p><a href="R-exts_split_010.html#index-Sort-functions-from-C">Sort functions from C</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Utility-functions">Utility functions</a></p>
<p><a href="R-exts_split_005.html#index-Sweave">Sweave</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Writing-package-vignettes">Writing package vignettes</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-T">T</a></p>
<p><a href="R-exts_split_004.html#index-tarballs">tarballs</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Building-package-tarballs">Building package tarballs</a></p>
<p><a href="R-exts_split_007.html#index-Tidying-R-code">Tidying R code</a>:</p>
<p> </p>
<p><a href="R-exts_split_007.html#Tidying-R-code">Tidying R code</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-U">U</a></p>
<p><a href="R-exts_split_006.html#index-user_002ddefined-macros">user-defined macros</a>:</p>
<p> </p>
<p><a href="R-exts_split_006.html#User_002ddefined-macros">User-defined macros</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-V">V</a></p>
<p><a href="R-exts_split_010.html#index-Version-information-from-C">Version information from C</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Platform-and-version-information">Platform and version information</a></p>
<p><a href="R-exts_split_005.html#index-vignettes">vignettes</a>:</p>
<p> </p>
<p><a href="R-exts_split_004.html#Writing-package-vignettes">Writing package vignettes</a></p>
<p><a href="R-exts_split_010.html#index-Visibility">Visibility</a>:</p>
<p> </p>
<p><a href="R-exts_split_010.html#Controlling-visibility">Controlling visibility</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-W">W</a></p>
<p><a href="R-exts_split_009.html#index-weak-reference">weak reference</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#External-pointers-and-weak-references">External pointers and weak references</a></p>
<hr />
<p><a href="" id="Concept-index_cp_letter-Z">Z</a></p>
<p><a href="R-exts_split_009.html#index-Zero_002dfinding">Zero-finding</a>:</p>
<p> </p>
<p><a href="R-exts_split_009.html#Zero_002dfinding">Zero-finding</a></p>
<hr />
<table>
<tbody>
<tr class="odd">
<td align="left">Jump to:  </td>
<td align="left"><a href="#Concept-index_cp_symbol-1" class="summary-letter"><strong>.</strong></a>   <a href="#Concept-index_cp_symbol-2" class="summary-letter"><strong>\</strong></a>  <br />
<a href="#Concept-index_cp_letter-A" class="summary-letter"><strong>A</strong></a>   <a href="#Concept-index_cp_letter-B" class="summary-letter"><strong>B</strong></a>   <a href="#Concept-index_cp_letter-C" class="summary-letter"><strong>C</strong></a>   <a href="#Concept-index_cp_letter-D" class="summary-letter"><strong>D</strong></a>   <a href="#Concept-index_cp_letter-E" class="summary-letter"><strong>E</strong></a>   <a href="#Concept-index_cp_letter-F" class="summary-letter"><strong>F</strong></a>   <a href="#Concept-index_cp_letter-G" class="summary-letter"><strong>G</strong></a>   <a href="#Concept-index_cp_letter-H" class="summary-letter"><strong>H</strong></a>   <a href="#Concept-index_cp_letter-I" class="summary-letter"><strong>I</strong></a>   <a href="#Concept-index_cp_letter-L" class="summary-letter"><strong>L</strong></a>   <a href="#Concept-index_cp_letter-M" class="summary-letter"><strong>M</strong></a>   <a href="#Concept-index_cp_letter-N" class="summary-letter"><strong>N</strong></a>   <a href="#Concept-index_cp_letter-O" class="summary-letter"><strong>O</strong></a>   <a href="#Concept-index_cp_letter-P" class="summary-letter"><strong>P</strong></a>   <a href="#Concept-index_cp_letter-R" class="summary-letter"><strong>R</strong></a>   <a href="#Concept-index_cp_letter-S" class="summary-letter"><strong>S</strong></a>   <a href="#Concept-index_cp_letter-T" class="summary-letter"><strong>T</strong></a>   <a href="#Concept-index_cp_letter-U" class="summary-letter"><strong>U</strong></a>   <a href="#Concept-index_cp_letter-V" class="summary-letter"><strong>V</strong></a>   <a href="#Concept-index_cp_letter-W" class="summary-letter"><strong>W</strong></a>   <a href="#Concept-index_cp_letter-Z" class="summary-letter"><strong>Z</strong></a>  </td>
</tr>
</tbody>
</table>
<div class="contents">
<hr />
<h4 id="footnotes" class="subsection">Footnotes</h4>
<h3 id="section" class="section"><a href="R-exts_split_004.html#DOCF1" id="FOOT1" class="calibre21">(1)</a></h3>
<p>although this is a persistent mis-usage. It seems to stem from S, whose analogues of R’s packages were officially known as <em>library sections</em> and later as <em>chapters</em>, but almost always referred to as <em>libraries</em>.</p>
<h3 id="section-1" class="section"><a href="R-exts_split_004.html#DOCF2" id="FOOT2" class="calibre21">(2)</a></h3>
<p>This seems to be commonly used for a file in ‘markdown’ format. Be aware that most users of R will not know that, nor know how to view such a file: platforms such as macOS and Windows do not have a default viewer set in their file associations. The CRAN package web pages render such files in HTML: the converter used expects the file to be encoded in UTF-8.</p>
<h3 id="section-2" class="section"><a href="R-exts_split_004.html#DOCF3" id="FOOT3" class="calibre21">(3)</a></h3>
<p>currently, top-level files .Rbuildignore and .Rinstignore, and vignettes/.install_extras.</p>
<h3 id="section-3" class="section"><a href="R-exts_split_004.html#DOCF4" id="FOOT4" class="calibre21">(4)</a></h3>
<p>false positives are possible, but only a handful have been seen so far.</p>
<h3 id="section-4" class="section"><a href="R-exts_split_004.html#DOCF5" id="FOOT5" class="calibre21">(5)</a></h3>
<p>at least if this is done in a locale which matches the package encoding.</p>
<h3 id="section-5" class="section"><a href="R-exts_split_004.html#DOCF6" id="FOOT6" class="calibre21">(6)</a></h3>
<p>and required by CRAN, so checked by <code class="calibre2">R CMD check --as-cran</code>.</p>
<h3 id="section-6" class="section"><a href="R-exts_split_004.html#DOCF7" id="FOOT7" class="calibre21">(7)</a></h3>
<p>But it is checked for Open Source packages by <code class="calibre2">R CMD check --as-cran</code>.</p>
<h3 id="section-7" class="section"><a href="R-exts_split_004.html#DOCF8" id="FOOT8" class="calibre21">(8)</a></h3>
<p>Duplicate definitions may trigger a warning: see <a href="R-exts_split_006.html#User_002ddefined-macros">User-defined macros</a>.</p>
<h3 id="section-8" class="section"><a href="R-exts_split_004.html#DOCF9" id="FOOT9" class="calibre21">(9)</a></h3>
<p>As from R 3.4.0, <code class="calibre2">bug.report</code> will try to extract an email address from a <code class="calibre2">Contact</code> field if there is no <code class="calibre2">BugReports</code> field.</p>
<h3 id="section-9" class="section"><a href="R-exts_split_004.html#DOCF10" id="FOOT10" class="calibre21">(10)</a></h3>
<p>even one wrapped in <code class="calibre2">\donttest</code>.</p>
<h3 id="section-10" class="section"><a href="R-exts_split_004.html#DOCF11" id="FOOT11" class="calibre21">(11)</a></h3>
<p>This includes all packages directly called by <code class="calibre2">library</code> and <code class="calibre2">require</code> calls, as well as data obtained <em>via</em> <code class="calibre2">data(theirdata, package = &quot;somepkg&quot;)</code> calls: <code class="calibre2">R CMD check</code> will warn about all of these. But there are subtler uses which it will not detect: e.g. if package A uses package B and makes use of functionality in package B which uses package C which package B suggests or enhances, then package C needs to be in the ‘Suggests’ list for package A. Nor will undeclared uses in included files be reported, nor unconditional uses of packages listed under ‘Enhances’.</p>
<h3 id="section-11" class="section"><a href="R-exts_split_004.html#DOCF12" id="FOOT12" class="calibre21">(12)</a></h3>
<p>Extensions .S and .s arise from code originally written for S(-PLUS), but are commonly used for assembler code. Extension .q was used for S, which at one time was tentatively called QPE.</p>
<h3 id="section-12" class="section"><a href="R-exts_split_004.html#DOCF13" id="FOOT13" class="calibre21">(13)</a></h3>
<p>but they should be in the encoding declared in the DESCRIPTION file.</p>
<h3 id="section-13" class="section"><a href="R-exts_split_004.html#DOCF14" id="FOOT14" class="calibre21">(14)</a></h3>
<p>This is true for OSes which implement the ‘C’ locale: Windows’ idea of the ‘C’ locale uses the WinAnsi charset.</p>
<h3 id="section-14" class="section"><a href="R-exts_split_004.html#DOCF15" id="FOOT15" class="calibre21">(15)</a></h3>
<p>More precisely, they can contain the English alphanumeric characters and the symbols ‘$ - _ . + ! ' ( ) , ;  = &amp;’.</p>
<h3 id="section-15" class="section"><a href="R-exts_split_004.html#DOCF16" id="FOOT16" class="calibre21">(16)</a></h3>
<p>Note that Ratfor is not supported. If you have Ratfor source code, you need to convert it to FORTRAN. Only FORTRAN 77 (which we write in upper case) is supported on all platforms, but most also support Fortran-95 (for which we use title case). If you want to ship Ratfor source files, please do so in a subdirectory of src and not in the main subdirectory.</p>
<h3 id="section-16" class="section"><a href="R-exts_split_004.html#DOCF17" id="FOOT17" class="calibre21">(17)</a></h3>
<p>either or both of which may not be supported on particular platforms</p>
<h3 id="section-17" class="section"><a href="R-exts_split_004.html#DOCF18" id="FOOT18" class="calibre21">(18)</a></h3>
<p>Using .hpp is not guaranteed to be portable.</p>
<h3 id="section-18" class="section"><a href="R-exts_split_004.html#DOCF19" id="FOOT19" class="calibre21">(19)</a></h3>
<p>There is also ‘__APPLE_CC__’, but that indicates a compiler with Apple-specific features, not the OS. It is used in Rinlinedfuns.h.</p>
<h3 id="section-19" class="section"><a href="R-exts_split_004.html#DOCF20" id="FOOT20" class="calibre21">(20)</a></h3>
<p>the POSIX terminology, called ‘make variables’ by GNU make.</p>
<h3 id="section-20" class="section"><a href="R-exts_split_004.html#DOCF21" id="FOOT21" class="calibre21">(21)</a></h3>
<p>The best way to generate such a file is to copy the .Rout from a successful run of <code class="calibre2">R CMD check</code>. If you want to generate it separately, do run R with options --vanilla --slave and with environment variable <code class="calibre2">LANGUAGE=en</code> set to get messages in English. Be careful not to use output with the option --timings (and note that --as-cran sets it).</p>
<h3 id="section-21" class="section"><a href="R-exts_split_004.html#DOCF22" id="FOOT22" class="calibre21">(22)</a></h3>
<p>e.g. <a href="https://tools.ietf.org/html/rfc4180" class="uri">https://tools.ietf.org/html/rfc4180</a>.</p>
<h3 id="section-22" class="section"><a href="R-exts_split_004.html#DOCF23" id="FOOT23" class="calibre21">(23)</a></h3>
<p>People who have trouble with case are advised to use .rda as a common error is to refer to abc.RData as abc.Rdata!</p>
<h3 id="section-23" class="section"><a href="R-exts_split_004.html#DOCF24" id="FOOT24" class="calibre21">(24)</a></h3>
<p>The script should only assume a POSIX-compliant <code class="calibre2">/bin/sh</code> – see <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html" class="uri">http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html</a>. In particular <code class="calibre2">bash</code> extensions must not be used, and not all R platforms have a <code class="calibre2">bash</code> command, let alone one at /bin/bash. All known shells used with R support the use of backticks, but not all support ‘$(cmd)’.</p>
<h3 id="section-24" class="section"><a href="R-exts_split_004.html#DOCF25" id="FOOT25" class="calibre21">(25)</a></h3>
<p>in POSIX parlance: GNU <code class="calibre2">make</code> calls these ‘make variables’.</p>
<h3 id="section-25" class="section"><a href="R-exts_split_004.html#DOCF26" id="FOOT26" class="calibre21">(26)</a></h3>
<p>at least on Unix-alikes: the Windows build currently resolves such dependencies to a static FORTRAN library when Rblas.dll is built.</p>
<h3 id="section-26" class="section"><a href="R-exts_split_004.html#DOCF27" id="FOOT27" class="calibre21">(27)</a></h3>
<p><a href="http://www.openmp.org/" class="uri">http://www.openmp.org/</a>, <a href="https://en.wikipedia.org/wiki/OpenMP" class="uri">https://en.wikipedia.org/wiki/OpenMP</a>, <a href="https://computing.llnl.gov/tutorials/openMP/" class="uri">https://computing.llnl.gov/tutorials/openMP/</a></p>
<h3 id="section-27" class="section"><a href="R-exts_split_004.html#DOCF28" id="FOOT28" class="calibre21">(28)</a></h3>
<p>Default builds of <code class="calibre2">clang</code> 3.8.0 and later have support for OpenMP, but the <code class="calibre2">libomp</code> run-time library may not be installed.</p>
<h3 id="section-28" class="section"><a href="R-exts_split_004.html#DOCF29" id="FOOT29" class="calibre21">(29)</a></h3>
<p>In most implementations the <code class="calibre2">_OPENMP</code> macro has value a date which can be mapped to an OpenMP version: for example, value <code class="calibre2">201307</code> is the date of version 4.0 (July 2013). However this may be used to denote the latest version which is partially supported, not that which is fully implemented.</p>
<h3 id="section-29" class="section"><a href="R-exts_split_004.html#DOCF30" id="FOOT30" class="calibre21">(30)</a></h3>
<p>GCC since 4.7, hence R builds for Windows since R 3.3.0, which also support OpenMP 4.0.</p>
<h3 id="section-30" class="section"><a href="R-exts_split_004.html#DOCF31" id="FOOT31" class="calibre21">(31)</a></h3>
<p>People do use older versions of OSes such as Ubuntu 12.04LTS and Debian Wheezy LTS which have GCC 4.4.</p>
<h3 id="section-31" class="section"><a href="R-exts_split_004.html#DOCF32" id="FOOT32" class="calibre21">(32)</a></h3>
<p>as did the GCC-based Apple implementation, but not the Intel/LLVM OpenMP runtime on macOS.</p>
<h3 id="section-32" class="section"><a href="R-exts_split_004.html#DOCF33" id="FOOT33" class="calibre21">(33)</a></h3>
<p>Windows default, not MinGW-w64 default.</p>
<h3 id="section-33" class="section"><a href="R-exts_split_004.html#DOCF34" id="FOOT34" class="calibre21">(34)</a></h3>
<p>Which it was at the time of writing with GCC, Oracle, Intel and Clang compilers.</p>
<h3 id="section-34" class="section"><a href="R-exts_split_004.html#DOCF35" id="FOOT35" class="calibre21">(35)</a></h3>
<p>some Windows toolchains had the typo ‘_REENTRANCE’ instead.</p>
<h3 id="section-35" class="section"><a href="R-exts_split_004.html#DOCF36" id="FOOT36" class="calibre21">(36)</a></h3>
<p>A few OSes (AIX, IRIX, Windows) do not need special flags for such code, but most do—although compilers will often generate PIC code when not asked to do so.</p>
<h3 id="section-36" class="section"><a href="R-exts_split_004.html#DOCF37" id="FOOT37" class="calibre21">(37)</a></h3>
<p>Cygwin used <code class="calibre2">g77</code> up to 2011, and some pre-built versions of R for Unix OSes still do.</p>
<h3 id="section-37" class="section"><a href="R-exts_split_004.html#DOCF38" id="FOOT38" class="calibre21">(38)</a></h3>
<p>The changes are linked from <a href="https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations" class="uri">https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations</a>.</p>
<h3 id="section-38" class="section"><a href="R-exts_split_004.html#DOCF39" id="FOOT39" class="calibre21">(39)</a></h3>
<p>Values <code class="calibre2">199711</code>, <code class="calibre2">201103L</code> and <code class="calibre2">201402L</code> are most commonly used for C++98, C++11 and C++14 respectively, but some compilers set <code class="calibre2">1L</code>.</p>
<h3 id="section-39" class="section"><a href="R-exts_split_004.html#DOCF40" id="FOOT40" class="calibre21">(40)</a></h3>
<p>Some distributions, notably Debian, have supplied a build of <code class="calibre2">clang</code> with <code class="calibre2">g++</code>’s headers and library. Conversely, Apple’s command named <code class="calibre2">g++</code> is based on <code class="calibre2">clang</code> using <code class="calibre2">libc++</code>.</p>
<h3 id="section-40" class="section"><a href="R-exts_split_004.html#DOCF41" id="FOOT41" class="calibre21">(41)</a></h3>
<p>For details of these and related macros, see file config.site in the R sources.</p>
<h3 id="section-41" class="section"><a href="R-exts_split_004.html#DOCF42" id="FOOT42" class="calibre21">(42)</a></h3>
<p>As from R 3.4.0, <code class="calibre2">configure</code> attempts to supply a C++14 compiler only if explicitly requested. However, earlier versions of R will use the default C++14 mode of <code class="calibre2">g++</code> 6 and later.</p>
<h3 id="section-42" class="section"><a href="R-exts_split_004.html#DOCF43" id="FOOT43" class="calibre21">(43)</a></h3>
<p><a href="See%0Ahttps://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations">See https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations</a> or <a href="http://en.cppreference.com/w/cpp/experimental/feature_test" class="uri">http://en.cppreference.com/w/cpp/experimental/feature_test</a>. It seems a reasonable assumption that any compiler promising some C++14 conformance will provide these—e.g. <code class="calibre2">g++</code> 4.9.x did but 4.8.5 did not.</p>
<h3 id="section-43" class="section"><a href="R-exts_split_004.html#DOCF44" id="FOOT44" class="calibre21">(44)</a></h3>
<p>On systems which use sub-architectures, architecture-specific versions such as ~/.R/check.Renviron.i386 take precedence.</p>
<h3 id="section-44" class="section"><a href="R-exts_split_004.html#DOCF45" id="FOOT45" class="calibre21">(45)</a></h3>
<p>A suitable <code class="calibre2">file.exe</code> is part of the Windows toolset: it checks for <code class="calibre2">gfile</code> if a suitable <code class="calibre2">file</code> is not found: the latter is available in the OpenCSW collection for Solaris at <a href="http://www.opencsw.org" class="uri">http://www.opencsw.org</a>. The source repository is <a href="ftp://ftp.astron.com/pub/file/" class="uri">ftp://ftp.astron.com/pub/file/</a>.</p>
<h3 id="section-45" class="section"><a href="R-exts_split_004.html#DOCF46" id="FOOT46" class="calibre21">(46)</a></h3>
<p>An exception is made for subdirectories with names starting ‘win’ or ‘Win’.</p>
<h3 id="section-46" class="section"><a href="R-exts_split_004.html#DOCF47" id="FOOT47" class="calibre21">(47)</a></h3>
<p>on most other platforms such runtime libraries are dynamic, but static libraries are currently used on Windows because the toolchain is not a standard part of the OS.</p>
<h3 id="section-47" class="section"><a href="R-exts_split_004.html#DOCF48" id="FOOT48" class="calibre21">(48)</a></h3>
<p>or if option --use-valgrind is used or environment variable <code class="calibre2">_R_CHECK_ALWAYS_LOG_VIGNETTE_OUTPUT_</code> is set to a true value or if there are differences from a target output file</p>
<h3 id="section-48" class="section"><a href="R-exts_split_004.html#DOCF49" id="FOOT49" class="calibre21">(49)</a></h3>
<p>For example, in early 2014 <a href="https://CRAN.R-project.org/package=gdata"><strong>gdata</strong></a> declared ‘Imports: gtools’ and <a href="https://CRAN.R-project.org/package=gtools"><strong>gtools</strong></a> declared ‘Imports: gdata’.</p>
<h3 id="section-49" class="section"><a href="R-exts_split_004.html#DOCF50" id="FOOT50" class="calibre21">(50)</a></h3>
<p>loading, examples, tests, running vignette code</p>
<h3 id="section-50" class="section"><a href="R-exts_split_004.html#DOCF51" id="FOOT51" class="calibre21">(51)</a></h3>
<p>called CVS or .svn or .arch-ids or .bzr or .git (but not files called .git) or .hg.</p>
<h3 id="section-51" class="section"><a href="R-exts_split_004.html#DOCF52" id="FOOT52" class="calibre21">(52)</a></h3>
<p>called .metadata.</p>
<h3 id="section-52" class="section"><a href="R-exts_split_004.html#DOCF53" id="FOOT53" class="calibre21">(53)</a></h3>
<p>which is an error: GNU make uses GNUmakefile.</p>
<h3 id="section-53" class="section"><a href="R-exts_split_005.html#DOCF54" id="FOOT54" class="calibre21">(54)</a></h3>
<p>and to avoid problems with case-insensitive file systems, lower-case versions of all these extensions.</p>
<h3 id="section-54" class="section"><a href="R-exts_split_005.html#DOCF55" id="FOOT55" class="calibre21">(55)</a></h3>
<p>unless inhibited by using ‘BuildVignettes: no’ in the DESCRIPTION file.</p>
<h3 id="section-55" class="section"><a href="R-exts_split_005.html#DOCF56" id="FOOT56" class="calibre21">(56)</a></h3>
<p>provided the conditions of the package’s license are met: many, including CRAN, see the omission of source components as incompatible with an Open Source license.</p>
<h3 id="section-56" class="section"><a href="R-exts_split_005.html#DOCF57" id="FOOT57" class="calibre21">(57)</a></h3>
<p><code class="calibre2">R_HOME/bin</code> is prepended to the <code class="calibre2">PATH</code> so that references to <code class="calibre2">R</code> or <code class="calibre2">Rscript</code> in the Makefile do make use of the currently running version of R.</p>
<h3 id="section-57" class="section"><a href="R-exts_split_005.html#DOCF58" id="FOOT58" class="calibre21">(58)</a></h3>
<p>Note that lazy-loaded datasets are <em>not</em> in the package’s namespace so need to be accessed <em>via</em> <code class="calibre2">::</code>, e.g. <code class="calibre2">survival::survexp.us</code>.</p>
<h3 id="section-58" class="section"><a href="R-exts_split_005.html#DOCF59" id="FOOT59" class="calibre21">(59)</a></h3>
<p>they will be called with two unnamed arguments, in that order.</p>
<h3 id="section-59" class="section"><a href="R-exts_split_005.html#DOCF60" id="FOOT60" class="calibre21">(60)</a></h3>
<p>NB: this will only be read in all versions of R if the package contains R code in a R directory.</p>
<h3 id="section-60" class="section"><a href="R-exts_split_005.html#DOCF61" id="FOOT61" class="calibre21">(61)</a></h3>
<p>Note that this is the basename of the shared object, and the appropriate extension (.so or .dll) will be added.</p>
<h3 id="section-61" class="section"><a href="R-exts_split_005.html#DOCF62" id="FOOT62" class="calibre21">(62)</a></h3>
<p>This was necessary at least prior to R 3.0.2 as the <strong>methods</strong> package looked for its own R code on the search path.</p>
<h3 id="section-62" class="section"><a href="R-exts_split_005.html#DOCF63" id="FOOT63" class="calibre21">(63)</a></h3>
<p>This defaults to the same pattern as <code class="calibre2">exportPattern</code>: use something like <code class="calibre2">exportClassPattern(&quot;^$&quot;)</code> to override this.</p>
<h3 id="section-63" class="section"><a href="R-exts_split_005.html#DOCF64" id="FOOT64" class="calibre21">(64)</a></h3>
<p>if it does, there will be opaque warnings about replacing imports if the classes/methods are also imported.</p>
<h3 id="section-64" class="section"><a href="R-exts_split_005.html#DOCF65" id="FOOT65" class="calibre21">(65)</a></h3>
<p>People use <code class="calibre2">dev.new()</code> to open a device at a particular size: that is not portable but using <code class="calibre2">dev.new(noRStudioGD = TRUE)</code> helps.</p>
<h3 id="section-65" class="section"><a href="R-exts_split_005.html#DOCF66" id="FOOT66" class="calibre21">(66)</a></h3>
<p>Solaris <code class="calibre2">make</code> does not accept CRLF-terminated Makefiles; Solaris warns about and some other <code class="calibre2">make</code>s ignore incomplete final lines.</p>
<h3 id="section-66" class="section"><a href="R-exts_split_005.html#DOCF67" id="FOOT67" class="calibre21">(67)</a></h3>
<p>This was apparently introduced in SunOS 4, and is available elsewhere <em>provided</em> it is surrounded by spaces.</p>
<h3 id="section-67" class="section"><a href="R-exts_split_005.html#DOCF68" id="FOOT68" class="calibre21">(68)</a></h3>
<p>GNU make, BSD make formerly in FreeBSD and macOS, AT&amp;T make as implemented on Solaris, <code class="calibre2">pmake</code> in FreeBSD, ‘Distributed Make’ (<code class="calibre2">dmake</code>), part of Oracle Studio and available in other versions.</p>
<h3 id="section-68" class="section"><a href="R-exts_split_005.html#DOCF69" id="FOOT69" class="calibre21">(69)</a></h3>
<p>For example, <code class="calibre2">test</code> options -a and -e are not portable, and not supported in the AT&amp;T Bourne shell used on Solaris 10/11, even though they are in the 2008 POSIX standard. Nor does Solaris support ‘$(cmd)’.</p>
<h3 id="section-69" class="section"><a href="R-exts_split_005.html#DOCF70" id="FOOT70" class="calibre21">(70)</a></h3>
<p><a href="http://fortranwiki.org/fortran/show/Modernizing+Old+Fortran" class="uri">http://fortranwiki.org/fortran/show/Modernizing+Old+Fortran</a> may help explain some of the warnings from <code class="calibre2">gfortran -Wall -pedantic</code>.</p>
<h3 id="section-70" class="section"><a href="R-exts_split_005.html#DOCF71" id="FOOT71" class="calibre21">(71)</a></h3>
<p>See <a href="http://people.ds.cam.ac.uk/nmm1/fortran/paper_07.pdf" class="uri">http://people.ds.cam.ac.uk/nmm1/fortran/paper_07.pdf</a>.</p>
<h3 id="section-71" class="section"><a href="R-exts_split_005.html#DOCF72" id="FOOT72" class="calibre21">(72)</a></h3>
<p>but note that <code class="calibre2">long long</code> is not a standard C++98 type, and C++ compilers set up for strict checking will reject it.</p>
<h3 id="section-72" class="section"><a href="R-exts_split_005.html#DOCF73" id="FOOT73" class="calibre21">(73)</a></h3>
<p>or where supported the variants <code class="calibre2">_Exit</code> and <code class="calibre2">_exit</code>.</p>
<h3 id="section-73" class="section"><a href="R-exts_split_005.html#DOCF74" id="FOOT74" class="calibre21">(74)</a></h3>
<p>This and <code class="calibre2">srandom</code> are in any case not portable. They are in POSIX but not in the C99 standard, and not available on Windows.</p>
<h3 id="section-74" class="section"><a href="R-exts_split_005.html#DOCF75" id="FOOT75" class="calibre21">(75)</a></h3>
<p>in libselinux.</p>
<h3 id="section-75" class="section"><a href="R-exts_split_005.html#DOCF76" id="FOOT76" class="calibre21">(76)</a></h3>
<p>At least Linux and Windows, but not macOS.</p>
<h3 id="section-76" class="section"><a href="R-exts_split_005.html#DOCF77" id="FOOT77" class="calibre21">(77)</a></h3>
<p>except perhaps the simplest kind as used by <code class="calibre2">download.file()</code> in non-interactive use.</p>
<h3 id="section-77" class="section"><a href="R-exts_split_005.html#DOCF78" id="FOOT78" class="calibre21">(78)</a></h3>
<p>Whereas the GNU linker reorders so -L options are processed first, the Solaris one does not.</p>
<h3 id="section-78" class="section"><a href="R-exts_split_005.html#DOCF79" id="FOOT79" class="calibre21">(79)</a></h3>
<p>some versions of macOS did not.</p>
<h3 id="section-79" class="section"><a href="R-exts_split_005.html#DOCF80" id="FOOT80" class="calibre21">(80)</a></h3>
<p>For example, the ability to handle ‘https://’ URLs, which even the build in some major Linux distributions in 2017 did not possess.</p>
<h3 id="section-80" class="section"><a href="R-exts_split_005.html#DOCF81" id="FOOT81" class="calibre21">(81)</a></h3>
<p>Not doing so is the default on Windows, overridden for the R executables. It is also the default on some Solaris compilers.</p>
<h3 id="section-81" class="section"><a href="R-exts_split_005.html#DOCF82" id="FOOT82" class="calibre21">(82)</a></h3>
<p>These are not needed for the default compiler settings on ‘x86_64’ but are likely to be needed on ‘ix86’.</p>
<h3 id="section-82" class="section"><a href="R-exts_split_005.html#DOCF83" id="FOOT83" class="calibre21">(83)</a></h3>
<p>Select ‘Save as’, and select ‘Reduce file size’ from the ‘Quartz filter’ menu’: this can be accessed in other ways, for example by Automator.</p>
<h3 id="section-83" class="section"><a href="R-exts_split_005.html#DOCF84" id="FOOT84" class="calibre21">(84)</a></h3>
<p>except perhaps some special characters such as backslash and hash which may be taken over for currency symbols.</p>
<h3 id="section-84" class="section"><a href="R-exts_split_005.html#DOCF85" id="FOOT85" class="calibre21">(85)</a></h3>
<p>Typically on a Unix-alike this is done by telling <code class="calibre2">fontconfig</code> where to find suitable fonts to select glyphs from.</p>
<h3 id="section-85" class="section"><a href="R-exts_split_005.html#DOCF86" id="FOOT86" class="calibre21">(86)</a></h3>
<p>This is seen on Linux, Solaris and FreeBSD, although each has other ways to turn on all extensions, e.g. defining <code class="calibre2">_GNU_SOURCE</code>, <code class="calibre2">__EXTENSIONS__</code> or <code class="calibre2">_BSD_SOURCE</code>: the GCC compilers by default define <code class="calibre2">_GNU_SOURCE</code> unless a strict standard such as -std=c99 is used. On macOS extensions are declared unless one of these macros is given too small a value.</p>
<h3 id="section-86" class="section"><a href="R-exts_split_005.html#DOCF87" id="FOOT87" class="calibre21">(87)</a></h3>
<p>Solaris 10 does not recognize this value of <code class="calibre2">_POSIX_C_SOURCE</code>, nor values of <code class="calibre2">_XOPEN_SOURCE</code> beyond 600.</p>
<h3 id="section-87" class="section"><a href="R-exts_split_005.html#DOCF88" id="FOOT88" class="calibre21">(88)</a></h3>
<p>E.g. <code class="calibre2">gcc 5.3</code> in C++11 mode.</p>
<h3 id="section-88" class="section"><a href="R-exts_split_005.html#DOCF89" id="FOOT89" class="calibre21">(89)</a></h3>
<p>There is a portable way to do this in Fortran 2003 (<code class="calibre2">ieee_is_nan()</code> in module <code class="calibre2">ieee_arithmetic</code>), but ironically that is not supported in the commonly-used versions 4.x of GNU Fortran. A pretty robust alternative is to test <code class="calibre2">if(my_var /= my_var)</code>.</p>
<h3 id="section-89" class="section"><a href="R-exts_split_005.html#DOCF90" id="FOOT90" class="calibre21">(90)</a></h3>
<p>which often is the same as the header included by the C compiler, but some compilers have wrappers for some of the C headers.</p>
<h3 id="section-90" class="section"><a href="R-exts_split_006.html#DOCF91" id="FOOT91" class="calibre21">(91)</a></h3>
<p>e.g. <code class="calibre2">\alias</code>, <code class="calibre2">\keyword</code> and <code class="calibre2">\note</code> sections.</p>
<h3 id="section-91" class="section"><a href="R-exts_split_006.html#DOCF92" id="FOOT92" class="calibre21">(92)</a></h3>
<p>There can be exceptions: for example Rd files are not allowed to start with a dot, and have to be uniquely named on a case-insensitive file system.</p>
<h3 id="section-92" class="section"><a href="R-exts_split_006.html#DOCF93" id="FOOT93" class="calibre21">(93)</a></h3>
<p>in the current locale, and with special treatment for LaTeX special characters and with any ‘pkgname-package’ topic moved to the top of the list.</p>
<h3 id="section-93" class="section"><a href="R-exts_split_006.html#DOCF94" id="FOOT94" class="calibre21">(94)</a></h3>
<p>Text between or after list items is discouraged.</p>
<h3 id="section-94" class="section"><a href="R-exts_split_006.html#DOCF95" id="FOOT95" class="calibre21">(95)</a></h3>
<p>as defined by the R function <code class="calibre2">trimws</code>.</p>
<h3 id="section-95" class="section"><a href="R-exts_split_006.html#DOCF96" id="FOOT96" class="calibre21">(96)</a></h3>
<p>Currently it is rendered differently only in HTML conversions, and LaTeX conversion outside ‘\usage’ and ‘\examples’ environments.</p>
<h3 id="section-96" class="section"><a href="R-exts_split_006.html#DOCF97" id="FOOT97" class="calibre21">(97)</a></h3>
<p>a common example in CRAN packages is <code class="calibre2">\link[mgcv]{gam}</code>.</p>
<h3 id="section-97" class="section"><a href="R-exts_split_006.html#DOCF98" id="FOOT98" class="calibre21">(98)</a></h3>
<p>There is only a fine distinction between <code class="calibre2">\dots</code> and <code class="calibre2">\ldots</code>. It is technically incorrect to use <code class="calibre2">\ldots</code> in code blocks and <code class="calibre2">tools::checkRd</code> will warn about this—on the other hand the current converters treat them the same way in code blocks, and elsewhere apart from the small distinction between the two in LaTeX.</p>
<h3 id="section-98" class="section"><a href="R-exts_split_006.html#DOCF99" id="FOOT99" class="calibre21">(99)</a></h3>
<p>See the examples section in the file Paren.Rd for an example.</p>
<h3 id="section-99" class="section"><a href="R-exts_split_006.html#DOCF100" id="FOOT100" class="calibre21">(100)</a></h3>
<p>R 2.9.0 added support for UTF-8 Cyrillic characters in LaTeX, but on some OSes this will need Cyrillic support added to LaTeX, so environment variable <code class="calibre2">_R_CYRILLIC_TEX_</code> may need to be set to a non-empty value to enable this.</p>
<h3 id="section-100" class="section"><a href="R-exts_split_007.html#DOCF101" id="FOOT101" class="calibre21">(101)</a></h3>
<p>R has to be built to enable this, but the option --enable-R-profiling is the default.</p>
<h3 id="section-101" class="section"><a href="R-exts_split_007.html#DOCF102" id="FOOT102" class="calibre21">(102)</a></h3>
<p>For Unix-alikes these are intervals of CPU time, and for Windows of elapsed time.</p>
<h3 id="section-102" class="section"><a href="R-exts_split_008.html#DOCF103" id="FOOT103" class="calibre21">(103)</a></h3>
<p>With the exceptions of the commands listed below: an object of such a name can be printed <em>via</em> an explicit call to <code class="calibre2">print</code>.</p>
<h3 id="section-103" class="section"><a href="R-exts_split_008.html#DOCF104" id="FOOT104" class="calibre21">(104)</a></h3>
<p>at the time of writing mainly for 10.9 with some support for 10.8, none for the current 10.10.</p>
<h3 id="section-104" class="section"><a href="R-exts_split_008.html#DOCF105" id="FOOT105" class="calibre21">(105)</a></h3>
<p>Those in some numeric, logical, integer, raw, complex vectors and in memory allocated by <code class="calibre2">R_alloc</code>.</p>
<h3 id="section-105" class="section"><a href="R-exts_split_008.html#DOCF106" id="FOOT106" class="calibre21">(106)</a></h3>
<p>including using the data sections of R vectors after they are freed.</p>
<h3 id="section-106" class="section"><a href="R-exts_split_008.html#DOCF107" id="FOOT107" class="calibre21">(107)</a></h3>
<p>small fixed-size arrays by default in <code class="calibre2">gfortran</code>, for example.</p>
<h3 id="section-107" class="section"><a href="R-exts_split_008.html#DOCF108" id="FOOT108" class="calibre21">(108)</a></h3>
<p>currently on Linux and macOS (including the builds from Xcode 7 and later), with some support for Solaris. On some platforms the runtime library, <strong>libasan</strong>, needs to be installed separately, and for checking C++ you may also need <strong>libubsan</strong>.</p>
<h3 id="section-108" class="section"><a href="R-exts_split_008.html#DOCF109" id="FOOT109" class="calibre21">(109)</a></h3>
<p>see <a href="http://llvm.org/devmtg/2014-04/PDFs/LightningTalks/EuroLLVM%202014%20--%20container%20overflow.pdf">http://llvm.org/devmtg/2014-04/PDFs/LightningTalks/EuroLLVM%202014%20--%20container%20overflow.pdf</a>.</p>
<h3 id="section-109" class="section"><a href="R-exts_split_008.html#DOCF110" id="FOOT110" class="calibre21">(110)</a></h3>
<p>part of the LLVM project and in distributed in <code class="calibre2">llvm</code> RPMs and <code class="calibre2">.deb</code>s on Linux. It is not currently shipped by Apple.</p>
<h3 id="section-110" class="section"><a href="R-exts_split_008.html#DOCF111" id="FOOT111" class="calibre21">(111)</a></h3>
<p>as Ubuntu is said to do.</p>
<h3 id="section-111" class="section"><a href="R-exts_split_008.html#DOCF112" id="FOOT112" class="calibre21">(112)</a></h3>
<p>installed on some Linux systems as <code class="calibre2">asan_symbolize</code>, and obtainable from <a href="https://llvm.org/svn/llvm-project/compiler-rt/trunk/lib/asan/scripts/asan_symbolize.py" class="uri">https://llvm.org/svn/llvm-project/compiler-rt/trunk/lib/asan/scripts/asan_symbolize.py</a>: it makes use of <code class="calibre2">llvm-symbolizer</code> if available.</p>
<h3 id="section-112" class="section"><a href="R-exts_split_008.html#DOCF113" id="FOOT113" class="calibre21">(113)</a></h3>
<p>including <code class="calibre2">gcc</code> 7.1 and <code class="calibre2">clang</code> 4.0.0: for <code class="calibre2">gcc</code> it is implied by -fsanitize=address.</p>
<h3 id="section-113" class="section"><a href="R-exts_split_008.html#DOCF114" id="FOOT114" class="calibre21">(114)</a></h3>
<p>On some platforms the runtime library, <strong>libubsan</strong>, needs to be installed separately.</p>
<h3 id="section-114" class="section"><a href="R-exts_split_008.html#DOCF115" id="FOOT115" class="calibre21">(115)</a></h3>
<p>or the user manual for your version of <code class="calibre2">clang</code>, e.g. (the paths have differed for some versions) <a href="http://llvm.org/releases/4.0.0/tools/clang/docs/UsersManual.html" class="uri">http://llvm.org/releases/4.0.0/tools/clang/docs/UsersManual.html</a>.</p>
<h3 id="section-115" class="section"><a href="R-exts_split_008.html#DOCF116" id="FOOT116" class="calibre21">(116)</a></h3>
<p>but works better if inlining and frame pointer optimizations are disabled.</p>
<h3 id="section-116" class="section"><a href="R-exts_split_009.html#DOCF117" id="FOOT117" class="calibre21">(117)</a></h3>
<p>possibly after some platform-specific translation, e.g. adding leading or trailing underscores.</p>
<h3 id="section-117" class="section"><a href="R-exts_split_009.html#DOCF118" id="FOOT118" class="calibre21">(118)</a></h3>
<p>Note that this is then not checked for over-runs by option <code class="calibre2">CBoundsCheck = TRUE</code>.</p>
<h3 id="section-118" class="section"><a href="R-exts_split_009.html#DOCF119" id="FOOT119" class="calibre21">(119)</a></h3>
<p>Strictly this is OS-specific, but no exceptions have been seen for many years.</p>
<h3 id="section-119" class="section"><a href="R-exts_split_009.html#DOCF120" id="FOOT120" class="calibre21">(120)</a></h3>
<p>For calls from within a namespace the search is confined to the DLL loaded for that package.</p>
<h3 id="section-120" class="section"><a href="R-exts_split_009.html#DOCF121" id="FOOT121" class="calibre21">(121)</a></h3>
<p>For unregistered entry points the OS’s <code class="calibre2">dlsym</code> routine is used to find addresses. Its performance varies considerably by OS and even in the best case it will need to search a much larger symbol table than, say, the table of <code class="calibre2">.Call</code> entry points.</p>
<h3 id="section-121" class="section"><a href="R-exts_split_009.html#DOCF122" id="FOOT122" class="calibre21">(122)</a></h3>
<p>Because it is a standard package, one would need to rename it before attempting to reproduce the account here.</p>
<h3 id="section-122" class="section"><a href="R-exts_split_009.html#DOCF123" id="FOOT123" class="calibre21">(123)</a></h3>
<p>whether or not ‘LinkingTo’ is used.</p>
<h3 id="section-123" class="section"><a href="R-exts_split_009.html#DOCF124" id="FOOT124" class="calibre21">(124)</a></h3>
<p>so there needs to be a corresponding <code class="calibre2">import</code> or <code class="calibre2">importFrom</code> entry in the NAMESPACE file.</p>
<h3 id="section-124" class="section"><a href="R-exts_split_009.html#DOCF125" id="FOOT125" class="calibre21">(125)</a></h3>
<p>Even including C system headers in such a block has caused compilation errors.</p>
<h3 id="section-125" class="section"><a href="R-exts_split_009.html#DOCF126" id="FOOT126" class="calibre21">(126)</a></h3>
<p>with an exception for the Solaris C++ compiler, removed in R 3.4.0.</p>
<h3 id="section-126" class="section"><a href="R-exts_split_009.html#DOCF127" id="FOOT127" class="calibre21">(127)</a></h3>
<p><a href="https://en.wikipedia.org/wiki/Application_binary_interface" class="uri">https://en.wikipedia.org/wiki/Application_binary_interface</a>.</p>
<h3 id="section-127" class="section"><a href="R-exts_split_009.html#DOCF128" id="FOOT128" class="calibre21">(128)</a></h3>
<p>For example, ‘_GLIBCXX_USE_CXX11_ABI’ in <code class="calibre2">g++</code> 5.1 and later: <a href="https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dual_abi.html" class="uri">https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dual_abi.html</a>.</p>
<h3 id="section-128" class="section"><a href="R-exts_split_009.html#DOCF129" id="FOOT129" class="calibre21">(129)</a></h3>
<p><code class="calibre2">dyld</code> on macOS, and <code class="calibre2">DYLD_LIBRARY_PATHS</code> below.</p>
<h3 id="section-129" class="section"><a href="R-exts_split_009.html#DOCF130" id="FOOT130" class="calibre21">(130)</a></h3>
<p>That is, similar to those defined in S version 4 from the 1990s: these are not kept up to date and are not recommended for new projects. Prior to R 3.3.0 it was not compatible with defining <code class="calibre2">R_NO_REMAP</code>.</p>
<h3 id="section-130" class="section"><a href="R-exts_split_009.html#DOCF131" id="FOOT131" class="calibre21">(131)</a></h3>
<p>see <a href="R-exts_split_009.html#The-R-API">The R API</a>: note that these are not all part of the API.</p>
<h3 id="section-131" class="section"><a href="R-exts_split_009.html#DOCF132" id="FOOT132" class="calibre21">(132)</a></h3>
<p>SEXP is an acronym for <em>S</em>imple <em>EXP</em>ression, common in LISP-like language syntaxes.</p>
<h3 id="section-132" class="section"><a href="R-exts_split_009.html#DOCF133" id="FOOT133" class="calibre21">(133)</a></h3>
<p>If no coercion was required, <code class="calibre2">coerceVector</code> would have passed the old object through unchanged.</p>
<h3 id="section-133" class="section"><a href="R-exts_split_009.html#DOCF134" id="FOOT134" class="calibre21">(134)</a></h3>
<p>You can assign a <em>copy</em> of the object in the environment frame <code class="calibre2">rho</code> using <code class="calibre2">defineVar(symbol, duplicate(value), rho)</code>).</p>
<h3 id="section-134" class="section"><a href="R-exts_split_009.html#DOCF135" id="FOOT135" class="calibre21">(135)</a></h3>
<p>see <a href="R-exts_split_009.html#Character-encoding-issues">Character encoding issues</a> for why this might not be what is required.</p>
<h3 id="section-135" class="section"><a href="R-exts_split_009.html#DOCF136" id="FOOT136" class="calibre21">(136)</a></h3>
<p>This is only guaranteed to show the current interface: it is liable to change.</p>
<h3 id="section-136" class="section"><a href="R-exts_split_010.html#DOCF137" id="FOOT137" class="calibre21">(137)</a></h3>
<p>Known problems are redefining <code class="calibre2">LENGTH</code>, <code class="calibre2">error</code>, <code class="calibre2">length</code>, <code class="calibre2">vector</code> and <code class="calibre2">warning</code></p>
<h3 id="section-137" class="section"><a href="R-exts_split_010.html#DOCF138" id="FOOT138" class="calibre21">(138)</a></h3>
<p>also part of C++11.</p>
<h3 id="section-138" class="section"><a href="R-exts_split_010.html#DOCF139" id="FOOT139" class="calibre21">(139)</a></h3>
<p>It is an optional C11 extension.</p>
<h3 id="section-139" class="section"><a href="R-exts_split_010.html#DOCF140" id="FOOT140" class="calibre21">(140)</a></h3>
<p>but see the second paragraph of see <a href="R-exts_split_005.html#Portable-C-and-C_002b_002b-code">Portable C and C++ code</a>.</p>
<h3 id="section-140" class="section"><a href="R-exts_split_010.html#DOCF141" id="FOOT141" class="calibre21">(141)</a></h3>
<p><a href="https://en.wikipedia.org/wiki/Endianness" class="uri">https://en.wikipedia.org/wiki/Endianness</a>.</p>
<h3 id="section-141" class="section"><a href="R-exts_split_010.html#DOCF142" id="FOOT142" class="calibre21">(142)</a></h3>
<p>It is defined by the Intel compilers, but also hides unsatisfied references and so cannot be used with R. It is not supported by the AIX nor Solaris compilers.</p>
<h3 id="section-142" class="section"><a href="R-exts_split_012.html#DOCF143" id="FOOT143" class="calibre21">(143)</a></h3>
<p>In the parlance of macOS this is a <em>dynamic</em> library, and is the normal way to build R on that platform.</p>
<h3 id="section-143" class="section"><a href="R-exts_split_012.html#DOCF144" id="FOOT144" class="calibre21">(144)</a></h3>
<p>but these are not part of the automated test procedures and so little tested.</p>
<h3 id="section-144" class="section"><a href="R-exts_split_012.html#DOCF145" id="FOOT145" class="calibre21">(145)</a></h3>
<p>At least according to POSIX 2004 and later. Earlier standards prescribed sys/time.h and HP-UX continued to use that: R_ext/eventloop.h will include it from R 3.4.0 if <code class="calibre2">HAVE_SYS_TIME_H</code> is defined.</p>
<h3 id="section-145" class="section"><a href="R-exts_split_012.html#DOCF146" id="FOOT146" class="calibre21">(146)</a></h3>
<p>at least on platforms where the values are available, that is having <code class="calibre2">getrlimit</code> and on Linux or having <code class="calibre2">sysctl</code> supporting <code class="calibre2">KERN_USRSTACK</code>, including FreeBSD and OS X.</p>
<h3 id="section-146" class="section"><a href="R-exts_split_012.html#DOCF147" id="FOOT147" class="calibre21">(147)</a></h3>
<p>An attempt to use only threads in the late 1990s failed to work correctly under Windows 95, the predominant version of Windows at that time.</p>
</div>
<hr />

<!--chapter:end:14-R-exts.Rmd-->

#  Creating R packages
<p><a href="" id="index-Packages"></a> <a href="" id="index-Creating-packages"></a></p>
<p>Packages provide a mechanism for loading optional code, data and documentation as needed. The R distribution itself includes about 30 packages.</p>
<p>In the following, we assume that you know the <code class="calibre2">library()</code> command, including its <code class="calibre2">lib.loc</code> argument, and we also assume basic knowledge of the <code class="calibre2">R CMD INSTALL</code> utility. Otherwise, please look at R’s help pages on</p>
<div class="example">
<pre class="example1"><code>?library
?INSTALL</code></pre>
</div>
<p>before reading on.</p>
<p>For packages which contain code to be compiled, a computing environment including a number of tools is assumed; the “R Installation and Administration” manual describes what is needed for each OS.</p>
<p>Once a source package is created, it must be installed by the command <code class="calibre2">R CMD INSTALL</code>.</p>
<p>Other types of extensions are supported (but rare): See <a href="R-exts_split_005.html#Package-types">Package types</a>.</p>
<p>Some notes on terminology complete this introduction. These will help with the reading of this manual, and also in describing concepts accurately when asking for help.</p>
<p>A <em>package</em> is a directory of files which extend R, a <em>source package</em> (the master files of a package), or a tarball containing the files of a source package, or an <em>installed</em> package, the result of running <code class="calibre2">R CMD INSTALL</code> on a source package. On some platforms (notably macOS and Windows) there are also <em>binary packages</em>, a zip file or tarball containing the files of an installed package which can be unpacked rather than installing from sources.</p>
<p>A package is <strong>not</strong><a href="R-exts_split_014.html#FOOT1" id="DOCF1"><sup>1</sup></a> a <em>library</em>. The latter is used in two senses in R documentation.</p>
<ul>
<li>A directory into which packages are installed, e.g. /usr/lib/R/library: in that sense it is sometimes referred to as a <em>library directory</em> or <em>library tree</em> (since the library is a directory which contains packages as directories, which themselves contain directories).</li>
<li>That used by the operating system, as a shared, dynamic or static library or (especially on Windows) a DLL, where the second L stands for ‘library’. Installed packages may contain compiled code in what is known on Unix-alikes as a <em>shared object</em> and on Windows as a DLL. The concept of a <em>shared library</em> (<em>dynamic library</em> on macOS) as a collection of compiled code to which a package might link is also used, especially for R itself on some platforms. On most platforms these concepts are interchangeable (shared objects and DLLs can both be loaded into the R process and be linked against), but macOS distinguishes between shared objects (extension .so) and dynamic libraries (extension .dylib).</li>
</ul>
<p>There are a number of well-defined operations on source packages.</p>
<ul>
<li>The most common is <em>installation</em> which takes a source package and installs it in a library using <code class="calibre2">R CMD INSTALL</code> or <code class="calibre2">install.packages</code>.</li>
<li>Source packages can be <em>built</em>. This involves taking a source directory and creating a tarball ready for distribution, including cleaning it up and creating PDF documentation from any <em>vignettes</em> it may contain. Source packages (and most often tarballs) can be <em>checked</em>, when a test installation is done and tested (including running its examples); also, the contents of the package are tested in various ways for consistency and portability.</li>
<li><em>Compilation</em> is not a correct term for a package. Installing a source package which contains C, C++ or Fortran code will involve compiling that code. There is also the possibility of ‘byte’ compiling the R code in a package (using the facilities of package <strong>compiler</strong>): already base and recommended packages are normally byte-compiled and this can be specified for other packages. So <em>compiling</em> a package may come to mean byte-compiling its R code.</li>
<li>It used to be unambiguous to talk about <em>loading</em> an installed package using <code class="calibre2">library()</code>, but since the advent of package namespaces this has been less clear: people now often talk about <em>loading</em> the package’s namespace and then <em>attaching</em> the package so it becomes visible on the search path. Function <code class="calibre2">library</code> performs both steps, but a package’s namespace can be loaded without the package being attached (for example by calls like <code class="calibre2">splines::ns</code>).</li>
</ul>
<p>The concept of <em>lazy loading</em> of code or data is mentioned at several points. This is part of the installation, always selected for R code but optional for data. When used the R objects of the package are created at installation time and stored in a database in the R directory of the installed package, being loaded into the session at first use. This makes the R session start up faster and use less (virtual) memory.</p>
<p><a href="" id="index-CRAN"></a></p>
<p>CRAN is a network of WWW sites holding the R distributions and contributed code, especially R packages. Users of R are encouraged to join in the collaborative project and to submit their own packages to CRAN: current instructions are linked from <a href="https://CRAN.R-project.org/banner.shtml#submitting" class="uri">https://CRAN.R-project.org/banner.shtml#submitting</a>.</p>
<hr />
<p><a href="" id="Package-structure"></a> <a href="" id="Package-structure-1"></a></p>
<h3 id="package-structure" class="section">1.1 Package structure</h3>
<p><a href="" id="index-Package-structure"></a></p>
<p>The sources of an R package consists of a subdirectory containing a files DESCRIPTION and NAMESPACE, and the subdirectories R, data, demo, exec, inst, man, po, src, tests, tools and vignettes (some of which can be missing, but which should not be empty). The package subdirectory may also contain files INDEX, configure, cleanup, LICENSE, LICENCE and NEWS. Other files such as INSTALL (for non-standard installation instructions), README/README.md<a href="R-exts_split_014.html#FOOT2" id="DOCF2"><sup>2</sup></a>, or ChangeLog will be ignored by R, but may be useful to end users. The utility <code class="calibre2">R CMD build</code> may add files in a build directory (but this should not be used for other purposes).</p>
<p>Except where specifically mentioned,<a href="R-exts_split_014.html#FOOT3" id="DOCF3"><sup>3</sup></a> packages should not contain Unix-style ‘hidden’ files/directories (that is, those whose name starts with a dot).</p>
<p>The DESCRIPTION and INDEX files are described in the subsections below. The NAMESPACE file is described in the section on <a href="R-exts_split_005.html#Package-namespaces">Package namespaces</a>.</p>
<p><a href="" id="index-configure-file"></a> <a href="" id="index-cleanup-file"></a></p>
<p>The optional files configure and cleanup are (Bourne) shell scripts which are, respectively, executed before and (if option --clean was given) after installation on Unix-alikes, see <a href="#Configure-and-cleanup">Configure and cleanup</a>. The analogues on Windows are configure.win and cleanup.win.</p>
<p>For the conventions for files NEWS and ChangeLog in the GNU project see <a href="https://www.gnu.org/prep/standards/standards.html#Documentation" class="uri">https://www.gnu.org/prep/standards/standards.html#Documentation</a>.</p>
<p>The package subdirectory should be given the same name as the package. Because some file systems (e.g., those on Windows and by default on OS X) are not case-sensitive, to maintain portability it is strongly recommended that case distinctions not be used to distinguish different packages. For example, if you have a package named foo, do not also create a package named Foo.</p>
<p>To ensure that file names are valid across file systems and supported operating systems, the ASCII control characters as well as the characters ‘&quot;’, ‘*’, ‘:’, ‘/’, ‘&lt;’, ‘&gt;’, ‘?’, ‘\’, and ‘|’ are not allowed in file names. In addition, files with names ‘con’, ‘prn’, ‘aux’, ‘clock$’, ‘nul’, ‘com1’ to ‘com9’, and ‘lpt1’ to ‘lpt9’ after conversion to lower case and stripping possible “extensions” (e.g., ‘lpt5.foo.bar’), are disallowed. Also, file names in the same directory must not differ only by case (see the previous paragraph). In addition, the basenames of ‘.Rd’ files may be used in URLs and so must be ASCII and not contain <code class="calibre2">%</code>. For maximal portability filenames should only contain only ASCII characters not excluded already (that is <code class="calibre2">A-Za-z0-9._!#$%&amp;+,;=@^(){}'[]</code> — we exclude space as many utilities do not accept spaces in file paths): non-English alphabetic characters cannot be guaranteed to be supported in all locales. It would be good practice to avoid the shell metacharacters <code class="calibre2">(){}'[]$~</code>: <code class="calibre2">~</code> is also used as part of ‘8.3’ filenames on Windows. In addition, packages are normally distributed as tarballs, and these have a limit on path lengths: for maximal portability 100 bytes.</p>
<p>A source package if possible should not contain binary executable files: they are not portable, and a security risk if they are of the appropriate architecture. <code class="calibre2">R CMD check</code> will warn about them<a href="R-exts_split_014.html#FOOT4" id="DOCF4"><sup>4</sup></a> unless they are listed (one filepath per line) in a file BinaryFiles at the top level of the package. Note that CRAN will not accept submissions containing binary files even if they are listed.</p>
<p>The R function <code class="calibre2">package.skeleton</code> can help to create the structure for a new package: see its help page for details.</p>
<hr />
<p><a href="" id="The-DESCRIPTION-file"></a> <a href="" id="The-DESCRIPTION-file-1"></a></p>
<h4 id="the-description-file" class="subsection">1.1.1 The DESCRIPTION file</h4>
<p><a href="" id="index-DESCRIPTION-file"></a></p>
<p>The DESCRIPTION file contains basic information about the package in the following format:</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="smallexample"><code>Package: pkgname
Version: 0.5-1
Date: 2015-01-01
Title: My First Collection of Functions
Authors@R: c(person(&quot;Joe&quot;, &quot;Developer&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;),
                     email = &quot;Joe.Developer@some.domain.net&quot;),
              person(&quot;Pat&quot;, &quot;Developer&quot;, role = &quot;aut&quot;),
              person(&quot;A.&quot;, &quot;User&quot;, role = &quot;ctb&quot;,
                     email = &quot;A.User@whereever.net&quot;))
Author: Joe Developer [aut, cre],
  Pat Developer [aut],
  A. User [ctb]
Maintainer: Joe Developer &lt;Joe.Developer@some.domain.net&gt;
Depends: R (&gt;= 3.1.0), nlme
Suggests: MASS
Description: A (one paragraph) description of what
  the package does and why it may be useful.
License: GPL (&gt;= 2)
URL: https://www.r-project.org, http://www.another.url
BugReports: https://pkgname.bugtracker.url</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>The format is that of a version of a ‘Debian Control File’ (see the help for ‘read.dcf’ and <a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html" class="uri">https://www.debian.org/doc/debian-policy/ch-controlfields.html</a>: R does not require encoding in UTF-8 and does not support comments starting with ‘#’). Fields start with an ASCII name immediately followed by a colon: the value starts after the colon and a space. Continuation lines (for example, for descriptions longer than one line) start with a space or tab. Field names are case-sensitive: all those used by R are capitalized.</p>
<p>For maximal portability, the DESCRIPTION file should be written entirely in ASCII — if this is not possible it must contain an ‘Encoding’ field (see below).</p>
<p>Several optional fields take <em>logical values</em>: these can be specified as ‘yes’, ‘true’, ‘no’ or ‘false’: capitalized values are also accepted.</p>
<p>The ‘Package’, ‘Version’, ‘License’, ‘Description’, ‘Title’, ‘Author’, and ‘Maintainer’ fields are mandatory, all other fields are optional. Fields ‘Author’ and ‘Maintainer’ can be auto-generated from ‘Authors@R’, and may be omitted if the latter is provided: however if they are not ASCII we recommend that they are provided.</p>
<p>The mandatory ‘Package’ field gives the name of the package. This should contain only (ASCII) letters, numbers and dot, have at least two characters and start with a letter and not end in a dot. If it needs explaining, this should be done in the ‘Description’ field (and not the ‘Title’ field).</p>
<p>The mandatory ‘Version’ field gives the version of the package. This is a sequence of at least <em>two</em> (and usually three) non-negative integers separated by single ‘.’ or ‘-’ characters. The canonical form is as shown in the example, and a version such as ‘0.01’ or ‘0.01.0’ will be handled as if it were ‘0.1-0’. It is <strong>not</strong> a decimal number, so for example <code class="calibre2">0.9 &lt; 0.75</code> since <code class="calibre2">9 &lt; 75</code>.</p>
<p>The mandatory ‘License’ field is discussed in the next subsection.</p>
<p>The mandatory ‘Title’ field should give a <em>short</em> description of the package. Some package listings may truncate the title to 65 characters. It should use <em>title case</em> (that is, use capitals for the principal words: <code class="calibre2">tools::toTitleCase</code> can help you with this), not use any markup, not have any continuation lines, and not end in a period (unless part of …). Do not repeat the package name: it is often used prefixed by the name. Refer to other packages and external software in single quotes, and to book titles (and similar) in double quotes.</p>
<p>The mandatory ‘Description’ field should give a <em>comprehensive</em> description of what the package does. One can use several (complete) sentences, but only one paragraph. It should be intelligible to all the intended readership (e.g. for a CRAN package to all CRAN users). It is good practice not to start with the package name, ‘This package’ or similar. As with the ‘Title’ field, double quotes should be used for quotations (including titles of books and articles), and single quotes for non-English usage, including names of other packages and external software. This field should also be used for explaining the package name if necessary. URLs should be enclosed in angle brackets, e.g. ‘&lt;https://www.r-project.org&gt;’: see also <a href="#Specifying-URLs">Specifying URLs</a>.</p>
<p>The mandatory ‘Author’ field describes who wrote <em>the package</em>. It is a plain text field intended for human readers, but not for automatic processing (such as extracting the email addresses of all listed contributors: for that use ‘Authors@R’). Note that all significant contributors must be included: if you wrote an R wrapper for the work of others included in the src directory, you are not the sole (and maybe not even the main) author.</p>
<p>The mandatory ‘Maintainer’ field should give a <em>single</em> name followed by a <em>valid</em> (RFC 2822) email address in angle brackets. It should not end in a period or comma. This field is what is reported by the <code class="calibre2">maintainer</code> function and used by <code class="calibre2">bug.report</code>. For a CRAN package it should be a <em>person</em>, not a mailing list and not a corporate entity: do ensure that it is valid and will remain valid for the lifetime of the package.</p>
<p>Note that the <em>display name</em> (the part before the address in angle brackets) should be enclosed in double quotes if it contains non-alphanumeric characters such as comma or period. (The current standard, RFC 5322, allows periods but RFC 2822 did not.)</p>
<p>Both ‘Author’ and ‘Maintainer’ fields can be omitted if a suitable ‘Authors@R’ field is given. This field can be used to provide a refined and machine-readable description of the package “authors” (in particular specifying their precise <em>roles</em>), via suitable R code. It should create an object of class <code class="calibre2">&quot;person&quot;</code>, by either a call to <code class="calibre2">person</code> or a series of calls (one per “author”) concatenated by <code class="calibre2">c()</code>: see the example DESCRIPTION file above. The roles can include ‘&quot;aut&quot;’ (author) for full authors, ‘&quot;cre&quot;’ (creator) for the package maintainer, and ‘&quot;ctb&quot;’ (contributor) for other contributors, ‘&quot;cph&quot;’ (copyright holder), among others. See <code class="calibre2">?person</code> for more information. Note that no role is assumed by default. Auto-generated package citation information takes advantage of this specification. The ‘Author’ and ‘Maintainer’ fields are auto-generated from it if needed when building<a href="R-exts_split_014.html#FOOT5" id="DOCF5"><sup>5</sup></a> or installing.</p>
<p><a href="" id="index-COPYRIGHTS"></a></p>
<p>An optional ‘Copyright’ field can be used where the copyright holder(s) are not the authors. If necessary, this can refer to an installed file: the convention is to use file inst/COPYRIGHTS.</p>
<p>The optional ‘Date’ field gives the <em>release date</em> of the current version of the package. It is strongly recommended<a href="R-exts_split_014.html#FOOT6" id="DOCF6"><sup>6</sup></a> to use the ‘yyyy-mm-dd’ format conforming to the ISO 8601 standard.</p>
<p>The ‘Depends’, ‘Imports’, ‘Suggests’, ‘Enhances’, ‘LinkingTo’ and ‘Additional_repositories’ fields are discussed in a later subsection.</p>
<p>Dependencies external to the R system should be listed in the ‘SystemRequirements’ field, possibly amplified in a separate README file.</p>
<p>The ‘URL’ field may give a list of URLs separated by commas or whitespace, for example the homepage of the author or a page where additional material describing the software can be found. These URLs are converted to active hyperlinks in CRAN package listings. See <a href="#Specifying-URLs">Specifying URLs</a>.</p>
<p>The ‘BugReports’ field may contain a single URL to which bug reports about the package should be submitted. This URL will be used by <code class="calibre2">bug.report</code> instead of sending an email to the maintainer. A browser is opened for a ‘http://’ or ‘https://’ URL. As from R 3.4.0, <code class="calibre2">bug.report</code> will try to extract an email address (preferably from a ‘mailto:’ URL or enclosed in angle brackets).</p>
<p>Base and recommended packages (i.e., packages contained in the R source distribution or available from CRAN and recommended to be included in every binary distribution of R) have a ‘Priority’ field with value ‘base’ or ‘recommended’, respectively. These priorities must not be used by other packages.</p>
<p>A ‘Collate’ field can be used for controlling the collation order for the R code files in a package when these are processed for package installation. The default is to collate according to the ‘C’ locale. If present, the collate specification must list <em>all</em> R code files in the package (taking possible OS-specific subdirectories into account, see <a href="#Package-subdirectories">Package subdirectories</a>) as a whitespace separated list of file paths relative to the R subdirectory. Paths containing white space or quotes need to be quoted. An OS-specific collation field (‘Collate.unix’ or ‘Collate.windows’) will be used in preference to ‘Collate’.</p>
<p>The ‘LazyData’ logical field controls whether the R datasets use lazy-loading. A ‘LazyLoad’ field was used in versions prior to 2.14.0, but now is ignored.</p>
<p>The ‘KeepSource’ logical field controls if the package code is sourced using <code class="calibre2">keep.source = TRUE</code> or <code class="calibre2">FALSE</code>: it might be needed exceptionally for a package designed to always be used with <code class="calibre2">keep.source = TRUE</code>.</p>
<p>The ‘ByteCompile’ logical field controls if the package code is to be byte-compiled on installation: the default is currently not to, so this may be useful for a package known to benefit particularly from byte-compilation (which can take quite a long time and increases the installed size of the package). It is used for the recommended packages, as they are byte-compiled when R is installed and for consistency should be byte-compiled when updated. This can be overridden by installing with flag --no-byte-compile.</p>
<p>The ‘ZipData’ logical field was used to control whether the automatic Windows build would zip up the data directory or not prior to R 2.13.0: it is now ignored.</p>
<p>The ‘Biarch’ logical field is used on Windows to select the <code class="calibre2">INSTALL</code> option --force-biarch for this package.</p>
<p>The ‘BuildVignettes’ logical field can be set to a false value to stop <code class="calibre2">R CMD build</code> from attempting to build the vignettes, as well as preventing<a href="R-exts_split_014.html#FOOT7" id="DOCF7"><sup>7</sup></a> <code class="calibre2">R CMD check</code> from testing this. This should only be used exceptionally, for example if the PDFs include large figures which are not part of the package sources (and hence only in packages which do not have an Open Source license).</p>
<p>The ‘VignetteBuilder’ field names (in a comma-separated list) packages that provide an engine for building vignettes. These may include the current package, or ones listed in ‘Depends’, ‘Suggests’ or ‘Imports’. The <strong>utils</strong> package is always implicitly appended. See <a href="R-exts_split_005.html#Non_002dSweave-vignettes">Non-Sweave vignettes</a> for details.</p>
<p>If the DESCRIPTION file is not entirely in ASCII it should contain an ‘Encoding’ field specifying an encoding. This is used as the encoding of the DESCRIPTION file itself and of the R and NAMESPACE files, and as the default encoding of .Rd files. The examples are assumed to be in this encoding when running <code class="calibre2">R CMD check</code>, and it is used for the encoding of the <code class="calibre2">CITATION</code> file. Only encoding names <code class="calibre2">latin1</code>, <code class="calibre2">latin2</code> and <code class="calibre2">UTF-8</code> are known to be portable. (Do not specify an encoding unless one is actually needed: doing so makes the package <em>less</em> portable. If a package has a specified encoding, you should run <code class="calibre2">R CMD build</code> etc in a locale using that encoding.)</p>
<p>The ‘NeedsCompilation’ field should be set to <code class="calibre2">&quot;yes&quot;</code> if the package contains code which to be compiled, otherwise <code class="calibre2">&quot;no&quot;</code> (when the package could be installed from source on any platform without additional tools). This is used by <code class="calibre2">install.packages(type = &quot;both&quot;)</code> in R &gt;= 2.15.2 on platforms where binary packages are the norm: it is normally set by <code class="calibre2">R CMD build</code> or the repository assuming compilation is required if and only if the package has a src directory.</p>
<p>The ‘OS_type’ field specifies the OS(es) for which the package is intended. If present, it should be one of <code class="calibre2">unix</code> or <code class="calibre2">windows</code>, and indicates that the package can only be installed on a platform with ‘.Platform$OS.type’ having that value.</p>
<p>The ‘Type’ field specifies the type of the package: see <a href="R-exts_split_005.html#Package-types">Package types</a>.</p>
<p>One can add subject classifications for the content of the package using the fields ‘Classification/ACM’ or ‘Classification/ACM-2012’ (using the Computing Classification System of the Association for Computing Machinery, <a href="http://www.acm.org/about/class/" class="uri">http://www.acm.org/about/class/</a>; the former refers to the 1998 version), ‘Classification/JEL’ (the Journal of Economic Literature Classification System, <a href="https://www.aeaweb.org/econlit/jelCodes.php" class="uri">https://www.aeaweb.org/econlit/jelCodes.php</a>, or ‘Classification/MSC’ or ‘Classification/MSC-2010’ (the Mathematics Subject Classification of the American Mathematical Society, <a href="http://www.ams.org/msc/" class="uri">http://www.ams.org/msc/</a>; the former refers to the 2000 version). The subject classifications should be comma-separated lists of the respective classification codes, e.g., ‘Classification/ACM: G.4, H.2.8, I.5.1’.</p>
<p>A ‘Language’ field can be used to indicate if the package documentation is not in English: this should be a comma-separated list of standard (not private use or grandfathered) IETF language tags as currently defined by RFC 5646 (<a href="https://tools.ietf.org/html/rfc5646" class="uri">https://tools.ietf.org/html/rfc5646</a>, see also <a href="https://en.wikipedia.org/wiki/IETF_language_tag" class="uri">https://en.wikipedia.org/wiki/IETF_language_tag</a>), i.e., use language subtags which in essence are 2-letter ISO 639-1 (<a href="https://en.wikipedia.org/wiki/ISO_639-1" class="uri">https://en.wikipedia.org/wiki/ISO_639-1</a>) or 3-letter ISO 639-3 (<a href="https://en.wikipedia.org/wiki/ISO_639-3" class="uri">https://en.wikipedia.org/wiki/ISO_639-3</a>) language codes.</p>
<p>An ‘RdMacros’ field can be used to hold a comma-separated list of packages from which the current package will import Rd macro definitions. These will be imported after the system macros, in the order listed in the ‘RdMacros’ field, before any macro definitions in the current package are loaded. Macro definitions in individual .Rd files in the man directory are loaded last, and are local to later parts of that file. In case of duplicates, the last loaded definition will be used<a href="R-exts_split_014.html#FOOT8" id="DOCF8"><sup>8</sup></a> Both <code class="calibre2">R CMD Rd2pdf</code> and <code class="calibre2">R CMD Rdconv</code> have an optional flag --RdMacros=pkglist. The option is also a comma-separated list of package names, and has priority over the value given in DESCRIPTION. Packages using Rd macros should depend on R 3.2.0 or later.</p>
<blockquote>
<p><strong>Note:</strong> There should be no ‘Built’ or ‘Packaged’ fields, as these are added by the package management tools.</p>
</blockquote>
<p>There is no restriction on the use of other fields not mentioned here (but using other capitalizations of these field names would cause confusion). Fields <code class="calibre2">Note</code>, <code class="calibre2">Contact</code> (for contacting the authors/developers<a href="R-exts_split_014.html#FOOT9" id="DOCF9"><sup>9</sup></a>) and <code class="calibre2">MailingList</code> are in common use. Some repositories (including CRAN and R-forge) add their own fields.</p>
<hr />
<p><a href="" id="Licensing"></a> <a href="" id="Licensing-1"></a></p>
<h4 id="licensing" class="subsection">1.1.2 Licensing</h4>
<p>Licensing for a package which might be distributed is an important but potentially complex subject.</p>
<p>It is very important that you include license information! Otherwise, it may not even be legally correct for others to distribute copies of the package, let alone use it.</p>
<p>The package management tools use the concept of ‘free or open source software’ (FOSS, e.g., <a href="https://en.wikipedia.org/wiki/FOSS" class="uri">https://en.wikipedia.org/wiki/FOSS</a>) licenses: the idea being that some users of R and its packages want to restrict themselves to such software. Others need to ensure that there are no restrictions stopping them using a package, e.g. forbidding commercial or military use. It is a central tenet of FOSS software that there are no restrictions on users nor usage.</p>
<p>Do not use the ‘License’ field for information on copyright holders: if needed, use a ‘Copyright’ field.</p>
<p>The mandatory ‘License’ field in the DESCRIPTION file should specify the license of the package in a standardized form. Alternatives are indicated <em>via</em> vertical bars. Individual specifications must be one of</p>
<ul>
<li><p>One of the “standard” short specifications</p>
<div class="example">
<pre class="example1"><code>GPL-2 GPL-3 LGPL-2 LGPL-2.1 LGPL-3 AGPL-3 Artistic-2.0
BSD_2_clause BSD_3_clause MIT</code></pre>
</div>
<p>as made available <em>via</em> <a href="https://www.R-project.org/Licenses/" class="uri">https://www.R-project.org/Licenses/</a> and contained in subdirectory share/licenses of the R source or home directory.</p></li>
<li><p>The names or abbreviations of other licenses contained in the license data base in file share/licenses/license.db in the R source or home directory, possibly (for versioned licenses) followed by a version restriction of the form ‘(op v)’ with ‘op’ one of the comparison operators ‘&lt;’, ‘&lt;=’, ‘&gt;’, ‘&gt;=’, ‘==’, or ‘!=’ and ‘v’ a numeric version specification (strings of non-negative integers separated by ‘.’), possibly combined <em>via</em> ‘,’ (see below for an example). For versioned licenses, one can also specify the name followed by the version, or combine an existing abbreviation and the version with a ‘-’.</p>
<p>Abbreviations <code class="calibre2">GPL</code> and <code class="calibre2">LGPL</code> are ambiguous and usually taken to mean any version of the license: but it is better not to use them.</p></li>
<li>One of the strings ‘file LICENSE’ or ‘file LICENCE’ referring to a file named LICENSE or LICENCE in the package (source and installation) top-level directory.</li>
<li>The string ‘Unlimited’, meaning that there are no restrictions on distribution or use other than those imposed by relevant laws (including copyright laws).</li>
</ul>
<p>If a package license <em>restricts</em> a base license (where permitted, e.g., using GPL-3 or AGPL-3 with an attribution clause), the additional terms should be placed in file LICENSE (or LICENCE), and the string ‘+ file LICENSE’ (or ‘+ file LICENCE’, respectively) should be appended to the corresponding individual license specification. Note that several commonly used licenses do not permit restrictions: this includes GPL-2 and hence any specification which includes it.</p>
<p>Examples of standardized specifications include</p>
<div class="example">
<pre class="example1"><code>License: GPL-2
License: LGPL (&gt;= 2.0, &lt; 3) | Mozilla Public License
License: GPL-2 | file LICENCE
License: GPL (&gt;= 2) | BSD_3_clause + file LICENSE
License: Artistic-2.0 | AGPL-3 + file LICENSE</code></pre>
</div>
<p>Please note in particular that “Public domain” is not a valid license, since it is not recognized in some jurisdictions.</p>
<p>Please ensure that the license you choose also covers any dependencies (including system dependencies) of your package: it is particularly important that any restrictions on the use of such dependencies are evident to people reading your DESCRIPTION file.</p>
<p>Fields ‘License_is_FOSS’ and ‘License_restricts_use’ may be added by repositories where information cannot be computed from the name of the license. ‘License_is_FOSS: yes’ is used for licenses which are known to be FOSS, and ‘License_restricts_use’ can have values ‘yes’ or ‘no’ if the LICENSE file is known to restrict users or usage, or known not to. These are used by, e.g., the <code class="calibre2">available.packages</code> filters.</p>
<p><a href="" id="index-LICENSE-file"></a> <a href="" id="index-LICENCE-file"></a></p>
<p>The optional file LICENSE/LICENCE contains a copy of the license of the package. To avoid any confusion only include such a file if it is referred to in the ‘License’ field of the DESCRIPTION file.</p>
<p>Whereas you should feel free to include a license file in your <em>source</em> distribution, please do not arrange to <em>install</em> yet another copy of the GNU COPYING or COPYING.LIB files but refer to the copies on <a href="https://www.R-project.org/Licenses/" class="uri">https://www.R-project.org/Licenses/</a> and included in the R distribution (in directory share/licenses). Since files named LICENSE or LICENCE <em>will</em> be installed, do not use these names for standard license files. To include comments about the licensing rather than the body of a license, use a file named something like LICENSE.note.</p>
<p>A few “standard” licenses are rather license templates which need additional information to be completed <em>via</em> ‘+ file LICENSE’.</p>
<hr />
<p><a href="" id="Package-Dependencies"></a> <a href="" id="Package-Dependencies-1"></a></p>
<h4 id="package-dependencies" class="subsection">1.1.3 Package Dependencies</h4>
<p>The ‘Depends’ field gives a comma-separated list of package names which this package depends on. Those packages will be attached before the current package when <code class="calibre2">library</code> or <code class="calibre2">require</code> is called. Each package name may be optionally followed by a comment in parentheses specifying a version requirement. The comment should contain a comparison operator, whitespace and a valid version number, e.g. ‘MASS (&gt;= 3.1-20)’.</p>
<p>The ‘Depends’ field can also specify a dependence on a certain version of R — e.g., if the package works only with R version 3.0.0 or later, include ‘R (&gt;= 3.0.0)’ in the ‘Depends’ field. You can also require a certain SVN revision for R-devel or R-patched, e.g. ‘R (&gt;= 2.14.0), R (&gt;= r56550)’ requires a version later than R-devel of late July 2011 (including released versions of 2.14.0).</p>
<p>It makes no sense to declare a dependence on <code class="calibre2">R</code> without a version specification, nor on the package <strong>base</strong>: this is an R package and package <strong>base</strong> is always available.</p>
<p>A package or ‘R’ can appear more than once in the ‘Depends’ field, for example to give upper and lower bounds on acceptable versions.</p>
<p>Both <code class="calibre2">library</code> and the R package checking facilities use this field: hence it is an error to use improper syntax or misuse the ‘Depends’ field for comments on other software that might be needed. The R <code class="calibre2">INSTALL</code> facilities check if the version of R used is recent enough for the package being installed, and the list of packages which is specified will be attached (after checking version requirements) before the current package.</p>
<p>The ‘Imports’ field lists packages whose namespaces are imported from (as specified in the NAMESPACE file) but which do not need to be attached. Namespaces accessed by the ‘::’ and ‘:::’ operators must be listed here, or in ‘Suggests’ or ‘Enhances’ (see below). Ideally this field will include all the standard packages that are used, and it is important to include S4-using packages (as their class definitions can change and the DESCRIPTION file is used to decide which packages to re-install when this happens). Packages declared in the ‘Depends’ field should not also be in the ‘Imports’ field. Version requirements can be specified and are checked when the namespace is loaded (since R &gt;= 3.0.0).</p>
<p>The ‘Suggests’ field uses the same syntax as ‘Depends’ and lists packages that are not necessarily needed. This includes packages used only in examples, tests or vignettes (see <a href="#Writing-package-vignettes">Writing package vignettes</a>), and packages loaded in the body of functions. E.g., suppose an example<a href="R-exts_split_014.html#FOOT10" id="DOCF10"><sup>10</sup></a> from package <strong>foo</strong> uses a dataset from package <strong>bar</strong>. Then it is not necessary to have <strong>bar</strong> use <strong>foo</strong> unless one wants to execute all the examples/tests/vignettes: it is useful to have <strong>bar</strong>, but not necessary. Version requirements can be specified but should be checked by the code which uses the package.</p>
<p>Finally, the ‘Enhances’ field lists packages “enhanced” by the package at hand, e.g., by providing methods for classes from these packages, or ways to handle objects from these packages (so several packages have ‘Enhances: chron’ because they can handle datetime objects from <a href="https://CRAN.R-project.org/package=chron"><strong>chron</strong></a> even though they prefer R’s native datetime functions). Version requirements can be specified, but are currently not used. Such packages cannot be required to check the package: any tests which use them must be conditional on the presence of the package. (If your tests use e.g. a dataset from another package it should be in ‘Suggests’ and not ‘Enhances’.)</p>
<p>The general rules are</p>
<ul>
<li>A package should be listed in only one of these fields.</li>
<li>Packages whose namespace only is needed to load the package using <code class="calibre2">library(pkgname)</code> should be listed in the ‘Imports’ field and not in the ‘Depends’ field. Packages listed in <code class="calibre2">imports</code> or <code class="calibre2">importFrom</code> directives in the NAMESPACE file should almost always be in ‘Imports’ and not ‘Depends’.</li>
<li>Packages that need to be attached to successfully load the package using <code class="calibre2">library(pkgname)</code> must be listed in the ‘Depends’ field.</li>
<li>All packages that are needed<a href="R-exts_split_014.html#FOOT11" id="DOCF11"><sup>11</sup></a> to successfully run <code class="calibre2">R CMD check</code> on the package must be listed in one of ‘Depends’ or ‘Suggests’ or ‘Imports’. Packages used to run examples or tests conditionally (e.g. <em>via</em> <code class="calibre2">if(require(pkgname))</code>) should be listed in ‘Suggests’ or ‘Enhances’. (This allows checkers to ensure that all the packages needed for a complete check are installed.)</li>
</ul>
<p>In particular, packages providing “only” data for examples or vignettes should be listed in ‘Suggests’ rather than ‘Depends’ in order to make lean installations possible.</p>
<p>Version dependencies in the ‘Depends’ and ‘Imports’ fields are used by <code class="calibre2">library</code> when it loads the package, and <code class="calibre2">install.packages</code> checks versions for the ‘Depends’, ‘Imports’ and (for <code class="calibre2">dependencies = TRUE</code>) ‘Suggests’ fields.</p>
<p>It is increasingly important that the information in these fields is complete and accurate: it is for example used to compute which packages depend on an updated package and which packages can safely be installed in parallel.</p>
<p>This scheme was developed before all packages had namespaces (R 2.14.0 in October 2011), and good practice changed once that was in place.</p>
<p>Field ‘Depends’ should nowadays be used rarely, only for packages which are intended to be put on the search path to make their facilities available to the end user (and not to the package itself): for example it makes sense that a user of package <a href="https://CRAN.R-project.org/package=latticeExtra"><strong>latticeExtra</strong></a> would want the functions of package <a href="https://CRAN.R-project.org/package=lattice"><strong>lattice</strong></a> made available.</p>
<p>Almost always packages mentioned in ‘Depends’ should also be imported from in the NAMESPACE file: this ensures that any needed parts of those packages are available when some other package imports the current package.</p>
<p>The ‘Imports’ field should not contain packages which are not imported from (<em>via</em> the NAMESPACE file or <code class="calibre2">::</code> or <code class="calibre2">:::</code> operators), as all the packages listed in that field need to be installed for the current package to be installed. (This is checked by <code class="calibre2">R CMD check</code>.)</p>
<p>R code in the package should call <code class="calibre2">library</code> or <code class="calibre2">require</code> only exceptionally. Such calls are never needed for packages listed in ‘Depends’ as they will already be on the search path. It used to be common practice to use <code class="calibre2">require</code> calls for packages listed in ‘Suggests’ in functions which used their functionality, but nowadays it is better to access such functionality <em>via</em> <code class="calibre2">::</code> calls.</p>
<p>A package that wishes to make use of header files in other packages needs to declare them as a comma-separated list in the field ‘LinkingTo’ in the DESCRIPTION file. For example</p>
<div class="example">
<pre class="example1"><code>LinkingTo: link1, link2</code></pre>
</div>
<p>The ‘LinkingTo’ field can have a version requirement which is checked at installation.</p>
<p>Specifying a package in ‘LinkingTo’ suffices if these are C++ headers containing source code or static linking is done at installation: the packages do not need to be (and usually should not be) listed in the ‘Depends’ or ‘Imports’ fields. This includes CRAN package <a href="https://CRAN.R-project.org/package=BH"><strong>BH</strong></a> and almost all users of <a href="https://CRAN.R-project.org/package=RcppArmadillo"><strong>RcppArmadillo</strong></a> and <a href="https://CRAN.R-project.org/package=RcppEigen"><strong>RcppEigen</strong></a>.</p>
<p>For another use of ‘LinkingTo’ see <a href="R-exts_split_009.html#Linking-to-native-routines-in-other-packages">Linking to native routines in other packages</a>.</p>
<p>The ‘Additional_repositories’ field is a comma-separated list of repository URLs where the packages named in the other fields may be found. It is currently used by <code class="calibre2">R CMD check</code> to check that the packages can be found, at least as source packages (which can be installed on any platform).</p>
<hr />
<p><a href="" id="Suggested-packages"></a> <a href="" id="Suggested-packages-1"></a></p>
<h4 id="suggested-packages" class="subsection">1.1.3.1 Suggested packages</h4>
<p>Note that someone wanting to run the examples/tests/vignettes may not have a suggested package available (and it may not even be possible to install it for that platform). The recommendation used to be to make their use conditional <em>via</em> <code class="calibre2">if(require(&quot;pkgname&quot;))</code>: this is OK if that conditioning is done in examples/tests/vignettes, although using <code class="calibre2">if(requireNamespace(&quot;pkgname&quot;))</code> is preferred, if possible.</p>
<p>However, using <code class="calibre2">require</code> for conditioning <em>in package code</em> is not good practice as it alters the search path for the rest of the session and relies on functions in that package not being masked by other <code class="calibre2">require</code> or <code class="calibre2">library</code> calls. It is better practice to use code like</p>
<div class="example">
<pre class="example1"><code>   if (requireNamespace(&quot;rgl&quot;, quietly = TRUE)) {
      rgl::plot3d(...)
   } else {
      ## do something else not involving rgl.
   }</code></pre>
</div>
<p>Note the use of <code class="calibre2">rgl::</code> as that object would not necessarily be visible (and if it is, it need not be the one from that namespace: <code class="calibre2">plot3d</code> occurs in several other packages). If the intention is to give an error if the suggested package is not available, simply use e.g. <code class="calibre2">rgl::plot3d</code>.</p>
<p>Note that the recommendation to use suggested packages conditionally in tests does also apply to packages used to manage test suites: a notorious example was <a href="https://CRAN.R-project.org/package=testthat"><strong>testthat</strong></a> which in version 1.0.0 contained illegal C++ code and hence could not be installed on standards-compliant platforms.</p>
<p>Some people have assumed that a ‘recommended’ package in ‘Suggests’ can safely be used unconditionally, but this is not so. (R can be installed without recommended packages, and which packages are ‘recommended’ may change.)</p>
<p>As noted above, packages in ‘Enhances’ <em>must</em> be used conditionally and hence objects within them should always be accessed <em>via</em> <code class="calibre2">::</code>.</p>
<hr />
<p><a href="" id="The-INDEX-file"></a> <a href="" id="The-INDEX-file-1"></a></p>
<h4 id="the-index-file" class="subsection">1.1.4 The INDEX file</h4>
<p><a href="" id="index-INDEX-file"></a></p>
<p>The optional file INDEX contains a line for each sufficiently interesting object in the package, giving its name and a description (functions such as print methods not usually called explicitly might not be included). Normally this file is missing and the corresponding information is automatically generated from the documentation sources (using <code class="calibre2">tools::Rdindex()</code>) when installing from source.</p>
<p>The file is part of the information given by <code class="calibre2">library(help = pkgname)</code>.</p>
<p>Rather than editing this file, it is preferable to put customized information about the package into an overview help page (see <a href="R-exts_split_006.html#Documenting-packages">Documenting packages</a>) and/or a vignette (see <a href="#Writing-package-vignettes">Writing package vignettes</a>).</p>
<hr />
<p><a href="" id="Package-subdirectories"></a> <a href="" id="Package-subdirectories-1"></a></p>
<h4 id="package-subdirectories" class="subsection">1.1.5 Package subdirectories</h4>
<p><a href="" id="index-Package-subdirectories"></a></p>
<p>The R subdirectory contains R code files, only. The code files to be installed must start with an ASCII (lower or upper case) letter or digit and have one of the extensions<a href="R-exts_split_014.html#FOOT12" id="DOCF12"><sup>12</sup></a> .R, .S, .q, .r, or .s. We recommend using .R, as this extension seems to be not used by any other software. It should be possible to read in the files using <code class="calibre2">source()</code>, so R objects must be created by assignments. Note that there need be no connection between the name of the file and the R objects created by it. Ideally, the R code files should only directly assign R objects and definitely should not call functions with side effects such as <code class="calibre2">require</code> and <code class="calibre2">options</code>. If computations are required to create objects these can use code ‘earlier’ in the package (see the ‘Collate’ field) plus functions in the ‘Depends’ packages provided that the objects created do not depend on those packages except <em>via</em> namespace imports.</p>
<p>Two exceptions are allowed: if the R subdirectory contains a file sysdata.rda (a saved image of one or more R objects: please use suitable compression as suggested by <code class="calibre2">tools::resaveRdaFiles</code>, and see also the ‘SysDataCompression’ DESCRIPTION field.) this will be lazy-loaded into the namespace environment – this is intended for system datasets that are not intended to be user-accessible <em>via</em> <code class="calibre2">data</code>. Also, files ending in ‘.in’ will be allowed in the R directory to allow a configure script to generate suitable files.</p>
<p>Only ASCII characters (and the control characters tab, formfeed, LF and CR) should be used in code files. Other characters are accepted in comments<a href="R-exts_split_014.html#FOOT13" id="DOCF13"><sup>13</sup></a>, but then the comments may not be readable in e.g. a UTF-8 locale. Non-ASCII characters in object names will normally<a href="R-exts_split_014.html#FOOT14" id="DOCF14"><sup>14</sup></a> fail when the package is installed. Any byte will be allowed in a quoted character string but <code class="calibre2">\uxxxx</code> escapes should be used for non-ASCII characters. However, non-ASCII character strings may not be usable in some locales and may display incorrectly in others.</p>
<p><a href="" id="index-library_002edynam"></a></p>
<p>Various R functions in a package can be used to initialize and clean up. See <a href="R-exts_split_005.html#Load-hooks">Load hooks</a>.</p>
<p>The man subdirectory should contain (only) documentation files for the objects in the package in <em>R documentation</em> (Rd) format. The documentation filenames must start with an ASCII (lower or upper case) letter or digit and have the extension .Rd (the default) or .rd. Further, the names must be valid in ‘file://’ URLs, which means<a href="R-exts_split_014.html#FOOT15" id="DOCF15"><sup>15</sup></a> they must be entirely ASCII and not contain ‘%’. See <a href="R-exts_split_005.html#Writing-R-documentation-files">Writing R documentation files</a>, for more information. Note that all user-level objects in a package should be documented; if a package pkg contains user-level objects which are for “internal” use only, it should provide a file pkg-internal.Rd which documents all such objects, and clearly states that these are not meant to be called by the user. See e.g. the sources for package <strong>grid</strong> in the R distribution. Note that packages which use internal objects extensively should not export those objects from their namespace, when they do not need to be documented (see <a href="R-exts_split_005.html#Package-namespaces">Package namespaces</a>).</p>
<p>Having a man directory containing no documentation files may give an installation error.</p>
<p>The man subdirectory may contain a subdirectory named macros; this will contain source for user-defined Rd macros. (See <a href="R-exts_split_006.html#User_002ddefined-macros">User-defined macros</a>.) These use the Rd format, but may not contain anything but macro definitions, comments and whitespace.</p>
<p>The R and man subdirectories may contain OS-specific subdirectories named unix or windows.</p>
<p>The sources and headers for the compiled code are in src, plus optionally a file Makevars or Makefile. When a package is installed using <code class="calibre2">R CMD INSTALL</code>, <code class="calibre2">make</code> is used to control compilation and linking into a shared object for loading into R. There are default <code class="calibre2">make</code> variables and rules for this (determined when R is configured and recorded in R_HOME/etcR_ARCH/Makeconf), providing support for C, C++, FORTRAN 77, Fortran 9x<a href="R-exts_split_014.html#FOOT16" id="DOCF16"><sup>16</sup></a>, Objective C and Objective C++<a href="R-exts_split_014.html#FOOT17" id="DOCF17"><sup>17</sup></a> with associated extensions .c, .cc or .cpp, .f, .f90 or .f95, .m, and .mm, respectively. We recommend using .h for headers, also for C++<a href="R-exts_split_014.html#FOOT18" id="DOCF18"><sup>18</sup></a> or Fortran 9x include files. (Use of extension .C for C++ is no longer supported.) Files in the src directory should not be hidden (start with a dot), and hidden files will under some versions of R be ignored.</p>
<p>It is not portable (and may not be possible at all) to mix all these languages in a single package, and we do not support using both C++ and Fortran 9x. Because R itself uses it, we know that C and FORTRAN 77 can be used together and mixing C and C++ seems to be widely successful.</p>
<p>If your code needs to depend on the platform there are certain defines which can used in C or C++. On all Windows builds (even 64-bit ones) ‘_WIN32’ will be defined: on 64-bit Windows builds also ‘_WIN64’, and on macOS ‘__APPLE__’ is defined.<a href="R-exts_split_014.html#FOOT19" id="DOCF19"><sup>19</sup></a></p>
<p>The default rules can be tweaked by setting macros<a href="R-exts_split_014.html#FOOT20" id="DOCF20"><sup>20</sup></a> in a file src/Makevars (see <a href="#Using-Makevars">Using Makevars</a>). Note that this mechanism should be general enough to eliminate the need for a package-specific src/Makefile. If such a file is to be distributed, considerable care is needed to make it general enough to work on all R platforms. If it has any targets at all, it should have an appropriate first target named ‘all’ and a (possibly empty) target ‘clean’ which removes all files generated by running <code class="calibre2">make</code> (to be used by ‘R CMD INSTALL --clean’ and ‘R CMD INSTALL --preclean’). There are platform-specific file names on Windows: src/Makevars.win takes precedence over src/Makevars and src/Makefile.win must be used. Some <code class="calibre2">make</code> programs require makefiles to have a complete final line, including a newline.</p>
<p>A few packages use the src directory for purposes other than making a shared object (e.g. to create executables). Such packages should have files src/Makefile and src/Makefile.win (unless intended for only Unix-alikes or only Windows).</p>
<p>In very special cases packages may create binary files other than the shared objects/DLLs in the src directory. Such files will not be installed in a multi-architecture setting since <code class="calibre2">R CMD INSTALL --libs-only</code> is used to merge multiple sub-architectures and it only copies shared objects/DLLs. If a package wants to install other binaries (for example executable programs), it should provide an R script src/install.libs.R which will be run as part of the installation in the <code class="calibre2">src</code> build directory <em>instead of</em> copying the shared objects/DLLs. The script is run in a separate R environment containing the following variables: <code class="calibre2">R_PACKAGE_NAME</code> (the name of the package), <code class="calibre2">R_PACKAGE_SOURCE</code> (the path to the source directory of the package), <code class="calibre2">R_PACKAGE_DIR</code> (the path of the target installation directory of the package), <code class="calibre2">R_ARCH</code> (the arch-dependent part of the path, often empty), <code class="calibre2">SHLIB_EXT</code> (the extension of shared objects) and <code class="calibre2">WINDOWS</code> (<code class="calibre2">TRUE</code> on Windows, <code class="calibre2">FALSE</code> elsewhere). Something close to the default behavior could be replicated with the following src/install.libs.R file:</p>
<div class="example">
<pre class="example1"><code>files &lt;- Sys.glob(paste0(&quot;*&quot;, SHLIB_EXT))
dest &lt;- file.path(R_PACKAGE_DIR, paste0(&#39;libs&#39;, R_ARCH))
dir.create(dest, recursive = TRUE, showWarnings = FALSE)
file.copy(files, dest, overwrite = TRUE)
if(file.exists(&quot;symbols.rds&quot;))
    file.copy(&quot;symbols.rds&quot;, dest, overwrite = TRUE)</code></pre>
</div>
<p>On the other hand, executable programs could be installed along the lines of</p>
<div class="example">
<pre class="example1"><code>execs &lt;- c(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;)
if(WINDOWS) execs &lt;- paste0(execs, &quot;.exe&quot;)
if ( any(file.exists(execs)) ) {
  dest &lt;- file.path(R_PACKAGE_DIR,  paste0(&#39;bin&#39;, R_ARCH))
  dir.create(dest, recursive = TRUE, showWarnings = FALSE)
  file.copy(execs, dest, overwrite = TRUE)
}</code></pre>
</div>
<p>Note the use of architecture-specific subdirectories of bin where needed.</p>
<p>The data subdirectory is for data files: See <a href="#Data-in-packages">Data in packages</a>.</p>
<p>The demo subdirectory is for R scripts (for running <em>via</em> <code class="calibre2">demo()</code>) that demonstrate some of the functionality of the package. Demos may be interactive and are not checked automatically, so if testing is desired use code in the tests directory to achieve this. The script files must start with a (lower or upper case) letter and have one of the extensions .R or .r. If present, the demo subdirectory should also have a 00Index file with one line for each demo, giving its name and a description separated by a tab or at least three spaces. (This index file is not generated automatically.) Note that a demo does not have a specified encoding and so should be an ASCII file (see <a href="R-exts_split_005.html#Encoding-issues">Encoding issues</a>). Function <code class="calibre2">demo()</code> will use the package encoding if there is one, but this is mainly useful for non-ASCII comments.</p>
<p><a href="" id="index-_002eRinstignore-file"></a></p>
<p>The contents of the inst subdirectory will be copied recursively to the installation directory. Subdirectories of inst should not interfere with those used by R (currently, R, data, demo, exec, libs, man, help, html and Meta, and earlier versions used latex, R-ex). The copying of the inst happens after src is built so its Makefile can create files to be installed. To exclude files from being installed, one can specify a list of exclude patterns in file .Rinstignore in the top-level source directory. These patterns should be Perl-like regular expressions (see the help for <code class="calibre2">regexp</code> in R for the precise details), one per line, to be matched case-insensitively against the file and directory paths, e.g. doc/.*[.]png$ will exclude all PNG files in inst/doc based on the extension.</p>
<p>Note that with the exceptions of INDEX, LICENSE/LICENCE and NEWS, information files at the top level of the package will <em>not</em> be installed and so not be known to users of Windows and macOS compiled packages (and not seen by those who use <code class="calibre2">R CMD INSTALL</code> or <code class="calibre2">install.packages</code> on the tarball). So any information files you wish an end user to see should be included in inst. Note that if the named exceptions also occur in inst, the version in inst will be that seen in the installed package.</p>
<p><a href="" id="index-CITATION"></a> <a href="" id="index-citation"></a> <a href="" id="index-NEWS_002eRd"></a> <a href="" id="index-news"></a></p>
<p>Things you might like to add to inst are a CITATION file for use by the <code class="calibre2">citation</code> function, and a NEWS.Rd file for use by the <code class="calibre2">news</code> function. See its help page for the specific format restrictions of the NEWS.Rd file.</p>
<p><a href="" id="index-AUTHORS"></a> <a href="" id="index-COPYRIGHTS-1"></a></p>
<p>Another file sometimes needed in inst is AUTHORS or COPYRIGHTS to specify the authors or copyright holders when this is too complex to put in the DESCRIPTION file.</p>
<p>Subdirectory tests is for additional package-specific test code, similar to the specific tests that come with the R distribution. Test code can either be provided directly in a .R (or .r as from R 3.4.0) file, or <em>via</em> a .Rin file containing code which in turn creates the corresponding .R file (e.g., by collecting all function objects in the package and then calling them with the strangest arguments). The results of running a .R file are written to a .Rout file. If there is a corresponding<a href="R-exts_split_014.html#FOOT21" id="DOCF21"><sup>21</sup></a> .Rout.save file, these two are compared, with differences being reported but not causing an error. The directory tests is copied to the check area, and the tests are run with the copy as the working directory and with <code class="calibre2">R_LIBS</code> set to ensure that the copy of the package installed during testing will be found by <code class="calibre2">library(pkg_name)</code>. Note that the package-specific tests are run in a vanilla R session without setting the random-number seed, so tests which use random numbers will need to set the seed to obtain reproducible results (and it can be helpful to do so in all cases, to avoid occasional failures when tests are run).</p>
<p>If directory tests has a subdirectory Examples containing a file <code class="calibre2">pkg-Ex.Rout.save</code>, this is compared to the output file for running the examples when the latter are checked. Reference output should be produced without having the --timings option set (and note that --as-cran sets it).</p>
<p>Subdirectory exec could contain additional executable scripts the package needs, typically scripts for interpreters such as the shell, Perl, or Tcl. NB: only files (and not directories) under exec are installed (and those with names starting with a dot are ignored), and they are all marked as executable (mode <code class="calibre2">755</code>, moderated by ‘umask’) on POSIX platforms. Note too that this is not suitable for executable <em>programs</em> since some platforms (including Windows) support multiple architectures using the same installed package directory.</p>
<p>Subdirectory po is used for files related to <em>localization</em>: see <a href="R-exts_split_005.html#Internationalization">Internationalization</a>.</p>
<p>Subdirectory tools is the preferred place for auxiliary files needed during configuration, and also for sources need to re-create scripts (e.g. M4 files for <code class="calibre2">autoconf</code>).</p>
<hr />
<p><a href="" id="Data-in-packages"></a> <a href="" id="Data-in-packages-1"></a></p>
<h4 id="data-in-packages" class="subsection">1.1.6 Data in packages</h4>
<p>The data subdirectory is for data files, either to be made available <em>via</em> lazy-loading or for loading using <code class="calibre2">data()</code>. (The choice is made by the ‘LazyData’ field in the DESCRIPTION file: the default is not to do so.) It should not be used for other data files needed by the package, and the convention has grown up to use directory inst/extdata for such files.</p>
<p>Data files can have one of three types as indicated by their extension: plain R code (.R or .r), tables (.tab, .txt, or .csv, see <code class="calibre2">?data</code> for the file formats, and note that .csv is <strong>not</strong> the standard<a href="R-exts_split_014.html#FOOT22" id="DOCF22"><sup>22</sup></a> CSV format), or <code class="calibre2">save()</code> images (.RData or .rda). The files should not be hidden (have names starting with a dot). Note that R code should be “self-sufficient” and not make use of extra functionality provided by the package, so that the data file can also be used without having to load the package or its namespace.</p>
<p>Images (extensions .RData<a href="R-exts_split_014.html#FOOT23" id="DOCF23"><sup>23</sup></a> or .rda) can contain references to the namespaces of packages that were used to create them. Preferably there should be no such references in data files, and in any case they should only be to packages listed in the <code class="calibre2">Depends</code> and <code class="calibre2">Imports</code> fields, as otherwise it may be impossible to install the package. To check for such references, load all the images into a vanilla R session, and look at the output of <code class="calibre2">loadedNamespaces()</code>.</p>
<p>If your data files are large and you are not using ‘LazyData’ you can speed up installation by providing a file datalist in the data subdirectory. This should have one line per topic that <code class="calibre2">data()</code> will find, in the format ‘foo’ if <code class="calibre2">data(foo)</code> provides ‘foo’, or ‘foo: bar bah’ if <code class="calibre2">data(foo)</code> provides ‘bar’ and ‘bah’. <code class="calibre2">R CMD build</code> will automatically add a datalist file to data directories of over 1Mb, using the function <code class="calibre2">tools::add_datalist</code>.</p>
<p>Tables (.tab, .txt, or .csv files) can be compressed by <code class="calibre2">gzip</code>, <code class="calibre2">bzip2</code> or <code class="calibre2">xz</code>, optionally with additional extension .gz, .bz2 or .xz.</p>
<p>If your package is to be distributed, do consider the resource implications of large datasets for your users: they can make packages very slow to download and use up unwelcome amounts of storage space, as well as taking many seconds to load. It is normally best to distribute large datasets as .rda images prepared by <code class="calibre2">save(, compress = TRUE)</code> (the default). Using <code class="calibre2">bzip2</code> or <code class="calibre2">xz</code> compression will usually reduce the size of both the package tarball and the installed package, in some cases by a factor of two or more.</p>
<p>Package <strong>tools</strong> has a couple of functions to help with data images: <code class="calibre2">checkRdaFiles</code> reports on the way the image was saved, and <code class="calibre2">resaveRdaFiles</code> will re-save with a different type of compression, including choosing the best type for that particular image.</p>
<p>Some packages using ‘LazyData’ will benefit from using a form of compression other than <code class="calibre2">gzip</code> in the installed lazy-loading database. This can be selected by the --data-compress option to <code class="calibre2">R CMD INSTALL</code> or by using the ‘LazyDataCompression’ field in the DESCRIPTION file. Useful values are <code class="calibre2">bzip2</code>, <code class="calibre2">xz</code> and the default, <code class="calibre2">gzip</code>. The only way to discover which is best is to try them all and look at the size of the pkgname/data/Rdata.rdb file.</p>
<p>Lazy-loading is not supported for very large datasets (those which when serialized exceed 2GB, the limit for the format on 32-bit platforms).</p>
<p>The analogue for sysdata.rda is field ‘SysDataCompression’: the default is <code class="calibre2">xz</code> for files bigger than 1MB otherwise <code class="calibre2">gzip</code>.</p>
<hr />
<p><a href="" id="Non_002dR-scripts-in-packages"></a> <a href="" id="Non_002dR-scripts-in-packages-1"></a></p>
<h4 id="non-r-scripts-in-packages" class="subsection">1.1.7 Non-R scripts in packages</h4>
<p>Code which needs to be compiled (C, C++, FORTRAN, Fortran 95 …) is included in the src subdirectory and discussed elsewhere in this document.</p>
<p>Subdirectory exec could be used for scripts for interpreters such as the shell, BUGS, JavaScript, Matlab, Perl, php (<a href="https://CRAN.R-project.org/package=amap"><strong>amap</strong></a>), Python or Tcl (<a href="https://CRAN.R-project.org/package=Simile"><strong>Simile</strong></a>), or even R. However, it seems more common to use the inst directory, for example WriteXLS/inst/Perl, NMF/inst/m-files, RnavGraph/inst/tcl, RProtoBuf/inst/python and emdbook/inst/BUGS and gridSVG/inst/js.</p>
<p>Java code is a special case: except for very small programs, .java files should be byte-compiled (to a .class file) and distributed as part of a .jar file: the conventional location for the .jar file(s) is inst/java. It is desirable (and required under an Open Source license) to make the Java source files available: this is best done in a top-level java directory in the package—the source files should not be installed.</p>
<p>If your package requires one of these interpreters or an extension then this should be declared in the ‘SystemRequirements’ field of its DESCRIPTION file. (Users of Java most often do so <em>via</em> <a href="https://CRAN.R-project.org/package=rJava"><strong>rJava</strong></a>, when depending on/importing that suffices.)</p>
<p>Windows and Mac users should be aware that the Tcl extensions ‘BWidget’ and ‘Tktable’ which are currently included with the R for Windows and in the macOS installers <em>are</em> extensions and do need to be declared for users of other platforms (and that ‘Tktable’ is less widely available than it used to be, including not in the main repositories for major Linux distributions).</p>
<p>‘BWidget’ needs to be installed by the user on other OSes. This is fairly easy to do: first find the Tcl/Tk search path:</p>
<div class="example">
<pre class="example1"><code>library(tcltk)
strsplit(tclvalue(&#39;auto_path&#39;), &quot; &quot;)[[1]]</code></pre>
</div>
<p>then download the sources from <a href="http://sourceforge.net/projects/tcllib/files/BWidget/" class="uri">http://sourceforge.net/projects/tcllib/files/BWidget/</a> and at the command line run something like</p>
<div class="example">
<pre class="example1"><code>tar xf bwidget-1.9.8.tar.gz
sudo mv bwidget-1.9.8 /usr/local/lib</code></pre>
</div>
<p>substituting a location on the Tcl/Tk search path for /usr/local/lib if needed.</p>
<hr />
<p><a href="" id="Specifying-URLs"></a> <a href="" id="Specifying-URLs-1"></a></p>
<h4 id="specifying-urls" class="subsection">1.1.8 Specifying URLs</h4>
<p>URLs in many places in the package documentation will be converted to clickable hyperlinks in at least some of their renderings. So care is needed that their forms are correct and portable.</p>
<p>The full URL should be given, including the scheme (often ‘http://’ or ‘https://’) and a final ‘/’ for references to directories.</p>
<p>Spaces in URLs are not portable and how they are handled does vary by HTTP server and by client. There should be no space in the host part of an ‘http://’ URL, and spaces in the remainder should be encoded, with each space replaced by ‘%20’.</p>
<p>Other characters may benefit from being encoded: see the help on <code class="calibre2">URLencode()</code>.</p>
<p>The canonical URL for a CRAN package is</p>
<div class="example">
<pre class="example1"><code>https://cran.r-project.org/package=pkgname</code></pre>
</div>
<p>and not a version starting ‘http://cran.r-project.org/web/packages/pkgname’.</p>
<hr />
<p><a href="" id="Configure-and-cleanup"></a> <a href="" id="Configure-and-cleanup-1"></a></p>
<h3 id="configure-and-cleanup" class="section">1.2 Configure and cleanup</h3>
<p>Note that most of this section is specific to Unix-alikes: see the comments later on about the Windows port of R.</p>
<p>If your package needs some system-dependent configuration before installation you can include an executable (Bourne<a href="R-exts_split_014.html#FOOT24" id="DOCF24"><sup>24</sup></a>) shell script configure in your package which (if present) is executed by <code class="calibre2">R CMD INSTALL</code> before any other action is performed. This can be a script created by the Autoconf mechanism, but may also be a script written by yourself. Use this to detect if any nonstandard libraries are present such that corresponding code in the package can be disabled at install time rather than giving error messages when the package is compiled or used. To summarize, the full power of Autoconf is available for your extension package (including variable substitution, searching for libraries, etc.).</p>
<p>Under a Unix-alike only, an executable (Bourne shell) script cleanup is executed as the last thing by <code class="calibre2">R CMD INSTALL</code> if option --clean was given, and by <code class="calibre2">R CMD build</code> when preparing the package for building from its source.</p>
<p>As an example consider we want to use functionality provided by a (C or FORTRAN) library <code class="calibre2">foo</code>. Using Autoconf, we can create a configure script which checks for the library, sets variable <code class="calibre2">HAVE_FOO</code> to <code class="calibre2">TRUE</code> if it was found and to <code class="calibre2">FALSE</code> otherwise, and then substitutes this value into output files (by replacing instances of ‘@HAVE_FOO@’ in input files with the value of <code class="calibre2">HAVE_FOO</code>). For example, if a function named <code class="calibre2">bar</code> is to be made available by linking against library <code class="calibre2">foo</code> (i.e., using -lfoo), one could use</p>
<div class="example">
<pre class="example1"><code>AC_CHECK_LIB(foo, fun, [HAVE_FOO=TRUE], [HAVE_FOO=FALSE])
AC_SUBST(HAVE_FOO)
......
AC_CONFIG_FILES([foo.R])
AC_OUTPUT</code></pre>
</div>
<p>in configure.ac (assuming Autoconf 2.50 or later).</p>
<p>The definition of the respective R function in foo.R.in could be</p>
<div class="example">
<pre class="example1"><code>foo &lt;- function(x) {
    if(!@HAVE_FOO@)
      stop(&quot;Sorry, library ‘foo’ is not available&quot;)
    ...</code></pre>
</div>
<p>From this file <code class="calibre2">configure</code> creates the actual R source file foo.R looking like</p>
<div class="example">
<pre class="example1"><code>foo &lt;- function(x) {
    if(!FALSE)
      stop(&quot;Sorry, library ‘foo’ is not available&quot;)
    ...</code></pre>
</div>
<p>if library <code class="calibre2">foo</code> was not found (with the desired functionality). In this case, the above R code effectively disables the function.</p>
<p>One could also use different file fragments for available and missing functionality, respectively.</p>
<p>You will very likely need to ensure that the same C compiler and compiler flags are used in the configure tests as when compiling R or your package. Under a Unix-alike, you can achieve this by including the following fragment early in configure.ac (<em>before</em> calling <code class="calibre2">AC_PROG_CC</code>)</p>
<div class="example">
<pre class="example1"><code>: ${R_HOME=`R RHOME`}
if test -z &quot;${R_HOME}&quot;; then
  echo &quot;could not determine R_HOME&quot;
  exit 1
fi
CC=`&quot;${R_HOME}/bin/R&quot; CMD config CC`
CFLAGS=`&quot;${R_HOME}/bin/R&quot; CMD config CFLAGS`
CPPFLAGS=`&quot;${R_HOME}/bin/R&quot; CMD config CPPFLAGS`</code></pre>
</div>
<p>(Using ‘${R_HOME}/bin/R’ rather than just ‘R’ is necessary in order to use the correct version of R when running the script as part of <code class="calibre2">R CMD INSTALL</code>, and the quotes since ‘${R_HOME}’ might contain spaces.)</p>
<p>If your code does load checks then you may also need</p>
<div class="example">
<pre class="example1"><code>LDFLAGS=`&quot;${R_HOME}/bin/R&quot; CMD config LDFLAGS`</code></pre>
</div>
<p>and packages written with C++ need to pick up the details for the C++ compiler and switch the current language to C++ by something like</p>
<div class="example">
<pre class="example1"><code>CXX=`&quot;${R_HOME}/bin/R&quot; CMD config CXX`
CXXFLAGS=`&quot;${R_HOME}/bin/R&quot; CMD config CXXFLAGS`
AC_LANG(C++)</code></pre>
</div>
<p>The latter is important, as for example C headers may not be available to C++ programs or may not be written to avoid C++ name-mangling.</p>
<p><a href="" id="index-R-CMD-config"></a></p>
<p>You can use <code class="calibre2">R CMD config</code> for getting the value of the basic configuration variables, and also the header and library flags necessary for linking a front-end executable program against R, see R CMD config --help for details.</p>
<p>To check for an external BLAS library using the <code class="calibre2">ACX_BLAS</code> macro from the official Autoconf Macro Archive, one can simply do</p>
<div class="example">
<pre class="example1"><code>F77=`&quot;${R_HOME}/bin/R&quot; CMD config F77`
AC_PROG_F77
FLIBS=`&quot;${R_HOME}/bin/R&quot; CMD config FLIBS`
ACX_BLAS([], AC_MSG_ERROR([could not find your BLAS library], 1))</code></pre>
</div>
<p>Note that <code class="calibre2">FLIBS</code> as determined by R must be used to ensure that FORTRAN 77 code works on all R platforms. Calls to the Autoconf macro <code class="calibre2">AC_F77_LIBRARY_LDFLAGS</code>, which would overwrite <code class="calibre2">FLIBS</code>, must not be used (and hence e.g. removed from <code class="calibre2">ACX_BLAS</code>). (Recent versions of Autoconf in fact allow an already set <code class="calibre2">FLIBS</code> to override the test for the FORTRAN linker flags.)</p>
<p><strong>N.B.</strong>: If the <code class="calibre2">configure</code> script creates files, e.g. src/Makevars, you do need a <code class="calibre2">cleanup</code> script to remove them. Otherwise <code class="calibre2">R CMD build</code> may ship the files that are created. For example, package <a href="https://CRAN.R-project.org/package=RODBC"><strong>RODBC</strong></a> has</p>
<div class="example">
<pre class="example1"><code>#!/bin/sh

rm -f config.* src/Makevars src/config.h</code></pre>
</div>
<p>As this example shows, <code class="calibre2">configure</code> often creates working files such as config.log.</p>
<p>If your configure script needs auxiliary files, it is recommended that you ship them in a tools directory (as R itself does).</p>
<p>You should bear in mind that the configure script will not be used on Windows systems. If your package is to be made publicly available, please give enough information for a user on a non-Unix-alike platform to configure it manually, or provide a configure.win script to be used on that platform. (Optionally, there can be a cleanup.win script. Both should be shell scripts to be executed by <code class="calibre2">ash</code>, which is a minimal version of Bourne-style <code class="calibre2">sh</code>.) When configure.win is run the environment variables <code class="calibre2">R_HOME</code> (which uses ‘/’ as the file separator), <code class="calibre2">R_ARCH</code> and Use <code class="calibre2">R_ARCH_BIN</code> will be set. Use <code class="calibre2">R_ARCH</code> to decide if this is a 64-bit build (its value there is ‘/x64’) and to install DLLs to the correct place (${R_HOME}/libs${R_ARCH}). Use <code class="calibre2">R_ARCH_BIN</code> to find the correct place under the bin directory, e.g. ${R_HOME}/bin${R_ARCH_BIN}/Rscript.exe.</p>
<p>In some rare circumstances, the configuration and cleanup scripts need to know the location into which the package is being installed. An example of this is a package that uses C code and creates two shared object/DLLs. Usually, the object that is dynamically loaded by R is linked against the second, dependent, object. On some systems, we can add the location of this dependent object to the object that is dynamically loaded by R. This means that each user does not have to set the value of the <code class="calibre2">LD_LIBRARY_PATH</code> (or equivalent) environment variable, but that the secondary object is automatically resolved. Another example is when a package installs support files that are required at run time, and their location is substituted into an R data structure at installation time. <a href="" id="index-R_005fLIBRARY_005fDIR"></a> <a href="" id="index-R_005fPACKAGE_005fDIR"></a> <a href="" id="index-R_005fPACKAGE_005fNAME"></a> The names of the top-level library directory (i.e., specifiable <em>via</em> the ‘-l’ argument) and the directory of the package itself are made available to the installation scripts <em>via</em> the two shell/environment variables <code class="calibre2">R_LIBRARY_DIR</code> and <code class="calibre2">R_PACKAGE_DIR</code>. Additionally, the name of the package (e.g. ‘survival’ or ‘MASS’) being installed is available from the environment variable <code class="calibre2">R_PACKAGE_NAME</code>. (Currently the value of <code class="calibre2">R_PACKAGE_DIR</code> is always <code class="calibre2">${R_LIBRARY_DIR}/${R_PACKAGE_NAME}</code>, but this used not to be the case when versioned installs were allowed. Its main use is in configure.win scripts for the installation path of external software’s DLLs.) Note that the value of <code class="calibre2">R_PACKAGE_DIR</code> may contain spaces and other shell-unfriendly characters, and so should be quoted in makefiles and configure scripts.</p>
<p>One of the more tricky tasks can be to find the headers and libraries of external software. One tool which is increasingly available on Unix-alikes (but not by default on macOS) to do this is <code class="calibre2">pkg-config</code>. The configure script will need to test for the presence of the command itself (see for example package <a href="https://CRAN.R-project.org/package=Cairo"><strong>Cairo</strong></a>), and if present it can be asked if the software is installed, of a suitable version and for compilation/linking flags by e.g.</p>
<div class="example">
<pre class="example1"><code>$ pkg-config --exists ‘QtCore &gt;= 4.0.0’  # check the status
$ pkg-config --modversion QtCore
4.7.1
$ pkg-config --cflags QtCore
-DQT_SHARED -I/usr/include/QtCore
$ pkg-config --libs QtCore
-lQtCore</code></pre>
</div>
<p>Note that <code class="calibre2">pkg-config --libs</code> gives the information required to link against the default version of that library (usually the dynamic one), and <code class="calibre2">pkg-config --static</code> is needed if the static library is to be used.</p>
<p>Sometimes the name by which the software is known to <code class="calibre2">pkg-config</code> is not what one might expect (e.g. ‘gtk+-2.0’ even for 2.22). To get a complete list use</p>
<div class="example">
<pre class="example1"><code>pkg-config --list-all | sort</code></pre>
</div>
<hr />
<p><a href="" id="Using-Makevars"></a> <a href="" id="Using-Makevars-1"></a></p>
<h4 id="using-makevars" class="subsection">1.2.1 Using Makevars</h4>
<p>Sometimes writing your own configure script can be avoided by supplying a file Makevars: also one of the most common uses of a configure script is to make Makevars from Makevars.in.</p>
<p>A Makevars file is a makefile and is used as one of several makefiles by <code class="calibre2">R CMD SHLIB</code> (which is called by <code class="calibre2">R CMD INSTALL</code> to compile code in the src directory). It should be written if at all possible in a portable style, in particular (except for Makevars.win) without the use of GNU extensions.</p>
<p>The most common use of a Makevars file is to set additional preprocessor options (for example include paths) for C/C++ files <em>via</em> <code class="calibre2">PKG_CPPFLAGS</code>, and additional compiler flags by setting <code class="calibre2">PKG_CFLAGS</code>, <code class="calibre2">PKG_CXXFLAGS</code>, <code class="calibre2">PKG_FFLAGS</code> or <code class="calibre2">PKG_FCFLAGS</code>, for C, C++, FORTRAN or Fortran 9x respectively (see <a href="R-exts_split_009.html#Creating-shared-objects">Creating shared objects</a>).</p>
<p><strong>N.B.</strong>: Include paths are preprocessor options, not compiler options, and <strong>must</strong> be set in <code class="calibre2">PKG_CPPFLAGS</code> as otherwise platform-specific paths (e.g. ‘-I/usr/local/include’) will take precedence.</p>
<p>Makevars can also be used to set flags for the linker, for example ‘-L’ and ‘-l’ options, <em>via</em> <code class="calibre2">PKG_LIBS</code>.</p>
<p>When writing a Makevars file for a package you intend to distribute, take care to ensure that it is not specific to your compiler: flags such as -O2 -Wall -pedantic (and all other -W flags: for the Oracle compilers these are used to pass arguments to compiler phases) are all specific to GCC.</p>
<p>Also, do not set variables such as <code class="calibre2">CPPFLAGS</code>, <code class="calibre2">CFLAGS</code> etc.: these should be settable by users (sites) through appropriate personal (site-wide) Makevars files.</p>
<p>There are some macros<a href="R-exts_split_014.html#FOOT25" id="DOCF25"><sup>25</sup></a> which are set whilst configuring the building of R itself and are stored in R_HOME/etcR_ARCH/Makeconf. That makefile is included as a Makefile <em>after</em> Makevars[.win], and the macros it defines can be used in macro assignments and make command lines in the latter. These include</p>
<dl>
<dt><code class="calibre2">FLIBS</code></dt>
<dd><p><a href="" id="index-FLIBS"></a></p>
<p>A macro containing the set of libraries need to link FORTRAN code. This may need to be included in <code class="calibre2">PKG_LIBS</code>: it will normally be included automatically if the package contains FORTRAN source files.</p>
</dd>
<dt><code class="calibre2">BLAS_LIBS</code></dt>
<dd><p><a href="" id="index-BLAS_005fLIBS"></a></p>
<p>A macro containing the BLAS libraries used when building R. This may need to be included in <code class="calibre2">PKG_LIBS</code>. Beware that if it is empty then the R executable will contain all the double-precision and double-complex BLAS routines, but no single-precision nor complex routines. If <code class="calibre2">BLAS_LIBS</code> is included, then <code class="calibre2">FLIBS</code> also needs to be<a href="R-exts_split_014.html#FOOT26" id="DOCF26"><sup>26</sup></a> included following it, as most BLAS libraries are written at least partially in FORTRAN.</p>
</dd>
<dt><code class="calibre2">LAPACK_LIBS</code></dt>
<dd><p><a href="" id="index-LAPACK_005fLIBS"></a></p>
<p>A macro containing the LAPACK libraries (and paths where appropriate) used when building R. This may need to be included in <code class="calibre2">PKG_LIBS</code>. It may point to a dynamic library <code class="calibre2">libRlapack</code> which contains the main double-precision LAPACK routines as well as those double-complex LAPACK routines needed to build R, or it may point to an external LAPACK library, or may be empty if an external BLAS library also contains LAPACK.</p>
<p>[<code class="calibre2">libRlapack</code> includes all the double-precision LAPACK routines which were current in 2003: a list of which routines are included is in file src/modules/lapack/README. Note that an external LAPACK/BLAS library need not do so, as some were ‘deprecated’ (and not compiled by default) in LAPACK 3.6.0 in late 2015.]</p>
<p>For portability, the macros <code class="calibre2">BLAS_LIBS</code> and <code class="calibre2">FLIBS</code> should always be included <em>after</em> <code class="calibre2">LAPACK_LIBS</code> (and in that order).</p>
</dd>
<dt><code class="calibre2">SAFE_FFLAGS</code></dt>
<dd><p><a href="" id="index-SAFE_005fFFLAGS"></a></p>
<p>A macro containing flags which are needed to circumvent over-optimization of FORTRAN code: it is typically ‘-g -O2 -ffloat-store’ on ‘ix86’ platforms using <code class="calibre2">gfortran</code>. Note that this is <strong>not</strong> an additional flag to be used as part of <code class="calibre2">PKG_FFLAGS</code>, but a replacement for <code class="calibre2">FFLAGS</code>, and that it is intended for the FORTRAN 77 compiler ‘F77’ and not necessarily for the Fortran 90/95 compiler ‘FC’. See the example later in this section.</p>
</dd>
</dl>
<p><a href="" id="index-OBJECTS"></a></p>
<p>Setting certain macros in Makevars will prevent <code class="calibre2">R CMD SHLIB</code> setting them: in particular if Makevars sets ‘OBJECTS’ it will not be set on the <code class="calibre2">make</code> command line. This can be useful in conjunction with implicit rules to allow other types of source code to be compiled and included in the shared object. It can also be used to control the set of files which are compiled, either by excluding some files in src or including some files in subdirectories. For example</p>
<div class="example">
<pre class="example1"><code>OBJECTS = 4dfp/endianio.o 4dfp/Getifh.o R4dfp-object.o</code></pre>
</div>
<p>Note that Makevars should not normally contain targets, as it is included before the default makefile and <code class="calibre2">make</code> will call the first target, intended to be <code class="calibre2">all</code> in the default makefile. If you really need to circumvent that, use a suitable (phony) target <code class="calibre2">all</code> before any actual targets in Makevars.[win]: for example package <a href="https://CRAN.R-project.org/package=fastICA"><strong>fastICA</strong></a> used to have</p>
<div class="example">
<pre class="example1"><code>PKG_LIBS = @BLAS_LIBS@

SLAMC_FFLAGS=$(R_XTRA_FFLAGS) $(FPICFLAGS) $(SHLIB_FFLAGS) $(SAFE_FFLAGS)

all: $(SHLIB)

slamc.o: slamc.f
        $(F77) $(SLAMC_FFLAGS) -c -o slamc.o slamc.f</code></pre>
</div>
<p>needed to ensure that the LAPACK routines find some constants without infinite looping. The Windows equivalent was</p>
<div class="example">
<pre class="example1"><code>all: $(SHLIB)

slamc.o: slamc.f
        $(F77) $(SAFE_FFLAGS) -c -o slamc.o slamc.f</code></pre>
</div>
<p>(since the other macros are all empty on that platform, and R’s internal BLAS was not used). Note that the first target in Makevars will be called, but for back-compatibility it is best named <code class="calibre2">all</code>.</p>
<p>If you want to create and then link to a library, say using code in a subdirectory, use something like</p>
<div class="example">
<pre class="example1"><code>.PHONY: all mylibs

all: $(SHLIB)
$(SHLIB): mylibs

mylibs:
        (cd subdir; $(MAKE))</code></pre>
</div>
<p>Be careful to create all the necessary dependencies, as there is no guarantee that the dependencies of <code class="calibre2">all</code> will be run in a particular order (and some of the CRAN build machines use multiple CPUs and parallel makes). In particular,</p>
<div class="example">
<pre class="example1"><code>all: mylibs</code></pre>
</div>
<p>does <strong>not</strong> suffice.</p>
<p>Note that on Windows it is required that Makevars[.win] does create a DLL: this is needed as it is the only reliable way to ensure that building a DLL succeeded. If you want to use the src directory for some purpose other than building a DLL, use a Makefile.win file.</p>
<p>It is sometimes useful to have a target ‘clean’ in Makevars or Makevars.win: this will be used by <code class="calibre2">R CMD build</code> to clean up (a copy of) the package sources. When it is run by <code class="calibre2">build</code> it will have fewer macros set, in particular not <code class="calibre2">$(SHLIB)</code>, nor <code class="calibre2">$(OBJECTS)</code> unless set in the file itself. It would also be possible to add tasks to the target ‘shlib-clean’ which is run by <code class="calibre2">R CMD INSTALL</code> and <code class="calibre2">R CMD SHLIB</code> with options --clean and --preclean.</p>
<p>If you want to run R code in Makevars, e.g. to find configuration information, please do ensure that you use the correct copy of <code class="calibre2">R</code> or <code class="calibre2">Rscript</code>: there might not be one in the path at all, or it might be the wrong version or architecture. The correct way to do this is <em>via</em></p>
<div class="example">
<pre class="example1"><code>&quot;$(R_HOME)/bin$(R_ARCH_BIN)/Rscript&quot; filename
&quot;$(R_HOME)/bin$(R_ARCH_BIN)/Rscript&quot; -e ‘R expression’</code></pre>
</div>
<p>where <code class="calibre2">$(R_ARCH_BIN)</code> is only needed currently on Windows.</p>
<p>Environment or make variables can be used to select different macros for 32- and 64-bit code, for example (GNU <code class="calibre2">make</code> syntax, allowed on Windows)</p>
<div class="example">
<pre class="example1"><code>ifeq &quot;$(WIN)&quot; &quot;64&quot;
PKG_LIBS = value for 64-bit Windows
else
PKG_LIBS = value for 32-bit Windows
endif</code></pre>
</div>
<p>On Windows there is normally a choice between linking to an import library or directly to a DLL. Where possible, the latter is much more reliable: import libraries are tied to a specific toolchain, and in particular on 64-bit Windows two different conventions have been commonly used. So for example instead of</p>
<div class="example">
<pre class="example1"><code>PKG_LIBS = -L$(XML_DIR)/lib -lxml2</code></pre>
</div>
<p>one can use</p>
<div class="example">
<pre class="example1"><code>PKG_LIBS = -L$(XML_DIR)/bin -lxml2</code></pre>
</div>
<p>since on Windows <code class="calibre2">-lxxx</code> will look in turn for</p>
<div class="example">
<pre class="example1"><code>libxxx.dll.a
xxx.dll.a
libxxx.a
xxx.lib
libxxx.dll
xxx.dll</code></pre>
</div>
<p>where the first and second are conventionally import libraries, the third and fourth often static libraries (with <code class="calibre2">.lib</code> intended for Visual C++), but might be import libraries. See for example <a href="https://sourceware.org/binutils/docs-2.20/ld/WIN32.html#WIN32" class="uri">https://sourceware.org/binutils/docs-2.20/ld/WIN32.html#WIN32</a>.</p>
<p>The fly in the ointment is that the DLL might not be named libxxx.dll, and in fact on 32-bit Windows there is a libxml2.dll whereas on one build for 64-bit Windows the DLL is called libxml2-2.dll. Using import libraries can cover over these differences but can cause equal difficulties.</p>
<p>If static libraries are available they can save a lot of problems with run-time finding of DLLs, especially when binary packages are to be distributed and even more when these support both architectures. Where using DLLs is unavoidable we normally arrange (<em>via</em> configure.win) to ship them in the same directory as the package DLL.</p>
<hr />
<p><a href="" id="OpenMP-support"></a> <a href="" id="OpenMP-support-1"></a></p>
<h4 id="openmp-support" class="subsection">1.2.1.1 OpenMP support</h4>
<p><a href="" id="index-OpenMP"></a></p>
<p>There is some support for packages which wish to use OpenMP<a href="R-exts_split_014.html#FOOT27" id="DOCF27"><sup>27</sup></a>. The <code class="calibre2">make</code> macros</p>
<div class="example">
<pre class="example1"><code>SHLIB_OPENMP_CFLAGS
SHLIB_OPENMP_CXXFLAGS
SHLIB_OPENMP_FCFLAGS
SHLIB_OPENMP_FFLAGS</code></pre>
</div>
<p>are available for use in src/Makevars or src/Makevars.win. Include the appropriate macro in <code class="calibre2">PKG_CFLAGS</code>, <code class="calibre2">PKG_CPPFLAGS</code> and so on, and also in <code class="calibre2">PKG_LIBS</code>. C/C++ code that needs to be conditioned on the use of OpenMP can be used inside <code class="calibre2">#ifdef _OPENMP</code>: note that some toolchains used for R (including that of macOS and some others using <code class="calibre2">clang</code><a href="R-exts_split_014.html#FOOT28" id="DOCF28"><sup>28</sup></a>) have no OpenMP support at all, not even omp.h.</p>
<p>For example, a package with C code written for OpenMP should have in src/Makevars the lines</p>
<div class="example">
<pre class="example1"><code>PKG_CFLAGS = $(SHLIB_OPENMP_CFLAGS)
PKG_LIBS = $(SHLIB_OPENMP_CFLAGS)</code></pre>
</div>
<p>Note that the macro <code class="calibre2">SHLIB_OPENMP_CXXFLAGS</code> applies to the default C++ compiler and not necessarily to the C++11/14/17 compiler: users of the latter should do their own <code class="calibre2">configure</code> checks (an example is available in CRAN package <a href="https://CRAN.R-project.org/package=ARTP2"><strong>ARTP2</strong></a>).</p>
<p>Some care is needed when compilers are from different families which may use different OpenMP runtimes (e.g. <code class="calibre2">clang</code> <em>vs</em> GCC including <code class="calibre2">gfortran</code>, although it is currently possible to use the <code class="calibre2">clang</code> runtime with GCC but not <em>vice versa</em>). For a package with Fortran 77 code using OpenMP the appropriate lines are</p>
<div class="example">
<pre class="example1"><code>PKG_FFLAGS = $(SHLIB_OPENMP_FFLAGS)
PKG_LIBS = $(SHLIB_OPENMP_CFLAGS)</code></pre>
</div>
<p>as the C compiler will be used to link the package code (and there is no guarantee that this will work everywhere). (This does not apply to Fortran 9x code, where <code class="calibre2">SHLIB_OPENMP_FCFLAGS</code> should be used in both <code class="calibre2">PKG_FCFLAGS</code> and <code class="calibre2">PKG_LIBS</code>.)</p>
<p>For portability, any C/C++ code using the <code class="calibre2">omp_*</code> functions should include the omp.h header: some compilers (but not all) include it when OpenMP mode is switched on (e.g. <em>via</em> flag -fopenmp).</p>
<p>There is nothing<a href="R-exts_split_014.html#FOOT29" id="DOCF29"><sup>29</sup></a> to say what version of OpenMP is supported: version 3.1 (and much of 4.0) is supported by recent versions<a href="R-exts_split_014.html#FOOT30" id="DOCF30"><sup>30</sup></a> of the Linux, Windows and Solaris platforms, but portable packages cannot assume that end users have recent versions.<a href="R-exts_split_014.html#FOOT31" id="DOCF31"><sup>31</sup></a> macOS currently uses Apple builds of <code class="calibre2">clang</code> with no OpenMP support (even if invoked as <code class="calibre2">gcc</code> and despite the <code class="calibre2">man</code> page including the flag -fopenmp for that command). <a href="http://www.openmp.org/resources/openmp-compilers" class="uri">http://www.openmp.org/resources/openmp-compilers</a> gives some idea of what compilers support what versions.</p>
<p>The performance of OpenMP varies substantially between platforms. The Windows implementation has substantial overheads<a href="R-exts_split_014.html#FOOT32" id="DOCF32"><sup>32</sup></a>, so is only beneficial if quite substantial tasks are run in parallel. Also, on Windows new threads are started with the default<a href="R-exts_split_014.html#FOOT33" id="DOCF33"><sup>33</sup></a> FPU control word, so computations done on OpenMP threads will not make use of extended-precision arithmetic which is the default for the main process.</p>
<p>Calling any of the R API from threaded code is ‘for experts only’: they will need to read the source code to determine if it is thread-safe. In particular, code which makes use of the stack-checking mechanism must not be called from threaded code.</p>
<p>Packages are not standard-alone programs, and an R process could contain more than one OpenMP-enabled package as well as other components (for example, an optimized BLAS) making use of OpenMP. So careful consideration needs to be given to resource usage. OpenMP works with parallel regions, and for most implementations the default is to use as many threads as ‘CPUs’ for such regions. Parallel regions can be nested, although it is common to use only a single thread below the first level. The correctness of the detected number of ‘CPUs’ and the assumption that the R process is entitled to use them all are both dubious assumptions. The best way to limit resources is to limit the overall number of threads available to OpenMP in the R process: this can be done via environment variable <code class="calibre2">OMP_THREAD_LIMIT</code>, where implemented.<a href="R-exts_split_014.html#FOOT34" id="DOCF34"><sup>34</sup></a> Alternatively, the number of threads per region can be limited by the environment variable <code class="calibre2">OMP_NUM_THREADS</code> or API call <code class="calibre2">omp_set_num_threads</code>, or, better, for the regions in your code as part of their specification. E.g. R uses</p>
<div class="example">
<pre class="example1"><code>#pragma omp parallel for num_threads(nthreads) …</code></pre>
</div>
<p>That way you only control your own code and not that of other OpenMP users.</p>
<hr />
<p><a href="" id="Using-pthreads"></a> <a href="" id="Using-pthreads-1"></a></p>
<h4 id="using-pthreads" class="subsection">1.2.1.2 Using pthreads</h4>
<p>There is no direct support for the POSIX threads (more commonly known as <code class="calibre2">pthreads</code>): by the time we considered adding it several packages were using it unconditionally so it seems that nowadays it is universally available on POSIX operating systems (hence not Windows).</p>
<p>For reasonably recent versions of <code class="calibre2">gcc</code> and <code class="calibre2">clang</code> the correct specification is</p>
<div class="example">
<pre class="example1"><code>PKG_CPPFLAGS = -pthread
PKG_LIBS = -pthread</code></pre>
</div>
<p>(and the plural version is also accepted on some systems/versions). For other platforms the specification is</p>
<div class="example">
<pre class="example1"><code>PKG_CPPFLAGS = -D_REENTRANT
PKG_LIBS = -lpthread</code></pre>
</div>
<p>(and note that the library name is singular). This is what -pthread does on all known current platforms (although earlier versions of OpenBSD used a different library name).</p>
<p>For a tutorial see <a href="https://computing.llnl.gov/tutorials/pthreads/" class="uri">https://computing.llnl.gov/tutorials/pthreads/</a>.</p>
<p>POSIX threads are not normally used on Windows, which has its own native concepts of threads. However, there are two projects implementing <code class="calibre2">pthreads</code> on top of Windows, <code class="calibre2">pthreads-w32</code> and <code class="calibre2">winpthreads</code> (part of the MinGW-w64 project).</p>
<p>Whether Windows toolchains implement <code class="calibre2">pthreads</code> is up to the toolchain provider. A <code class="calibre2">make</code> variable <code class="calibre2">SHLIB_PTHREAD_FLAGS</code> is available: this should be included in both <code class="calibre2">PKG_CPPFLAGS</code> (or the Fortran or F9x equivalents) and <code class="calibre2">PKG_LIBS</code>.</p>
<p>The presence of a working <code class="calibre2">pthreads</code> implementation cannot be unambiguously determined without testing for yourself: however, that ‘_REENTRANT’ is defined<a href="R-exts_split_014.html#FOOT35" id="DOCF35"><sup>35</sup></a> in C/C++ code is a good indication.</p>
<p>Note that not all <code class="calibre2">pthreads</code> implementations are equivalent as parts are optional (see <a href="http://pubs.opengroup.org/onlinepubs/009695399/basedefs/pthread.h.html" class="uri">http://pubs.opengroup.org/onlinepubs/009695399/basedefs/pthread.h.html</a>): for example, macOS lacks the ‘Barriers’ option.</p>
<p>See also the comments on thread-safety and performance under OpenMP: on all known R platforms OpenMP is implemented <em>via</em> <code class="calibre2">pthreads</code> and the known performance issues are in the latter.</p>
<hr />
<p><a href="" id="Compiling-in-sub_002ddirectories"></a> <a href="" id="Compiling-in-sub_002ddirectories-1"></a></p>
<h4 id="compiling-in-sub-directories" class="subsection">1.2.1.3 Compiling in sub-directories</h4>
<p>Package authors fairly often want to organize code in sub-directories of src, for example if they are including a separate piece of external software to which this is an R interface.</p>
<p>One simple way is simply to set <code class="calibre2">OBJECTS</code> to be all the objects that need to be compiled, including in sub-directories. For example, CRAN package <a href="https://CRAN.R-project.org/package=RSiena"><strong>RSiena</strong></a> has</p>
<div class="example">
<pre class="smallexample"><code>SOURCES = $(wildcard data/*.cpp network/*.cpp utils/*.cpp model/*.cpp model/*/*.cpp model/*/*/*.cpp)

OBJECTS = siena07utilities.o siena07internals.o siena07setup.o siena07models.o $(SOURCES:.cpp=.o)</code></pre>
</div>
<p>One problem with that approach is that unless GNU make extensions are used, the source files need to be listed and kept up-to-date. As in the following from CRAN package <a href="https://CRAN.R-project.org/package=lossDev"><strong>lossDev</strong></a>:</p>
<div class="example">
<pre class="smallexample"><code>OBJECTS.samplers = samplers/ExpandableArray.o samplers/Knots.o \
  samplers/RJumpSpline.o samplers/RJumpSplineFactory.o \
  samplers/RealSlicerOV.o samplers/SliceFactoryOV.o samplers/MNorm.o
OBJECTS.distributions = distributions/DSpline.o \
  distributions/DChisqrOV.o distributions/DTOV.o \
  distributions/DNormOV.o distributions/DUnifOV.o distributions/RScalarDist.o
OBJECTS.root = RJump.o

OBJECTS = $(OBJECTS.samplers) $(OBJECTS.distributions) $(OBJECTS.root)</code></pre>
</div>
<p>Where the subdirectory is self-contained code with a suitable makefile, the best approach is something like</p>
<div class="example">
<pre class="smallexample"><code>PKG_LIBS = -LCsdp/lib -lsdp $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)

$(SHLIB): Csdp/lib/libsdp.a

Csdp/lib/libsdp.a:      
        @(cd Csdp/lib &amp;&amp; $(MAKE) libsdp.a \
          CC=&quot;$(CC)&quot; CFLAGS=&quot;$(CFLAGS) $(CPICFLAGS)&quot; AR=&quot;$(AR)&quot; RANLIB=&quot;$(RANLIB)&quot;)</code></pre>
</div>
<p>Note the quotes: the macros can contain spaces, e.g. <code class="calibre2">CC = &quot;gcc -m64 -std=gnu99&quot;</code>. Several authors have forgotten about parallel makes: the static library in the subdirectory must be made before the shared object (<code class="calibre2">$(SHLIB)</code>) and so the latter must depend on the former. Others forget the need<a href="R-exts_split_014.html#FOOT36" id="DOCF36"><sup>36</sup></a> for position-independent code.</p>
<p>We really do not recommend using src/Makefile instead of src/Makevars, and as the example above shows, it is not necessary.</p>
<hr />
<p><a href="" id="Configure-example"></a> <a href="" id="Configure-example-1"></a></p>
<h4 id="configure-example" class="subsection">1.2.2 Configure example</h4>
<p>It may be helpful to give an extended example of using a configure script to create a src/Makevars file: this is based on that in the <a href="https://CRAN.R-project.org/package=RODBC"><strong>RODBC</strong></a> package.</p>
<p>The configure.ac file follows: configure is created from this by running <code class="calibre2">autoconf</code> in the top-level package directory (containing configure.ac).</p>
<blockquote>
<div class="example">
<pre class="smallexample"><code>AC_INIT([RODBC], 1.1.8) dnl package name, version

dnl A user-specifiable option
odbc_mgr=&quot;&quot;
AC_ARG_WITH([odbc-manager],
            AC_HELP_STRING([--with-odbc-manager=MGR],
                           [specify the ODBC manager, e.g. odbc or iodbc]),
            [odbc_mgr=$withval])

if test &quot;$odbc_mgr&quot; = &quot;odbc&quot; ; then
  AC_PATH_PROGS(ODBC_CONFIG, odbc_config)
fi

dnl Select an optional include path, from a configure option
dnl or from an environment variable.
AC_ARG_WITH([odbc-include],
            AC_HELP_STRING([--with-odbc-include=INCLUDE_PATH],
                           [the location of ODBC header files]),
            [odbc_include_path=$withval])
RODBC_CPPFLAGS=&quot;-I.&quot;
if test [ -n &quot;$odbc_include_path&quot; ] ; then
   RODBC_CPPFLAGS=&quot;-I. -I${odbc_include_path}&quot;
else
  if test [ -n &quot;${ODBC_INCLUDE}&quot; ] ; then
     RODBC_CPPFLAGS=&quot;-I. -I${ODBC_INCLUDE}&quot;
  fi
fi

dnl ditto for a library path
AC_ARG_WITH([odbc-lib],
            AC_HELP_STRING([--with-odbc-lib=LIB_PATH],
                           [the location of ODBC libraries]),
            [odbc_lib_path=$withval])
if test [ -n &quot;$odbc_lib_path&quot; ] ; then
   LIBS=&quot;-L$odbc_lib_path ${LIBS}&quot;
else
  if test [ -n &quot;${ODBC_LIBS}&quot; ] ; then
     LIBS=&quot;-L${ODBC_LIBS} ${LIBS}&quot;
  else
    if test -n &quot;${ODBC_CONFIG}&quot;; then
      odbc_lib_path=`odbc_config --libs | sed s/-lodbc//`
      LIBS=&quot;${odbc_lib_path} ${LIBS}&quot;
    fi
  fi
fi

dnl Now find the compiler and compiler flags to use
: ${R_HOME=`R RHOME`}
if test -z &quot;${R_HOME}&quot;; then
  echo &quot;could not determine R_HOME&quot;
  exit 1
fi
CC=`&quot;${R_HOME}/bin/R&quot; CMD config CC`
CPP=`&quot;${R_HOME}/bin/R&quot; CMD config CPP`
CFLAGS=`&quot;${R_HOME}/bin/R&quot; CMD config CFLAGS`
CPPFLAGS=`&quot;${R_HOME}/bin/R&quot; CMD config CPPFLAGS`
AC_PROG_CC
AC_PROG_CPP


if test -n &quot;${ODBC_CONFIG}&quot;; then
  RODBC_CPPFLAGS=`odbc_config --cflags`
fi
CPPFLAGS=&quot;${CPPFLAGS} ${RODBC_CPPFLAGS}&quot;

dnl Check the headers can be found
AC_CHECK_HEADERS(sql.h sqlext.h)
if test &quot;${ac_cv_header_sql_h}&quot; = no ||
   test &quot;${ac_cv_header_sqlext_h}&quot; = no; then
   AC_MSG_ERROR(&quot;ODBC headers sql.h and sqlext.h not found&quot;)
fi

dnl search for a library containing an ODBC function
if test [ -n &quot;${odbc_mgr}&quot; ] ; then
  AC_SEARCH_LIBS(SQLTables, ${odbc_mgr}, ,
      AC_MSG_ERROR(&quot;ODBC driver manager ${odbc_mgr} not found&quot;))
else
  AC_SEARCH_LIBS(SQLTables, odbc odbc32 iodbc, ,
      AC_MSG_ERROR(&quot;no ODBC driver manager found&quot;))
fi

dnl for 64-bit ODBC need SQL[U]LEN, and it is unclear where they are defined.
AC_CHECK_TYPES([SQLLEN, SQLULEN], , , [# include &lt;sql.h&gt;])
dnl for unixODBC header
AC_CHECK_SIZEOF(long, 4)

dnl substitute RODBC_CPPFLAGS and LIBS
AC_SUBST(RODBC_CPPFLAGS)
AC_SUBST(LIBS)
AC_CONFIG_HEADERS([src/config.h])
dnl and do substitution in the src/Makevars.in and src/config.h
AC_CONFIG_FILES([src/Makevars])
AC_OUTPUT</code></pre>
</div>
</blockquote>
<p>where src/Makevars.in would be simply</p>
<blockquote>
<div class="example">
<pre class="example1"><code>PKG_CPPFLAGS = @RODBC_CPPFLAGS@
PKG_LIBS = @LIBS@</code></pre>
</div>
</blockquote>
<p>A user can then be advised to specify the location of the ODBC driver manager files by options like (lines broken for easier reading)</p>
<div class="example">
<pre class="example1"><code>R CMD INSTALL \
  --configure-args=&#39;--with-odbc-include=/opt/local/include \
  --with-odbc-lib=/opt/local/lib --with-odbc-manager=iodbc&#39; \
  RODBC</code></pre>
</div>
<p>or by setting the environment variables <code class="calibre2">ODBC_INCLUDE</code> and <code class="calibre2">ODBC_LIBS</code>.</p>
<hr />
<p><a href="" id="Using-F95-code"></a> <a href="" id="Using-F95-code-1"></a></p>
<h4 id="using-f95-code" class="subsection">1.2.3 Using F95 code</h4>
<p>R assumes that source files with extension .f are FORTRAN 77, and passes them to the compiler specified by ‘F77’. On most but not all platforms that compiler will accept Fortran 90/95 code: some platforms have a separate Fortran 90/95 compiler and a few (by now quite rare<a href="R-exts_split_014.html#FOOT37" id="DOCF37"><sup>37</sup></a>) platforms have no Fortran 90/95 support.</p>
<p>This means that portable packages need to be written in correct FORTRAN 77, which will also be valid Fortran 95. See <a href="https://developer.R-project.org/Portability.html" class="uri">https://developer.R-project.org/Portability.html</a> for reference resources. In particular, <em>free source form</em> F95 code is not portable.</p>
<p>On some systems an alternative F95 compiler is available: from the <code class="calibre2">gcc</code> family this might be <code class="calibre2">gfortran</code> or <code class="calibre2">g95</code>. Configuring R will try to find a compiler which (from its name) appears to be a Fortran 90/95 compiler, and set it in macro ‘FC’. Note that it does not check that such a compiler is fully (or even partially) compliant with Fortran 90/95. Packages making use of Fortran 90/95 features should use file extension .f90 or .f95 for the source files: the variable <code class="calibre2">PKG_FCFLAGS</code> specifies any special flags to be used. There is no guarantee that compiled Fortran 90/95 code can be mixed with any other type of compiled code, nor that a build of R will have support for such packages.</p>
<p>Some (but not) all compilers specified by the ‘FC’ macro will accept Fortran 2003 or 2008 code: such code should still use file extension .f90 or .f95. For platforms using <code class="calibre2">gfortran</code>, you may need to include -std=f2003 or -std=f2008 in <code class="calibre2">PKG_FCFLAGS</code>: the default is ‘GNU Fortran’, Fortran 95 with non-standard extensions. The Oracle <code class="calibre2">f95</code> compiler ‘accepts some Fortran 2003/8 features’ (search for ‘Oracle Developer Studio 12.5: Fortran User’s Guide’ and look for §4.6).</p>
<p>Modern versions of Fortran support modules, whereby compiling one source file creates a module file which is then included in others. (Module files typically have a .mod extension: they do depend on the compiler used and so should never be included in a package.) This creates a dependence which <code class="calibre2">make</code> will not know about and often causes installation with a parallel make to fail. Thus it is necessary to add explicit dependencies to src/Makevars to tell <code class="calibre2">make</code> the constraints on the order of compilation. For example, if file iface.f90 creates a module ‘iface’ used by files cmi.f90 and dmi.f90 then src/Makevars needs to contain something like</p>
<div class="example">
<pre class="example1"><code>cmi.o dmi.o: iface.o</code></pre>
</div>
<hr />
<p><a href="" id="Using-C_002b_002b11-code"></a> <a href="" id="Using-C_002b_002b11-code-1"></a></p>
<h4 id="using-c11-code" class="subsection">1.2.4 Using C++11 code</h4>
<p>R can be built without a C++ compiler although one is available (but not necessarily installed) on all known R platforms. For full portability across platforms, all that can be assumed is approximate support for the C++98 standard (the widely used <code class="calibre2">g++</code> deviates considerably from the standard). Some compilers have a concept of ‘C++03’ (‘essentially a bug fix’) or ‘C++ Technical Report 1’ (TR1), an optional addition to the ‘C++03’ revision which was published in 2007. A revised standard was published in 2011 and compilers with pretty much complete implementations are available. C++11 added all of the C99 features which are not otherwise implemented in C++, and C++ compilers commonly accept C99 extensions to C++98. A minor update<a href="R-exts_split_014.html#FOOT38" id="DOCF38"><sup>38</sup></a> to C++11 (C++14) was published in December 2014. The next standard has been sent to ISO and is likely to be approved in 2017: it is informally known as C++17.</p>
<p>What standard a C++ compiler aims to support can be hard to determine: the value<a href="R-exts_split_014.html#FOOT39" id="DOCF39"><sup>39</sup></a> of <code class="calibre2">__cplusplus</code> may help but some compilers use it to denote a standard which is partially supported and some the latest standard which is (almost) fully supported. As from version 6, <code class="calibre2">g++</code> defaults to C++14 (with GNU extensions): earlier versions aim to support C++03 with many extensions (including support for TR1). <code class="calibre2">clang</code> with its native<a href="R-exts_split_014.html#FOOT40" id="DOCF40"><sup>40</sup></a> <code class="calibre2">libc++</code> headers and library includes many C++11 features, and does not support TR1.</p>
<p>Since version 3.1.0, R has provided support for C++11 in packages in addition to C++98. This support is not uniform across platforms as it depends on the capabilities of the compiler (see below). When R is configured, it will determine whether the C++ compiler supports C++11 and which compiler flags, if any, are required to enable C++11 support. For example, recent versions of <code class="calibre2">g++</code> or <code class="calibre2">clang++</code> accept the compiler flag -std=c++11, and earlier versions support a flag -std=c++0x, but the latter only provided partial support for the C++11 standard (it later became a deprecated synonym for -std=c++11).</p>
<p>In order to use C++11 code in a package, the package’s Makevars file (or Makevars.win on Windows) should include the line</p>
<div class="example">
<pre class="example1"><code>CXX_STD = CXX11</code></pre>
</div>
<p>Compilation and linking will then be done with the C++11 compiler.</p>
<p>Packages without a src/Makevars or src/Makefile file may specify that they require C++11 for code in the src directory by including ‘C++11’ in the ‘SystemRequirements’ field of the DESCRIPTION file, e.g.</p>
<div class="example">
<pre class="example1"><code>SystemRequirements: C++11</code></pre>
</div>
<p>If a package does have a src/Makevars[.win] file then setting the make variable ‘CXX_STD’ is preferred, as it allows <code class="calibre2">R CMD SHLIB</code> to work correctly in the package’s src directory.</p>
<p>Conversely, to ensure that the C++98 standard is assumed even when this is not the compiler default, use</p>
<div class="example">
<pre class="example1"><code>SystemRequirements: C++98</code></pre>
</div>
<p>or</p>
<div class="example">
<pre class="example1"><code>CXX_STD = CXX98</code></pre>
</div>
<p>The C++11 compiler will be used systematically by R for all C++ code if the environment variable <code class="calibre2">USE_CXX11</code> is defined (with any value). Hence this environment variable should be defined when invoking <code class="calibre2">R CMD SHLIB</code> in the absence of a Makevars file (or Makevars.win on Windows) if a C++11 compiler is required.</p>
<p>Further control over compilation of C++11 code can be obtained by specifying the macros ‘CXX11’ and ‘CXX11STD’ when R is configured<a href="R-exts_split_014.html#FOOT41" id="DOCF41"><sup>41</sup></a>, or in a personal or site Makevars file. If C++11 support is not available then these macros are both empty; if it is available by default, ‘CXX11’ defaults to ‘CXX’ and ‘CXX11STD’ is empty . Otherwise, ‘CXX11’ defaults to the same value as the C++ compiler ‘CXX’ and the flag ‘CXX11STD’ defaults to -std=c++11 or similar. It is possible to specify ‘CXX11’ to be a distinct compiler just for C++11–using packages, e.g. <code class="calibre2">g++</code> on Solaris. Note however that different C++ compilers (and even different versions of the same compiler) often differ in their ABI so their outputs can rarely be mixed. By setting ‘CXX11STD’ it is also possible to choose a different dialect of the standard such as -std=c++11.</p>
<p>As noted above, support for C++11 varies across platforms: on some platforms, it may be possible or necessary to select a different compiler for C++11, <em>via</em> personal or site Makevars files.</p>
<p>There is no guarantee that C++11 can be used in a package in combination with any other compiled language (even C), as the C++11 compiler may be incompatible with the native compilers for the platform. (There are known problems mixing C++11 with Fortran.)</p>
<p>If a package using C++11 has a <code class="calibre2">configure</code> script it is essential that it selects the correct compiler, <em>via</em> something like</p>
<div class="example">
<pre class="example1"><code>CXX11=`&quot;${R_HOME}/bin/R&quot; CMD config CXX11`
CXX11STD=`&quot;${R_HOME}/bin/R&quot; CMD config CXX11STD`
CXX=&quot;${CXX11} ${CXX11STD}&quot;
CXXFLAGS=`&quot;${R_HOME}/bin/R&quot; CMD config CXX11FLAGS`
AC_LANG(C++)</code></pre>
</div>
<p>(paying attention to all the quotes required).</p>
<p>If you want to compile C++11 code in a subdirectory, make sure you pass down the macros to specify that compiler, e.g. in src/Makevars</p>
<div class="example">
<pre class="example1"><code>sublibs:
         @(cd libs &amp;&amp; $(MAKE) \
            CXX=&quot;$(CXX11) $(CXX11STD)&quot; CXXFLAGS=&quot;$(CXX11FLAGS) $(CXX11PICFLAGS)&quot;)</code></pre>
</div>
<p>Note that the mechanisms described here specify C++11 for code compiled by <code class="calibre2">R CMD SHLIB</code> as used by default by <code class="calibre2">R CMD INSTALL</code>. They do not necessarily apply if there is a src/Makefile file, nor to compilation done in vignettes or <em>via</em> other packages.</p>
<hr />
<p><a href="" id="Using-C_002b_002b14-code"></a> <a href="" id="Using-C_002b_002b14-code-1"></a></p>
<h4 id="using-c14-code" class="subsection">1.2.5 Using C++14 code</h4>
<p>Support for a C++14 has been explicitly added to R from version 3.4.0. Similar considerations to C++11 apply, except that the variables associated with the C++14 compiler use the prefix ‘CXX14’ instead of ‘CXX11’. Hence to use C++14 code in a package, the package’s Makevars file (or Makevars.win on Windows) should include the line</p>
<div class="example">
<pre class="example1"><code>CXX_STD = CXX14</code></pre>
</div>
<p>In the absence of a Makevars file, C++14 support can also be requested by the line:</p>
<div class="example">
<pre class="example1"><code>SystemRequirements: C++14</code></pre>
</div>
<p>in the DESCRIPTION file. Finally, the C++14 compiler can be used systematically by setting the environment variable <code class="calibre2">USE_CXX17</code>.</p>
<p>Note that code written for C++11 that emulates features of C++14 will not necessarily compile under a C++14 compiler<a href="R-exts_split_014.html#FOOT42" id="DOCF42"><sup>42</sup></a>, since the emulation typically leads to a namespace clash. In order to ensure that the code also compiles under C++14, something like the following should be done:</p>
<div class="example">
<pre class="example1"><code>#if __cplusplus &gt;= 201402L
using std::make_unique;
#else
// your emulation
#endif</code></pre>
</div>
<p>Code needing C++14 features would do better to test for their presence <em>via</em> ‘SD-6 feature tests’<a href="R-exts_split_014.html#FOOT43" id="DOCF43"><sup>43</sup></a>. That test could be</p>
<div class="example">
<pre class="example1"><code>#include &lt;memory&gt; // header where this is defined
#if defined(__cpp_lib_make_unique) &amp;&amp; (__cpp_lib_make_unique &gt;= 201304)
using std::make_unique;
#else
// your emulation
#endif</code></pre>
</div>
<p>The webpage <a href="http://en.cppreference.com/w/cpp/compiler_support" class="uri">http://en.cppreference.com/w/cpp/compiler_support</a> gives some information on which compilers are known to support recent C++ features, including those in the C++17 drafts (for which feature tests should be used).</p>
<hr />
<p><a href="" id="Using-C_002b_002b17-code"></a> <a href="" id="Using-C_002b_002b17-code-1"></a></p>
<h4 id="using-c17-code" class="subsection">1.2.6 Using C++17 code</h4>
<p>Experimental support for C++17 has been added to R version 3.4.0. The configure script tests a subset of C++17 features. At the time of writing (March 2017) both <code class="calibre2">clang 4.0.0</code> and <code class="calibre2">gcc 7.1</code> pass these tests (with flags -std=gnu++1z and -std=gnu++17 respectively chosen by the configure script). Note that the C++17 feature tests are incomplete and are subject to change in future R versions as compiler support for the standard improves.</p>
<p>The variables associated with the C++17 compiler use the prefix ‘CXX17’. Hence to use C++17 code in a package, the package’s Makevars file (or Makevars.win on Windows) should include the line</p>
<div class="example">
<pre class="example1"><code>CXX_STD = CXX17</code></pre>
</div>
<p>In the absence of a Makevars file, C++17 support can also be requested by the line:</p>
<div class="example">
<pre class="example1"><code>SystemRequirements: C++17</code></pre>
</div>
<p>in the DESCRIPTION file. Finally, the C++17 compiler can be used systematically by setting the environment variable <code class="calibre2">USE_CXX17</code>.</p>
<hr />
<p><a href="" id="Checking-and-building-packages"></a> <a href="" id="Checking-and-building-packages-1"></a></p>
<h3 id="checking-and-building-packages" class="section">1.3 Checking and building packages</h3>
<p>Before using these tools, please check that your package can be installed (which checked it can be loaded). <code class="calibre2">R CMD check</code> will <em>inter alia</em> do this, but you may get more detailed error messages doing the install directly.</p>
<p>If your package specifies an encoding in its DESCRIPTION file, you should run these tools in a locale which makes use of that encoding: they may not work at all or may work incorrectly in other locales (although UTF-8 locales will most likely work).</p>
<blockquote>
<p><strong>Note:</strong> <code class="calibre2">R CMD check</code> and <code class="calibre2">R CMD build</code> run R processes with --vanilla in which none of the user’s startup files are read. If you need <code class="calibre2">R_LIBS</code> set (to find packages in a non-standard library) you can set it in the environment: also you can use the check and build environment files (as specified by the environment variables <code class="calibre2">R_CHECK_ENVIRON</code> and <code class="calibre2">R_BUILD_ENVIRON</code>; if unset, files<a href="R-exts_split_014.html#FOOT44" id="DOCF44"><sup>44</sup></a> ~/.R/check.Renviron and ~/.R/build.Renviron are used) to set environment variables when using these utilities.</p>
</blockquote>
<blockquote>
<p><strong>Note to Windows users:</strong> <code class="calibre2">R CMD build</code> may make use of the Windows toolset (see the “R Installation and Administration” manual) if present and in your path, and it is required for packages which need it to install (including those with configure.win or cleanup.win scripts or a src directory) and e.g. need vignettes built.</p>
<p>You may need to set the environment variable <code class="calibre2">TMPDIR</code> to point to a suitable writable directory with a path not containing spaces – use forward slashes for the separators. Also, the directory needs to be on a case-honouring file system (some network-mounted file systems are not).</p>
</blockquote>
<hr />
<p><a href="" id="Checking-packages"></a> <a href="" id="Checking-packages-1"></a></p>
<h4 id="checking-packages" class="subsection">1.3.1 Checking packages</h4>
<p><a href="" id="index-Checking-packages"></a> <a href="" id="index-R-CMD-check"></a></p>
<p>Using <code class="calibre2">R CMD check</code>, the R package checker, one can test whether <em>source</em> R packages work correctly. It can be run on one or more directories, or compressed package <code class="calibre2">tar</code> archives with extension .tar.gz, .tgz, .tar.bz2 or .tar.xz.</p>
<p>It is strongly recommended that the final checks are run on a <code class="calibre2">tar</code> archive prepared by <code class="calibre2">R CMD build</code>.</p>
<p>This runs a series of checks, including</p>
<ol>
<li>The package is installed. This will warn about missing cross-references and duplicate aliases in help files.</li>
<li>The file names are checked to be valid across file systems and supported operating system platforms.</li>
<li>The files and directories are checked for sufficient permissions (Unix-alikes only).</li>
<li>The files are checked for binary executables, using a suitable version of <code class="calibre2">file</code> if available<a href="R-exts_split_014.html#FOOT45" id="DOCF45"><sup>45</sup></a>. (There may be rare false positives.)</li>
<li>The DESCRIPTION file is checked for completeness, and some of its entries for correctness. Unless installation tests are skipped, checking is aborted if the package dependencies cannot be resolved at run time. (You may need to set <code class="calibre2">R_LIBS</code> in the environment if dependent packages are in a separate library tree.) One check is that the package name is not that of a standard package, nor one of the defunct standard packages (‘ctest’, ‘eda’, ‘lqs’, ‘mle’, ‘modreg’, ‘mva’, ‘nls’, ‘stepfun’ and ‘ts’). Another check is that all packages mentioned in <code class="calibre2">library</code> or <code class="calibre2">require</code>s or from which the NAMESPACE file imports or are called <em>via</em> <code class="calibre2">::</code> or <code class="calibre2">:::</code> are listed (in ‘Depends’, ‘Imports’, ‘Suggests’): this is not an exhaustive check of the actual imports.</li>
<li>Available index information (in particular, for demos and vignettes) is checked for completeness.</li>
<li><p>The package subdirectories are checked for suitable file names and for not being empty. The checks on file names are controlled by the option --check-subdirs=value. This defaults to ‘default’, which runs the checks only if checking a tarball: the default can be overridden by specifying the value as ‘yes’ or ‘no’. Further, the check on the src directory is only run if the package does not contain a configure script (which corresponds to the value ‘yes-maybe’) and there is no src/Makefile or src/Makefile.in.</p>
<p>To allow a configure script to generate suitable files, files ending in ‘.in’ will be allowed in the R directory.</p>
<p>A warning is given for directory names that look like R package check directories – many packages have been submitted to CRAN containing these.</p></li>
<li>The R files are checked for syntax errors. Bytes which are non-ASCII are reported as warnings, but these should be regarded as errors unless it is known that the package will always be used in the same locale.</li>
<li>It is checked that the package can be loaded, first with the usual default packages and then only with package <strong>base</strong> already loaded. It is checked that the namespace this can be loaded in an empty session with only the <strong>base</strong> namespace loaded. (Namespaces and packages can be loaded very early in the session, before the default packages are available, so packages should work then.)</li>
<li>The R files are checked for correct calls to <code class="calibre2">library.dynam</code>. Package startup functions are checked for correct argument lists and (incorrect) calls to functions which modify the search path or inappropriately generate messages. The R code is checked for possible problems using <a href="https://CRAN.R-project.org/package=codetools"><strong>codetools</strong></a>. In addition, it is checked whether S3 methods have all arguments of the corresponding generic, and whether the final argument of replacement functions is called ‘value’. All foreign function calls (<code class="calibre2">.C</code>, <code class="calibre2">.Fortran</code>, <code class="calibre2">.Call</code> and <code class="calibre2">.External</code> calls) are tested to see if they have a <code class="calibre2">PACKAGE</code> argument, and if not, whether the appropriate DLL might be deduced from the namespace of the package. Any other calls are reported. (The check is generous, and users may want to supplement this by examining the output of <code class="calibre2">tools::checkFF(&quot;mypkg&quot;, verbose=TRUE)</code>, especially if the intention were to always use a <code class="calibre2">PACKAGE</code> argument)</li>
<li>The Rd files are checked for correct syntax and metadata, including the presence of the mandatory fields (<code class="calibre2">\name</code>, <code class="calibre2">\alias</code>, <code class="calibre2">\title</code> and <code class="calibre2">\description</code>). The Rd name and title are checked for being non-empty, and there is a check for missing cross-references (links).</li>
<li>A check is made for missing documentation entries, such as undocumented user-level objects in the package.</li>
<li>Documentation for functions, data sets, and S4 classes is checked for consistency with the corresponding code.</li>
<li>It is checked whether all function arguments given in <code class="calibre2">\usage</code> sections of Rd files are documented in the corresponding <code class="calibre2">\arguments</code> section.</li>
<li>The data directory is checked for non-ASCII characters and for the use of reasonable levels of compression.</li>
<li><p>C, C++ and FORTRAN source and header files<a href="R-exts_split_014.html#FOOT46" id="DOCF46"><sup>46</sup></a> are tested for portable (LF-only) line endings. If there is a Makefile or Makefile.in or Makevars or Makevars.in file under the src directory, it is checked for portable line endings and the correct use of ‘$(BLAS_LIBS)’ and ‘$(LAPACK_LIBS)’</p>
<p>Compiled code is checked for symbols corresponding to functions which might terminate R or write to stdout/stderr instead of the console. Note that the latter might give false positives in that the symbols might be pulled in with external libraries and could never be called. Windows<a href="R-exts_split_014.html#FOOT47" id="DOCF47"><sup>47</sup></a> users should note that the Fortran and C++ runtime libraries are examples of such external libraries.</p></li>
<li>Some checks are made of the contents of the inst/doc directory. These always include checking for files that look like leftovers, and if suitable tools (such as <code class="calibre2">qpdf</code>) are available, checking that the PDF documentation is of minimal size.</li>
<li><p>The examples provided by the package’s documentation are run. (see <a href="R-exts_split_005.html#Writing-R-documentation-files">Writing R documentation files</a>, for information on using <code class="calibre2">\examples</code> to create executable example code.) If there is a file tests/Examples/pkg-Ex.Rout.save, the output of running the examples is compared to that file.</p>
<p>Of course, released packages should be able to run at least their own examples. Each example is run in a ‘clean’ environment (so earlier examples cannot be assumed to have been run), and with the variables <code class="calibre2">T</code> and <code class="calibre2">F</code> redefined to generate an error unless they are set in the example: See <a href="./R-intro.html#Logical-vectors">Logical vectors</a> in An Introduction to R.</p></li>
<li>If the package sources contain a tests directory then the tests specified in that directory are run. (Typically they will consist of a set of .R source files and target output files .Rout.save.) Please note that the comparison will be done in the end user’s locale, so the target output files should be ASCII if at all possible. (The command line option <code class="calibre2">--test-dir=foo</code> may be used to specify tests in a non-standard location. For example, unusually slow tests could be placed in inst/slowTests and then <code class="calibre2">R CMD check --test-dir=inst/slowTests</code> would be used to run them. Other names that have been suggested are, for example, inst/testWithOracle for tests that require Oracle to be installed, inst/randomTests for tests which use random values and may occasionally fail by chance, etc.)</li>
<li><p>The code in package vignettes (see <a href="#Writing-package-vignettes">Writing package vignettes</a>) is executed, and the vignette PDFs re-made from their sources as a check of completeness of the sources (unless there is a ‘BuildVignettes’ field in the package’s DESCRIPTION file with a false value). If there is a target output file .Rout.save in the vignette source directory, the output from running the code in that vignette is compared with the target output file and any differences are reported (but not recorded in the log file). (If the vignette sources are in the deprecated location inst/doc, do mark such target output files to not be installed in .Rinstignore.)</p>
<p>If there is an error<a href="R-exts_split_014.html#FOOT48" id="DOCF48"><sup>48</sup></a> in executing the R code in vignette foo.ext, a log file foo.ext.log is created in the check directory. The vignette PDFs are re-made in a copy of the package sources in the vign_test subdirectory of the check directory, so for further information on errors look in directory pkgname/vign_test/vignettes. (It is only retained if there are errors or if environment variable <code class="calibre2">_R_CHECK_CLEAN_VIGN_TEST_</code> is set to a false value.)</p></li>
<li>The PDF version of the package’s manual is created (to check that the Rd files can be converted successfully). This needs LaTeX and suitable fonts and LaTeX packages to be installed. See the section ‘Making the manuals’ in the ‘R Installation and Administration’ manual’ for further details.</li>
</ol>
<p>All these tests are run with collation set to the <code class="calibre2">C</code> locale, and for the examples and tests with environment variable <code class="calibre2">LANGUAGE=en</code>: this is to minimize differences between platforms.</p>
<p>Use R CMD check --help to obtain more information about the usage of the R package checker. A subset of the checking steps can be selected by adding command-line options. It also allows customization by setting environment variables <code class="calibre2">_R_CHECK_*_</code> as described in ‘R Internals’: a set of these customizations similar to those used by CRAN can be selected by the option --as-cran (which works best if Internet access is available). Some Windows users may need to set environment variable <code class="calibre2">R_WIN_NO_JUNCTIONS</code> to a non-empty value. The test of cyclic declarations<a href="R-exts_split_014.html#FOOT49" id="DOCF49"><sup>49</sup></a>in DESCRIPTION files needs repositories (including CRAN) set: do this in ~/.Rprofile, by e.g.</p>
<div class="example">
<pre class="example1"><code>options(repos = c(CRAN=&quot;https://cran.r-project.org&quot;))</code></pre>
</div>
<p>One check customization which can be revealing is</p>
<div class="example">
<pre class="example1"><code>_R_CHECK_CODETOOLS_PROFILE_=&quot;suppressLocalUnused=FALSE&quot;</code></pre>
</div>
<p>which reports unused local assignments. Not only does this point out computations which are unnecessary because their results are unused, it also can uncover errors. (Two such are to intend to update an object by assigning a value but mistype its name or assign in the wrong scope, for example using <code class="calibre2">&lt;-</code> where <code class="calibre2">&lt;&lt;-</code> was intended.) This can give false positives, most commonly because of non-standard evaluation for formulae and because the intention is to return objects in the environment of a function for later use.</p>
<p>Complete checking of a package which contains a file README.md needs <code class="calibre2">pandoc</code> installed: see <a href="http://johnmacfarlane.net/pandoc/installing.html" class="uri">http://johnmacfarlane.net/pandoc/installing.html</a>. This should be reasonably current: at the time of writing CRAN used version 1.12.4.2 to process these files.</p>
<p>You do need to ensure that the package is checked in a suitable locale if it contains non-ASCII characters. Such packages are likely to fail some of the checks in a <code class="calibre2">C</code> locale, and <code class="calibre2">R CMD check</code> will warn if it spots the problem. You should be able to check any package in a UTF-8 locale (if one is available). Beware that although a <code class="calibre2">C</code> locale is rarely used at a console, it may be the default if logging in remotely or for batch jobs.</p>
<blockquote>
<p><strong>Multiple sub-architectures:</strong> On systems which support multiple sub-architectures (principally Windows), <code class="calibre2">R CMD check</code> will install and check a package which contains compiled code under all available sub-architectures. (Use option --force-multiarch to force this for packages without compiled code, which are otherwise only checked under the main sub-architecture.) This will run the loading tests, examples and tests directory under each installed sub-architecture in turn, and give an error if any fail. Where environment variables (including perhaps <code class="calibre2">PATH</code>) need to be set differently for each sub-architecture, these can be set in architecture-specific files such as R_HOME/etc/i386/Renviron.site.</p>
<p>An alternative approach is to use <code class="calibre2">R CMD check --no-multiarch</code> to check the primary sub-architecture, and then to use something like <code class="calibre2">R --arch=x86_64 CMD check --extra-arch</code> or (Windows) <code class="calibre2">/path/to/R/bin/x64/Rcmd check --extra-arch</code> to run for each additional sub-architecture just the checks<a href="R-exts_split_014.html#FOOT50" id="DOCF50"><sup>50</sup></a> which differ by sub-architecture. (This approach is required for packages which are installed by <code class="calibre2">R CMD INSTALL --merge-multiarch</code>.)</p>
<p>Where packages need additional commands to install all the sub-architectures these can be supplied by e.g. --install-args=--force-biarch.</p>
</blockquote>
<hr />
<p><a href="" id="Building-package-tarballs"></a> <a href="" id="Building-package-tarballs-1"></a></p>
<h4 id="building-package-tarballs" class="subsection">1.3.2 Building package tarballs</h4>
<p><a href="" id="index-Building-source-packages"></a> <a href="" id="index-R-CMD-build"></a> <a href="" id="index-Package-builder"></a> <a href="" id="index-tarballs"></a></p>
<p>Packages may be distributed in source form as “tarballs” (.tar.gz files) or in binary form. The source form can be installed on all platforms with suitable tools and is the usual form for Unix-like systems; the binary form is platform-specific, and is the more common distribution form for the Windows and macOS platforms.</p>
<p>Using <code class="calibre2">R CMD build</code>, the R package builder, one can build R package tarballs from their sources (for example, for subsequent release).</p>
<p>Prior to actually building the package in the standard gzipped tar file format, a few diagnostic checks and cleanups are performed. In particular, it is tested whether object indices exist and can be assumed to be up-to-date, and C, C++ and FORTRAN source files and relevant makefiles in a src directory are tested and converted to LF line-endings if necessary.</p>
<p>Run-time checks whether the package works correctly should be performed using <code class="calibre2">R CMD check</code> prior to invoking the final build procedure.</p>
<p><a href="" id="index-_002eRbuildignore-file"></a></p>
<p>To exclude files from being put into the package, one can specify a list of exclude patterns in file .Rbuildignore in the top-level source directory. These patterns should be Perl-like regular expressions (see the help for <code class="calibre2">regexp</code> in R for the precise details), one per line, to be matched case-insensitively against the file and directory names relative to the top-level package source directory. In addition, directories from source control systems<a href="R-exts_split_014.html#FOOT51" id="DOCF51"><sup>51</sup></a> or from <code class="calibre2">eclipse</code><a href="R-exts_split_014.html#FOOT52" id="DOCF52"><sup>52</sup></a>, directories with names ending .Rcheck or Old or old and files GNUMakefile<a href="R-exts_split_014.html#FOOT53" id="DOCF53"><sup>53</sup></a>, Read-and-delete-me or with base names starting with ‘.#’, or starting and ending with ‘#’, or ending in ‘~’, ‘.bak’ or ‘.swp’, are excluded by default. In addition, those files in the R, demo and man directories which are flagged by <code class="calibre2">R CMD check</code> as having invalid names will be excluded.</p>
<p>Use R CMD build --help to obtain more information about the usage of the R package builder.</p>
<p>Unless R CMD build is invoked with the --no-build-vignettes option (or the package’s DESCRIPTION contains ‘BuildVignettes: no’ or similar), it will attempt to (re)build the vignettes (see <a href="#Writing-package-vignettes">Writing package vignettes</a>) in the package. To do so it installs the current package into a temporary library tree, but any dependent packages need to be installed in an available library tree (see the Note: at the top of this section).</p>
<p>Similarly, if the .Rd documentation files contain any <code class="calibre2">\Sexpr</code> macros (see <a href="R-exts_split_006.html#Dynamic-pages">Dynamic pages</a>), the package will be temporarily installed to execute them. Post-execution binary copies of those pages containing build-time macros will be saved in build/partial.rdb. If there are any install-time or render-time macros, a .pdf version of the package manual will be built and installed in the build subdirectory. (This allows CRAN or other repositories to display the manual even if they are unable to install the package.) This can be suppressed by the option --no-manual or if package’s DESCRIPTION contains ‘BuildManual: no’ or similar.</p>
<p>One of the checks that <code class="calibre2">R CMD build</code> runs is for empty source directories. These are in most (but not all) cases unintentional, if they are intentional use the option --keep-empty-dirs (or set the environment variable <code class="calibre2">_R_BUILD_KEEP_EMPTY_DIRS_</code> to ‘TRUE’, or have a ‘BuildKeepEmpty’ field with a true value in the DESCRIPTION file).</p>
<p>The --resave-data option allows saved images (.rda and .RData files) in the data directory to be optimized for size. It will also compress tabular files and convert .R files to saved images. It can take values <code class="calibre2">no</code>, <code class="calibre2">gzip</code> (the default if this option is not supplied, which can be changed by setting the environment variable <code class="calibre2">_R_BUILD_RESAVE_DATA_</code>) and <code class="calibre2">best</code> (equivalent to giving it without a value), which chooses the most effective compression. Using <code class="calibre2">best</code> adds a dependence on <code class="calibre2">R (&gt;= 2.10)</code> to the DESCRIPTION file if <code class="calibre2">bzip2</code> or <code class="calibre2">xz</code> compression is selected for any of the files. If this is thought undesirable, --resave-data=gzip (which is the default if that option is not supplied) will do what compression it can with <code class="calibre2">gzip</code>. A package can control how its data is resaved by supplying a ‘BuildResaveData’ field (with one of the values given earlier in this paragraph) in its DESCRIPTION file.</p>
<p>The --compact-vignettes option will run <code class="calibre2">tools::compactPDF</code> over the PDF files in inst/doc (and its subdirectories) to losslessly compress them. This is not enabled by default (it can be selected by environment variable <code class="calibre2">_R_BUILD_COMPACT_VIGNETTES_</code>) and needs <code class="calibre2">qpdf</code> (<a href="http://qpdf.sourceforge.net/" class="uri">http://qpdf.sourceforge.net/</a>) to be available.</p>
<p>It can be useful to run <code class="calibre2">R CMD check --check-subdirs=yes</code> on the built tarball as a final check on the contents.</p>
<p>Where a non-POSIX file system is in use which does not utilize execute permissions, some care is needed with permissions. This applies on Windows and to e.g. FAT-formatted drives and SMB-mounted file systems on other OSes. The ‘mode’ of the file recorded in the tarball will be whatever <code class="calibre2">file.info()</code> returns. On Windows this will record only directories as having execute permission and on other OSes it is likely that all files have reported ‘mode’ <code class="calibre2">0777</code>. A particular issue is packages being built on Windows which are intended to contain executable scripts such as configure and cleanup: <code class="calibre2">R CMD build</code> ensures those two are recorded with execute permission.</p>
<p>Directory build of the package sources is reserved for use by <code class="calibre2">R CMD build</code>: it contains information which may not easily be created when the package is installed, including index information on the vignettes and, rarely, information on the help pages and perhaps a copy of the PDF reference manual (see above).</p>
<hr />
<p><a href="" id="Building-binary-packages"></a> <a href="" id="Building-binary-packages-1"></a></p>
<h4 id="building-binary-packages" class="subsection">1.3.3 Building binary packages</h4>
<p><a href="" id="index-Building-binary-packages"></a></p>
<p>Binary packages are compressed copies of installed versions of packages. They contain compiled shared libraries rather than C, C++ or Fortran source code, and the R functions are included in their installed form. The format and filename are platform-specific; for example, a binary package for Windows is usually supplied as a .zip file, and for the macOS platform the default binary package file extension is .tgz.</p>
<p>The recommended method of building binary packages is to use</p>
<p><code class="calibre2">R CMD INSTALL --build pkg</code> where pkg is either the name of a source tarball (in the usual .tar.gz format) or the location of the directory of the package source to be built. This operates by first installing the package and then packing the installed binaries into the appropriate binary package file for the particular platform.</p>
<p>By default, <code class="calibre2">R CMD INSTALL --build</code> will attempt to install the package into the default library tree for the local installation of R. This has two implications:</p>
<ul>
<li>If the installation is successful, it will overwrite any existing installation of the same package.</li>
<li>The default library tree must have write permission; if not, the package will not install and the binary will not be created.</li>
</ul>
<p>To prevent changes to the present working installation or to provide an install location with write access, create a suitably located directory with write access and use the <code class="calibre2">-l</code> option to build the package in the chosen location. The usage is then</p>
<p><code class="calibre2">R CMD INSTALL -l location --build pkg</code></p>
<p>where location is the chosen directory with write access. The package will be installed as a subdirectory of location, and the package binary will be created in the current directory.</p>
<p>Other options for <code class="calibre2">R CMD INSTALL</code> can be found using <code class="calibre2">R CMD INSTALL --help</code>, and platform-specific details for special cases are discussed in the platform-specific FAQs.</p>
<p>Finally, at least one web-based service is available for building binary packages from (checked) source code: WinBuilder (see <a href="https://win-builder.R-project.org/" class="uri">https://win-builder.R-project.org/</a>) is able to build Windows binaries. Note that this is intended for developers on other platforms who do not have access to Windows but wish to provide binaries for the Windows platform.</p>
<hr />
<p><a href="" id="Writing-package-vignettes"></a> <a href="" id="Writing-package-vignettes-1"></a></p>

<!--chapter:end:4-R-exts.Rmd-->

<h3 id="writing-package-vignettes" class="section">1.4 Writing package vignettes</h3>
<p><a href="" id="index-vignettes"></a> <a href="" id="index-Sweave"></a></p>
<p>In addition to the help files in Rd format, R packages allow the inclusion of documents in arbitrary other formats. The standard location for these is subdirectory inst/doc of a source package, the contents will be copied to subdirectory doc when the package is installed. Pointers from package help indices to the installed documents are automatically created. Documents in inst/doc can be in arbitrary format, however we strongly recommend providing them in PDF format, so users on almost all platforms can easily read them. To ensure that they can be accessed from a browser (as an HTML index is provided), the file names should start with an ASCII letter and be comprised entirely of ASCII letters or digits or hyphen or underscore.</p>
<p>A special case is <em>package vignettes</em>. Vignettes are documents in PDF or HTML format obtained from plain text literate source files from which R knows how to extract R code and create output (in PDF/HTML or intermediate LaTeX). Vignette engines do this work, using “tangle” and “weave” functions respectively. Sweave, provided by the R distribution, is the default engine. Since R version 3.0.0, other vignette engines besides Sweave are supported; see <a href="#Non_002dSweave-vignettes">Non-Sweave vignettes</a>.</p>
<p>Package vignettes have their sources in subdirectory vignettes of the package sources. Note that the location of the vignette sources only affects <code class="calibre2">R CMD build</code> and <code class="calibre2">R CMD check</code>: the tarball built by <code class="calibre2">R CMD build</code> includes in inst/doc the components intended to be installed.</p>
<p>Sweave vignette sources are normally given the file extension .Rnw or .Rtex, but for historical reasons extensions<a href="R-exts_split_014.html#FOOT54" id="DOCF54"><sup>54</sup></a> .Snw and .Stex are also recognized. Sweave allows the integration of LaTeX documents: see the <code class="calibre2">Sweave</code> help page in R and the <code class="calibre2">Sweave</code> vignette in package <strong>utils</strong> for details on the source document format.</p>
<p>Package vignettes are tested by <code class="calibre2">R CMD check</code> by executing all R code chunks they contain (except those marked for non-evaluation, e.g., with option <code class="calibre2">eval=FALSE</code> for Sweave). The R working directory for all vignette tests in <code class="calibre2">R CMD check</code> is a <em>copy</em> of the vignette source directory. Make sure all files needed to run the R code in the vignette (data sets, …) are accessible by either placing them in the inst/doc hierarchy of the source package or by using calls to <code class="calibre2">system.file()</code>. All other files needed to re-make the vignettes (such as LaTeX style files, BibTeX input files and files for any figures not created by running the code in the vignette) must be in the vignette source directory. <code class="calibre2">R CMD check</code> will check that vignette production has succeeded by comparing modification times of output files in inst/doc with the source in vignettes.</p>
<p><code class="calibre2">R CMD build</code> will automatically<a href="R-exts_split_014.html#FOOT55" id="DOCF55"><sup>55</sup></a> create the (PDF or HTML versions of the) vignettes in inst/doc for distribution with the package sources. By including the vignette outputs in the package sources it is not necessary that these can be re-built at install time, i.e., the package author can use private R packages, screen snapshots and LaTeX extensions which are only available on his machine.<a href="R-exts_split_014.html#FOOT56" id="DOCF56"><sup>56</sup></a></p>
<p>By default <code class="calibre2">R CMD build</code> will run <code class="calibre2">Sweave</code> on all Sweave vignette source files in vignettes. If Makefile is found in the vignette source directory, then <code class="calibre2">R CMD build</code> will try to run <code class="calibre2">make</code> after the <code class="calibre2">Sweave</code> runs, otherwise <code class="calibre2">texi2pdf</code> is run on each .tex file produced.</p>
<p>The first target in the Makefile should take care of both creation of PDF/HTML files and cleaning up afterwards (including after <code class="calibre2">Sweave</code>), i.e., delete all files that shall not appear in the final package archive. Note that if the <code class="calibre2">make</code> step runs R it needs to be careful to respect the environment values of <code class="calibre2">R_LIBS</code> and <code class="calibre2">R_HOME</code><a href="R-exts_split_014.html#FOOT57" id="DOCF57"><sup>57</sup></a>. Finally, if there is a Makefile and it has a ‘clean:’ target, <code class="calibre2">make clean</code> is run.</p>
<p>All the usual <em>caveats</em> about including a Makefile apply. It must be portable (no GNU extensions), use LF line endings and must work correctly with a parallel <code class="calibre2">make</code>: too many authors have written things like</p>
<div class="example">
<pre class="example1"><code>## BAD EXAMPLE
all: pdf clean

pdf: ABC-intro.pdf ABC-details.pdf

%.pdf:  %.tex
        texi2dvi --pdf $*

clean:
        rm *.tex ABC-details-*.pdf</code></pre>
</div>
<p>which will start removing the source files whilst <code class="calibre2">pdflatex</code> is working.</p>
<p>Metadata lines can be placed in the source file, preferably in LaTeX comments in the preamble. One such is a <code class="calibre2">\VignetteIndexEntry</code> of the form</p>
<div class="example">
<pre class="example1"><code>%\VignetteIndexEntry{Using Animal}</code></pre>
</div>
<p>Others you may see are <code class="calibre2">\VignettePackage</code> (currently ignored), <code class="calibre2">\VignetteDepends</code> and <code class="calibre2">\VignetteKeyword</code> (which replaced <code class="calibre2">\VignetteKeywords</code>). These are processed at package installation time to create the saved data frame Meta/vignette.rds, but only the <code class="calibre2">\VignetteIndexEntry</code> and <code class="calibre2">\VignetteKeyword</code> statements are currently used. The <code class="calibre2">\VignetteEngine</code> statement is described in <a href="#Non_002dSweave-vignettes">Non-Sweave vignettes</a>.</p>
<p>At install time an HTML index for all vignettes in the package is automatically created from the <code class="calibre2">\VignetteIndexEntry</code> statements unless a file index.html exists in directory inst/doc. This index is linked from the HTML help index for the package. If you do supply a inst/doc/index.html file it should contain relative links only to files under the installed doc directory, or perhaps (not really an index) to HTML help files or to the DESCRIPTION file, and be valid HTML as confirmed via the <a href="https://validator.w3.org">W3C Markup Validation Service</a> or <a href="https://validator.nu/">Validator.nu</a>.</p>
<p>Sweave/Stangle allows the document to specify the <code class="calibre2">split=TRUE</code> option to create a single R file for each code chunk: this will not work for vignettes where it is assumed that each vignette source generates a single file with the vignette extension replaced by .R.</p>
<p>Do watch that PDFs are not too large – one in a CRAN package was 72MB! This is usually caused by the inclusion of overly detailed figures, which will not render well in PDF viewers. Sometimes it is much better to generate fairly high resolution bitmap (PNG, JPEG) figures and include those in the PDF document.</p>
<p><a href="" id="index-_002einstall_005fextras-file"></a></p>
<p>When <code class="calibre2">R CMD build</code> builds the vignettes, it copies these and the vignette sources from directory vignettes to inst/doc. To install any other files from the vignettes directory, include a file vignettes/.install_extras which specifies these as Perl-like regular expressions on one or more lines. (See the description of the .Rinstignore file for full details.)</p>
<hr />
<p><a href="" id="Encodings-and-vignettes"></a> <a href="" id="Encodings-and-vignettes-1"></a></p>
<h4 id="encodings-and-vignettes" class="subsection">1.4.1 Encodings and vignettes</h4>
<p>Vignettes will in general include descriptive text, R input, R output and figures, LaTeX include files and bibliographic references. As any of these may contain non-ASCII characters, the handling of encodings can become very complicated.</p>
<p>The vignette source file should be written in ASCII or contain a declaration of the encoding (see below). This applies even to comments within the source file, since vignette engines process comments to look for options and metadata lines. When an engine’s weave and tangle functions are called on the vignette source, it will be converted to the encoding of the current R session.</p>
<p><code class="calibre2">Stangle()</code> will produce an R code file in the current locale’s encoding: for a non-ASCII vignette what that is is recorded in a comment at the top of the file.</p>
<p><code class="calibre2">Sweave()</code> will produce a .tex file in the current encoding, or in UTF-8 if that is declared. Non-ASCII encodings need to be declared to LaTeX via a line like</p>
<div class="example">
<pre class="example1"><code>\usepackage[utf8]{inputenc}</code></pre>
</div>
<p>(It is also possible to use the more recent ‘inputenx’ LaTeX package.) For files where this line is not needed (e.g. chapters included within the body of a larger document, or non-Sweave vignettes), the encoding may be declared using a comment like</p>
<div class="example">
<pre class="example1"><code>%\VignetteEncoding{UTF-8}</code></pre>
</div>
<p>If the encoding is UTF-8, this can also be declared using the declaration</p>
<div class="example">
<pre class="example1"><code>%\SweaveUTF8</code></pre>
</div>
<p>If no declaration is given in the vignette, it will be assumed to be in the encoding declared for the package. If there is no encoding declared in either place, then it is an error to use non-ASCII characters in the vignette.</p>
<p>In any case, be aware that LaTeX may require the ‘usepackage’ declaration.</p>
<p><code class="calibre2">Sweave()</code> will also parse and evaluate the R code in each chunk. The R output will also be in the current locale (or UTF-8 if so declared), and should be covered by the ‘inputenc’ declaration. One thing people often forget is that the R output may not be ASCII even for ASCII R sources, for many possible reasons. One common one is the use of ‘fancy’ quotes: see the R help on <code class="calibre2">sQuote</code>: note carefully that it is not portable to declare UTF-8 or CP1252 to cover such quotes, as their encoding will depend on the locale used to run <code class="calibre2">Sweave()</code>: this can be circumvented by setting <code class="calibre2">options(useFancyQuotes=&quot;UTF-8&quot;)</code> in the vignette.</p>
<p>The final issue is the encoding of figures – this applies only to PDF figures and not PNG etc. The PDF figures will contain declarations for their encoding, but the Sweave option <code class="calibre2">pdf.encoding</code> may need to be set appropriately: see the help for the <code class="calibre2">pdf()</code> graphics device.</p>
<p>As a real example of the complexities, consider the <a href="https://CRAN.R-project.org/package=fortunes"><strong>fortunes</strong></a> package version ‘1.4-0’. That package did not have a declared encoding, and its vignette was in ASCII. However, the data it displays are read from a UTF-8 CSV file and will be assumed to be in the current encoding, so fortunes.tex will be in UTF-8 in any locale. Had <code class="calibre2">read.table</code> been told the data were UTF-8, fortunes.tex would have been in the locale’s encoding.</p>
<hr />
<p><a href="" id="Non_002dSweave-vignettes"></a> <a href="" id="Non_002dSweave-vignettes-1"></a></p>
<h4 id="non-sweave-vignettes" class="subsection">1.4.2 Non-Sweave vignettes</h4>
<p>Vignettes in formats other than Sweave are supported <em>via</em> “vignette engines”. For example <a href="https://CRAN.R-project.org/package=knitr"><strong>knitr</strong></a> version 1.1 or later can create .tex files from a variation on Sweave format, and .html files from a variation on “markdown” format. These engines replace the <code class="calibre2">Sweave()</code> function with other functions to convert vignette source files into LaTeX files for processing into .pdf, or directly into .pdf or .html files. The <code class="calibre2">Stangle()</code> function is replaced with a function that extracts the R source from a vignette.</p>
<p>R recognizes non-Sweave vignettes using filename extensions specified by the engine. For example, the <a href="https://CRAN.R-project.org/package=knitr"><strong>knitr</strong></a> package supports the extension .Rmd (standing for “R markdown”). The user indicates the vignette engine within the vignette source using a <code class="calibre2">\VignetteEngine</code> line, for example</p>
<div class="example">
<pre class="example1"><code>%\VignetteEngine{knitr::knitr}</code></pre>
</div>
<p>This specifies the name of a package and an engine to use in place of Sweave in processing the vignette. As <code class="calibre2">Sweave</code> is the only engine supplied with the R distribution, the package providing any other engine must be specified in the ‘VignetteBuilder’ field of the package DESCRIPTION file, and also specified in the ‘Suggests’, ‘Imports’ or ‘Depends’ field (since its namespace must be available to build or check your package). If more than one package is specified as a builder, they will be searched in the order given there. The <strong>utils</strong> package is always implicitly appended to the list of builder packages, but may be included earlier to change the search order.</p>
<p>Note that a package with non-Sweave vignettes should always have a ‘VignetteBuilder’ field in the DESCRIPTION file, since this is how <code class="calibre2">R CMD check</code> recognizes that there are vignettes to be checked: packages listed there are required when the package is checked.</p>
<p>The vignette engine can produce .tex, .pdf, or .html files as output. If it produces .tex files, R will call <code class="calibre2">texi2pdf</code> to convert them to .pdf for display to the user (unless there is a Makefile in the vignettes directory).</p>
<p>Package writers who would like to supply vignette engines need to register those engines in the package <code class="calibre2">.onLoad</code> function. For example, that function could make the call</p>
<div class="example">
<pre class="example1"><code>tools::vignetteEngine(&quot;knitr&quot;, weave = vweave, tangle = vtangle,
                      pattern = &quot;[.]Rmd$&quot;, package = &quot;knitr&quot;)</code></pre>
</div>
<p>(The actual registration in <a href="https://CRAN.R-project.org/package=knitr"><strong>knitr</strong></a> is more complicated, because it supports other input formats.) See the <code class="calibre2">?tools::vignetteEngine</code> help topic for details on engine registration.</p>
<hr />
<p><a href="" id="Package-namespaces"></a> <a href="" id="Package-namespaces-1"></a></p>
<h3 id="package-namespaces" class="section">1.5 Package namespaces</h3>
<p><a href="" id="index-namespaces"></a></p>
<p>R has a namespace management system for code in packages. This system allows the package writer to specify which variables in the package should be <em>exported</em> to make them available to package users, and which variables should be <em>imported</em> from other packages.</p>
<p>The namespace for a package is specified by the NAMESPACE file in the top level package directory. This file contains <em>namespace directives</em> describing the imports and exports of the namespace. Additional directives register any shared objects to be loaded and any S3-style methods that are provided. Note that although the file looks like R code (and often has R-style comments) it is not processed as R code. Only very simple conditional processing of <code class="calibre2">if</code> statements is implemented.</p>
<p>Packages are loaded and attached to the search path by calling <code class="calibre2">library</code> or <code class="calibre2">require</code>. Only the exported variables are placed in the attached frame. Loading a package that imports variables from other packages will cause these other packages to be loaded as well (unless they have already been loaded), but they will <em>not</em> be placed on the search path by these implicit loads. Thus code in the package can only depend on objects in its own namespace and its imports (including the <strong>base</strong> namespace) being visible<a href="R-exts_split_014.html#FOOT58" id="DOCF58"><sup>58</sup></a>.</p>
<p>Namespaces are <em>sealed</em> once they are loaded. Sealing means that imports and exports cannot be changed and that internal variable bindings cannot be changed. Sealing allows a simpler implementation strategy for the namespace mechanism. Sealing also allows code analysis and compilation tools to accurately identify the definition corresponding to a global variable reference in a function body.</p>
<p>The namespace controls the search strategy for variables used by functions in the package. If not found locally, R searches the package namespace first, then the imports, then the base namespace and then the normal search path.</p>
<hr />
<p><a href="" id="Specifying-imports-and-exports"></a> <a href="" id="Specifying-imports-and-exports-1"></a></p>
<h4 id="specifying-imports-and-exports" class="subsection">1.5.1 Specifying imports and exports</h4>
<p>Exports are specified using the <code class="calibre2">export</code> directive in the NAMESPACE file. A directive of the form</p>
<p><a href="" id="index-export"></a></p>
<div class="example">
<pre class="example1"><code>export(f, g)</code></pre>
</div>
<p>specifies that the variables <code class="calibre2">f</code> and <code class="calibre2">g</code> are to be exported. (Note that variable names may be quoted, and reserved words and non-standard names such as <code class="calibre2">[&lt;-.fractions</code> must be.)</p>
<p>For packages with many variables to export it may be more convenient to specify the names to export with a regular expression using <code class="calibre2">exportPattern</code>. The directive</p>
<p><a href="" id="index-exportPattern"></a></p>
<div class="example">
<pre class="example1"><code>exportPattern(&quot;^[^\\.]&quot;)</code></pre>
</div>
<p>exports all variables that do not start with a period. However, such broad patterns are not recommended for production code: it is better to list all exports or use narrowly-defined groups. (This pattern applies to S4 classes.) Beware of patterns which include names starting with a period: some of these are internal-only variables and should never be exported, e.g. ‘.__S3MethodsTable__.’ (and the code nowadays excludes known cases).</p>
<p>Packages implicitly import the base namespace. Variables exported from other packages with namespaces need to be imported explicitly using the directives <code class="calibre2">import</code> and <code class="calibre2">importFrom</code>. The <code class="calibre2">import</code> directive imports all exported variables from the specified package(s). Thus the directives</p>
<p><a href="" id="index-import"></a></p>
<div class="example">
<pre class="example1"><code>import(foo, bar)</code></pre>
</div>
<p>specifies that all exported variables in the packages <strong>foo</strong> and <strong>bar</strong> are to be imported. If only some of the exported variables from a package are needed, then they can be imported using <code class="calibre2">importFrom</code>. The directive</p>
<p><a href="" id="index-importFrom"></a></p>
<div class="example">
<pre class="example1"><code>importFrom(foo, f, g)</code></pre>
</div>
<p>specifies that the exported variables <code class="calibre2">f</code> and <code class="calibre2">g</code> of the package <strong>foo</strong> are to be imported. Using <code class="calibre2">importFrom</code> selectively rather than <code class="calibre2">import</code> is good practice and recommended notably when importing from packages with more than a dozen exports.</p>
<p>To import every symbol from a package but for a few exceptions, pass the <code class="calibre2">except</code> argument to <code class="calibre2">import</code>. The directive</p>
<div class="example">
<pre class="example1"><code>import(foo, except=c(bar, baz))</code></pre>
</div>
<p>imports every symbol from <strong>foo</strong> except <code class="calibre2">bar</code> and <code class="calibre2">baz</code>. The value of <code class="calibre2">except</code> should evaluate to something coercible to a character vector, after substituting each symbol for its corresponding string.</p>
<p>It is possible to export variables from a namespace which it has imported from other namespaces: this has to be done explicitly and not <em>via</em> <code class="calibre2">exportPattern</code>.</p>
<p>If a package only needs a few objects from another package it can use a fully qualified variable reference in the code instead of a formal import. A fully qualified reference to the function <code class="calibre2">f</code> in package <strong>foo</strong> is of the form <code class="calibre2">foo::f</code>. This is slightly less efficient than a formal import and also loses the advantage of recording all dependencies in the NAMESPACE file (but they still need to be recorded in the DESCRIPTION file). Evaluating <code class="calibre2">foo::f</code> will cause package <strong>foo</strong> to be loaded, but not attached, if it was not loaded already—this can be an advantage in delaying the loading of a rarely used package.</p>
<p>Using <code class="calibre2">foo:::f</code> instead of <code class="calibre2">foo::f</code> allows access to unexported objects. This is generally not recommended, as the semantics of unexported objects may be changed by the package author in routine maintenance.</p>
<hr />
<p><a href="" id="Registering-S3-methods"></a> <a href="" id="Registering-S3-methods-1"></a></p>
<h4 id="registering-s3-methods" class="subsection">1.5.2 Registering S3 methods</h4>
<p>The standard method for S3-style <code class="calibre2">UseMethod</code> dispatching might fail to locate methods defined in a package that is imported but not attached to the search path. To ensure that these methods are available the packages defining the methods should ensure that the generics are imported and register the methods using <code class="calibre2">S3method</code> directives. If a package defines a function <code class="calibre2">print.foo</code> intended to be used as a <code class="calibre2">print</code> method for class <code class="calibre2">foo</code>, then the directive</p>
<p><a href="" id="index-S3method"></a></p>
<div class="example">
<pre class="example1"><code>S3method(print, foo)</code></pre>
</div>
<p>ensures that the method is registered and available for <code class="calibre2">UseMethod</code> dispatch, and the function <code class="calibre2">print.foo</code> does not need to be exported. Since the generic <code class="calibre2">print</code> is defined in <strong>base</strong> it does not need to be imported explicitly.</p>
<p>(Note that function and class names may be quoted, and reserved words and non-standard names such as <code class="calibre2">[&lt;-</code> and <code class="calibre2">function</code> must be.)</p>
<p>It is possible to specify a third argument to S3method, the function to be used as the method, for example</p>
<div class="example">
<pre class="example1"><code>S3method(print, check_so_symbols, .print.via.format)</code></pre>
</div>
<p>when <code class="calibre2">print.check_so_symbols</code> is not needed.</p>
<hr />
<p><a href="" id="Load-hooks"></a> <a href="" id="Load-hooks-1"></a></p>
<h4 id="load-hooks" class="subsection">1.5.3 Load hooks</h4>
<p><a href="" id="index-_002eonLoad"></a> <a href="" id="index-_002eonAttach"></a></p>
<p>There are a number of hooks called as packages are loaded, attached, detached, and unloaded. See <code class="calibre2">help(&quot;.onLoad&quot;)</code> for more details.</p>
<p>Since loading and attaching are distinct operations, separate hooks are provided for each. These hook functions are called <code class="calibre2">.onLoad</code> and <code class="calibre2">.onAttach</code>. They both take arguments<a href="R-exts_split_014.html#FOOT59" id="DOCF59"><sup>59</sup></a> <code class="calibre2">libname</code> and <code class="calibre2">pkgname</code>; they should be defined in the namespace but not exported.</p>
<p><a href="" id="index-_002eonUnload"></a> <a href="" id="index-_002eonDetach"></a> <a href="" id="index-_002eLast_002elib"></a></p>
<p>Packages can use a <code class="calibre2">.onDetach</code> or <code class="calibre2">.Last.lib</code> function (provided the latter is exported from the namespace) when <code class="calibre2">detach</code> is called on the package. It is called with a single argument, the full path to the installed package. There is also a hook <code class="calibre2">.onUnload</code> which is called when the namespace is unloaded (<em>via</em> a call to <code class="calibre2">unloadNamespace</code>, perhaps called by <code class="calibre2">detach(unload = TRUE)</code>) with argument the full path to the installed package’s directory. <code class="calibre2">.onUnload</code> and <code class="calibre2">.onDetach</code> should be defined in the namespace and not exported, but <code class="calibre2">.Last.lib</code> does need to be exported.</p>
<p>Packages are not likely to need <code class="calibre2">.onAttach</code> (except perhaps for a start-up banner); code to set options and load shared objects should be placed in a <code class="calibre2">.onLoad</code> function, or use made of the <code class="calibre2">useDynLib</code> directive described next.</p>
<p>User-level hooks are also available: see the help on function <code class="calibre2">setHook</code>.</p>
<p>These hooks are often used incorrectly. People forget to export <code class="calibre2">.Last.lib</code>. Compiled code should be loaded in <code class="calibre2">.onLoad</code> (or <em>via</em> a <code class="calibre2">useDynLb</code> directive: see below) and unloaded in <code class="calibre2">.onUnload</code>. Do remember that a package’s namespace can be loaded without the namespace being attached (e.g. by <code class="calibre2">pkgname::fun</code>) and that a package can be detached and re-attached whilst its namespace remains loaded.</p>
<hr />
<p><a href="" id="useDynLib"></a> <a href="" id="useDynLib-1"></a></p>
<h4 id="usedynlib" class="subsection">1.5.4 useDynLib</h4>
<p>A NAMESPACE file can contain one or more <code class="calibre2">useDynLib</code> directives which allows shared objects that need to be loaded.<a href="R-exts_split_014.html#FOOT60" id="DOCF60"><sup>60</sup></a> The directive</p>
<p><a href="" id="index-useDynLib"></a></p>
<div class="example">
<pre class="example1"><code>useDynLib(foo)</code></pre>
</div>
<p>registers the shared object <code class="calibre2">foo</code><a href="R-exts_split_014.html#FOOT61" id="DOCF61"><sup>61</sup></a> for loading with <code class="calibre2">library.dynam</code>. Loading of registered object(s) occurs after the package code has been loaded and before running the load hook function. Packages that would only need a load hook function to load a shared object can use the <code class="calibre2">useDynLib</code> directive instead.</p>
<p>The <code class="calibre2">useDynLib</code> directive also accepts the names of the native routines that are to be used in R <em>via</em> the <code class="calibre2">.C</code>, <code class="calibre2">.Call</code>, <code class="calibre2">.Fortran</code> and <code class="calibre2">.External</code> interface functions. These are given as additional arguments to the directive, for example,</p>
<div class="example">
<pre class="example1"><code>useDynLib(foo, myRoutine, myOtherRoutine)</code></pre>
</div>
<p>By specifying these names in the <code class="calibre2">useDynLib</code> directive, the native symbols are resolved when the package is loaded and R variables identifying these symbols are added to the package’s namespace with these names. These can be used in the <code class="calibre2">.C</code>, <code class="calibre2">.Call</code>, <code class="calibre2">.Fortran</code> and <code class="calibre2">.External</code> calls in place of the name of the routine and the <code class="calibre2">PACKAGE</code> argument. For instance, we can call the routine <code class="calibre2">myRoutine</code> from R with the code</p>
<div class="example">
<pre class="example1"><code> .Call(myRoutine, x, y)</code></pre>
</div>
<p>rather than</p>
<div class="example">
<pre class="example1"><code> .Call(&quot;myRoutine&quot;, x, y, PACKAGE = &quot;foo&quot;)</code></pre>
</div>
<p>There are at least two benefits to this approach. Firstly, the symbol lookup is done just once for each symbol rather than each time the routine is invoked. Secondly, this removes any ambiguity in resolving symbols that might be present in several compiled DLLs. However, this approach is nowadays deprecated in favour of supplying registration information (see below).</p>
<p>In some circumstances, there will already be an R variable in the package with the same name as a native symbol. For example, we may have an R function in the package named <code class="calibre2">myRoutine</code>. In this case, it is necessary to map the native symbol to a different R variable name. This can be done in the <code class="calibre2">useDynLib</code> directive by using named arguments. For instance, to map the native symbol name <code class="calibre2">myRoutine</code> to the R variable <code class="calibre2">myRoutine_sym</code>, we would use</p>
<div class="example">
<pre class="example1"><code>useDynLib(foo, myRoutine_sym = myRoutine, myOtherRoutine)</code></pre>
</div>
<p>We could then call that routine from R using the command</p>
<div class="example">
<pre class="example1"><code> .Call(myRoutine_sym, x, y)</code></pre>
</div>
<p>Symbols without explicit names are assigned to the R variable with that name.</p>
<p>In some cases, it may be preferable not to create R variables in the package’s namespace that identify the native routines. It may be too costly to compute these for many routines when the package is loaded if many of these routines are not likely to be used. In this case, one can still perform the symbol resolution correctly using the DLL, but do this each time the routine is called. Given a reference to the DLL as an R variable, say <code class="calibre2">dll</code>, we can call the routine <code class="calibre2">myRoutine</code> using the expression</p>
<div class="example">
<pre class="example1"><code> .Call(dll$myRoutine, x, y)</code></pre>
</div>
<p>The <code class="calibre2">$</code> operator resolves the routine with the given name in the DLL using a call to <code class="calibre2">getNativeSymbol</code>. This is the same computation as above where we resolve the symbol when the package is loaded. The only difference is that this is done each time in the case of <code class="calibre2">dll$myRoutine</code>.</p>
<p>In order to use this dynamic approach (e.g., <code class="calibre2">dll$myRoutine</code>), one needs the reference to the DLL as an R variable in the package. The DLL can be assigned to a variable by using the <code class="calibre2">variable = dllName</code> format used above for mapping symbols to R variables. For example, if we wanted to assign the DLL reference for the DLL <code class="calibre2">foo</code> in the example above to the variable <code class="calibre2">myDLL</code>, we would use the following directive in the NAMESPACE file:</p>
<div class="example">
<pre class="example1"><code>myDLL = useDynLib(foo, myRoutine_sym = myRoutine, myOtherRoutine)</code></pre>
</div>
<p>Then, the R variable <code class="calibre2">myDLL</code> is in the package’s namespace and available for calls such as <code class="calibre2">myDLL$dynRoutine</code> to access routines that are not explicitly resolved at load time.</p>
<p>If the package has registration information (see <a href="R-exts_split_009.html#Registering-native-routines">Registering native routines</a>), then we can use that directly rather than specifying the list of symbols again in the <code class="calibre2">useDynLib</code> directive in the NAMESPACE file. Each routine in the registration information is specified by giving a name by which the routine is to be specified along with the address of the routine and any information about the number and type of the parameters. Using the <code class="calibre2">.registration</code> argument of <code class="calibre2">useDynLib</code>, we can instruct the namespace mechanism to create R variables for these symbols. For example, suppose we have the following registration information for a DLL named <code class="calibre2">myDLL</code>:</p>
<div class="example">
<pre class="example1"><code>static R_NativePrimitiveArgType foo_t[] = {
    REALSXP, INTSXP, STRSXP, LGLSXP
};

static const R_CMethodDef cMethods[] = {
   {&quot;foo&quot;, (DL_FUNC) &amp;foo, 4, foo_t},
   {&quot;bar_sym&quot;, (DL_FUNC) &amp;bar, 0},
   {NULL, NULL, 0, NULL}
};

static const R_CallMethodDef callMethods[] = {
   {&quot;R_call_sym&quot;, (DL_FUNC) &amp;R_call, 4},
   {&quot;R_version_sym&quot;, (DL_FUNC) &amp;R_version, 0},
   {NULL, NULL, 0}
};</code></pre>
</div>
<p>Then, the directive in the NAMESPACE file</p>
<div class="example">
<pre class="example1"><code>useDynLib(myDLL, .registration = TRUE)</code></pre>
</div>
<p>causes the DLL to be loaded and also for the R variables <code class="calibre2">foo</code>, <code class="calibre2">bar_sym</code>, <code class="calibre2">R_call_sym</code> and <code class="calibre2">R_version_sym</code> to be defined in the package’s namespace.</p>
<p>Note that the names for the R variables are taken from the entry in the registration information and do not need to be the same as the name of the native routine. This allows the creator of the registration information to map the native symbols to non-conflicting variable names in R, e.g. <code class="calibre2">R_version</code> to <code class="calibre2">R_version_sym</code> for use in an R function such as</p>
<div class="example">
<pre class="example1"><code>R_version &lt;- function()
{
  .Call(R_version_sym)
}</code></pre>
</div>
<p>Using argument <code class="calibre2">.fixes</code> allows an automatic prefix to be added to the registered symbols, which can be useful when working with an existing package. For example, package <a href="https://CRAN.R-project.org/package=KernSmooth"><strong>KernSmooth</strong></a> has</p>
<div class="example">
<pre class="example1"><code>useDynLib(KernSmooth, .registration = TRUE, .fixes = &quot;F_&quot;)</code></pre>
</div>
<p>which makes the R variables corresponding to the FORTRAN symbols <code class="calibre2">F_bkde</code> and so on, and so avoid clashes with R code in the namespace.</p>
<p><strong>NB</strong>: Using these arguments for a package which does not register native symbols merely slows down the package loading (although at the time of writing 90 CRAN packages did so). Once symbols are registered, check that the corresponding R variables are not accidentally exported by a pattern in the NAMESPACE file.</p>
<hr />
<p><a href="" id="An-example"></a> <a href="" id="An-example-1"></a></p>
<h4 id="an-example" class="subsection">1.5.5 An example</h4>
<p>As an example consider two packages named <strong>foo</strong> and <strong>bar</strong>. The R code for package <strong>foo</strong> in file foo.R is</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>x &lt;- 1
f &lt;- function(y) c(x,y)
foo &lt;- function(x) .Call(&quot;foo&quot;, x, PACKAGE=&quot;foo&quot;)
print.foo &lt;- function(x, ...) cat(&quot;&lt;a foo&gt;\n&quot;)</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>Some C code defines a C function compiled into DLL <code class="calibre2">foo</code> (with an appropriate extension). The NAMESPACE file for this package is</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>useDynLib(foo)
export(f, foo)
S3method(print, foo)</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>The second package <strong>bar</strong> has code file bar.R</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>c &lt;- function(...) sum(...)
g &lt;- function(y) f(c(y, 7))
h &lt;- function(y) y+9</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>and NAMESPACE file</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>import(foo)
export(g, h)</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>Calling <code class="calibre2">library(bar)</code> loads <strong>bar</strong> and attaches its exports to the search path. Package <strong>foo</strong> is also loaded but not attached to the search path. A call to <code class="calibre2">g</code> produces</p>
<div class="example">
<pre class="example1"><code>&gt; g(6)
[1]  1 13</code></pre>
</div>
<p>This is consistent with the definitions of <code class="calibre2">c</code> in the two settings: in <strong>bar</strong> the function <code class="calibre2">c</code> is defined to be equivalent to <code class="calibre2">sum</code>, but in <strong>foo</strong> the variable <code class="calibre2">c</code> refers to the standard function <code class="calibre2">c</code> in <strong>base</strong>.</p>
<hr />
<p><a href="" id="Namespaces-with-S4-classes-and-methods"></a> <a href="" id="Namespaces-with-S4-classes-and-methods-1"></a></p>
<h4 id="namespaces-with-s4-classes-and-methods" class="subsection">1.5.6 Namespaces with S4 classes and methods</h4>
<p>Some additional steps are needed for packages which make use of formal (S4-style) classes and methods (unless these are purely used internally). The package should have <code class="calibre2">Depends: methods</code> in its DESCRIPTION file<a href="R-exts_split_014.html#FOOT62" id="DOCF62"><sup>62</sup></a> and <code class="calibre2">import(methods)</code> or <code class="calibre2">importFrom(methods, ...)</code> plus any classes and methods which are to be exported need to be declared in the NAMESPACE file. For example, the <strong>stats4</strong> package has</p>
<p><a href="" id="index-exportClasses"></a> <a href="" id="index-exportMethods"></a></p>
<div class="example">
<pre class="example1"><code>export(mle) # exporting methods implicitly exports the generic
importFrom(&quot;graphics&quot;, plot)
importFrom(&quot;stats&quot;, optim, qchisq)
## For these, we define methods or (AIC, BIC, nobs) an implicit generic:
importFrom(&quot;stats&quot;, AIC, BIC, coef, confint, logLik, nobs, profile,
           update, vcov)
exportClasses(mle, profile.mle, summary.mle)
## All methods for imported generics:
exportMethods(coef, confint, logLik, plot, profile, summary,
              show, update, vcov)
## implicit generics which do not have any methods here
export(AIC, BIC, nobs)</code></pre>
</div>
<p><a href="" id="index-exportPattern-1"></a> <a href="" id="index-exportClassPattern"></a></p>
<p>All S4 classes to be used outside the package need to be listed in an <code class="calibre2">exportClasses</code> directive. Alternatively, they can be specified using <code class="calibre2">exportClassPattern</code><a href="R-exts_split_014.html#FOOT63" id="DOCF63"><sup>63</sup></a> in the same style as for <code class="calibre2">exportPattern</code>. To export methods for generics from other packages an <code class="calibre2">exportMethods</code> directive can be used.</p>
<p>Note that exporting methods on a generic in the namespace will also export the generic, and exporting a generic in the namespace will also export its methods. If the generic function is not local to this package, either because it was imported as a generic function or because the non-generic version has been made generic solely to add S4 methods to it (as for functions such as <code class="calibre2">plot</code> in the example above), it can be declared <em>via</em> either or both of <code class="calibre2">export</code> or <code class="calibre2">exportMethods</code>, but the latter is clearer (and is used in the <strong>stats4</strong> example above). In particular, for primitive functions there is no generic function, so <code class="calibre2">export</code> would export the primitive, which makes no sense. On the other hand, if the generic is local to this package, it is more natural to export the function itself using <code class="calibre2">export()</code>, and this <em>must</em> be done if an implicit generic is created without setting any methods for it (as is the case for <code class="calibre2">AIC</code> in <strong>stats4</strong>).</p>
<p>A non-local generic function is only exported to ensure that calls to the function will dispatch the methods from this package (and that is not done or required when the methods are for primitive functions). For this reason, you do not need to document such implicitly created generic functions, and <code class="calibre2">undoc</code> in package <strong>tools</strong> will not report them.</p>
<p>If a package uses S4 classes and methods exported from another package, but does not import the entire namespace of the other package<a href="R-exts_split_014.html#FOOT64" id="DOCF64"><sup>64</sup></a>, it needs to import the classes and methods explicitly, with directives</p>
<p><a href="" id="index-importClassesFrom"></a> <a href="" id="index-importMethodsFrom"></a></p>
<div class="example">
<pre class="example1"><code>importClassesFrom(package, ...)
importMethodsFrom(package, ...)</code></pre>
</div>
<p>listing the classes and functions with methods respectively. Suppose we had two small packages <strong>A</strong> and <strong>B</strong> with <strong>B</strong> using <strong>A</strong>. Then they could have <code class="calibre2">NAMESPACE</code> files</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>export(f1, ng1)
exportMethods(&quot;[&quot;)
exportClasses(c1)</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>and</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>importFrom(A, ng1)
importClassesFrom(A, c1)
importMethodsFrom(A, f1)
export(f4, f5)
exportMethods(f6, &quot;[&quot;)
exportClasses(c1, c2)</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>respectively.</p>
<p>Note that <code class="calibre2">importMethodsFrom</code> will also import any generics defined in the namespace on those methods.</p>
<p>It is important if you export S4 methods that the corresponding generics are available. You may for example need to import <code class="calibre2">plot</code> from <strong>graphics</strong> to make visible a function to be converted into its implicit generic. But it is better practice to make use of the generics exported by <strong>stats4</strong> as this enables multiple packages to unambiguously set methods on those generics.</p>
<hr />
<p><a href="" id="Writing-portable-packages"></a> <a href="" id="Writing-portable-packages-1"></a></p>
<h3 id="writing-portable-packages" class="section">1.6 Writing portable packages</h3>
<p>This section contains advice on writing packages to be used on multiple platforms or for distribution (for example to be submitted to a package repository such as CRAN).</p>
<p>Portable packages should have simple file names: use only alphanumeric ASCII characters and period (<code class="calibre2">.</code>), and avoid those names not allowed under Windows which are mentioned above.</p>
<p>Many of the graphics devices are platform-specific: even <code class="calibre2">X11()</code> (aka <code class="calibre2">x11()</code>) which although emulated on Windows may not be available on a Unix-alike (and is not the preferred screen device on OS X). It is rarely necessary for package code or examples to open a new device, but if essential,<a href="R-exts_split_014.html#FOOT65" id="DOCF65"><sup>65</sup></a> use <code class="calibre2">dev.new()</code>.</p>
<p>Use <code class="calibre2">R CMD build</code> to make the release .tar.gz file.</p>
<p><code class="calibre2">R CMD check</code> provides a basic set of checks, but often further problems emerge when people try to install and use packages submitted to CRAN – many of these involve compiled code. Here are some further checks that you can do to make your package more portable.</p>
<ul>
<li>If your package has a configure script, provide a configure.win script to be used on Windows (an empty file if no actions are needed).</li>
<li><p>If your package has a Makevars or Makefile file, make sure that you use only portable make features. Such files should be LF-terminated<a href="R-exts_split_014.html#FOOT66" id="DOCF66"><sup>66</sup></a> (including the final line of the file) and not make use of GNU extensions. (The POSIX specification is available at <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html" class="uri">http://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html</a>; anything not documented there should be regarded as an extension to be avoided.) Commonly misused GNU extensions are conditional inclusions (<code class="calibre2">ifeq</code> and the like), <code class="calibre2">${shell ...}</code>, <code class="calibre2">${wildcard ...}</code> and similar, and the use of <code class="calibre2">+=</code><a href="R-exts_split_014.html#FOOT67" id="DOCF67"><sup>67</sup></a> and <code class="calibre2">:=</code>. Also, the use of <code class="calibre2">$&lt;</code> other than in implicit rules is a GNU extension, as is the <code class="calibre2">$^</code> macro. Unfortunately makefiles which use GNU extensions often run on other platforms but do not have the intended results.</p>
<p>The use of <code class="calibre2">${shell ...}</code> can be avoided by using backticks, e.g.</p>
<div class="example">
<pre class="example1"><code>PKG_CPPFLAGS = `gsl-config --cflags`</code></pre>
</div>
<p>which works in all versions of <code class="calibre2">make</code> known<a href="R-exts_split_014.html#FOOT68" id="DOCF68"><sup>68</sup></a> to be used with R.</p>
<p>If you really must require GNU make, declare it in the DESCRIPTION file by</p>
<div class="example">
<pre class="example1"><code>SystemRequirements: GNU make</code></pre>
</div>
<p>and ensure that you use the value of environment variable <code class="calibre2">MAKE</code> (and not just <code class="calibre2">make</code>) in your scripts. (On some platforms GNU make is available under a name such as <code class="calibre2">gmake</code>, and there <code class="calibre2">SystemRequirements</code> is used to set <code class="calibre2">MAKE</code>.)</p>
<p>If you only need GNU make for parts of the package which are rarely needed (for example to create bibliography files under vignettes), use a file called GNUmakefile rather than Makefile as GNU make (only) will use the former.</p>
<p>Since the only viable make for Windows is GNU make, it is permissible to use GNU extensions in files Makevars.win or Makefile.win.</p></li>
<li><p>Bash extensions also need to be avoided in shell scripts, including expressions in Makefiles (which are passed to the shell for processing). Some R platforms use strict<a href="R-exts_split_014.html#FOOT69" id="DOCF69"><sup>69</sup></a> Bourne shells: the R toolset on Windows and some Unix-alike OSes use <code class="calibre2">ash</code> (<a href="https://en.wikipedia.org/wiki/Almquist_shell" class="uri">https://en.wikipedia.org/wiki/Almquist_shell</a>), a rather minimal shell with few builtins. Beware of assuming that all the POSIX command-line utilities are available, especially on Windows where only a minimal set is provided for use with R. One particular issue is the use of <code class="calibre2">echo</code>, for which two behaviours are allowed (<a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/echo.html" class="uri">http://pubs.opengroup.org/onlinepubs/9699919799/utilities/echo.html</a>) and both occur as defaults on R platforms: portable applications should not use -n (as the first argument) nor escape sequences. Another common issue is the construction</p>
<div class="example">
<pre class="example1"><code>export FOO=value</code></pre>
</div>
<p>which is bash-specific (first set the variable then export it by name).</p></li>
<li><p>Make use of the abilities of your compilers to check the standards-conformance of your code. For example, <code class="calibre2">gcc</code> and <code class="calibre2">gfortran</code><a href="R-exts_split_014.html#FOOT70" id="DOCF70"><sup>70</sup></a> can be used with options -Wall -pedantic to alert you to potential problems. This is particularly important for C++, where <code class="calibre2">g++ -Wall -pedantic</code> will alert you to the use of some of the GNU extensions which fail to compile on most other C++ compilers. If R was not configured accordingly, one can achieve this <em>via</em> personal Makevars files.</p>
<p>Portable C++ code needs to follow the 1998 standard (and not use features from C99), or to specify a C++11 compiler (see <a href="R-exts_split_004.html#Using-C_002b_002b11-code">Using C++11 code</a>) where available (which is not the case on all R platforms).</p>
<p>If you use FORTRAN 77, <code class="calibre2">ftnchek</code> (<a href="http://www.dsm.fordham.edu/~ftnchek/" class="uri">http://www.dsm.fordham.edu/~ftnchek/</a>) provides thorough testing of conformance to the standard.</p>
<p>If using Fortran 9x with the GNU compiler, use the flags -std=f95 -Wall -pedantic which reject most GNU extensions and features from later standards.</p>
<p>R has tested that <code class="calibre2">DOUBLE COMPLEX</code> works (although an extension to the Fortran standards) and so is preferred to <code class="calibre2">COMPLEX*16</code>. (Fortran 9x code can use something like <code class="calibre2">COMPLEX(KIND=KIND(0.0D0))</code><a href="R-exts_split_014.html#FOOT71" id="DOCF71"><sup>71</sup></a>.)</p>
<p>Not all common R platforms conform to the expected standards, e.g. C99 for C code. One common area of problems is the <code class="calibre2">*printf</code> functions where Windows does not support <code class="calibre2">%lld</code>, <code class="calibre2">%Lf</code> and similar formats (and has its own formats such as <code class="calibre2">%I64d</code> for 64-bit integers). It is very rare to need to output such types, and 64-bit integers can usually be converted to doubles for output.</p></li>
<li><p><code class="calibre2">R CMD check</code> performs some checks for non-portable compiler/linker flags in src/Makevars. However, it cannot check the meaning of such flags, and some are commonly accepted but with compiler-specific meanings. There are other non-portable flags which are not checked, nor are src/Makefile files and makefiles in sub-directories. As a comment in the code says</p>
<blockquote>
<p>It is hard to think of anything apart from -I* and -D* that is safe for general use …</p>
</blockquote>
<p>although -pthread is pretty close to portable. (Option -U is portable but little use on the command line as it will only cancel built-in defines (not portable) and those defined earlier on the command line (R does not use any).)</p></li>
<li><p>Do be very careful with passing arguments between R, C and FORTRAN code. In particular, <code class="calibre2">long</code> in C will be 32-bit on some R platforms (including 64-bit Windows), but 64-bit on most modern Unix and Linux platforms. It is rather unlikely that the use of <code class="calibre2">long</code> in C code has been thought through: if you need a longer type than <code class="calibre2">int</code> you should use a configure test for a C99/C++11 type such as <code class="calibre2">int_fast64_t</code> (and failing that, <code class="calibre2">long long</code> <a href="R-exts_split_014.html#FOOT72" id="DOCF72"><sup>72</sup></a>) and typedef your own type to be <code class="calibre2">long</code> or <code class="calibre2">long long</code>, or use another suitable type (such as <code class="calibre2">size_t</code>).</p>
<p>It is not safe to assume that <code class="calibre2">long</code> and pointer types are the same size, and they are not on 64-bit Windows. If you need to convert pointers to and from integers use the C99/C++11 integer types <code class="calibre2">intptr_t</code> and <code class="calibre2">uintptr_t</code> (which are defined in the header <code class="calibre2">&lt;stdint.h&gt;</code> and are not required to be implemented by the C99 standard but are used in C code by R itself).</p>
<p>Note that <code class="calibre2">integer</code> in FORTRAN corresponds to <code class="calibre2">int</code> in C on all R platforms.</p></li>
<li><p>Under no circumstances should your compiled code ever call <code class="calibre2">abort</code> or <code class="calibre2">exit</code><a href="R-exts_split_014.html#FOOT73" id="DOCF73"><sup>73</sup></a>: these terminate the user’s R process, quite possibly including all his unsaved work. One usage that could call <code class="calibre2">abort</code> is the <code class="calibre2">assert</code> macro in C or C++ functions, which should never be active in production code. The normal way to ensure that is to define the macro <code class="calibre2">NDEBUG</code>, and <code class="calibre2">R CMD INSTALL</code> does so as part of the compilation flags. If you wish to use <code class="calibre2">assert</code> during development. you can include <code class="calibre2">-UNDEBUG</code> in <code class="calibre2">PKG_CPPFLAGS</code>. Note that your own src/Makefile or makefiles in sub-directories may also need to define <code class="calibre2">NDEBUG</code>.</p>
<p>This applies not only to your own code but to any external software you compile in or link to.</p></li>
<li>Compiled code should not write to stdout or stderr and C++ and Fortran I/O should not be used. As with the previous item such calls may come from external software and may never be called, but package authors are often mistaken about that.</li>
<li><p>Compiled code should not call the system random number generators such as <code class="calibre2">rand</code>, <code class="calibre2">drand48</code> and <code class="calibre2">random</code><a href="R-exts_split_014.html#FOOT74" id="DOCF74"><sup>74</sup></a>, but rather use the interfaces to R’s RNGs described in <a href="R-exts_split_010.html#Random-numbers">Random numbers</a>. In particular, if more than one package initializes the system RNG (e.g. <em>via</em> <code class="calibre2">srand</code>), they will interfere with each other.</p>
<p>Nor should the C++11 random number library be used.</p></li>
<li>Errors in memory allocation and reading/writing outside arrays are very common causes of crashes (e.g., segfaults) on some machines. See <a href="R-exts_split_008.html#Checking-memory-access">Checking memory access</a> for tools which can be used to look for this.</li>
<li><p>Many platforms will allow unsatisfied entry points in compiled code, but will crash the application (here R) if they are ever used. Some (notably Windows) will not. Looking at the output of</p>
<div class="example">
<pre class="example1"><code>nm -pg mypkg.so</code></pre>
</div>
<p>and checking if any of the symbols marked <code class="calibre2">U</code> is unexpected is a good way to avoid this.</p></li>
<li>Linkers have a lot of freedom in how to resolve entry points in dynamically-loaded code, so the results may differ by platform. One area that has caused grief is packages including copies of standard system software such as <code class="calibre2">libz</code> (especially those already linked into R). In the case in point, entry point <code class="calibre2">gzgets</code> was sometimes resolved against the old version compiled into the package, sometimes against the copy compiled into R and sometimes against the system dynamic library. The only safe solution is to rename the entry points in the copy in the package. We have even seen problems with entry point name <code class="calibre2">myprintf</code>, which is a system entry point<a href="R-exts_split_014.html#FOOT75" id="DOCF75"><sup>75</sup></a> on some Linux systems.</li>
<li>Conflicts between symbols in DLLs are handled in very platform-specific ways. Good ways to avoid trouble are to make as many symbols as possible static (check with <code class="calibre2">nm -pg</code>), and to use names which are clearly tied to your package (which also helps users if anything does go wrong). Note that symbol names starting with <code class="calibre2">R_</code> are regarded as part of R’s namespace and should not be used in packages.</li>
<li>It is good practice for DLLs to register their symbols (see <a href="R-exts_split_009.html#Registering-native-routines">Registering native routines</a>), restrict visibility (see <a href="R-exts_split_010.html#Controlling-visibility">Controlling visibility</a>) and not allow symbol search (see <a href="R-exts_split_009.html#Registering-native-routines">Registering native routines</a>). It should be possible for a DLL to have only one visible symbol, <code class="calibre2">R_init_pkgname</code>, on suitable platforms<a href="R-exts_split_014.html#FOOT76" id="DOCF76"><sup>76</sup></a>, which would completely avoid symbol conflicts.</li>
<li>It is not portable to call compiled code in R or other packages <em>via</em> <code class="calibre2">.Internal</code>, <code class="calibre2">.C</code>, <code class="calibre2">.Fortran</code>, <code class="calibre2">.Call</code> or <code class="calibre2">.External</code>, since such interfaces are subject to change without notice and will probably result in your code terminating the R process.</li>
<li>Do not use (hard or symbolic) file links in your package sources. Where possible <code class="calibre2">R CMD build</code> will replace them by copies.</li>
<li>If you do not yourself have a Windows system, consider submitting your source package to WinBuilder (<a href="https://win-builder.r-project.org/" class="uri">https://win-builder.r-project.org/</a>) before distribution.</li>
<li>It is bad practice for package code to alter the search path using <code class="calibre2">library</code>, <code class="calibre2">require</code> or <code class="calibre2">attach</code> and this often does not work as intended. For alternatives, see <a href="R-exts_split_004.html#Suggested-packages">Suggested packages</a> and <code class="calibre2">with</code>.</li>
<li>Examples can be run interactively <em>via</em> <code class="calibre2">example</code> as well as in batch mode when checking. So they should behave appropriately in both scenarios, conditioning by <code class="calibre2">interactive()</code> the parts which need an operator or observer. For instance, progress bars<a href="R-exts_split_014.html#FOOT77" id="DOCF77"><sup>77</sup></a> are only appropriate in interactive use, as is displaying help pages or calling <code class="calibre2">View()</code> (see below).</li>
<li>Be careful with the order of entries in macros such as <code class="calibre2">PKG_LIBS</code>. Some linkers will re-order the entries, and behaviour can differ between dynamic and static libraries. Generally -L options should precede<a href="R-exts_split_014.html#FOOT78" id="DOCF78"><sup>78</sup></a> the libraries (typically specified by -l options) to be found from those directories, and libraries are searched once in the order they are specified. Not all linkers allow a space after -L .</li>
<li><p>Care is needed with the use of <code class="calibre2">LinkingTo</code>. This puts one or more directories on the include search path ahead of system headers but (prior to R 3.4.0) after those specified in the <code class="calibre2">CPPFLAGS</code> macro of the R build (which normally includes <code class="calibre2">-I/usr/local/include</code>, but most platforms ignore that and include it with the system headers).</p>
<p>Any confusion would be avoided by having <code class="calibre2">LinkingTo</code> headers in a directory named after the package. In any case, name conflicts of headers and directories under package include directories should be avoided, both between packages and between a package and system and third-party software.</p></li>
<li>The <code class="calibre2">ar</code> utility is often used in makefiles to make static libraries. Its modifier <code class="calibre2">u</code> is defined by POSIX but is disabled in GNU <code class="calibre2">ar</code> on some recent Linux distributions which use ‘deterministic mode’. The safest way to make a static library is to first remove any existing file of that name then use <code class="calibre2">ar -cr</code> and then <code class="calibre2">ranlib</code> if needed (which is system-dependent: on most systems<a href="R-exts_split_014.html#FOOT79" id="DOCF79"><sup>79</sup></a> <code class="calibre2">ar</code> always maintains a symbol table). The POSIX standard says options should be preceded by a hyphen (as in -cr), although most OSes accept them without. Note that on some systems <code class="calibre2">ar -cr</code> must have at least one file specified.</li>
<li>Some people have a need to set a locale. Locale names are not portable, and e.g. ‘fr_FR.utf8’ is commonly used on Linux but not accepted on either Solaris or macOS. ‘fr_FR.UTF-8’ is more portable, being accepted on recent Linux, AIX, FreeBSD, macOS and Solaris (at least). However, some Linux distributions micro-package, so locales defined by <strong>glibc</strong> (including these examples) may not be installed.</li>
<li><p>Avoid spaces in file names, not least as they can cause difficulties for external tools. A recent example was a package with a <a href="https://CRAN.R-project.org/package=knitr"><strong>knitr</strong></a> vignette that used spaces in plot names: this caused some versions of <code class="calibre2">pandoc</code> to fail with a baffling error message.</p>
<p>Non-ASCII filenames can also cause problems (particularly in non-UTF-8 locales).</p></li>
<li><p>Make sure that any version requirement for Java code is both declared in the ‘SystemRequirements’ field and tested at runtime (not least as the Java installation when the package is installed might not be the same as when the package is run and will not be for binary packages). Java 8 (aka 1.8) is available for fewer platforms than Java 7. A suitable test for packages using <a href="https://CRAN.R-project.org/package=rJava"><strong>rJava</strong></a> would be</p>
<div class="example">
<pre class="example1"><code>.jinit()
jv &lt;- .jcall(&quot;java/lang/System&quot;, &quot;S&quot;, &quot;getProperty&quot;, &quot;java.runtime.version&quot;)
jvn &lt;- as.numeric(paste0(strsplit(jv, &quot;[.]&quot;)[[1L]][1:2], collapse = &quot;.&quot;))
if(jvn &lt; 1.8) stop(&quot;Java 8 is needed for this package but not available&quot;)</code></pre>
</div>
<p>Some packages have stated a requirement on a particular JDK, but a package should only be requiring a JRE unless providing its own Java interface.</p></li>
<li><p>A package with a hard-to-satisfy system requirement is by definition not portable, annoyingly so if this is not declared in the ‘SystemRequirements’ field. The most common example is the use of <code class="calibre2">pandoc</code>, which is only available for a very limited range of platforms (and has onerous requirements to install from source) and has capabilities<a href="R-exts_split_014.html#FOOT80" id="DOCF80"><sup>80</sup></a> that vary by build but are not documented.</p>
<p>An external command can be an optional requirement for an imported package but needed for examples or tests in the package itself. Such usage should always be conditional on a test for existence (perhaps using <code class="calibre2">Sys.which</code>), as well as declared in the ‘SystemRequirements’ field.</p></li>
<li>Be sure to use portable encoding names: none of <code class="calibre2">utf8</code>, <code class="calibre2">mac</code> and <code class="calibre2">macroman</code> are. See the help for <code class="calibre2">file</code> for more details.</li>
<li><p>Do not invoke R by plain <code class="calibre2">R</code>, <code class="calibre2">Rscript</code> or (on Windows) <code class="calibre2">Rterm</code> in your examples, tests, vignettes, makefiles or other scripts. As pointed out in several places earlier in this manual, use something like</p>
<div class="example">
<pre class="example1"><code>&quot;$(R_HOME)/bin/Rscript&quot;
&quot;$(R_HOME)/bin$(R_ARCH_BIN)/Rterm&quot;</code></pre>
</div>
<p>with appropriate quotes (as, although not recommended, <code class="calibre2">R_HOME</code> can contain spaces).</p></li>
</ul>
<p>Do be careful in what your tests (and examples) actually test. Bad practice seen in distributed packages include:</p>
<ul>
<li>It is not reasonable to test the time taken by a command: you cannot know how fast or how heavily loaded an R platform might be. At best you can test a ratio of times, and even that is fraught with difficulties.</li>
<li><p>Do not test the exact format of R messages (from R itself or from other packages): They change, and they can be translated.</p>
<p>Packages have even tested the exact format of system error messages, which are platform-dependent and perhaps locale-dependent.</p></li>
<li>If you use functions such as <code class="calibre2">View</code>, remember that in testing there is no one to look at the output. It is better to use something like one of
<div class="example">
<pre class="example1"><code>if(interactive()) View(obj) else print(head(obj))
if(interactive()) View(obj) else str(obj)</code></pre>
</div></li>
<li><p>Only test the accuracy of results if you have done a formal error analysis. Things such as checking that probabilities numerically sum to one are silly: numerical tests should always have a tolerance. That the tests on your platform achieve a particular tolerance says little about other platforms. R is configured by default to make use of long doubles where available, but they may not be available or be too slow for routine use. Most R platforms use ‘ix86’ or ‘x86_64’ CPUs: these use extended precision registers on some but not all of their FPU instructions. Thus the achieved precision can depend on the compiler version and optimization flags—our experience is that 32-bit builds tend to be less precise than 64-bit ones. But not all platforms use those CPUs, and not all<a href="R-exts_split_014.html#FOOT81" id="DOCF81"><sup>81</sup></a> which use them configure them to allow the use of extended precision. In particular, ARM CPUs do not (currently) have extended precision nor long doubles, and long double was 64-bit on HP/PA Linux.</p>
<p>If you must try to establish a tolerance empirically, configure and build R with --disable-long-double and use appropriate compiler flags (such as -ffloat-store and -fexcess-precision=standard for <code class="calibre2">gcc</code>, depending on the CPU type<a href="R-exts_split_014.html#FOOT82" id="DOCF82"><sup>82</sup></a>) to mitigate the effects of extended-precision calculations.</p>
<p>Tests which involve random inputs or non-deterministic algorithms should normally set a seed or be tested for many seeds.</p></li>
</ul>
<hr />
<p><a href="" id="PDF-size"></a> <a href="" id="PDF-size-1"></a></p>
<h4 id="pdf-size" class="subsection">1.6.1 PDF size</h4>
<p>There are a several tools available to reduce the size of PDF files: often the size can be reduced substantially with no or minimal loss in quality. Not only do large files take up space: they can stress the PDF viewer and take many minutes to print (if they can be printed at all).</p>
<p><code class="calibre2">qpdf</code> (<a href="http://qpdf.sourceforge.net/" class="uri">http://qpdf.sourceforge.net/</a>) can compress losslessly. It is fairly readily available (e.g. it has binaries for Windows and packages in Debian/Ubuntu/Fedora, and is installed as part of the CRAN macOS distribution of R). <code class="calibre2">R CMD build</code> has an option to run <code class="calibre2">qpdf</code> over PDF files under inst/doc and replace them if at least 10Kb and 10% is saved. The full path to the <code class="calibre2">qpdf</code> command can be supplied as environment variable <code class="calibre2">R_QPDF</code> (and is on the CRAN binary of R for macOS). It seems MiKTeX does not use PDF object compression and so <code class="calibre2">qpdf</code> can reduce considerably the files it outputs: MiKTeX can be overridden by code in the preamble of an Sweave or LaTeX file — see how this is done for the R reference manual at <a href="https://svn.r-project.org/R/trunk/doc/manual/refman.top" class="uri">https://svn.r-project.org/R/trunk/doc/manual/refman.top</a>.</p>
<p>Other tools can reduce the size of PDFs containing bitmap images at excessively high resolution. These are often best re-generated (for example <code class="calibre2">Sweave</code> defaults to 300 ppi, and 100–150 is more appropriate for a package manual). These tools include Adobe Acrobat (not Reader), Apple’s Preview<a href="R-exts_split_014.html#FOOT83" id="DOCF83"><sup>83</sup></a> and Ghostscript (which converts PDF to PDF by</p>
<div class="example">
<pre class="example1"><code>ps2pdf options -dAutoRotatePages=/None in.pdf out.pdf</code></pre>
</div>
<p>and suitable options might be</p>
<div class="example">
<pre class="example1"><code>-dPDFSETTINGS=/ebook
-dPDFSETTINGS=/screen</code></pre>
</div>
<p>; see <a href="http://www.ghostscript.com/doc/current/Ps2pdf.htm" class="uri">http://www.ghostscript.com/doc/current/Ps2pdf.htm</a> for more such and consider all the options for image downsampling). There have been examples in CRAN packages for which Ghostscript 9.06 and later produced much better reductions than 9.05 or earlier.</p>
<p>We come across occasionally large PDF files containing excessively complicated figures using PDF vector graphics: such figures are often best redesigned or failing that, output as PNG files.</p>
<p>Option --compact-vignettes to <code class="calibre2">R CMD build</code> defaults to value ‘qpdf’: use ‘both’ to try harder to reduce the size, provided you have Ghostscript available (see the help for <code class="calibre2">tools::compactPDF</code>).</p>
<hr />
<p><a href="" id="Check-timing"></a> <a href="" id="Check-timing-1"></a></p>
<h4 id="check-timing" class="subsection">1.6.2 Check timing</h4>
<p>There are several ways to find out where time is being spent in the check process. Start by setting the environment variable <code class="calibre2">_R_CHECK_TIMINGS_</code> to ‘0’. This will report the total CPU times (not Windows) and elapsed times for installation and running examples, tests and vignettes, under each sub-architecture if appropriate. For tests and vignettes, it reports the time for each as well as the total.</p>
<p>Setting <code class="calibre2">_R_CHECK_TIMINGS_</code> to a positive value sets a threshold (in seconds elapsed time) for reporting timings.</p>
<p>If you need to look in more detail at the timings for examples, use option --timings to <code class="calibre2">R CMD check</code> (this is set by --as-cran). This adds a summary to the check output for all the examples with CPU or elapsed time of more than 5 seconds. It produces a file mypkg.Rcheck/mypkg-Ex.timings containing timings for each help file: it is a tab-delimited file which can be read into R for further analysis.</p>
<p>Timings for the tests and vignette runs are given at the bottom of the corresponding log file: note that log files for successful vignette runs are only retained if environment variable <code class="calibre2">_R_CHECK_ALWAYS_LOG_VIGNETTE_OUTPUT_</code> is set to a true value.</p>
<hr />
<p><a href="" id="Encoding-issues"></a> <a href="" id="Encoding-issues-1"></a></p>
<h4 id="encoding-issues" class="subsection">1.6.3 Encoding issues</h4>
<p>Care is needed if your package contains non-ASCII text, and in particular if it is intended to be used in more than one locale. It is possible to mark the encoding used in the DESCRIPTION file and in .Rd files, as discussed elsewhere in this manual.</p>
<p>First, consider carefully if you really need non-ASCII text. Many users of R will only be able to view correctly text in their native language group (e.g. Western European, Eastern European, Simplified Chinese) and ASCII.<a href="R-exts_split_014.html#FOOT84" id="DOCF84"><sup>84</sup></a>. Other characters may not be rendered at all, rendered incorrectly, or cause your R code to give an error. For .Rd documentation, marking the encoding and including ASCII transliterations is likely to do a reasonable job. The set of characters which is commonly supported is wider than it used to be around 2000, but non-Latin alphabets (Greek, Russian, Georgian, …) are still often problematic and those with double-width characters (Chinese, Japanese, Korean) often need specialist fonts to render correctly.</p>
<p>Several CRAN packages have messages in their R code in French (and a few in German). A better way to tackle this is to use the internationalization facilities discussed elsewhere in this manual.</p>
<p>Function <code class="calibre2">showNonASCIIfile</code> in package <strong>tools</strong> can help in finding non-ASCII bytes in files.</p>
<p>There is a portable way to have arbitrary text in character strings (only) in your R code, which is to supply them in Unicode as <code class="calibre2">\uxxxx</code> escapes. If there are any characters not in the current encoding the parser will encode the character string as UTF-8 and mark it as such. This applies also to character strings in datasets: they can be prepared using <code class="calibre2">\uxxxx</code> escapes or encoded in UTF-8 in a UTF-8 locale, or even converted to UTF-8 via ‘iconv()’. If you do this, make sure you have ‘R (&gt;= 2.10)’ (or later) in the ‘Depends’ field of the DESCRIPTION file.</p>
<p>R sessions running in non-UTF-8 locales will if possible re-encode such strings for display (and this is done by <code class="calibre2">RGui</code> on Windows, for example). Suitable fonts will need to be selected or made available<a href="R-exts_split_014.html#FOOT85" id="DOCF85"><sup>85</sup></a> both for the console/terminal and graphics devices such as ‘X11()’ and ‘windows()’. Using ‘postscript’ or ‘pdf’ will choose a default 8-bit encoding depending on the language of the UTF-8 locale, and your users would need to be told how to select the ‘encoding’ argument.</p>
<p>If you want to run <code class="calibre2">R CMD check</code> on a Unix-alike over a package that sets a package encoding in its DESCRIPTION file <em>and do not use a UTF-8 locale</em> you may need to specify a suitable locale <em>via</em> environment variable <code class="calibre2">R_ENCODING_LOCALES</code>. The default is equivalent to the value</p>
<div class="example">
<pre class="example1"><code>&quot;latin1=en_US:latin2=pl_PL:UTF-8=en_US.UTF-8:latin9=fr_FR.iso885915@euro&quot;</code></pre>
</div>
<p>(which is appropriate for a system based on <code class="calibre2">glibc</code>: macOS requires <code class="calibre2">latin9=fr_FR.ISO8859-15</code>) except that if the current locale is UTF-8 then the package code is translated to UTF-8 for syntax checking, so it is strongly recommended to check in a UTF-8 locale.</p>
<hr />
<p><a href="" id="Portable-C-and-C_002b_002b-code"></a> <a href="" id="Portable-C-and-C_002b_002b-code-1"></a></p>
<h4 id="portable-c-and-c-code" class="subsection">1.6.4 Portable C and C++ code</h4>
<p>Writing portable C and C++ code is mainly a matter of observing the standards (C99, C++98 or where declared C++11/14) and testing that extensions (such as POSIX functions) are supported.</p>
<p>Note that the ‘TR1’ C++ extensions are not part of any of these standards and the <code class="calibre2">&lt;tr1/name&gt;</code> headers are not supplied by some of the compilers used for R, including on macOS. (Use the C++11 versions instead.)</p>
<p>Note too that the POSIX standards only require recently-defined functions to be declared if certain macros are defined with large enough values, and on some compiler/OS combinations<a href="R-exts_split_014.html#FOOT86" id="DOCF86"><sup>86</sup></a> they are not declared otherwise. So you may need to include something like one of <a href="R-exts_split_014.html#FOOT87" id="DOCF87"><sup>87</sup></a></p>
<div class="example">
<pre class="example1"><code>#define _XOPEN_SOURCE 500</code></pre>
</div>
<p>or</p>
<div class="example">
<pre class="example1"><code>#ifdef __GLIBC__
# define _POSIX_C_SOURCE 200809L
#endif</code></pre>
</div>
<p>before <em>any</em> headers. (<code class="calibre2">strdup</code> and <code class="calibre2">strncasecmp</code> are two such functions.)</p>
<p>However, some common errors are worth pointing out here. It can be helpful to look up functions at <a href="http://www.cplusplus.com/reference/" class="uri">http://www.cplusplus.com/reference/</a> or <a href="http://en.cppreference.com/w/" class="uri">http://en.cppreference.com/w/</a> and compare what is defined in the various standards.</p>
<p>Both the compiler and OS (<em>via</em> system header files, which may differ by architecture even for nominally the same OS) affect the compilability of C/C++ code. Compilers from the GCC, <code class="calibre2">clang</code>, Intel and Oracle Studio suites are routinely used with R, and both <code class="calibre2">clang</code> and Oracle have more than one implementation of C++ headers and library. The range of possibilities makes comprehensive empirical checking impossible, and regrettably compilers are patchy at best on warning about non-standard code.</p>
<ul>
<li><p>Mathematical functions such as <code class="calibre2">sqrt</code> are defined in C++ for floating-point arguments. It is legitimate in C++ to overload these with versions for types <code class="calibre2">float</code>, <code class="calibre2">double</code>, <code class="calibre2">long double</code> and possibly more. This means that calling <code class="calibre2">sqrt</code> on an integer type may have ‘overloading ambiguity’ as it could be promoted to any of the supported floating-point types: this is commonly seen on Solaris, but for <code class="calibre2">pow</code> also seen on macOS. (C++98 has an overload for <code class="calibre2">std::pow(&lt;double&gt;, &lt;int&gt;)</code>, but this may not be visible from the main namespace. C++11 requires additional overloads for integer types, and ambiguous overloads are more common in C++11 (and later) compiler modes.)</p>
<p>A not-uncommonly-seen problem is to mistakenly call <code class="calibre2">floor(x/y)</code> or <code class="calibre2">ceil(x/y)</code> for <code class="calibre2">int</code> arguments <code class="calibre2">x</code> and <code class="calibre2">y</code>. Since <code class="calibre2">x/y</code> does integer division, the result is an <code class="calibre2">int</code> and ‘overloading ambiguity’ may be reported. Some people have (pointlessly) called <code class="calibre2">floor</code> and <code class="calibre2">ceil</code> on integer arguments, which may have an ‘overloading ambiguity’.</p>
<p>A surprising common misuse is things like <code class="calibre2">pow(10, -3)</code>: this should be the constant <code class="calibre2">1e-3</code>.</p></li>
<li>Function <code class="calibre2">fabs</code> is defined only for floating-point types, except in C++11 which has overloads for <code class="calibre2">std::fabs</code> in &lt;cmath&gt; for integer types. Function <code class="calibre2">abs</code> is defined in C99’s &lt;stdlib.h&gt; for <code class="calibre2">int</code> and in C++98’s &lt;cstdlib&gt; for integer types, overloaded in &lt;cmath&gt; for floating-point types. C++11 has additional overloads for <code class="calibre2">std::abs</code> in &lt;cmath&gt; for integer types. The effect of calling <code class="calibre2">abs</code> with a floating-point type is implementation-specific: it may truncate to an integer.</li>
<li><p>Functions/macros such as <code class="calibre2">isnan</code>, <code class="calibre2">isinf</code> and <code class="calibre2">isfinite</code> are not required by C++98: where compilers support them they may be only in the <code class="calibre2">std</code> namespace or only in the main namespace. There is no way to make use of these functions which works with all C++ compilers currently in use on R platforms: use R’s versions such as <code class="calibre2">ISNAN</code> and <code class="calibre2">R_FINITE</code> instead.</p>
<p>If you must use them in C++11, beware that some compilers<a href="R-exts_split_014.html#FOOT88" id="DOCF88"><sup>88</sup></a> provide both <code class="calibre2">std::isnan</code> and <code class="calibre2">::isnan</code>, so using</p>
<div class="example">
<pre class="example1"><code>using namespace std;</code></pre>
</div>
<p>may cause ‘overloading ambiguity’ and you must use <code class="calibre2">std::isnan</code> <em>etc</em> explicitly.</p>
<p>It is an error (and make little sense, although has been seen) to call these functions for integer arguments: a few compilers give a compilation error.</p></li>
<li><p>The GNU C/C++ compilers support a large number of non-portable extensions. For example, <code class="calibre2">INFINITY</code> (which is in C99 but not C++98), for which R provides the portable <code class="calibre2">R_PosInf</code> (and <code class="calibre2">R_NegInf</code> for <code class="calibre2">-INFINITY</code>). And <code class="calibre2">NAN</code> is just one NaN value: in R code <code class="calibre2">NA_REAL</code> is usually what is intended, but <code class="calibre2">R_NaN</code> is also available.</p>
<p>Some (but not all) extensions are listed at <a href="https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html" class="uri">https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html</a> and <a href="https://gcc.gnu.org/onlinedocs/gcc/C_002b_002b-Extensions.html" class="uri">https://gcc.gnu.org/onlinedocs/gcc/C_002b_002b-Extensions.html</a>.</p>
<p>Other GNU extensions which have bitten package writers is the use of non-portable characters such as ‘$’ in identifiers and use of C++ headers under ext.</p>
<p>The GNU Fortran compiler also supports a large number of non-portable extensions, the most commonly encountered one being <code class="calibre2">ISNAN</code><a href="R-exts_split_014.html#FOOT89" id="DOCF89"><sup>89</sup></a>. Some are listed at <a href="https://gcc.gnu.org/onlinedocs/gfortran/Extensions-implemented-in-GNU-Fortran.html" class="uri">https://gcc.gnu.org/onlinedocs/gfortran/Extensions-implemented-in-GNU-Fortran.html</a>. One that frequently catches package writers is that it allows out-of-order declarations: in standard-conformant Fortran variables must be declared (explicitly or implicitly) before use in other declarations such as dimensions.</p></li>
<li>Including C-style headers in C++ code is not portable. Including the legacy header<a href="R-exts_split_014.html#FOOT90" id="DOCF90"><sup>90</sup></a> math.h in C++ code may conflict with cmath which may be included by other headers. This is particularly problematic with C++11 compilers, as functions like <code class="calibre2">sqrt</code> and <code class="calibre2">isnan</code> are defined for <code class="calibre2">double</code> arguments in math.h and for a range of types including <code class="calibre2">double</code> in cmath. Similar issues have been seen for stdlib.h and cstdlib. Including the C++ version first used to be a sufficient workaround but for some 2016 compilers only one could be included.</li>
<li>Variable-length arrays are C99, not supported by C++98 nor by the C++ compilers in use with R on some platforms.</li>
<li>The <code class="calibre2">restrict</code> qualifier is C99/C11 but not part of C++11 and not supported by some C++ compilers used with R.</li>
<li><p>Be careful to include the headers which define the functions you use. Some compilers/OSes include other system headers in their headers which are not required by the standards, and so code may compile on such systems and not on others. (A prominent example is the C++11 header <code class="calibre2">&lt;random&gt;</code> which is indirectly included by <code class="calibre2">&lt;algorithm&gt;</code> by <code class="calibre2">g++</code>. Another issue is the C header <code class="calibre2">&lt;time.h&gt;</code> which is included by other headers on Linux and Windows but not macOS nor Solaris.)</p>
<p>Note that <code class="calibre2">malloc</code>, <code class="calibre2">calloc</code>, <code class="calibre2">realloc</code> and <code class="calibre2">free</code> are defined by C99 in the header stdlib.h and (in the <code class="calibre2">std::</code> namespace) by C++ header cstdlib. Some earlier implementations used a header malloc.h, but that is not portable and does not exist on macOS.</p>
<p>This also applies to types such as <code class="calibre2">ssize_t</code>. The POSIX standards say that is declared in headers <code class="calibre2">unistd.h</code> and <code class="calibre2">sys/types.h</code>, and the latter is often included indirectly by other headers on some but not all systems.</p>
<p>Similarly for constants: for example <code class="calibre2">SIZE_MAX</code> is defined in <code class="calibre2">stdint.h</code> alongside <code class="calibre2">size_t</code> (according to the C99 standard: it is not part of C++98).</p></li>
<li><p>For C++ code, be careful to specify namespaces where needed. Many functions are defined by the standards to be in the <code class="calibre2">std</code> namespace, but <code class="calibre2">g++</code> puts many such also in the C++ main namespace. One way to do so is to use declarations such as</p>
<div class="example">
<pre class="example1"><code>using std::floor;</code></pre>
</div>
<p>but it is usually preferable to use explicit namespace prefixes in the code.</p>
<p>Examples seen in CRAN packages include</p>
<div class="example">
<pre class="example1"><code>abs acos atan calloc ceil div exp fabs floor fmod free log malloc memcpy
memset pow printf qsort round sin sprintf sqrt strcmp strcpy strerror
strlen strncmp strtol tan trunc</code></pre>
</div></li>
<li><p>Some C++ compilers refuse to compile constructs such as</p>
<div class="example">
<pre class="example1"><code>      if(ptr &gt; 0) { ....}</code></pre>
</div>
<p>which compares a pointer to the integer <code class="calibre2">0</code>. This could just use <code class="calibre2">if(ptr)</code> (pointer addresses cannot be negative) but if needed pointers can be tested against <code class="calibre2">nullptr</code> (C++11 and later) or <code class="calibre2">NULL</code>.</p>
<p>Note that although <code class="calibre2">nullptr</code> was only introduced in C++11, some compilers accept it in C++98 mode (but most do not).</p></li>
<li>Macros defined by the compiler/OS can cause problems. Identifiers starting with an underscore followed by an upper-case letter or another underscore are reserved for system macros and should not be used in portable code (including not as guards in C/C++ headers). Other macros, typically upper-case, may be defined by the compiler or system headers and can cause problems. The most common issue involves the names of the Intel CPU registers such as <code class="calibre2">CS</code>, <code class="calibre2">DS</code>, <code class="calibre2">ES</code>, <code class="calibre2">FS</code>, <code class="calibre2">GS</code> and <code class="calibre2">SS</code> (and more with longer abbreviations) defined on i586/x64 Solaris in &lt;sys/regset.h&gt; and often included indirectly by &lt;stdlib.h&gt; and other core headers. Further examples are <code class="calibre2">ERR</code>, <code class="calibre2">LITTLE_ENDIAN</code>, <code class="calibre2">zero</code> and <code class="calibre2">I</code> (which is defined in Solaris’ &lt;complex.h&gt; as a compiler intrinsic for the imaginary unit). Some of these can be avoided by defining <code class="calibre2">_POSIX_C_SOURCE</code> before including any system headers, but it is better to only use all-upper-case names which have a unique prefix such as the package name.</li>
<li><code class="calibre2">typedef</code>s in OS headers can conflict with those in the package: examples include <code class="calibre2">ulong</code> on several OSes and <code class="calibre2">index_t</code> and <code class="calibre2">single</code> on Solaris. (Note that these may conflict with other uses as identifiers, e.g. defining a C++ function called <code class="calibre2">single</code>.)</li>
<li><p>If you use OpenMP, check carefully that you have followed the advice in the subsection on <a href="R-exts_split_004.html#OpenMP-support">OpenMP support</a>. In particular, any use of OpenMP in C/C++ code will need to use</p>
<div class="example">
<pre class="example1"><code>#ifdef _OPENMP
# include &lt;omp.h&gt;
#endif</code></pre>
</div>
<p>Any use of OpenMP functions, e.g. <code class="calibre2">omp_set_num_threads</code> also needs to be conditioned.</p>
<p>And do not hardcode -lgomp: not only is that specific to the GCC family of compilers, using the correct linker flag often sets up the run-time path to the library.</p></li>
<li><p>Package authors commonly assume things are part of C99 when they are not: the most common example is POSIX function <code class="calibre2">strdup</code>. The most common C library on Linux, <code class="calibre2">glibc</code>, will hide the declarations of such extensions unless a ‘feature-test macro’ is defined <strong>before</strong> (almost) any system header is included. So for <code class="calibre2">strdup</code> you need</p>
<div class="example">
<pre class="example1"><code>#define _POSIX_C_SOURCE 200809L
...
#include &lt;string.h&gt;
...
strdup call(s)</code></pre>
</div>
<p>where the appropriate value can be found by <code class="calibre2">man strdup</code> on Linux. (Use of <code class="calibre2">strncasecmp</code> is similar.)</p>
<p>However, modes of <code class="calibre2">gcc</code> with ‘GNU EXTENSIONS’ (which are the default, either -std=gnu99 or -std=gnu11) declare enough macros to ensure that missing declarations are rarely seen.</p>
<p>This applies also to constants such as <code class="calibre2">M_PI</code> and <code class="calibre2">M_LN2</code>, which are part of the X/Open standard: to use these define <code class="calibre2">_XOPEN_SOURCE</code> before including any headers, or include the R header Rmath.h.</p></li>
<li><p>Similarly, package authors commonly assume things are part of C++ when they were introduced in C++11 if at all. Recent examples from CRAN packages include the C99/C++11 functions</p>
<div class="example">
<pre class="example1"><code>erf expm1 fmin fmax lgamma lround loglp round snprintf strcasecmp trunc</code></pre>
</div>
<p>(all of which are in the <code class="calibre2">std</code> namespace in C++11) and the POSIX functions <code class="calibre2">strdup</code> and <code class="calibre2">strncasecmp</code> and constants <code class="calibre2">M_PI</code> and <code class="calibre2">M_LN2</code> (see the previous item). R has long provided <code class="calibre2">fmax2</code>, <code class="calibre2">fmin2</code>, <code class="calibre2">fround</code>, <code class="calibre2">ftrunc</code>, <code class="calibre2">lgammafn</code> and many of the X/Open constants, declared in header Rmath.h. Uses of <code class="calibre2">erf</code> can be replaced by <code class="calibre2">pnorm</code> (see the R help page for the latter).</p></li>
<li>Using <code class="calibre2">alloca</code> portably is tricky: it is neither an ISO C nor a POSIX function. An adequately portable preamble is
<div class="example">
<pre class="example1"><code>#ifdef __GNUC__
/* Includes GCC, clang and Intel compilers */
# undef alloca
# define alloca(x) __builtin_alloca((x))
#elif defined(__sun) || defined(_AIX)
/* this is necessary (and sufficient) for Solaris 10 and AIX 6: */
# include &lt;alloca.h&gt;
#endif</code></pre>
</div></li>
</ul>
<p>Some additional information for C++ is available at <a href="http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Plummer.pdf" class="uri">http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Plummer.pdf</a> by Martyn Plummer.</p>
<hr />
<p><a href="" id="Binary-distribution"></a> <a href="" id="Binary-distribution-1"></a></p>
<h4 id="binary-distribution" class="subsection">1.6.5 Binary distribution</h4>
<p>If you want to distribute a binary version of a package on Windows or OS X, there are further checks you need to do to check it is portable: it is all too easy to depend on external software on your own machine that other users will not have.</p>
<p>For Windows, check what other DLLs your package’s DLL depends on (‘imports’ from in the DLL tools’ parlance). A convenient GUI-based tool to do so is ‘Dependency Walker’ (<a href="http://www.dependencywalker.com/" class="uri">http://www.dependencywalker.com/</a>) for both 32-bit and 64-bit DLLs – note that this will report as missing links to R’s own DLLs such as R.dll and Rblas.dll. For 32-bit DLLs only, the command-line tool <code class="calibre2">pedump.exe -i</code> (in Rtools*.exe) can be used, and for the brave, the <code class="calibre2">objdump</code> tool in the appropriate toolchain will also reveal what DLLs are imported from. If you use a toolchain other than one provided by the R developers or use your own makefiles, watch out in particular for dependencies on the toolchain’s runtime DLLs such as libgfortran, libstdc++ and libgcc_s.</p>
<p>For macOS, using <code class="calibre2">R CMD otool -L</code> on the package’s shared object(s) in the libs directory will show what they depend on: watch for any dependencies in /usr/local/lib or /usr/local/gfortran/lib, notably libgfortran.?.dylib and libquadmath.0.dylib.</p>
<p>Many people (including the CRAN package repository) will not accept source packages containing binary files as the latter are a security risk. If you want to distribute a source package which needs external software on Windows or macOS, options include</p>
<ul>
<li>To arrange for installation of the package to download the additional software from a URL, as e.g. package <a href="https://CRAN.R-project.org/package=Cairo"><strong>Cairo</strong></a> does.</li>
<li>(For CRAN.) To negotiate with Uwe Ligges to host the additional components on WinBuilder, and write a configure.win file to install them.</li>
</ul>
<p>Be aware that license requirements will need to be met so you may need to supply the sources for the additional components (and will if your package has a GPL-like license).</p>
<hr />
<p><a href="" id="Diagnostic-messages"></a> <a href="" id="Diagnostic-messages-1"></a></p>
<h3 id="diagnostic-messages" class="section">1.7 Diagnostic messages</h3>
<p>Diagnostic messages can be made available for translation, so it is important to write them in a consistent style. Using the tools described in the next section to extract all the messages can give a useful overview of your consistency (or lack of it). Some guidelines follow.</p>
<ul>
<li>Messages are sentence fragments, and not viewed in isolation. So it is conventional not to capitalize the first word and not to end with a period (or other punctuation).</li>
<li><p>Try not to split up messages into small pieces. In C error messages use a single format string containing all English words in the messages.</p>
<p>In R error messages do not construct a message with <code class="calibre2">paste</code> (such messages will not be translated) but <em>via</em> multiple arguments to <code class="calibre2">stop</code> or <code class="calibre2">warning</code>, or <em>via</em> <code class="calibre2">gettextf</code>.</p></li>
<li>Do not use colloquialisms such as “can’t” and “don’t”.</li>
<li><p>Conventionally single quotation marks are used for quotations such as</p>
<div class="example">
<pre class="example1"><code>&#39;ord&#39; must be a positive integer, at most the number of knots</code></pre>
</div>
<p>and double quotation marks when referring to an R character string or a class, such as</p>
<div class="example">
<pre class="example1"><code>&#39;format&#39; must be &quot;normal&quot; or &quot;short&quot; - using &quot;normal&quot;</code></pre>
</div>
<p>Since ASCII does not contain directional quotation marks, it is best to use ‘'’ and let the translator (including automatic translation) use directional quotations where available. The range of quotation styles is immense: unfortunately we cannot reproduce them in a portable <code class="calibre2">texinfo</code> document. But as a taster, some languages use ‘up’ and ‘down’ (comma) quotes rather than left or right quotes, and some use guillemets (and some use what Adobe calls ‘guillemotleft’ to start and others use it to end).</p>
<p>In R messages it is also possible to use <code class="calibre2">sQuote</code> or <code class="calibre2">dQuote</code> as in</p>
<div class="example">
<pre class="example1"><code>        stop(gettextf(&quot;object must be of class %s or %s&quot;,
                      dQuote(&quot;manova&quot;), dQuote(&quot;maov&quot;)),
             domain = NA)</code></pre>
</div></li>
<li><p>Occasionally messages need to be singular or plural (and in other languages there may be no such concept or several plural forms – Slovenian has four). So avoid constructions such as was once used in <code class="calibre2">library</code></p>
<div class="example">
<pre class="example1"><code>if((length(nopkgs) &gt; 0) &amp;&amp; !missing(lib.loc)) {
    if(length(nopkgs) &gt; 1)
        warning(&quot;libraries &quot;,
                paste(sQuote(nopkgs), collapse = &quot;, &quot;),
                &quot; contain no packages&quot;)
    else
        warning(&quot;library &quot;, paste(sQuote(nopkgs)),
                &quot; contains no package&quot;)
}</code></pre>
</div>
<p>and was replaced by</p>
<div class="example">
<pre class="example1"><code>if((length(nopkgs) &gt; 0) &amp;&amp; !missing(lib.loc)) {
    pkglist &lt;- paste(sQuote(nopkgs), collapse = &quot;, &quot;)
    msg &lt;- sprintf(ngettext(length(nopkgs),
                            &quot;library %s contains no packages&quot;,
                            &quot;libraries %s contain no packages&quot;,
                            domain = &quot;R-base&quot;),
                   pkglist)
    warning(msg, domain=NA)
}</code></pre>
</div>
<p>Note that it is much better to have complete clauses as here, since in another language one might need to say ‘There is no package in library %s’ or ‘There are no packages in libraries %s’.</p></li>
</ul>
<hr />
<p><a href="" id="Internationalization"></a> <a href="" id="Internationalization-1"></a></p>
<h3 id="internationalization" class="section">1.8 Internationalization</h3>
<p>There are mechanisms to translate the R- and C-level error and warning messages. There are only available if R is compiled with NLS support (which is requested by <code class="calibre2">configure</code> option --enable-nls, the default).</p>
<p>The procedures make use of <code class="calibre2">msgfmt</code> and <code class="calibre2">xgettext</code> which are part of GNU <code class="calibre2">gettext</code> and this will need to be installed: Windows users can find pre-compiled binaries at <a href="https://www.stats.ox.ac.uk/pub/Rtools/goodies/gettext-tools.zip" class="uri">https://www.stats.ox.ac.uk/pub/Rtools/goodies/gettext-tools.zip</a>.</p>
<hr />
<p><a href="" id="C_002dlevel-messages"></a> <a href="" id="C_002dlevel-messages-1"></a></p>
<h4 id="c-level-messages" class="subsection">1.8.1 C-level messages</h4>
<p>The process of enabling translations is</p>
<ul>
<li>In a header file that will be included in all the C (or C++ or Objective C/C++) files containing messages that should be translated, declare
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;  /* to include Rconfig.h */

#ifdef ENABLE_NLS
#include &lt;libintl.h&gt;
#define _(String) dgettext (&quot;pkg&quot;, String)
/* replace pkg as appropriate */
#else
#define _(String) (String)
#endif</code></pre>
</div></li>
<li><p>For each message that should be translated, wrap it in <code class="calibre2">_(...)</code>, for example</p>
<div class="example">
<pre class="example1"><code>error(_(&quot;&#39;ord&#39; must be a positive integer&quot;));</code></pre>
</div>
<p>If you want to use different messages for singular and plural forms, you need to add</p>
<div class="example">
<pre class="example1"><code>#ifndef ENABLE_NLS
#define dngettext(pkg, String, StringP, N) (N &gt; 1 ? StringP : String)
#endif</code></pre>
</div>
<p>and mark strings by</p>
<div class="example">
<pre class="example1"><code>dngettext(&quot;pkg&quot;, &lt;singular string&gt;, &lt;plural string&gt;, n)</code></pre>
</div></li>
<li>In the package’s src directory run
<div class="example">
<pre class="example1"><code>xgettext --keyword=_ -o pkg.pot *.c</code></pre>
</div></li>
</ul>
<p>The file src/pkg.pot is the template file, and conventionally this is shipped as po/pkg.pot.</p>
<hr />
<p><a href="" id="R-messages"></a> <a href="" id="R-messages-1"></a></p>
<h4 id="r-messages" class="subsection">1.8.2 R messages</h4>
<p>Mechanisms are also available to support the automatic translation of R <code class="calibre2">stop</code>, <code class="calibre2">warning</code> and <code class="calibre2">message</code> messages. They make use of message catalogs in the same way as C-level messages, but using domain <code class="calibre2">R-pkg</code> rather than <code class="calibre2">pkg</code>. Translation of character strings inside <code class="calibre2">stop</code>, <code class="calibre2">warning</code> and <code class="calibre2">message</code> calls is automatically enabled, as well as other messages enclosed in calls to <code class="calibre2">gettext</code> or <code class="calibre2">gettextf</code>. (To suppress this, use argument <code class="calibre2">domain=NA</code>.)</p>
<p>Tools to prepare the R-pkg.pot file are provided in package <strong>tools</strong>: <code class="calibre2">xgettext2pot</code> will prepare a file from all strings occurring inside <code class="calibre2">gettext</code>/<code class="calibre2">gettextf</code>, <code class="calibre2">stop</code>, <code class="calibre2">warning</code> and <code class="calibre2">message</code> calls. Some of these are likely to be spurious and so the file is likely to need manual editing. <code class="calibre2">xgettext</code> extracts the actual calls and so is more useful when tidying up error messages.</p>
<p>The R function <code class="calibre2">ngettext</code> provides an interface to the C function of the same name: see example in the previous section. It is safest to use <code class="calibre2">domain=&quot;R-pkg&quot;</code> explicitly in calls to <code class="calibre2">ngettext</code>, and necessary for earlier versions of R unless they are calls directly from a function in the package.</p>
<hr />
<p><a href="" id="Preparing-translations"></a> <a href="" id="Preparing-translations-1"></a></p>
<h4 id="preparing-translations" class="subsection">1.8.3 Preparing translations</h4>
<p>Once the template files have been created, translations can be made. Conventional translations have file extension .po and are placed in the po subdirectory of the package with a name that is either ‘ll.po’ or ‘R-ll.po’ for translations of the C and R messages respectively to language with code ‘ll’.</p>
<p>See ‘Localization of messages’ in ‘R Installation and Administration’, for details of language codes.</p>
<p>There is an R function, <code class="calibre2">update_pkg_po</code> in package <strong>tools</strong>, to automate much of the maintenance of message translations. See its help for what it does in detail.</p>
<p>If this is called on a package with no existing translations, it creates the directory pkgdir/po, creates a template file of R messages, pkgdir/po/R-pkg.pot, within it, creates the ‘en@quot’ translation and installs that. (The ‘en@quot’ pseudo-language interprets quotes in their directional forms in suitable (e.g. UTF-8) locales.)</p>
<p>If the package has C source files in its src directory that are marked for translation, use</p>
<div class="example">
<pre class="example1"><code>touch pkgdir/po/pkg.pot</code></pre>
</div>
<p>to create a dummy template file, then call <code class="calibre2">update_pkg_po</code> again (this can also be done before it is called for the first time).</p>
<p>When translations to new languages are added in the pkgdir/po directory, running the same command will check and then install the translations.</p>
<p>If the package sources are updated, the same command will update the template files, merge the changes into the translation .po files and then installed the updated translations. You will often see that merging marks translations as ‘fuzzy’ and this is reported in the coverage statistics. As fuzzy translations are <em>not</em> used, this is an indication that the translation files need human attention.</p>
<p>The merged translations are run through <code class="calibre2">tools::checkPofile</code> to check that C-style formats are used correctly: if not the mismatches are reported and the broken translations are not installed.</p>
<p>This function needs the GNU <code class="calibre2">gettext-tools</code> installed and on the path: see its help page.</p>
<p><a href="" id="index-CITATION-1"></a> <a href="" id="index-citation-1"></a></p>
<hr />
<p><a href="" id="CITATION-files"></a> <a href="" id="CITATION-files-1"></a></p>
<h3 id="citation-files" class="section">1.9 CITATION files</h3>
<p>An installed file named CITATION will be used by the <code class="calibre2">citation()</code> function. (It should be in the inst subdirectory of the package sources.)</p>
<p>The CITATION file is parsed as R code (in the package’s declared encoding, or in ASCII if none is declared). If no such file is present, <code class="calibre2">citation</code> auto-generates citation information from the package DESCRIPTION metadata, and an example of what that would look like as a CITATION file can be seen in recommended package <a href="https://CRAN.R-project.org/package=nlme"><strong>nlme</strong></a> (see below): recommended packages <a href="https://CRAN.R-project.org/package=boot"><strong>boot</strong></a>, <a href="https://CRAN.R-project.org/package=cluster"><strong>cluster</strong></a> and <a href="https://CRAN.R-project.org/package=mgcv"><strong>mgcv</strong></a> have further examples.</p>
<p>A CITATION file will contain calls to function <code class="calibre2">bibentry</code>.</p>
<p>Here is that for <a href="https://CRAN.R-project.org/package=nlme"><strong>nlme</strong></a>:</p>
<div class="example">
<pre class="example1"><code>year &lt;- sub(&quot;-.*&quot;, &quot;&quot;, meta$Date)
note &lt;- sprintf(&quot;R package version %s&quot;, meta$Version)

bibentry(bibtype = &quot;Manual&quot;,
         title = &quot;{nlme}: Linear and Nonlinear Mixed Effects Models&quot;,
         author = c(person(&quot;Jose&quot;, &quot;Pinheiro&quot;),
                    person(&quot;Douglas&quot;, &quot;Bates&quot;),
                    person(&quot;Saikat&quot;, &quot;DebRoy&quot;),
                    person(&quot;Deepayan&quot;, &quot;Sarkar&quot;),
                    person(&quot;R Core Team&quot;)),
         year = year,
         note = note,
         url = &quot;https://CRAN.R-project.org/package=nlme&quot;)</code></pre>
</div>
<p>Note the way that information that may need to be updated is picked up from object <code class="calibre2">meta</code>, a parsed version of the DESCRIPTION file – it is tempting to hardcode such information, but it normally then gets outdated. See <code class="calibre2">?bibentry</code> for further details of the information which can be provided.</p>
<p>In case a bibentry contains LaTeX markup (e.g., for accented characters or mathematical symbols), it may be necessary to provide a text representation to be used for printing via the <code class="calibre2">textVersion</code> argument to <code class="calibre2">bibentry</code>. E.g., earlier versions of <a href="https://CRAN.R-project.org/package=nlme"><strong>nlme</strong></a> additionally used</p>
<div class="example">
<pre class="example1"><code>         textVersion =
         paste0(&quot;Jose Pinheiro, Douglas Bates, Saikat DebRoy,&quot;,
                &quot;Deepayan Sarkar and the R Core Team (&quot;,
                year,
                &quot;). nlme: Linear and Nonlinear Mixed Effects Models. &quot;,
                note, &quot;.&quot;)</code></pre>
</div>
<p>The CITATION file should itself produce no output when <code class="calibre2">source</code>-d.</p>
<p>It is desirable (and essential for CRAN) that the CITATION file does not contain calls to functions such as <code class="calibre2">packageDescription</code> which assume the package is installed in a library tree on the package search path.</p>
<hr />
<p><a href="" id="Package-types"></a> <a href="" id="Package-types-1"></a></p>
<h3 id="package-types" class="section">1.10 Package types</h3>
<p>The DESCRIPTION file has an optional field <code class="calibre2">Type</code> which if missing is assumed to be ‘Package’, the sort of extension discussed so far in this chapter. Currently one other type is recognized; there used also to be a ‘Translation’ type.</p>
<hr />
<p><a href="" id="Frontend"></a> <a href="" id="Frontend-1"></a></p>
<h4 id="frontend" class="subsection">1.10.1 Frontend</h4>
<p>This is a rather general mechanism, designed for adding new front-ends such as the former <strong>gnomeGUI</strong> package (see the Archive area on CRAN). If a configure file is found in the top-level directory of the package it is executed, and then if a Makefile is found (often generated by configure), <code class="calibre2">make</code> is called. If <code class="calibre2">R CMD INSTALL --clean</code> is used <code class="calibre2">make clean</code> is called. No other action is taken.</p>
<p><code class="calibre2">R CMD build</code> can package up this type of extension, but <code class="calibre2">R CMD check</code> will check the type and skip it.</p>
<p>Many packages of this type need write permission for the R installation directory.</p>
<hr />
<p><a href="" id="Services"></a> <a href="" id="Services-1"></a></p>
<h3 id="services" class="section">1.11 Services</h3>
<p>Several members of the R project have set up services to assist those writing R packages, particularly those intended for public distribution.</p>
<p><a href="https://win-builder.r-project.org">win-builder.r-project.org</a> offers the automated preparation of (32/64-bit) Windows binaries from well-tested source packages.</p>
<p>R-Forge (<a href="https://R-Forge.r-project.org">R-Forge.r-project.org</a>) and RForge (<a href="https://www.rforge.net">www.rforge.net</a>) are similar services with similar names. Both provide source-code management through SVN, daily building and checking, mailing lists and a repository that can be accessed <em>via</em> <code class="calibre2">install.packages</code> (they can be selected by <code class="calibre2">setRepositories</code> and the GUI menus that use it). Package developers have the opportunity to present their work on the basis of project websites or news announcements. Mailing lists, forums or wikis provide useRs with convenient instruments for discussions and for exchanging information between developers and/or interested useRs.</p>
<hr />
<p><a href="" id="Writing-R-documentation-files"></a> <a href="" id="Writing-R-documentation-files-1"></a></p>
<div id="calibre_pb_6" class="calibre6">

</div>

<!--chapter:end:5-R-exts.Rmd-->

#  Writing R documentation files
<p><a href="" id="index-Documentation_002c-writing"></a></p>
<hr />
<p><a href="" id="Rd-format"></a> <a href="" id="Rd-format-1"></a></p>
<h3 id="rd-format" class="section">2.1 Rd format</h3>
<p>R objects are documented in files written in “R documentation” (Rd) format, a simple markup language much of which closely resembles (La)TeX, which can be processed into a variety of formats, including LaTeX, HTML and plain text. The translation is carried out by functions in the <strong>tools</strong> package called by the script <code class="calibre2">Rdconv</code> in R_HOME/bin and by the installation scripts for packages.</p>
<p>The R distribution contains more than 1300 such files which can be found in the src/library/pkg/man directories of the R source tree, where pkg stands for one of the standard packages which are included in the R distribution.</p>
<p>As an example, let us look at a simplified version of src/library/base/man/load.Rd which documents the R function <code class="calibre2">load</code>.</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="smallexample"><code>% File src/library/base/man/load.Rd
\name{load}
\alias{load}
\title{Reload Saved Datasets}
\description{
  Reload the datasets written to a file with the function
  \code{save}.
}
\usage{
load(file, envir = parent.frame())
}
\arguments{
  \item{file}{a connection or a character string giving the
    name of the file to load.}
  \item{envir}{the environment where the data should be
    loaded.}
}
\seealso{
  \code{\link{save}}.
}
\examples{
## save all data
save(list = ls(), file= &quot;all.RData&quot;)

## restore the saved values to the current environment
load(&quot;all.RData&quot;)

## restore the saved values to the workspace
load(&quot;all.RData&quot;, .GlobalEnv)
}
\keyword{file}</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>An Rd file consists of three parts. The header gives basic information about the name of the file, the topics documented, a title, a short textual description and R usage information for the objects documented. The body gives further information (for example, on the function’s arguments and return value, as in the above example). Finally, there is an optional footer with keyword information. The header is mandatory.</p>
<p>Information is given within a series of <em>sections</em> with standard names (and user-defined sections are also allowed). Unless otherwise specified<a href="R-exts_split_014.html#FOOT91" id="DOCF91"><sup>91</sup></a> these should occur only once in an Rd file (in any order), and the processing software will retain only the first occurrence of a standard section in the file, with a warning.</p>
<p>See <a href="https://developer.r-project.org/Rds.html">“Guidelines for Rd files”</a> for guidelines for writing documentation in Rd format which should be useful for package writers. <a href="" id="index-prompt"></a> The R generic function <code class="calibre2">prompt</code> is used to construct a bare-bones Rd file ready for manual editing. Methods are defined for documenting functions (which fill in the proper function and argument names) and data frames. There are also functions <code class="calibre2">promptData</code>, <code class="calibre2">promptPackage</code>, <code class="calibre2">promptClass</code>, and <code class="calibre2">promptMethods</code> for other types of Rd file.</p>
<p>The general syntax of Rd files is summarized below. For a detailed technical discussion of current Rd syntax, see <a href="https://developer.r-project.org/parseRd.pdf">“Parsing Rd files”</a>.</p>
<p>Rd files consist of four types of text input. The most common is LaTeX-like, with the backslash used as a prefix on markup (e.g. <code class="calibre2">\alias</code>), and braces used to indicate arguments (e.g. <code class="calibre2">{load}</code>). The least common type of text is ‘verbatim’ text, where no markup other than the comment marker (<code class="calibre2">%</code>) is processed. There is also a rare variant of ‘verbatim’ text (used in <code class="calibre2">\eqn</code>, <code class="calibre2">\deqn</code>, <code class="calibre2">\figure</code>, and <code class="calibre2">\newcommand</code>) where comment markers need not be escaped. The final type is R-like, intended for R code, but allowing some embedded macros. Quoted strings within R-like text are handled specially: regular character escapes such as <code class="calibre2">\n</code> may be entered as-is. Only markup starting with <code class="calibre2">\l</code> (e.g. <code class="calibre2">\link</code>) or <code class="calibre2">\v</code> (e.g. <code class="calibre2">\var</code>) will be recognized within quoted strings. The rarely used vertical tab <code class="calibre2">\v</code> must be entered as <code class="calibre2">\\v</code>.</p>
<p>Each macro defines the input type for its argument. For example, the file initially uses LaTeX-like syntax, and this is also used in the <code class="calibre2">\description</code> section, but the <code class="calibre2">\usage</code> section uses R-like syntax, and the <code class="calibre2">\alias</code> macro uses ‘verbatim’ syntax. Comments run from a percent symbol <code class="calibre2">%</code> to the end of the line in all types of text except the rare ‘verbatim’ variant (as on the first line of the <code class="calibre2">load</code> example).</p>
<p>Because backslashes, braces and percent symbols have special meaning, to enter them into text sometimes requires escapes using a backslash. In general balanced braces do not need to be escaped, but percent symbols always do, except in the ‘verbatim’ variant. For the complete list of macros and rules for escapes, see <a href="https://developer.r-project.org/parseRd.pdf">“Parsing Rd files”</a>.</p>
<hr />
<p><a href="" id="Documenting-functions"></a> <a href="" id="Documenting-functions-1"></a></p>
<h4 id="documenting-functions" class="subsection">2.1.1 Documenting functions</h4>
<p>The basic markup commands used for documenting R objects (in particular, functions) are given in this subsection.</p>
<dl>
<dt><code class="calibre2">\name{name}</code></dt>
<dd><p><a href="" id="index-_005cname"></a></p>
<p>name typically<a href="R-exts_split_014.html#FOOT92" id="DOCF92"><sup>92</sup></a> is the basename of the Rd file containing the documentation. It is the “name” of the Rd object represented by the file and has to be unique in a package. To avoid problems with indexing the package manual, it may not contain ‘!’ ‘|’ nor ‘@’, and to avoid possible problems with the HTML help system it should not contain ‘/’ nor a space. (LaTeX special characters are allowed, but may not be collated correctly in the index.) There can only be one <code class="calibre2">\name</code> entry in a file, and it must not contain any markup. Entries in the package manual will be in alphabetic<a href="R-exts_split_014.html#FOOT93" id="DOCF93"><sup>93</sup></a> order of the <code class="calibre2">\name</code> entries.</p>
</dd>
<dt><code class="calibre2">\alias{topic}</code></dt>
<dd><p><a href="" id="index-_005calias"></a></p>
<p>The <code class="calibre2">\alias</code> sections specify all “topics” the file documents. This information is collected into index data bases for lookup by the on-line (plain text and HTML) help systems. The topic can contain spaces, but (for historical reasons) leading and trailing spaces will be stripped. Percent and left brace need to be escaped by a backslash.</p>
<p>There may be several <code class="calibre2">\alias</code> entries. Quite often it is convenient to document several R objects in one file. For example, file Normal.Rd documents the density, distribution function, quantile function and generation of random variates for the normal distribution, and hence starts with</p>
<div class="example">
<pre class="example1"><code>\name{Normal}
\alias{Normal}
\alias{dnorm}
\alias{pnorm}
\alias{qnorm}
\alias{rnorm}</code></pre>
</div>
<p>Also, it is often convenient to have several different ways to refer to an R object, and an <code class="calibre2">\alias</code> does not need to be the name of an object.</p>
<p>Note that the <code class="calibre2">\name</code> is not necessarily a topic documented, and if so desired it needs to have an explicit <code class="calibre2">\alias</code> entry (as in this example).</p>
</dd>
<dt><code class="calibre2">\title{Title}</code></dt>
<dd><p><a href="" id="index-_005ctitle"></a></p>
<p>Title information for the Rd file. This should be capitalized and not end in a period; try to limit its length to at most 65 characters for widest compatibility.</p>
<p>Markup is supported in the text, but use of characters other than English text and punctuation (e.g., ‘&lt;’) may limit portability.</p>
<p>There must be one (and only one) <code class="calibre2">\title</code> section in a help file.</p>
</dd>
<dt><code class="calibre2">\description{…}</code></dt>
<dd><p><a href="" id="index-_005cdescription"></a></p>
<p>A short description of what the function(s) do(es) (one paragraph, a few lines only). (If a description is too long and cannot easily be shortened, the file probably tries to document too much at once.) This is mandatory except for package-overview files.</p>
</dd>
<dt><code class="calibre2">\usage{fun(arg1, arg2, …)}</code></dt>
<dd><p><a href="" id="index-_005cusage"></a></p>
<p>One or more lines showing the synopsis of the function(s) and variables documented in the file. These are set in typewriter font. This is an R-like command.</p>
<p>The usage information specified should match the function definition <em>exactly</em> (such that automatic checking for consistency between code and documentation is possible).</p>
<p>It is no longer advisable to use <code class="calibre2">\synopsis</code> for the actual synopsis and show modified synopses in the <code class="calibre2">\usage</code>. Support for <code class="calibre2">\synopsis</code> will be removed in \R 3.1.0. To indicate that a function can be used in several different ways, depending on the named arguments specified, use section <code class="calibre2">\details</code>. E.g., abline.Rd contains</p>
<div class="example">
<pre class="example1"><code>\details{
  Typical usages are
\preformatted{abline(a, b, untf = FALSE, \dots)
......
}</code></pre>
</div>
<p><a href="" id="index-_005cmethod"></a></p>
<p>Use <code class="calibre2">\method{generic}{class}</code> to indicate the name of an S3 method for the generic function generic for objects inheriting from class <code class="calibre2">&quot;class&quot;</code>. In the printed versions, this will come out as generic (reflecting the understanding that methods should not be invoked directly but <em>via</em> method dispatch), but <code class="calibre2">codoc()</code> and other QC tools always have access to the full name.</p>
<p>For example, print.ts.Rd contains</p>
<div class="example">
<pre class="example1"><code>\usage{
\method{print}{ts}(x, calendar, \dots)
}</code></pre>
</div>
<p>which will print as</p>
<div class="example">
<pre class="example1"><code>Usage:

     ## S3 method for class ‘ts’:
     print(x, calendar, ...)</code></pre>
</div>
<p>Usage for replacement functions should be given in the style of <code class="calibre2">dim(x) &lt;- value</code> rather than explicitly indicating the name of the replacement function (<code class="calibre2">&quot;dim&lt;-&quot;</code> in the above). Similarly, one can use <code class="calibre2">\method{generic}{class}(arglist) &lt;- value</code> to indicate the usage of an S3 replacement method for the generic replacement function <code class="calibre2">&quot;generic&lt;-&quot;</code> for objects inheriting from class <code class="calibre2">&quot;class&quot;</code>.</p>
<p>Usage for S3 methods for extracting or replacing parts of an object, S3 methods for members of the Ops group, and S3 methods for user-defined (binary) infix operators (‘%xxx%’) follows the above rules, using the appropriate function names. E.g., Extract.factor.Rd contains</p>
<div class="example">
<pre class="example1"><code>\usage{
\method{[}{factor}(x, \dots, drop = FALSE)
\method{[[}{factor}(x, \dots)
\method{[}{factor}(x, \dots) &lt;- value
}</code></pre>
</div>
<p>which will print as</p>
<div class="example">
<pre class="example1"><code>Usage:

     ## S3 method for class ‘factor’:
     x[..., drop = FALSE]
     ## S3 method for class ‘factor’:
     x[[...]]
     ## S3 replacement method for class ‘factor’:
     x[...] &lt;- value</code></pre>
</div>
<p><a href="" id="index-_005cS3method"></a></p>
<p><code class="calibre2">\S3method</code> is accepted as an alternative to <code class="calibre2">\method</code>.</p>
</dd>
<dt><code class="calibre2">\arguments{…}</code></dt>
<dd><p><a href="" id="index-_005carguments"></a></p>
<p>Description of the function’s arguments, using an entry of the form</p>
<div class="example">
<pre class="example1"><code>\item{arg_i}{Description of arg_i.}</code></pre>
</div>
<p>for each element of the argument list. (Note that there is no whitespace between the three parts of the entry.) There may be optional text outside the <code class="calibre2">\item</code> entries, for example to give general information about groups of parameters.</p>
</dd>
<dt><code class="calibre2">\details{…}</code></dt>
<dd><p><a href="" id="index-_005cdetails"></a></p>
<p>A detailed if possible precise description of the functionality provided, extending the basic information in the <code class="calibre2">\description</code> slot.</p>
</dd>
<dt><code class="calibre2">\value{…}</code></dt>
<dd><p><a href="" id="index-_005cvalue"></a></p>
<p>Description of the function’s return value.</p>
<p>If a list with multiple values is returned, you can use entries of the form</p>
<div class="example">
<pre class="example1"><code>\item{comp_i}{Description of comp_i.}</code></pre>
</div>
<p>for each component of the list returned. Optional text may precede<a href="R-exts_split_014.html#FOOT94" id="DOCF94"><sup>94</sup></a> this list (see for example the help for <code class="calibre2">rle</code>). Note that <code class="calibre2">\value</code> is implicitly a <code class="calibre2">\describe</code> environment, so that environment should not be used for listing components, just individual <code class="calibre2">\item{}{}</code> entries.</p>
</dd>
<dt><code class="calibre2">\references{…}</code></dt>
<dd><p><a href="" id="index-_005creferences"></a></p>
<p>A section with references to the literature. Use <code class="calibre2">\url{}</code> or <code class="calibre2">\href{}{}</code> for web pointers.</p>
</dd>
<dt><code class="calibre2">\note{...}</code></dt>
<dd><p><a href="" id="index-_005cnote"></a></p>
<p>Use this for a special note you want to have pointed out. Multiple <code class="calibre2">\note</code> sections are allowed, but might be confusing to the end users.</p>
<p>For example, pie.Rd contains</p>
<div class="example">
<pre class="example1"><code>\note{
  Pie charts are a very bad way of displaying information.
  The eye is good at judging linear measures and bad at
  judging relative areas.
  ......
}</code></pre>
</div>
</dd>
<dt><code class="calibre2">\author{…}</code></dt>
<dd><p><a href="" id="index-_005cauthor"></a></p>
<p>Information about the author(s) of the Rd file. Use <code class="calibre2">\email{}</code> without extra delimiters (such as ‘( )’ or ‘&lt; &gt;’) to specify email addresses, or <code class="calibre2">\url{}</code> or <code class="calibre2">\href{}{}</code> for web pointers.</p>
</dd>
<dt><code class="calibre2">\seealso{…}</code></dt>
<dd><p><a href="" id="index-_005cseealso"></a></p>
<p>Pointers to related R objects, using <code class="calibre2">\code{\link{...}}</code> to refer to them (<code class="calibre2">\code</code> is the correct markup for R object names, and <code class="calibre2">\link</code> produces hyperlinks in output formats which support this. See <a href="#Marking-text">Marking text</a>, and <a href="#Cross_002dreferences">Cross-references</a>).</p>
<p><a href="" id="index-_005cexamples"></a></p>
</dd>
<dt><code class="calibre2">\examples{…}</code></dt>
<dd><p>Examples of how to use the function. Code in this section is set in typewriter font without reformatting and is run by <code class="calibre2">example()</code> unless marked otherwise (see below).</p>
<p>Examples are not only useful for documentation purposes, but also provide test code used for diagnostic checking of R code. By default, text inside <code class="calibre2">\examples{}</code> will be displayed in the output of the help page and run by <code class="calibre2">example()</code> and by <code class="calibre2">R CMD check</code>. You can use <code class="calibre2">\dontrun{}</code> <a href="" id="index-_005cdontrun"></a> for text that should only be shown, but not run, and <code class="calibre2">\dontshow{}</code> <a href="" id="index-_005cdontshow"></a> for extra commands for testing that should not be shown to users, but will be run by <code class="calibre2">example()</code>. (Previously this was called <code class="calibre2">\testonly</code>, and that is still accepted.)</p>
<p>Text inside <code class="calibre2">\dontrun{}</code> is ‘verbatim’, but the other parts of the <code class="calibre2">\examples</code> section are R-like text.</p>
<p>For example,</p>
<div class="example">
<pre class="example1"><code>x &lt;- runif(10)       # Shown and run.
\dontrun{plot(x)}    # Only shown.
\dontshow{log(x)}    # Only run.</code></pre>
</div>
<p>Thus, example code not included in <code class="calibre2">\dontrun</code> must be executable! In addition, it should not use any system-specific features or require special facilities (such as Internet access or write permission to specific directories). Text included in <code class="calibre2">\dontrun</code> is indicated by comments in the processed help files: it need not be valid R code but the escapes must still be used for <code class="calibre2">%</code>, <code class="calibre2">\</code> and unpaired braces as in other ‘verbatim’ text.</p>
<p>Example code must be capable of being run by <code class="calibre2">example</code>, which uses <code class="calibre2">source</code>. This means that it should not access stdin, e.g. to <code class="calibre2">scan()</code> data from the example file.</p>
<p>Data needed for making the examples executable can be obtained by random number generation (for example, <code class="calibre2">x &lt;- rnorm(100)</code>), or by using standard data sets listed by <code class="calibre2">data()</code> (see <code class="calibre2">?data</code> for more info).</p>
<p>Finally, there is <code class="calibre2">\donttest</code>, used (at the beginning of a separate line) to mark code that should be run by <code class="calibre2">example()</code> but not by <code class="calibre2">R CMD check</code> (by default: the option --run-donttest can be used). This should be needed only occasionally but can be used for code which might fail in circumstances that are hard to test for, for example in some locales. (Use e.g. <code class="calibre2">capabilities()</code> or <code class="calibre2">nzchar(Sys.which(&quot;someprogram&quot;))</code> to test for features needed in the examples wherever possible, and you can also use <code class="calibre2">try()</code> or <code class="calibre2">tryCatch()</code>. Use <code class="calibre2">interactive()</code> to condition examples which need someone to interact with.) Note that code included in <code class="calibre2">\donttest</code> must be correct R code, and any packages used should be declared in the DESCRIPTION file. It is good practice to include a comment in the <code class="calibre2">\donttest</code> section explaining why it is needed.</p>
<p>As from R 3.4.0, output from code between comments</p>
<div class="example">
<pre class="example1"><code>## IGNORE_RDIFF_BEGIN
## IGNORE_RDIFF_END</code></pre>
</div>
<p>is ignored when comparing check output to reference output (a -Ex.Rout.save file).</p>
<p><a href="" id="index-_005ckeyword"></a></p>
</dd>
<dt><code class="calibre2">\keyword{key}</code></dt>
<dd><p>There can be zero or more <code class="calibre2">\keyword</code> sections per file. Each <code class="calibre2">\keyword</code> section should specify a single keyword, preferably one of the standard keywords as listed in file KEYWORDS in the R documentation directory (default R_HOME/doc). Use e.g. <code class="calibre2">RShowDoc(&quot;KEYWORDS&quot;)</code> to inspect the standard keywords from within R. There can be more than one <code class="calibre2">\keyword</code> entry if the R object being documented falls into more than one category, or none.</p>
<p>Do strongly consider using <code class="calibre2">\concept</code> (see <a href="#Indices">Indices</a>) instead of <code class="calibre2">\keyword</code> if you are about to use more than very few non-standard keywords.</p>
<p>The special keyword ‘internal’ marks a page of internal objects that are not part of the package’s API. If the help page for object <code class="calibre2">foo</code> has keyword ‘internal’, then <code class="calibre2">help(foo)</code> gives this help page, but <code class="calibre2">foo</code> is excluded from several object indices, including the alphabetical list of objects in the HTML help system.</p>
<p><code class="calibre2">help.search()</code> can search by keyword, including user-defined values: however the ‘Search Engine &amp; Keywords’ HTML page accessed <em>via</em> <code class="calibre2">help.start()</code> provides single-click access only to a pre-defined list of keywords.</p>
</dd>
</dl>
<hr />
<p><a href="" id="Documenting-data-sets"></a> <a href="" id="Documenting-data-sets-1"></a></p>
<h4 id="documenting-data-sets" class="subsection">2.1.2 Documenting data sets</h4>
<p>The structure of Rd files which document R data sets is slightly different. Sections such as <code class="calibre2">\arguments</code> and <code class="calibre2">\value</code> are not needed but the format and source of the data should be explained.</p>
<p>As an example, let us look at src/library/datasets/man/rivers.Rd which documents the standard R data set <code class="calibre2">rivers</code>.</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="smallexample"><code>\name{rivers}
\docType{data}
\alias{rivers}
\title{Lengths of Major North American Rivers}
\description{
  This data set gives the lengths (in miles) of 141 \dQuote{major}
  rivers in North America, as compiled by the US Geological
  Survey.
}
\usage{rivers}
\format{A vector containing 141 observations.}
\source{World Almanac and Book of Facts, 1975, page 406.}
\references{
  McNeil, D. R. (1977) \emph{Interactive Data Analysis}.
  New York: Wiley.
}
\keyword{datasets}</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>This uses the following additional markup commands.</p>
<dl>
<dt><code class="calibre2">\docType{…}</code></dt>
<dd><p>Indicates the “type” of the documentation object. Always ‘data’ for data sets, and ‘package’ for pkg-package.Rd overview files. Documentation for S4 methods and classes uses ‘methods’ (from <code class="calibre2">promptMethods()</code>) and ‘class’ (from <code class="calibre2">promptClass()</code>).</p>
</dd>
<dt><code class="calibre2">\format{…}</code></dt>
<dd><p><a href="" id="index-_005cformat"></a></p>
<p>A description of the format of the data set (as a vector, matrix, data frame, time series, …). For matrices and data frames this should give a description of each column, preferably as a list or table. See <a href="#Lists-and-tables">Lists and tables</a>, for more information.</p>
</dd>
<dt><code class="calibre2">\source{…}</code></dt>
<dd><p><a href="" id="index-_005csource"></a></p>
<p>Details of the original source (a reference or URL, see <a href="R-exts_split_004.html#Specifying-URLs">Specifying URLs</a>). In addition, section <code class="calibre2">\references</code> could give secondary sources and usages.</p>
</dd>
</dl>
<p>Note also that when documenting data set bar,</p>
<ul>
<li>The <code class="calibre2">\usage</code> entry is always <code class="calibre2">bar</code> or (for packages which do not use lazy-loading of data) <code class="calibre2">data(bar)</code>. (In particular, only document a <em>single</em> data object per Rd file.)</li>
<li>The <code class="calibre2">\keyword</code> entry should always be ‘datasets’.</li>
</ul>
<p>If <code class="calibre2">bar</code> is a data frame, documenting it as a data set can be initiated <em>via</em> <code class="calibre2">prompt(bar)</code>. Otherwise, the <code class="calibre2">promptData</code> function may be used.</p>
<hr />
<p><a href="" id="Documenting-S4-classes-and-methods"></a> <a href="" id="Documenting-S4-classes-and-methods-1"></a></p>
<h4 id="documenting-s4-classes-and-methods" class="subsection">2.1.3 Documenting S4 classes and methods</h4>
<p>There are special ways to use the ‘?’ operator, namely ‘class?topic’ and ‘methods?topic’, to access documentation for S4 classes and methods, respectively. This mechanism depends on conventions for the topic names used in <code class="calibre2">\alias</code> entries. The topic names for S4 classes and methods respectively are of the form</p>
<div class="example">
<pre class="example1"><code>class-class
generic,signature_list-method</code></pre>
</div>
<p>where signature_list contains the names of the classes in the signature of the method (without quotes) separated by ‘,’ (without whitespace), with ‘ANY’ used for arguments without an explicit specification. E.g., ‘genericFunction-class’ is the topic name for documentation for the S4 class <code class="calibre2">&quot;genericFunction&quot;</code>, and ‘coerce,ANY,NULL-method’ is the topic name for documentation for the S4 method for <code class="calibre2">coerce</code> for signature <code class="calibre2">c(&quot;ANY&quot;, &quot;NULL&quot;)</code>.</p>
<p>Skeletons of documentation for S4 classes and methods can be generated by using the functions <code class="calibre2">promptClass()</code> and <code class="calibre2">promptMethods()</code> from package <strong>methods</strong>. If it is necessary or desired to provide an explicit function declaration (in a <code class="calibre2">\usage</code> section) for an S4 method (e.g., if it has “surprising arguments” to be mentioned explicitly), one can use the special markup</p>
<div class="example">
<pre class="example1"><code>\S4method{generic}{signature_list}(argument_list)</code></pre>
</div>
<p>(e.g., ‘\S4method{coerce}{ANY,NULL}(from, to)’).</p>
<p>To make full use of the potential of the on-line documentation system, all user-visible S4 classes and methods in a package should at least have a suitable <code class="calibre2">\alias</code> entry in one of the package’s Rd files. If a package has methods for a function defined originally somewhere else, and does not change the underlying default method for the function, the package is responsible for documenting the methods it creates, but not for the function itself or the default method.</p>
<p>An S4 replacement method is documented in the same way as an S3 one: see the description of <code class="calibre2">\method</code> in <a href="#Documenting-functions">Documenting functions</a>.</p>
<p>See help(&quot;Documentation&quot;, package = &quot;methods&quot;) for more information on using and creating on-line documentation for S4 classes and methods.</p>
<hr />
<p><a href="" id="Documenting-packages"></a> <a href="" id="Documenting-packages-1"></a></p>
<h4 id="documenting-packages" class="subsection">2.1.4 Documenting packages</h4>
<p>Packages may have an overview help page with an <code class="calibre2">\alias</code> <code class="calibre2">pkgname-package</code>, e.g. ‘utils-package’ for the <strong>utils</strong> package, when <code class="calibre2">package?pkgname</code> will open that help page. If a topic named <code class="calibre2">pkgname</code> does not exist in another Rd file, it is helpful to use this as an additional <code class="calibre2">\alias</code>.</p>
<p>Skeletons of documentation for a package can be generated using the function <code class="calibre2">promptPackage()</code>. If the <code class="calibre2">final = LIBS</code> argument is used, then the Rd file will be generated in final form, containing the information that would be produced up to <code class="calibre2">library(help = pkgname)</code>. Otherwise (the default) comments will be inserted giving suggestions for content.</p>
<p>Apart from the mandatory <code class="calibre2">\name</code> and <code class="calibre2">\title</code> and the <code class="calibre2">pkgname-package</code> alias, the only requirement for the package overview page is that it include a <code class="calibre2">\docType{package}</code> statement. All other content is optional. We suggest that it should be a short overview, to give a reader unfamiliar with the package enough information to get started. More extensive documentation is better placed into a package vignette (see <a href="R-exts_split_004.html#Writing-package-vignettes">Writing package vignettes</a>) and referenced from this page, or into individual man pages for the functions, datasets, or classes.</p>
<hr />
<p><a href="" id="Sectioning"></a> <a href="" id="Sectioning-1"></a></p>
<h3 id="sectioning" class="section">2.2 Sectioning</h3>
<p>To begin a new paragraph or leave a blank line in an example, just insert an empty line (as in (La)TeX). To break a line, use <code class="calibre2">\cr</code>. <a href="" id="index-_005ccr"></a></p>
<p>In addition to the predefined sections (such as <code class="calibre2">\description{}</code>, <code class="calibre2">\value{}</code>, etc.), you can “define” arbitrary ones by <code class="calibre2">\section{section_title}{…}</code>. <a href="" id="index-_005csection"></a> For example</p>
<div class="example">
<pre class="example1"><code>\section{Warning}{
  You must not call this function unless …
}</code></pre>
</div>
<p>For consistency with the pre-assigned sections, the section name (the first argument to <code class="calibre2">\section</code>) should be capitalized (but not all upper case). Whitespace between the first and second braced expressions is not allowed. Markup (e.g. <code class="calibre2">\code</code>) within the section title may cause problems with the latex conversion (depending on the version of macro packages such as ‘hyperref’) and so should be avoided.</p>
<p>The <code class="calibre2">\subsection</code> macro takes arguments in the same format as <code class="calibre2">\section</code>, but is used within a section, so it may be used to nest subsections within sections or other subsections. There is no predefined limit on the nesting level, but formatting is not designed for more than 3 levels (i.e. subsections within subsections within sections).</p>
<p>Note that additional named sections are always inserted at a fixed position in the output (before <code class="calibre2">\note</code>, <code class="calibre2">\seealso</code> and the examples), no matter where they appear in the input (but in the same order amongst themselves as in the input).</p>
<hr />
<p><a href="" id="Marking-text"></a> <a href="" id="Marking-text-1"></a></p>
<h3 id="marking-text" class="section">2.3 Marking text</h3>
<p><a href="" id="index-Marking-text-in-documentation"></a></p>
<p>The following logical markup commands are available for emphasizing or quoting text.</p>
<dl>
<dt><code class="calibre2">\emph{text}</code></dt>
<dd><a href="" id="index-_005cemph"></a>
</dd>
<dt><code class="calibre2">\strong{text}</code></dt>
<dd><p><a href="" id="index-_005cstrong"></a></p>
<p>Emphasize text using <em>italic</em> and <strong>bold</strong> font if possible; <code class="calibre2">\strong</code> is regarded as stronger (more emphatic).</p>
</dd>
<dt><code class="calibre2">\bold{text}</code></dt>
<dd><p><a href="" id="index-_005cbold"></a></p>
<p>Set text in <strong>bold</strong> font where possible.</p>
</dd>
<dt><code class="calibre2">\sQuote{text}</code></dt>
<dd><a href="" id="index-_005csQuote"></a>
</dd>
<dt><code class="calibre2">\dQuote{text}</code></dt>
<dd><p><a href="" id="index-_005cdQuote"></a></p>
<p>Portably single or double quote text (without hard-wiring the characters used for quotation marks).</p>
</dd>
</dl>
<p>Each of the above commands takes LaTeX-like input, so other macros may be used within text.</p>
<p>The following logical markup commands are available for indicating specific kinds of text. Except as noted, these take ‘verbatim’ text input, and so other macros may not be used within them. Some characters will need to be escaped (see <a href="#Insertions">Insertions</a>).</p>
<dl>
<dt><code class="calibre2">\code{text}</code></dt>
<dd><p><a href="" id="index-_005ccode"></a></p>
<p>Indicate text that is a literal example of a piece of an R program, e.g., a fragment of R code or the name of an R object. Text is entered in R-like syntax, and displayed using <code class="calibre2">typewriter</code> font where possible. Macros <code class="calibre2">\var</code> and <code class="calibre2">\link</code> are interpreted within text.</p>
</dd>
<dt><code class="calibre2">\preformatted{text}</code></dt>
<dd><p><a href="" id="index-_005cpreformatted"></a></p>
<p>Indicate text that is a literal example of a piece of a program. Text is displayed using <code class="calibre2">typewriter</code> font where possible. Formatting, e.g. line breaks, is preserved. (Note that this includes a line break after the initial {, so typically text should start on the same line as the command.)</p>
<p>Due to limitations in LaTeX as of this writing, this macro may not be nested within other markup macros other than <code class="calibre2">\dQuote</code> and <code class="calibre2">\sQuote</code>, as errors or bad formatting may result.</p>
</dd>
<dt><code class="calibre2">\kbd{keyboard-characters}</code></dt>
<dd><p><a href="" id="index-_005ckbd"></a></p>
<p>Indicate keyboard input, using slanted typewriter font if possible, so users can distinguish the characters they are supposed to type from computer output. Text is entered ‘verbatim’.</p>
</dd>
<dt><code class="calibre2">\samp{text}</code></dt>
<dd><p><a href="" id="index-_005csamp"></a></p>
<p>Indicate text that is a literal example of a sequence of characters, entered ‘verbatim’. No wrapping or reformatting will occur. Displayed using <code class="calibre2">typewriter</code> font where possible.</p>
</dd>
<dt><code class="calibre2">\verb{text}</code></dt>
<dd><p><a href="" id="index-_005cverb"></a></p>
<p>Indicate text that is a literal example of a sequence of characters, with no interpretation of e.g. <code class="calibre2">\var</code>, but which will be included within word-wrapped text. Displayed using <code class="calibre2">typewriter</code> font if possible.</p>
</dd>
<dt><code class="calibre2">\pkg{package_name}</code></dt>
<dd><p><a href="" id="index-_005cpkg"></a></p>
<p>Indicate the name of an R package. LaTeX-like.</p>
</dd>
<dt><code class="calibre2">\file{file_name}</code></dt>
<dd><p><a href="" id="index-_005cfile"></a></p>
<p>Indicate the name of a file. Text is LaTeX-like, so backslash needs to be escaped. Displayed using a distinct font where possible.</p>
</dd>
<dt><code class="calibre2">\email{email_address}</code></dt>
<dd><p><a href="" id="index-_005cemail"></a></p>
<p>Indicate an electronic mail address. LaTeX-like, will be rendered as a hyperlink in HTML and PDF conversion. Displayed using <code class="calibre2">typewriter</code> font where possible.</p>
</dd>
<dt><code class="calibre2">\url{uniform_resource_locator}</code></dt>
<dd><p><a href="" id="index-_005curl"></a></p>
<p>Indicate a uniform resource locator (URL) for the World Wide Web. The argument is handled as ‘verbatim’ text (with percent and braces escaped by backslash), and rendered as a hyperlink in HTML and PDF conversion. Linefeeds are removed, and leading and trailing whitespace<a href="R-exts_split_014.html#FOOT95" id="DOCF95"><sup>95</sup></a> is removed. See <a href="R-exts_split_004.html#Specifying-URLs">Specifying URLs</a>.</p>
<p>Displayed using <code class="calibre2">typewriter</code> font where possible.</p>
</dd>
<dt><code class="calibre2">\href{uniform_resource_locator}{text}</code></dt>
<dd><p><a href="" id="index-_005chref"></a></p>
<p>Indicate a hyperlink to the World Wide Web. The first argument is handled as ‘verbatim’ text (with percent and braces escaped by backslash) and is used as the URL in the hyperlink, with the second argument of LaTeX-like text displayed to the user. Linefeeds are removed from the first argument, and leading and trailing whitespace is removed.</p>
<p>Note that RFC3986-encoded URLs (e.g. using ‘\%28VS.85\%29’ in place of ‘(VS.85)’) may not work correctly in versions of R before 3.1.3 and are best avoided—use <code class="calibre2">URLdecode()</code> to decode them.</p>
</dd>
<dt><code class="calibre2">\var{metasyntactic_variable}</code></dt>
<dd><p><a href="" id="index-_005cvar"></a></p>
<p>Indicate a metasyntactic variable. In some cases this will be rendered distinctly, e.g. in italic, but not in all<a href="R-exts_split_014.html#FOOT96" id="DOCF96"><sup>96</sup></a>. LaTeX-like.</p>
</dd>
<dt><code class="calibre2">\env{environment_variable}</code></dt>
<dd><p><a href="" id="index-_005cenv"></a></p>
<p>Indicate an environment variable. ‘Verbatim’. Displayed using <code class="calibre2">typewriter</code> font where possible</p>
</dd>
<dt><code class="calibre2">\option{option}</code></dt>
<dd><p><a href="" id="index-_005coption"></a></p>
<p>Indicate a command-line option. ‘Verbatim’. Displayed using <code class="calibre2">typewriter</code> font where possible.</p>
</dd>
<dt><code class="calibre2">\command{command_name}</code></dt>
<dd><p><a href="" id="index-_005ccommand"></a></p>
<p>Indicate the name of a command. LaTeX-like, so <code class="calibre2">\var</code> is interpreted. Displayed using <code class="calibre2">typewriter</code> font where possible.</p>
</dd>
<dt><code class="calibre2">\dfn{term}</code></dt>
<dd><p><a href="" id="index-_005cdfn"></a></p>
<p>Indicate the introductory or defining use of a term. LaTeX-like.</p>
</dd>
<dt><code class="calibre2">\cite{reference}</code></dt>
<dd><p><a href="" id="index-_005ccite"></a></p>
<p>Indicate a reference without a direct cross-reference <em>via</em> <code class="calibre2">\link</code> (see <a href="#Cross_002dreferences">Cross-references</a>), such as the name of a book. LaTeX-like.</p>
</dd>
<dt><code class="calibre2">\acronym{acronym}</code></dt>
<dd><p><a href="" id="index-_005cacronym"></a></p>
<p>Indicate an acronym (an abbreviation written in all capital letters), such as GNU. LaTeX-like.</p>
</dd>
</dl>
<hr />
<p><a href="" id="Lists-and-tables"></a> <a href="" id="Lists-and-tables-1"></a></p>
<h3 id="lists-and-tables" class="section">2.4 Lists and tables</h3>
<p><a href="" id="index-Lists-and-tables-in-documentation"></a> <a href="" id="index-_005citemize"></a> <a href="" id="index-_005cenumerate"></a></p>
<p>The <code class="calibre2">\itemize</code> and <code class="calibre2">\enumerate</code> commands take a single argument, within which there may be one or more <code class="calibre2">\item</code> commands. The text following each <code class="calibre2">\item</code> is formatted as one or more paragraphs, suitably indented and with the first paragraph marked with a bullet point (<code class="calibre2">\itemize</code>) or a number (<code class="calibre2">\enumerate</code>).</p>
<p>Note that unlike argument lists, <code class="calibre2">\item</code> in these formats is followed by a space and the text (not enclosed in braces). For example</p>
<div class="example">
<pre class="example1"><code>  \enumerate{
    \item A database consists of one or more records, each with one or
    more named fields.
    \item Regular lines start with a non-whitespace character.
    \item Records are separated by one or more empty lines.
  }</code></pre>
</div>
<p><code class="calibre2">\itemize</code> and <code class="calibre2">\enumerate</code> commands may be nested.</p>
<p><a href="" id="index-_005cdescribe"></a></p>
<p>The <code class="calibre2">\describe</code> command is similar to <code class="calibre2">\itemize</code> but allows initial labels to be specified. Each <code class="calibre2">\item</code> takes two arguments, the label and the body of the item, in exactly the same way as an argument or value <code class="calibre2">\item</code>. <code class="calibre2">\describe</code> commands are mapped to <code class="calibre2">&lt;DL&gt;</code> lists in HTML and <code class="calibre2">\description</code> lists in LaTeX.</p>
<p><a href="" id="index-_005ctabular"></a></p>
<p>The <code class="calibre2">\tabular</code> command takes two arguments. The first gives for each of the columns the required alignment (‘l’ for left-justification, ‘r’ for right-justification or ‘c’ for centring.) The second argument consists of an arbitrary number of lines separated by <code class="calibre2">\cr</code>, and with fields separated by <code class="calibre2">\tab</code>. For example:</p>
<div class="example">
<pre class="example1"><code>  \tabular{rlll}{
    [,1] \tab Ozone   \tab numeric \tab Ozone (ppb)\cr
    [,2] \tab Solar.R \tab numeric \tab Solar R (lang)\cr
    [,3] \tab Wind    \tab numeric \tab Wind (mph)\cr
    [,4] \tab Temp    \tab numeric \tab Temperature (degrees F)\cr
    [,5] \tab Month   \tab numeric \tab Month (1--12)\cr
    [,6] \tab Day     \tab numeric \tab Day of month (1--31)
  }</code></pre>
</div>
<p>There must be the same number of fields on each line as there are alignments in the first argument, and they must be non-empty (but can contain only spaces). (There is no whitespace between <code class="calibre2">\tabular</code> and the first argument, nor between the two arguments.)</p>
<hr />
<p><a href="" id="Cross_002dreferences"></a> <a href="" id="Cross_002dreferences-1"></a></p>
<h3 id="cross-references" class="section">2.5 Cross-references</h3>
<p><a href="" id="index-Cross_002dreferences-in-documentation"></a> <a href="" id="index-_005clink"></a></p>
<p>The markup <code class="calibre2">\link{foo}</code> (usually in the combination <code class="calibre2">\code{\link{foo}}</code>) produces a hyperlink to the help for foo. Here foo is a <em>topic</em>, that is the argument of <code class="calibre2">\alias</code> markup in another Rd file (possibly in another package). Hyperlinks are supported in some of the formats to which Rd files are converted, for example HTML and PDF, but ignored in others, e.g. the text format.</p>
<p>One main usage of <code class="calibre2">\link</code> is in the <code class="calibre2">\seealso</code> section of the help page, see <a href="#Rd-format">Rd format</a>.</p>
<p>Note that whereas leading and trailing spaces are stripped when extracting a topic from a <code class="calibre2">\alias</code>, they are not stripped when looking up the topic of a <code class="calibre2">\link</code>.</p>
<p><a href="" id="index-_005clinkS4class"></a></p>
<p>You can specify a link to a different topic than its name by <code class="calibre2">\link[=dest]{name}</code> which links to topic dest with name name. This can be used to refer to the documentation for S3/4 classes, for example <code class="calibre2">\code{&quot;\link[=abc-class]{abc}&quot;}</code> would be a way to refer to the documentation of an S4 class <code class="calibre2">&quot;abc&quot;</code> defined in your package, and <code class="calibre2">\code{&quot;\link[=terms.object]{terms}&quot;}</code> to the S3 <code class="calibre2">&quot;terms&quot;</code> class (in package <strong>stats</strong>). To make these easy to read in the source file, <code class="calibre2">\code{&quot;\linkS4class{abc}&quot;}</code> expands to the form given above.</p>
<p>There are two other forms of optional argument specified as <code class="calibre2">\link[pkg]{foo}</code> and <code class="calibre2">\link[pkg:bar]{foo}</code> to link to the package <strong>pkg</strong>, to <em>files</em> foo.html and bar.html respectively. These are rarely needed, perhaps to refer to not-yet-installed packages (but there the HTML help system will resolve the link at run time) or in the normally undesirable event that more than one package offers help on a topic<a href="R-exts_split_014.html#FOOT97" id="DOCF97"><sup>97</sup></a> (in which case the present package has precedence so this is only needed to refer to other packages). They are currently only used in HTML help (and ignored for hyperlinks in LaTeX conversions of help pages), and link to the file rather than the topic (since there is no way to know which topics are in which files in an uninstalled package). The <strong>only</strong> reason to use these forms for base and recommended packages is to force a reference to a package that might be further down the search path. Because they have been frequently misused, the HTML help system looks for topic <code class="calibre2">foo</code> in package <strong>pkg</strong> if it does not find file foo.html.</p>
<hr />
<p><a href="" id="Mathematics"></a> <a href="" id="Mathematics-1"></a></p>
<h3 id="mathematics" class="section">2.6 Mathematics</h3>
<p><a href="" id="index-Mathematics-in-documentation"></a> <a href="" id="index-_005ceqn"></a> <a href="" id="index-_005cdeqn"></a></p>
<p>Mathematical formulae should be set beautifully for printed documentation yet we still want something useful for text and HTML online help. To this end, the two commands <code class="calibre2">\eqn{latex}{ascii}</code> and <code class="calibre2">\deqn{latex}{ascii}</code> are used. Whereas <code class="calibre2">\eqn</code> is used for “inline” formulae (corresponding to TeX’s <code class="calibre2">$…$</code>), <code class="calibre2">\deqn</code> gives “displayed equations” (as in LaTeX’s <code class="calibre2">displaymath</code> environment, or TeX’s <code class="calibre2">$$…$$</code>). Both arguments are treated as ‘verbatim’ text.</p>
<p>Both commands can also be used as <code class="calibre2">\eqn{latexascii}</code> (only <em>one</em> argument) which then is used for both latex and ascii. No whitespace is allowed between command and the first argument, nor between the first and second arguments.</p>
<p>The following example is from Poisson.Rd:</p>
<div class="example">
<pre class="example1"><code>  \deqn{p(x) = \frac{\lambda^x e^{-\lambda}}{x!}}{%
        p(x) = \lambda^x exp(-\lambda)/x!}
  for \eqn{x = 0, 1, 2, \ldots}.</code></pre>
</div>
<p>For text on-line help we get</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>    p(x) = lambda^x exp(-lambda)/x!

for x = 0, 1, 2, ....</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>Greek letters (both cases) will be rendered in HTML if preceded by a backslash, <code class="calibre2">\dots</code> and <code class="calibre2">\ldots</code> will be rendered as ellipses and <code class="calibre2">\sqrt</code>, <code class="calibre2">\ge</code> and <code class="calibre2">\le</code> as mathematical symbols.</p>
<p>Note that only basic LaTeX can be used, there being no provision to specify LaTeX style files such as the AMS extensions.</p>
<hr />
<p><a href="" id="Figures"></a> <a href="" id="Figures-1"></a></p>
<h3 id="figures" class="section">2.7 Figures</h3>
<p><a href="" id="index-Figures-in-documentation"></a> <a href="" id="index-_005cfigure"></a></p>
<p>To include figures in help pages, use the <code class="calibre2">\figure</code> markup. There are three forms.</p>
<p>The two commonly used simple forms are <code class="calibre2">\figure{filename}</code> and <code class="calibre2">\figure{filename}{alternate text}</code>. This will include a copy of the figure in either HTML or LaTeX output. In text output, the alternate text will be displayed instead. (When the second argument is omitted, the filename will be used.) Both the filename and the alternate text will be parsed verbatim, and should not include special characters that are significant in HTML or LaTeX.</p>
<p>The expert form is <code class="calibre2">\figure{filename}{options: string}</code>. (The word ‘options:’ must be typed exactly as shown and followed by at least one space.) In this form, the string is copied into the HTML <code class="calibre2">img</code> tag as attributes following the <code class="calibre2">src</code> attribute, or into the second argument of the <code class="calibre2">\Figure</code> macro in LaTeX, which by default is used as options to an <code class="calibre2">\includegraphics</code> call. As it is unlikely that any single string would suffice for both display modes, the expert form would normally be wrapped in conditionals. It is up to the author to make sure that legal HTML/LaTeX is used. For example, to include a logo in both HTML (using the simple form) and LaTeX (using the expert form), the following could be used:</p>
<div class="example">
<pre class="example1"><code>\if{html}{\figure{Rlogo.svg}{options: width=100 alt=&quot;R logo&quot;}}
\if{latex}{\figure{Rlogo.pdf}{options: width=0.5in}}</code></pre>
</div>
<p>The files containing the figures should be stored in the directory man/figures. Files with extensions .jpg, .jpeg, .pdf, .png and .svg from that directory will be copied to the help/figures directory at install time. (Figures in PDF format will not display in most HTML browsers, but might be the best choice in reference manuals.) Specify the filename relative to man/figures in the <code class="calibre2">\figure</code> directive.</p>
<hr />
<p><a href="" id="Insertions"></a> <a href="" id="Insertions-1"></a></p>
<h3 id="insertions" class="section">2.8 Insertions</h3>
<p><a href="" id="index-_005cR"></a></p>
<p>Use <code class="calibre2">\R</code> for the R system itself. Use <code class="calibre2">\dots</code> <a href="" id="index-_005cdots"></a> for the dots in function argument lists ‘…’, and <code class="calibre2">\ldots</code> <a href="" id="index-_005cldots"></a> for ellipsis dots in ordinary text.<a href="R-exts_split_014.html#FOOT98" id="DOCF98"><sup>98</sup></a> These can be followed by <code class="calibre2">{}</code>, and should be unless followed by whitespace.</p>
<p>After an unescaped ‘%’, you can put your own comments regarding the help text. The rest of the line (but not the newline at the end) will be completely disregarded. Therefore, you can also use it to make part of the “help” invisible.</p>
<p>You can produce a backslash (‘\’) by escaping it by another backslash. (Note that <code class="calibre2">\cr</code> is used for generating line breaks.)</p>
<p>The “comment” character ‘%’ and unpaired braces<a href="R-exts_split_014.html#FOOT99" id="DOCF99"><sup>99</sup></a> <em>almost always</em> need to be escaped by ‘\’, and ‘\\’ can be used for backslash and needs to be when there are two or more adjacent backslashes. In R-like code quoted strings are handled slightly differently; see <a href="https://developer.r-project.org/parseRd.pdf">“Parsing Rd files”</a> for details – in particular braces should not be escaped in quoted strings.</p>
<p>All of ‘% { } \’ should be escaped in LaTeX-like text.</p>
<p><a href="" id="index-_005cenc"></a></p>
<p>Text which might need to be represented differently in different encodings should be marked by <code class="calibre2">\enc</code>, e.g. <code class="calibre2">\enc{Jöreskog}{Joreskog}</code> (with no whitespace between the braces) where the first argument will be used where encodings are allowed and the second should be ASCII (and is used for e.g. the text conversion in locales that cannot represent the encoded form). (This is intended to be used for individual words, not whole sentences or paragraphs.)</p>
<hr />
<p><a href="" id="Indices"></a> <a href="" id="Indices-1"></a></p>
<h3 id="indices" class="section">2.9 Indices</h3>
<p><a href="" id="index-Indices"></a></p>
<p>The <code class="calibre2">\alias</code> command (see <a href="#Documenting-functions">Documenting functions</a>) is used to specify the “topics” documented, which should include <em>all</em> R objects in a package such as functions and variables, data sets, and S4 classes and methods (see <a href="#Documenting-S4-classes-and-methods">Documenting S4 classes and methods</a>). The on-line help system searches the index data base consisting of all alias topics.</p>
<p><a href="" id="index-_005cconcept"></a></p>
<p>In addition, it is possible to provide “concept index entries” using <code class="calibre2">\concept</code>, which can be used for <code class="calibre2">help.search()</code> lookups. E.g., file cor.test.Rd in the standard package <strong>stats</strong> contains</p>
<div class="example">
<pre class="example1"><code>\concept{Kendall correlation coefficient}
\concept{Pearson correlation coefficient}
\concept{Spearman correlation coefficient}</code></pre>
</div>
<p>so that e.g. ??Spearman will succeed in finding the help page for the test for association between paired samples using Spearman’s rho.</p>
<p>(Note that <code class="calibre2">help.search()</code> only uses “sections” of documentation objects with no additional markup.)</p>
<p>If you want to cross reference such items from other help files <em>via</em> <code class="calibre2">\link</code>, you need to use <code class="calibre2">\alias</code> and not <code class="calibre2">\concept</code>.</p>
<hr />
<p><a href="" id="Platform_002dspecific-sections"></a> <a href="" id="Platform_002dspecific-documentation"></a></p>
<h3 id="platform-specific-documentation" class="section">2.10 Platform-specific documentation</h3>
<p><a href="" id="index-Platform_002dspecific-documentation"></a></p>
<p>Sometimes the documentation needs to differ by platform. Currently two OS-specific options are available, ‘unix’ and ‘windows’, and lines in the help source file can be enclosed in</p>
<div class="example">
<pre class="example1"><code>#ifdef OS
   ...
#endif</code></pre>
</div>
<p>or</p>
<div class="example">
<pre class="example1"><code>#ifndef OS
   ...
#endif</code></pre>
</div>
<p>for OS-specific inclusion or exclusion. Such blocks should not be nested, and should be entirely within a block (that, is between the opening and closing brace of a section or item), or at top-level contain one or more complete sections.</p>
<p>If the differences between platforms are extensive or the R objects documented are only relevant to one platform, platform-specific Rd files can be put in a unix or windows subdirectory.</p>
<hr />
<p><a href="" id="Conditional-text"></a> <a href="" id="Conditional-text-1"></a></p>
<h3 id="conditional-text" class="section">2.11 Conditional text</h3>
<p><a href="" id="index-conditionals"></a> <a href="" id="index-_005cif"></a> <a href="" id="index-_005cifelse"></a> <a href="" id="index-_005cout"></a></p>
<p>Occasionally the best content for one output format is different from the best content for another. For this situation, the <code class="calibre2">\if{format}{text}</code> or <code class="calibre2">\ifelse{format}{text}{alternate}</code> markup is used. Here format is a comma separated list of formats in which the text should be rendered. The alternate will be rendered if the format does not match. Both text and alternate may be any sequence of text and markup.</p>
<p>Currently the following formats are recognized: <code class="calibre2">example</code>, <code class="calibre2">html</code>, <code class="calibre2">latex</code> and <code class="calibre2">text</code>. These select output for the corresponding targets. (Note that <code class="calibre2">example</code> refers to extracted example code rather than the displayed example in some other format.) Also accepted are <code class="calibre2">TRUE</code> (matching all formats) and <code class="calibre2">FALSE</code> (matching no formats). These could be the output of the <code class="calibre2">\Sexpr</code> macro (see <a href="#Dynamic-pages">Dynamic pages</a>).</p>
<p>The <code class="calibre2">\out{literal}</code> macro would usually be used within the text part of <code class="calibre2">\if{format}{text}</code>. It causes the renderer to output the literal text exactly, with no attempt to escape special characters. For example, use the following to output the markup necessary to display the Greek letter in LaTeX or HTML, and the text string <code class="calibre2">alpha</code> in other formats:</p>
<div class="example">
<pre class="example1"><code>\ifelse{latex}{\out{$\alpha$}}{\ifelse{html}{\out{&amp;alpha;}}{alpha}}</code></pre>
</div>
<hr />
<p><a href="" id="Dynamic-pages"></a> <a href="" id="Dynamic-pages-1"></a></p>
<h3 id="dynamic-pages" class="section">2.12 Dynamic pages</h3>
<p><a href="" id="index-dynamic-pages"></a> <a href="" id="index-_005cSexpr"></a> <a href="" id="index-_005cRdOpts"></a></p>
<p>Two macros supporting dynamically generated man pages are <code class="calibre2">\Sexpr</code> and <code class="calibre2">\RdOpts</code>. These are modelled after Sweave, and are intended to contain executable R expressions in the Rd file.</p>
<p>The main argument to <code class="calibre2">\Sexpr</code> must be valid R code that can be executed. It may also take options in square brackets before the main argument. Depending on the options, the code may be executed at package build time, package install time, or man page rendering time.</p>
<p>The options follow the same format as in Sweave, but different options are supported. Currently the allowed options and their defaults are:</p>
<ul>
<li><code class="calibre2">eval=TRUE</code> Whether the R code should be evaluated.</li>
<li><code class="calibre2">echo=FALSE</code> Whether the R code should be echoed. If <code class="calibre2">TRUE</code>, a display will be given in a preformatted block. For example, <code class="calibre2">\Sexpr[echo=TRUE]{ x &lt;- 1 }</code> will be displayed as
<div class="example">
<pre class="example1"><code>&gt; x &lt;- 1</code></pre>
</div></li>
<li><code class="calibre2">keep.source=TRUE</code> Whether to keep the author’s formatting when displaying the code, or throw it away and use a deparsed version.</li>
<li><code class="calibre2">results=text</code> How should the results be displayed? The possibilities are:
<ul>
<li>- <code class="calibre2">results=text</code> Apply <code class="calibre2">as.character()</code> to the result of the code, and insert it as a text element.</li>
<li>- <code class="calibre2">results=verbatim</code> Print the results of the code just as if it was executed at the console, and include the printed results verbatim. (Invisible results will not print.)</li>
<li>- <code class="calibre2">results=rd</code> The result is assumed to be a character vector containing markup to be passed to <code class="calibre2">parse_Rd()</code>, with the result inserted in place. This could be used to insert computed aliases, for instance. <code class="calibre2">parse_Rd()</code> is called first with <code class="calibre2">fragment = FALSE</code> to allow a single Rd section macro to be inserted. If that fails, it is called again with <code class="calibre2">fragment = TRUE</code>, the older behavior.</li>
<li>- <code class="calibre2">results=hide</code> Insert no output.</li>
</ul></li>
<li><code class="calibre2">strip.white=TRUE</code> Remove leading and trailing white space from each line of output if <code class="calibre2">strip.white=TRUE</code>. With <code class="calibre2">strip.white=all</code>, also remove blank lines.</li>
<li><p><code class="calibre2">stage=install</code> Control when this macro is run. Possible values are</p>
<ul>
<li>- <code class="calibre2">stage=build</code> The macro is run when building a source tarball.</li>
<li>- <code class="calibre2">stage=install</code> The macro is run when installing from source.</li>
<li>- <code class="calibre2">stage=render</code> The macro is run when displaying the help page.</li>
</ul>
<p>Conditionals such as <code class="calibre2">#ifdef</code> (see <a href="#Platform_002dspecific-sections">Platform-specific sections</a>) are applied after the <code class="calibre2">build</code> macros but before the <code class="calibre2">install</code> macros. In some situations (e.g. installing directly from a source directory without a tarball, or building a binary package) the above description is not literally accurate, but authors can rely on the sequence being <code class="calibre2">build</code>, <code class="calibre2">#ifdef</code>, <code class="calibre2">install</code>, <code class="calibre2">render</code>, with all stages executed.</p>
<p>Code is only run once in each stage, so a <code class="calibre2">\Sexpr[results=rd]</code> macro can output an <code class="calibre2">\Sexpr</code> macro designed for a later stage, but not for the current one or any earlier stage.</p></li>
<li><code class="calibre2">width, height, fig</code> These options are currently allowed but ignored.</li>
</ul>
<p>The <code class="calibre2">\RdOpts</code> macro is used to set new defaults for options to apply to following uses of <code class="calibre2">\Sexpr</code>.</p>
<p>For more details, see the online document <a href="https://developer.r-project.org/parseRd.pdf">“Parsing Rd files”</a>.</p>
<hr />
<p><a href="" id="User_002ddefined-macros"></a> <a href="" id="User_002ddefined-macros-1"></a></p>
<h3 id="user-defined-macros" class="section">2.13 User-defined macros</h3>
<p><a href="" id="index-user_002ddefined-macros"></a> <a href="" id="index-_005cnewcommand"></a> <a href="" id="index-_005crenewcommand"></a></p>
<p>The <code class="calibre2">\newcommand</code> and <code class="calibre2">\renewcommand</code> macros allow new macros to be defined within an Rd file. These are similar but not identical to the same-named LaTeX macros.</p>
<p>They each take two arguments which are parsed verbatim. The first is the name of the new macro including the initial backslash, and the second is the macro definition. As in LaTeX, <code class="calibre2">\newcommand</code> requires that the new macro not have been previously defined, whereas <code class="calibre2">\renewcommand</code> allows existing macros (including all built-in ones) to be replaced. (As from version 3.2.0, this test is disabled by default, but may be enabled by setting the environment variable <code class="calibre2">_WARN_DUPLICATE_RD_MACROS_</code> to a true value.)</p>
<p>Also as in LaTeX, the new macro may be defined to take arguments, and numeric placeholders such as <code class="calibre2">#1</code> are used in the macro definition. However, unlike LaTeX, the number of arguments is determined automatically from the highest placeholder number seen in the macro definition. For example, a macro definition containing <code class="calibre2">#1</code> and <code class="calibre2">#3</code> (but no other placeholders) will define a three argument macro (whose second argument will be ignored). As in LaTeX, at most 9 arguments may be defined. If the <code class="calibre2">#</code> character is followed by a non-digit it will have no special significance. All arguments to user-defined macros will be parsed as verbatim text, and simple text-substitution will be used to replace the place-holders, after which the replacement text will be parsed.</p>
<p>As of R version 3.2.0, a number of macros are defined in the file share/Rd/macros/system.Rd of the R source or home directory, and these will normally be available in all .Rd files. For example, that file contains the definition</p>
<div class="example">
<pre class="example1"><code>\newcommand{\PR}{\Sexpr[results=rd]{tools:::Rd_expr_PR(#1)}}</code></pre>
</div>
<p>which defines <code class="calibre2">\PR</code> to be a single argument macro; then code (typically used in the NEWS.Rd file) like</p>
<div class="example">
<pre class="example1"><code>\PR{1234}</code></pre>
</div>
<p>will expand to</p>
<div class="example">
<pre class="example1"><code>\Sexpr[results=rd]{tools:::Rd_expr_PR(1234)}</code></pre>
</div>
<p>when parsed.</p>
<p>Some macros that might be of general use are:</p>
<dl>
<dt><code class="calibre2">\CRANpkg{pkg}</code> <a href="" id="index-_005cCRANpkg_007bpkg_007d"></a> </dt>
<dd><p>A package on CRAN</p>
</dd>
<dt><code class="calibre2">\sspace</code> <a href="" id="index-_005csspace"></a> </dt>
<dd><p>A single space (used after a period that does not end a sentence).</p>
</dd>
<dt><code class="calibre2">\doi{numbers}</code> <a href="" id="index-_005cdoi_007bnumbers_007d"></a> </dt>
<dd><p>A digital object identifier (DOI).</p>
</dd>
</dl>
<p>See the system.Rd file in share/Rd/macros for more details and macro definitions, including macros <code class="calibre2">\packageTitle</code>, <code class="calibre2">\packageDescription</code>, <code class="calibre2">\packageAuthor</code>, <code class="calibre2">\packageMaintainer</code>, <code class="calibre2">\packageDESCRIPTION</code> and <code class="calibre2">\packageIndices</code>. <a href="" id="index-_005cpackageTitle"></a> <a href="" id="index-_005cpackageDescription"></a> <a href="" id="index-_005cpackageAuthor"></a> <a href="" id="index-_005cpackageMaintainer"></a> <a href="" id="index-_005cpackageDESCRIPTION"></a> <a href="" id="index-_005cpackageIndices"></a></p>
<p>Packages may also define their own common macros; these would be stored in an .Rd file in man/macros in the package source and will be installed into help/macros when the package is installed. A package may also use the macros from a different package by listing the other package in the ‘RdMacros’ field in the DESCRIPTION file.</p>
<hr />
<p><a href="" id="Encoding"></a> <a href="" id="Encoding-1"></a></p>
<h3 id="encoding" class="section">2.14 Encoding</h3>
<p><a href="" id="index-encoding"></a></p>
<p>Rd files are text files and so it is impossible to deduce the encoding they are written in unless ASCII: files with 8-bit characters could be UTF-8, Latin-1, Latin-9, KOI8-R, EUC-JP, <em>etc</em>. So an <code class="calibre2">\encoding{}</code> section must be used to specify the encoding if it is not ASCII. (The <code class="calibre2">\encoding{}</code> section must be on a line by itself, and in particular one containing no non-ASCII characters. The encoding declared in the DESCRIPTION file will be used if none is declared in the file.) The Rd files are converted to UTF-8 before parsing and so the preferred encoding for the files themselves is now UTF-8.</p>
<p>Wherever possible, avoid non-ASCII chars in Rd files, and even symbols such as ‘&lt;’, ‘&gt;’, ‘$’, ‘^’, ‘&amp;’, ‘|’, ‘@’, ‘~’, and ‘*’ outside ‘verbatim’ environments (since they may disappear in fonts designed to render text). (Function <code class="calibre2">showNonASCIIfile</code> in package <strong>tools</strong> can help in finding non-ASCII bytes in the files.)</p>
<p>For convenience, encoding names ‘latin1’ and ‘latin2’ are always recognized: these and ‘UTF-8’ are likely to work fairly widely. However, this does not mean that all characters in UTF-8 will be recognized, and the coverage of non-Latin characters<a href="R-exts_split_014.html#FOOT100" id="DOCF100"><sup>100</sup></a> is fairly low. Using LaTeX <code class="calibre2">inputenx</code> (see <code class="calibre2">?Rd2pdf</code> in R) will give greater coverage of UTF-8.</p>
<p>The <code class="calibre2">\enc</code> command (see <a href="#Insertions">Insertions</a>) can be used to provide transliterations which will be used in conversions that do not support the declared encoding.</p>
<p>The LaTeX conversion converts the file to UTF-8 from the declared encoding, and includes a</p>
<div class="example">
<pre class="example1"><code>\inputencoding{utf8}</code></pre>
</div>
<p>command, and this needs to be matched by a suitable invocation of the <code class="calibre2">\usepackage{inputenc}</code> command. The R utility <code class="calibre2">R CMD Rd2pdf</code> looks at the converted code and includes the encodings used: it might for example use</p>
<div class="example">
<pre class="example1"><code>\usepackage[utf8]{inputenc}</code></pre>
</div>
<p>(Use of <code class="calibre2">utf8</code> as an encoding requires LaTeX dated 2003/12/01 or later. Also, the use of Cyrillic characters in ‘UTF-8’ appears to also need ‘\usepackage[T2A]{fontenc}’, and <code class="calibre2">R CMD Rd2pdf</code> includes this conditionally on the file t2aenc.def being present and environment variable <code class="calibre2">_R_CYRILLIC_TEX_</code> being set.)</p>
<p>Note that this mechanism works best with Latin letters: the coverage of UTF-8 in LaTeX is quite low.</p>
<hr />
<p><a href="" id="Processing-documentation-files"></a> <a href="" id="Processing-documentation-files-1"></a></p>
<h3 id="processing-documentation-files" class="section">2.15 Processing documentation files</h3>
<p><a href="" id="index-Processing-Rd-format"></a></p>
<p>There are several commands to process Rd files from the system command line.</p>
<p><a href="" id="index-R-CMD-Rdconv"></a></p>
<p>Using <code class="calibre2">R CMD Rdconv</code> one can convert R documentation format to other formats, or extract the executable examples for run-time testing. The currently supported conversions are to plain text, HTML and LaTeX as well as extraction of the examples.</p>
<p><a href="" id="index-R-CMD-Rd2pdf"></a></p>
<p><code class="calibre2">R CMD Rd2pdf</code> generates PDF output from documentation in Rd files, which can be specified either explicitly or by the path to a directory with the sources of a package. In the latter case, a reference manual for all documented objects in the package is created, including the information in the DESCRIPTION files.</p>
<p><a href="" id="index-R-CMD-Sweave"></a> <a href="" id="index-R-CMD-Stangle"></a></p>
<p><code class="calibre2">R CMD Sweave</code> and <code class="calibre2">R CMD Stangle</code> process vignette-like documentation files (e.g. Sweave vignettes with extension ‘.Snw’ or ‘.Rnw’, or other non-Sweave vignettes). <code class="calibre2">R CMD Stangle</code> is used to extract the R code fragments.</p>
<p>The exact usage and a detailed list of available options for all of these commands can be obtained by running <code class="calibre2">R CMD command --help</code>, e.g., R CMD Rdconv --help. All available commands can be listed using R --help (or Rcmd --help under Windows).</p>
<p>All of these work under Windows. You may need to have installed the the tools to build packages from source as described in the “R Installation and Administration” manual, although typically all that is needed is a LaTeX installation.</p>
<hr />
<p><a href="" id="Editing-Rd-files"></a> <a href="" id="Editing-Rd-files-1"></a></p>
<h3 id="editing-rd-files" class="section">2.16 Editing Rd files</h3>
<p><a href="" id="index-Editing-Rd-files"></a></p>
<p>It can be very helpful to prepare .Rd files using a editor which knows about their syntax and will highlight commands, indent to show the structure and detect mis-matched braces, and so on.</p>
<p>The system most commonly used for this is some version of <code class="calibre2">Emacs</code> (including <code class="calibre2">XEmacs</code>) with the ESS package (<a href="https://ESS.R-project.org/" class="uri">https://ESS.R-project.org/</a>: it is often is installed with <code class="calibre2">Emacs</code> but may need to be loaded, or even installed, separately).</p>
<p>Another is the Eclipse IDE with the Stat-ET plugin (<a href="http://www.walware.de/goto/statet" class="uri">http://www.walware.de/goto/statet</a>), and (on Windows only) Tinn-R (<a href="http://sourceforge.net/projects/tinn-r/" class="uri">http://sourceforge.net/projects/tinn-r/</a>).</p>
<p>People have also used LaTeX mode in a editor, as .Rd files are rather similar to LaTeX files.</p>
<p>Some R front-ends provide editing support for .Rd files, for example RStudio (<a href="https://rstudio.org/" class="uri">https://rstudio.org/</a>).</p>
<hr />
<p><a href="" id="Tidying-and-profiling-R-code"></a> <a href="" id="Tidying-and-profiling-R-code-1"></a></p>
<div id="calibre_pb_8" class="calibre6">

</div>

<!--chapter:end:6-R-exts.Rmd-->

#  Tidying and profiling R code
<p>R code which is worth preserving in a package and perhaps making available for others to use is worth documenting, tidying up and perhaps optimizing. The last two of these activities are the subject of this chapter.</p>
<hr />
<p><a href="" id="Tidying-R-code"></a> <a href="" id="Tidying-R-code-1"></a></p>
<h3 id="tidying-r-code" class="section">3.1 Tidying R code</h3>
<p><a href="" id="index-Tidying-R-code"></a></p>
<p>R treats function code loaded from packages and code entered by users differently. By default code entered by users has the source code stored internally, and when the function is listed, the original source is reproduced. Loading code from a package (by default) discards the source code, and the function listing is re-created from the parse tree of the function.</p>
<p>Normally keeping the source code is a good idea, and in particular it avoids comments being removed from the source. However, we can make use of the ability to re-create a function listing from its parse tree to produce a tidy version of the function, for example with consistent indentation and spaces around operators. If the original source does not follow the standard format this tidied version can be much easier to read.</p>
<p>We can subvert the keeping of source in two ways.</p>
<ol>
<li>The option <code class="calibre2">keep.source</code> can be set to <code class="calibre2">FALSE</code> before the code is loaded into R.</li>
<li>The stored source code can be removed by calling the <code class="calibre2">removeSource()</code> function, for example by
<div class="example">
<pre class="example1"><code>myfun &lt;- removeSource(myfun)</code></pre>
</div></li>
</ol>
<p>In each case if we then list the function we will get the standard layout.</p>
<p>Suppose we have a file of functions myfuns.R that we want to tidy up. Create a file tidy.R containing</p>
<div class="example">
<pre class="example1"><code>source(&quot;myfuns.R&quot;, keep.source = FALSE)
dump(ls(all = TRUE), file = &quot;new.myfuns.R&quot;)</code></pre>
</div>
<p>and run R with this as the source file, for example by R --vanilla &lt; tidy.R or by pasting into an R session. Then the file new.myfuns.R will contain the functions in alphabetical order in the standard layout. Warning: comments in your functions will be lost.</p>
<p>The standard format provides a good starting point for further tidying. Although the deparsing cannot do so, we recommend the consistent use of the preferred assignment operator ‘&lt;-’ (rather than ‘=’) for assignment. Many package authors use a version of Emacs (on a Unix-alike or Windows) to edit R code, using the ESS[S] mode of the ESS Emacs package. See <a href="./R-ints.html#R-coding-standards">R coding standards</a> in R Internals for style options within the ESS[S] mode recommended for the source code of R itself.</p>
<hr />
<p><a href="" id="Profiling-R-code-for-speed"></a> <a href="" id="Profiling-R-code-for-speed-1"></a></p>
<h3 id="profiling-r-code-for-speed" class="section">3.2 Profiling R code for speed</h3>
<p><a href="" id="index-Profiling"></a> <a href="" id="index-Rprof"></a></p>
<p>It is possible to profile R code on Windows and most<a href="R-exts_split_014.html#FOOT101" id="DOCF101"><sup>101</sup></a> Unix-alike versions of R.</p>
<p>The command <code class="calibre2">Rprof</code> is used to control profiling, and its help page can be consulted for full details. Profiling works by recording at fixed intervals<a href="R-exts_split_014.html#FOOT102" id="DOCF102"><sup>102</sup></a> (by default every 20 msecs) which line in which R function is being used, and recording the results in a file (default Rprof.out in the working directory). Then the function <code class="calibre2">summaryRprof</code> or the command-line utility <code class="calibre2">R CMD Rprof Rprof.out</code> can be used to summarize the activity.</p>
<p>As an example, consider the following code (from Venables &amp; Ripley, 2002, pp. 225–6).</p>
<div class="example">
<pre class="smallexample"><code>library(MASS); library(boot)
storm.fm &lt;- nls(Time ~ b*Viscosity/(Wt - c), stormer,
                start = c(b=30.401, c=2.2183))
st &lt;- cbind(stormer, fit=fitted(storm.fm))
storm.bf &lt;- function(rs, i) {
    st$Time &lt;-  st$fit + rs[i]
    tmp &lt;- nls(Time ~ (b * Viscosity)/(Wt - c), st,
               start = coef(storm.fm))
    tmp$m$getAllPars()
}
rs &lt;- scale(resid(storm.fm), scale = FALSE) # remove the mean
Rprof(&quot;boot.out&quot;)
storm.boot &lt;- boot(rs, storm.bf, R = 4999) # slow enough to profile
Rprof(NULL)</code></pre>
</div>
<p>Having run this we can summarize the results by</p>
<div class="example">
<pre class="smallexample"><code>R CMD Rprof boot.out

Each sample represents 0.02 seconds.
Total run time: 22.52 seconds.

Total seconds: time spent in function and callees.
Self seconds: time spent in function alone.</code></pre>
<pre class="smallexample"><code></code></pre>
<pre class="smallexample"><code>   %       total       %        self
 total    seconds     self    seconds    name
 100.0     25.22       0.2      0.04     &quot;boot&quot;
  99.8     25.18       0.6      0.16     &quot;statistic&quot;
  96.3     24.30       4.0      1.02     &quot;nls&quot;
  33.9      8.56       2.2      0.56     &quot;&lt;Anonymous&gt;&quot;
  32.4      8.18       1.4      0.36     &quot;eval&quot;
  31.8      8.02       1.4      0.34     &quot;.Call&quot;
  28.6      7.22       0.0      0.00     &quot;eval.parent&quot;
  28.5      7.18       0.3      0.08     &quot;model.frame&quot;
  28.1      7.10       3.5      0.88     &quot;model.frame.default&quot;
  17.4      4.38       0.7      0.18     &quot;sapply&quot;
  15.0      3.78       3.2      0.80     &quot;nlsModel&quot;
  12.5      3.16       1.8      0.46     &quot;lapply&quot;
  12.3      3.10       2.7      0.68     &quot;assign&quot;
 ...</code></pre>
<pre class="smallexample"><code></code></pre>
<pre class="smallexample"><code>   %        self        %      total
  self    seconds     total   seconds    name
   5.7      1.44       7.5      1.88     &quot;inherits&quot;
   4.0      1.02      96.3     24.30     &quot;nls&quot;
   3.6      0.92       3.6      0.92     &quot;$&quot;
   3.5      0.88      28.1      7.10     &quot;model.frame.default&quot;
   3.2      0.80      15.0      3.78     &quot;nlsModel&quot;
   2.8      0.70       9.8      2.46     &quot;qr.coef&quot;
   2.7      0.68      12.3      3.10     &quot;assign&quot;
   2.5      0.64       2.5      0.64     &quot;.Fortran&quot;
   2.5      0.62       7.1      1.80     &quot;qr.default&quot;
   2.2      0.56      33.9      8.56     &quot;&lt;Anonymous&gt;&quot;
   2.1      0.54       5.9      1.48     &quot;unlist&quot;
   2.1      0.52       7.9      2.00     &quot;FUN&quot;
  ...</code></pre>
</div>
<p>This often produces surprising results and can be used to identify bottlenecks or pieces of R code that could benefit from being replaced by compiled code.</p>
<p>Two warnings: profiling does impose a small performance penalty, and the output files can be very large if long runs are profiled at the default sampling interval.</p>
<p>Profiling short runs can sometimes give misleading results. R from time to time performs <em>garbage collection</em> to reclaim unused memory, and this takes an appreciable amount of time which profiling will charge to whichever function happens to provoke it. It may be useful to compare profiling code immediately after a call to <code class="calibre2">gc()</code> with a profiling run without a preceding call to <code class="calibre2">gc</code>.</p>
<p>More detailed analysis of the output can be achieved by the tools in the CRAN packages <a href="https://CRAN.R-project.org/package=proftools"><strong>proftools</strong></a> and <a href="https://CRAN.R-project.org/package=profr"><strong>profr</strong></a>: in particular these allow call graphs to be studied.</p>
<hr />
<p><a href="" id="Profiling-R-code-for-memory-use"></a> <a href="" id="Profiling-R-code-for-memory-use-1"></a></p>
<h3 id="profiling-r-code-for-memory-use" class="section">3.3 Profiling R code for memory use</h3>
<p><a href="" id="index-Profiling-1"></a> <a href="" id="index-Memory-use"></a></p>
<p>Measuring memory use in R code is useful either when the code takes more memory than is conveniently available or when memory allocation and copying of objects is responsible for slow code. There are three ways to profile memory use over time in R code. All three require R to have been compiled with --enable-memory-profiling, which is not the default, but is currently used for the macOS and Windows binary distributions. All can be misleading, for different reasons.</p>
<p>In understanding the memory profiles it is useful to know a little more about R’s memory allocation. Looking at the results of <code class="calibre2">gc()</code> shows a division of memory into <code class="calibre2">Vcells</code> used to store the contents of vectors and <code class="calibre2">Ncells</code> used to store everything else, including all the administrative overhead for vectors such as type and length information. In fact the vector contents are divided into two pools. Memory for small vectors (by default 128 bytes or less) is obtained in large chunks and then parcelled out by R; memory for larger vectors is obtained directly from the operating system.</p>
<p>Some memory allocation is obvious in interpreted code, for example,</p>
<div class="example">
<pre class="smallexample"><code>y &lt;- x + 1</code></pre>
</div>
<p>allocates memory for a new vector <code class="calibre2">y</code>. Other memory allocation is less obvious and occurs because <code class="calibre2">R</code> is forced to make good on its promise of ‘call-by-value’ argument passing. When an argument is passed to a function it is not immediately copied. Copying occurs (if necessary) only when the argument is modified. This can lead to surprising memory use. For example, in the ‘survey’ package we have</p>
<div class="example">
<pre class="smallexample"><code>print.svycoxph &lt;- function (x, ...)
{
    print(x$survey.design, varnames = FALSE, design.summaries = FALSE, ...)
    x$call &lt;- x$printcall
    NextMethod()
}</code></pre>
</div>
<p>It may not be obvious that the assignment to <code class="calibre2">x$call</code> will cause the entire object <code class="calibre2">x</code> to be copied. This copying to preserve the call-by-value illusion is usually done by the internal C function <code class="calibre2">duplicate</code>.</p>
<p>The main reason that memory-use profiling is difficult is garbage collection. Memory is allocated at well-defined times in an R program, but is freed whenever the garbage collector happens to run.</p>
<hr />
<p><a href="" id="Memory-statistics-from-Rprof"></a> <a href="" id="Memory-statistics-from-Rprof-1"></a></p>
<h4 id="memory-statistics-from-rprof" class="subsection">3.3.1 Memory statistics from <code class="calibre2">Rprof</code></h4>
<p><a href="" id="index-Rprof-1"></a> <a href="" id="index-summaryRprof"></a></p>
<p>The sampling profiler <code class="calibre2">Rprof</code> described in the previous section can be given the option <code class="calibre2">memory.profiling=TRUE</code>. It then writes out the total R memory allocation in small vectors, large vectors, and cons cells or nodes at each sampling interval. It also writes out the number of calls to the internal function <code class="calibre2">duplicate</code>, which is called to copy R objects. <code class="calibre2">summaryRprof</code> provides summaries of this information. The main reason that this can be misleading is that the memory use is attributed to the function running at the end of the sampling interval. A second reason is that garbage collection can make the amount of memory in use decrease, so a function appears to use little memory. Running under <code class="calibre2">gctorture</code> helps with both problems: it slows down the code to effectively increase the sampling frequency and it makes each garbage collection release a smaller amount of memory. Changing the memory limits with <code class="calibre2">mem.limits()</code> may also be useful, to see how the code would run under different memory conditions.</p>
<hr />
<p><a href="" id="Tracking-memory-allocations"></a> <a href="" id="Tracking-memory-allocations-1"></a></p>
<h4 id="tracking-memory-allocations" class="subsection">3.3.2 Tracking memory allocations</h4>
<p><a href="" id="index-Rprofmem"></a></p>
<p>The second method of memory profiling uses a memory-allocation profiler, <code class="calibre2">Rprofmem()</code>, which writes out a stack trace to an output file every time a large vector is allocated (with a user-specified threshold for ‘large’) or a new page of memory is allocated for the R heap. Summary functions for this output are still being designed.</p>
<p>Running the example from the previous section with</p>
<div class="example">
<pre class="smallexample"><code>&gt; Rprofmem(&quot;boot.memprof&quot;,threshold=1000)
&gt; storm.boot &lt;- boot(rs, storm.bf, R = 4999)
&gt; Rprofmem(NULL)</code></pre>
</div>
<p>shows that apart from some initial and final work in <code class="calibre2">boot</code> there are no vector allocations over 1000 bytes.</p>
<hr />
<p><a href="" id="Tracing-copies-of-an-object"></a> <a href="" id="Tracing-copies-of-an-object-1"></a></p>
<h4 id="tracing-copies-of-an-object" class="subsection">3.3.3 Tracing copies of an object</h4>
<p><a href="" id="index-tracemem"></a> <a href="" id="index-untracemem"></a></p>
<p>The third method of memory profiling involves tracing copies made of a specific (presumably large) R object. Calling <code class="calibre2">tracemem</code> on an object marks it so that a message is printed to standard output when the object is copied <em>via</em> <code class="calibre2">duplicate</code> or coercion to another type, or when a new object of the same size is created in arithmetic operations. The main reason that this can be misleading is that copying of subsets or components of an object is not tracked. It may be helpful to use <code class="calibre2">tracemem</code> on these components.</p>
<p>In the example above we can run <code class="calibre2">tracemem</code> on the data frame <code class="calibre2">st</code></p>
<div class="example">
<pre class="smallexample"><code>&gt; tracemem(st)
[1] &quot;&lt;0x9abd5e0&gt;&quot;
&gt; storm.boot &lt;- boot(rs, storm.bf, R = 4)
memtrace[0x9abd5e0-&gt;0x92a6d08]: statistic boot
memtrace[0x92a6d08-&gt;0x92a6d80]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x92a6d80-&gt;0x92a6df8]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x9abd5e0-&gt;0x9271318]: statistic boot
memtrace[0x9271318-&gt;0x9271390]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x9271390-&gt;0x9271408]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x9abd5e0-&gt;0x914f558]: statistic boot
memtrace[0x914f558-&gt;0x914f5f8]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x914f5f8-&gt;0x914f670]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x9abd5e0-&gt;0x972cbf0]: statistic boot
memtrace[0x972cbf0-&gt;0x972cc68]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x972cc68-&gt;0x972cd08]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x9abd5e0-&gt;0x98ead98]: statistic boot
memtrace[0x98ead98-&gt;0x98eae10]: $&lt;-.data.frame $&lt;- statistic boot
memtrace[0x98eae10-&gt;0x98eae88]: $&lt;-.data.frame $&lt;- statistic boot</code></pre>
</div>
<p>The object is duplicated fifteen times, three times for each of the <code class="calibre2">R+1</code> calls to <code class="calibre2">storm.bf</code>. This is surprising, since none of the duplications happen inside <code class="calibre2">nls</code>. Stepping through <code class="calibre2">storm.bf</code> in the debugger shows that all three happen in the line</p>
<div class="example">
<pre class="smallexample"><code>st$Time &lt;- st$fit + rs[i]</code></pre>
</div>
<p>Data frames are slower than matrices and this is an example of why. Using <code class="calibre2">tracemem(st$Viscosity)</code> does not reveal any additional copying.</p>
<hr />
<p><a href="" id="Profiling-compiled-code"></a> <a href="" id="Profiling-compiled-code-1"></a></p>
<h3 id="profiling-compiled-code" class="section">3.4 Profiling compiled code</h3>
<p><a href="" id="index-Profiling-2"></a></p>
<p>Profiling compiled code is highly system-specific, but this section contains some hints gleaned from various R users. Some methods need to be different for a compiled executable and for dynamic/shared libraries/objects as used by R packages. We know of no good way to profile DLLs on Windows.</p>
<hr />
<p><a href="" id="Linux"></a> <a href="" id="Linux-1"></a></p>
<h4 id="linux" class="subsection">3.4.1 Linux</h4>
<p>Options include using <code class="calibre2">sprof</code> for a shared object, and <code class="calibre2">oprofile</code> (see <a href="http://oprofile.sourceforge.net/" class="uri">http://oprofile.sourceforge.net/</a>) and <code class="calibre2">perf</code> (see <a href="https://perf.wiki.kernel.org/index.php/Tutorial" class="uri">https://perf.wiki.kernel.org/index.php/Tutorial</a>) for any executable or shared object.</p>
<p><a href="" id="sprof"></a></p>
<h4 id="sprof" class="subsection">3.4.1.1 sprof</h4>
<p>You can select shared objects to be profiled with <code class="calibre2">sprof</code> by setting the environment variable <code class="calibre2">LD_PROFILE</code>. For example</p>
<div class="example">
<pre class="example1"><code>% setenv LD_PROFILE /path/to/R_HOME/library/stats/libs/stats.so
R
... run the boot example
% sprof /path/to/R_HOME/library/stats/libs/stats.so \
  /var/tmp/path/to/R_HOME/library/stats/libs/stats.so.profile

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  us/call  us/call  name
 76.19      0.32     0.32        0     0.00           numeric_deriv
 16.67      0.39     0.07        0     0.00           nls_iter
  7.14      0.42     0.03        0     0.00           getListElement

rm /var/tmp/path/to/R_HOME/library/stats/libs/stats.so.profile
... to clean up ...</code></pre>
</div>
<p>It is possible that root access is needed to create the directories used for the profile data.</p>
<p><a href="" id="oprofile-and-operf"></a></p>
<h4 id="oprofile-and-operf" class="subsection">3.4.1.2 oprofile and operf</h4>
<p>The <code class="calibre2">oprofile</code> project has two modes of operation. In what is now called ‘legacy’ mode, it is uses a daemon to collect information on a process (see below). Since version 0.9.8 (August 2012), the preferred mode is to use <code class="calibre2">operf</code>, so we discuss that first. The modes differ in how the profiling data is collected: it is analysed by tools such as <code class="calibre2">opreport</code> and <code class="calibre2">oppannote</code> in both.</p>
<p>Here is an example on <code class="calibre2">x86_64</code> Linux using R 3.0.2. File pvec.R contains the part of the examples from <code class="calibre2">pvec</code> in package <strong>parallel</strong>:</p>
<div class="example">
<pre class="example1"><code>library(parallel)
N &lt;- 1e6
dates &lt;- sprintf(&#39;%04d-%02d-%02d&#39;, as.integer(2000+rnorm(N)),
                 as.integer(runif(N, 1, 12)), as.integer(runif(N, 1, 28)))
system.time(a &lt;- as.POSIXct(dates, format = &quot;%Y-%m-%d&quot;))</code></pre>
</div>
<p>with timings from the final step</p>
<div class="example">
<pre class="example1"><code>   user  system elapsed
  0.371   0.237   0.612</code></pre>
</div>
<p>R-level profiling by <code class="calibre2">Rprof</code> shows</p>
<div class="example">
<pre class="example1"><code>                     self.time self.pct total.time total.pct
&quot;strptime&quot;                1.70    41.06       1.70     41.06
&quot;as.POSIXct.POSIXlt&quot;      1.40    33.82       1.42     34.30
&quot;sprintf&quot;                 0.74    17.87       0.98     23.67
...</code></pre>
</div>
<p>so the conversion from character to <code class="calibre2">POSIXlt</code> takes most of the time.</p>
<p>This can be run under <code class="calibre2">operf</code> and analysed by</p>
<div class="example">
<pre class="example1"><code>operf R -f pvec.R
opreport
opreport -l /path/to/R_HOME/bin/exec/R
opannotate --source /path/to/R_HOME/bin/exec/R
## And for the system time
opreport -l /lib64/libc.so.6</code></pre>
</div>
<p>The first report shows where (which library etc) the time was spent:</p>
<div class="example">
<pre class="example1"><code>CPU_CLK_UNHALT...|
  samples|      %|
------------------
   166761 99.9161 Rdev
        CPU_CLK_UNHALT...|
          samples|      %|
        ------------------
            70586 42.3276 no-vmlinux
            56963 34.1585 libc-2.16.so
            36922 22.1407 R
             1584  0.9499 stats.so
              624  0.3742 libm-2.16.so
...</code></pre>
</div>
<p>The rest of the output is voluminous, and only extracts are shown below.</p>
<p>Most of the time within R is spent in</p>
<div class="example">
<pre class="example1"><code>samples  %        image name symbol name
10397    28.5123  R           R_gc_internal
5683     15.5848  R           do_sprintf
3036      8.3258  R           do_asPOSIXct
2427      6.6557  R           do_strptime
2421      6.6392  R           Rf_mkCharLenCE
1480      4.0587  R           w_strptime_internal
1202      3.2963  R           Rf_qnorm5
1165      3.1948  R           unif_rand
675       1.8511  R           mktime0
617       1.6920  R           makelt
617       1.6920  R           validate_tm
584       1.6015  R           day_of_the_week
...</code></pre>
</div>
<p><code class="calibre2">opannotate</code> shows that 31% of the time in R is spent in memory.c, 21% in datetime.c and 7% in Rstrptime.h. The analysis for libc showed that calls to <code class="calibre2">wcsftime</code> dominated, so those calls were cached for R 3.0.3: the time spent in <code class="calibre2">no-vmlinux</code> (the kernel) was reduced dramatically.</p>
<p>On platforms which support it, call graphs can be produced by <code class="calibre2">opcontrol --callgraph</code> if collected via <code class="calibre2">operf --callgraph</code>.</p>
<p>The profiling data is by default stored in sub-directory oprofile_data of the current directory, which can be removed at the end of the session.</p>
<p>Another example, from <a href="https://CRAN.R-project.org/package=sm"><strong>sm</strong></a> version 2.2-5.4. The example for <code class="calibre2">sm.variogram</code> took a long time:</p>
<div class="example">
<pre class="example1"><code>system.time(example(sm.variogram))
...
   user  system elapsed
  5.543   3.202   8.785</code></pre>
</div>
<p>including a lot of system time. Profiling just the slow part, the second plot, showed</p>
<div class="example">
<pre class="example1"><code>  samples|      %|
------------------
   381845 99.9885 R
        CPU_CLK_UNHALT...|
          samples|      %|
        ------------------
           187484 49.0995 sm.so
           169627 44.4230 no-vmlinux
            12636  3.3092 libgfortran.so.3.0.0
             6455  1.6905 R</code></pre>
</div>
<p>so the system time was almost all in the Linux kernel. It is possible to dig deeper if you have a matching uncompressed kernel with debug symbols to specify <em>via</em> --vmlinux: we did not.</p>
<p>In ‘legacy’ mode <code class="calibre2">oprofile</code> works by running a daemon which collects information. The daemon must be started as root, e.g.</p>
<div class="example">
<pre class="example1"><code>% su
% opcontrol --no-vmlinux
% (optional, some platforms) opcontrol --callgraph=5
% opcontrol --start
% exit</code></pre>
</div>
<p>Then as a user</p>
<div class="example">
<pre class="example1"><code>% R
... run the boot example
% opcontrol --dump
% opreport -l /path/to/R_HOME/library/stats/libs/stats.so
...
samples  %        symbol name
1623     75.5939  anonymous symbol from section .plt
349      16.2552  numeric_deriv
113       5.2632  nls_iter
62        2.8878  getListElement
% opreport -l /path/to/R_HOME/bin/exec/R
...
samples  %        symbol name
76052    11.9912  Rf_eval
54670     8.6198  Rf_findVarInFrame3
37814     5.9622  Rf_allocVector
31489     4.9649  Rf_duplicate
28221     4.4496  Rf_protect
26485     4.1759  Rf_cons
23650     3.7289  Rf_matchArgs
21088     3.3250  Rf_findFun
19995     3.1526  findVarLocInFrame
14871     2.3447  Rf_evalList
13794     2.1749  R_Newhashpjw
13522     2.1320  R_gc_internal
...</code></pre>
</div>
<p>Shutting down the profiler and clearing the records needs to be done as root.</p>
<hr />
<p><a href="" id="Solaris"></a> <a href="" id="Solaris-1"></a></p>
<h4 id="solaris" class="subsection">3.4.2 Solaris</h4>
<p>On 64-bit (only) Solaris, the standard profiling tool <code class="calibre2">gprof</code> collects information from shared objects compiled with -pg.</p>
<hr />
<p><a href="" id="macOS"></a> <a href="" id="macOS-1"></a></p>
<h4 id="macos" class="subsection">3.4.3 macOS</h4>
<p>Developers have recommended <code class="calibre2">sample</code> (or <code class="calibre2">Sampler.app</code>, which is a GUI version), <code class="calibre2">Shark</code> (in version of <code class="calibre2">Xcode</code> up to those for Snow Leopard), and <code class="calibre2">Instruments</code> (part of <code class="calibre2">Xcode</code>, see <a href="https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html" class="uri">https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html</a>).</p>
<hr />
<p><a href="" id="Debugging"></a> <a href="" id="Debugging-1"></a></p>
<div id="calibre_pb_10" class="calibre6">

</div>

<!--chapter:end:7-R-exts.Rmd-->

#  Debugging
<p>This chapter covers the debugging of R extensions, starting with the ways to get useful error information and moving on to how to deal with errors that crash R. For those who prefer other styles there are contributed packages such as <a href="https://CRAN.R-project.org/package=debug"><strong>debug</strong></a> on CRAN (described in an article in <a href="https://CRAN.R-project.org/doc/Rnews/Rnews_2003-3.pdf">R-News 3/3</a>). (There are notes from 2002 provided by Roger Peng at <a href="http://www.biostat.jhsph.edu/~rpeng/docs/R-debug-tools.pdf" class="uri">http://www.biostat.jhsph.edu/~rpeng/docs/R-debug-tools.pdf</a> which provide complementary examples to those given here.)</p>
<hr />
<p><a href="" id="Browsing"></a> <a href="" id="Browsing-1"></a></p>
<h3 id="browsing" class="section">4.1 Browsing</h3>
<p><a href="" id="index-browser"></a></p>
<p>Most of the R-level debugging facilities are based around the built-in browser. This can be used directly by inserting a call to <code class="calibre2">browser()</code> into the code of a function (for example, using <code class="calibre2">fix(my_function)</code> ). When code execution reaches that point in the function, control returns to the R console with a special prompt. For example</p>
<div class="example">
<pre class="example1"><code>&gt; fix(summary.data.frame) ## insert browser() call after for() loop
&gt; summary(women)
Called from: summary.data.frame(women)
Browse[1]&gt; ls()
 [1] &quot;digits&quot; &quot;i&quot;      &quot;lbs&quot;    &quot;lw&quot;     &quot;maxsum&quot; &quot;nm&quot;     &quot;nr&quot;     &quot;nv&quot;
 [9] &quot;object&quot; &quot;sms&quot;    &quot;z&quot;
Browse[1]&gt; maxsum
[1] 7
Browse[1]&gt;
     height         weight
 Min.   :58.0   Min.   :115.0
 1st Qu.:61.5   1st Qu.:124.5
 Median :65.0   Median :135.0
 Mean   :65.0   Mean   :136.7
 3rd Qu.:68.5   3rd Qu.:148.0
 Max.   :72.0   Max.   :164.0
&gt; rm(summary.data.frame)</code></pre>
</div>
<p>At the browser prompt one can enter any R expression, so for example <code class="calibre2">ls()</code> lists the objects in the current frame, and entering the name of an object will<a href="R-exts_split_014.html#FOOT103" id="DOCF103"><sup>103</sup></a> print it. The following commands are also accepted</p>
<ul>
<li><p><code class="calibre2">n</code></p>
<p>Enter ‘step-through’ mode. In this mode, hitting return executes the next line of code (more precisely one line and any continuation lines). Typing <code class="calibre2">c</code> will continue to the end of the current context, e.g. to the end of the current loop or function.</p></li>
<li><p><code class="calibre2">c</code></p>
<p>In normal mode, this quits the browser and continues execution, and just return works in the same way. <code class="calibre2">cont</code> is a synonym.</p></li>
<li><p><code class="calibre2">where</code></p>
<p>This prints the call stack. For example</p>
<div class="example">
<pre class="example1"><code>&gt; summary(women)
Called from: summary.data.frame(women)
Browse[1]&gt; where
where 1: summary.data.frame(women)
where 2: summary(women)

Browse[1]&gt;</code></pre>
</div></li>
<li><p><code class="calibre2">Q</code></p>
<p>Quit both the browser and the current expression, and return to the top-level prompt.</p></li>
</ul>
<p>Errors in code executed at the browser prompt will normally return control to the browser prompt. Objects can be altered by assignment, and will keep their changed values when the browser is exited. If really necessary, objects can be assigned to the workspace from the browser prompt (by using <code class="calibre2">&lt;&lt;-</code> if the name is not already in scope).</p>
<hr />
<p><a href="" id="Debugging-R-code"></a> <a href="" id="Debugging-R-code-1"></a></p>
<h3 id="debugging-r-code" class="section">4.2 Debugging R code</h3>
<p><a href="" id="index-traceback"></a></p>
<p>Suppose your R program gives an error message. The first thing to find out is what R was doing at the time of the error, and the most useful tool is <code class="calibre2">traceback()</code>. We suggest that this is run whenever the cause of the error is not immediately obvious. Daily, errors are reported to the R mailing lists as being in some package when <code class="calibre2">traceback()</code> would show that the error was being reported by some other package or base R. Here is an example from the regression suite.</p>
<div class="example">
<pre class="smallexample"><code>&gt; success &lt;- c(13,12,11,14,14,11,13,11,12)
&gt; failure &lt;- c(0,0,0,0,0,0,0,2,2)
&gt; resp &lt;- cbind(success, failure)
&gt; predictor &lt;- c(0, 5^(0:7))
&gt; glm(resp ~ 0+predictor, family = binomial(link=&quot;log&quot;))
Error: no valid set of coefficients has been found: please supply starting values
&gt; traceback()
3: stop(&quot;no valid set of coefficients has been found: please supply
         starting values&quot;, call. = FALSE)
2: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart,
       mustart = mustart, offset = offset, family = family, control = control,
       intercept = attr(mt, &quot;intercept&quot;) &gt; 0)
1: glm(resp ~ 0 + predictor, family = binomial(link =&quot;log&quot;))</code></pre>
</div>
<p>The calls to the active frames are given in reverse order (starting with the innermost). So we see the error message comes from an explicit check in <code class="calibre2">glm.fit</code>. (<code class="calibre2">traceback()</code> shows you all the lines of the function calls, which can be limited by setting <code class="calibre2">option</code> &quot;deparse.max.lines&quot;.)</p>
<p>Sometimes the traceback will indicate that the error was detected inside compiled code, for example (from <code class="calibre2">?nls</code>)</p>
<div class="example">
<pre class="smallexample"><code>Error in nls(y ~ a + b * x, start = list(a = 0.12345, b = 0.54321), trace = TRUE) :
        step factor 0.000488281 reduced below ‘minFactor’ of 0.000976563
&gt;  traceback()
2: .Call(R_nls_iter, m, ctrl, trace)
1: nls(y ~ a + b * x, start = list(a = 0.12345, b = 0.54321), trace = TRUE)</code></pre>
</div>
<p>This will be the case if the innermost call is to <code class="calibre2">.C</code>, <code class="calibre2">.Fortran</code>, <code class="calibre2">.Call</code>, <code class="calibre2">.External</code> or <code class="calibre2">.Internal</code>, but as it is also possible for such code to evaluate R expressions, this need not be the innermost call, as in</p>
<div class="example">
<pre class="smallexample"><code>&gt; traceback()
9: gm(a, b, x)
8: .Call(R_numeric_deriv, expr, theta, rho, dir)
7: numericDeriv(form[[3]], names(ind), env)
6: getRHS()
5: assign(&quot;rhs&quot;, getRHS(), envir = thisEnv)
4: assign(&quot;resid&quot;, .swts * (lhs - assign(&quot;rhs&quot;, getRHS(), envir = thisEnv)),
       envir = thisEnv)
3: function (newPars)
   {
       setPars(newPars)
       assign(&quot;resid&quot;, .swts * (lhs - assign(&quot;rhs&quot;, getRHS(), envir = thisEnv)),
           envir = thisEnv)
       assign(&quot;dev&quot;, sum(resid^2), envir = thisEnv)
       assign(&quot;QR&quot;, qr(.swts * attr(rhs, &quot;gradient&quot;)), envir = thisEnv)
       return(QR$rank &lt; min(dim(QR$qr)))
   }(c(-0.00760232418963883, 1.00119632515036))
2: .Call(R_nls_iter, m, ctrl, trace)
1: nls(yeps ~ gm(a, b, x), start = list(a = 0.12345, b = 0.54321))</code></pre>
</div>
<p>Occasionally <code class="calibre2">traceback()</code> does not help, and this can be the case if S4 method dispatch is involved. Consider the following example</p>
<div class="example">
<pre class="example1"><code>&gt; xyd &lt;- new(&quot;xyloc&quot;, x=runif(20), y=runif(20))
Error in as.environment(pkg) : no item called &quot;package:S4nswv&quot;
on the search list
Error in initialize(value, ...) : S language method selection got
an error when called from internal dispatch for function ‘initialize’
&gt; traceback()
2: initialize(value, ...)
1: new(&quot;xyloc&quot;, x = runif(20), y = runif(20))</code></pre>
</div>
<p>which does not help much, as there is no call to <code class="calibre2">as.environment</code> in <code class="calibre2">initialize</code> (and the note “called from internal dispatch” tells us so). In this case we searched the R sources for the quoted call, which occurred in only one place, <code class="calibre2">methods:::.asEnvironmentPackage</code>. So now we knew where the error was occurring. (This was an unusually opaque example.)</p>
<p>The error message</p>
<div class="example">
<pre class="example1"><code>evaluation nested too deeply: infinite recursion / options(expressions=)?</code></pre>
</div>
<p>can be hard to handle with the default value (5000). Unless you know that there actually is deep recursion going on, it can help to set something like</p>
<div class="example">
<pre class="example1"><code>options(expressions=500)</code></pre>
</div>
<p>and re-run the example showing the error.</p>
<p>Sometimes there is warning that clearly is the precursor to some later error, but it is not obvious where it is coming from. Setting <code class="calibre2">options(warn = 2)</code> (which turns warnings into errors) can help here.</p>
<p>Once we have located the error, we have some choices. One way to proceed is to find out more about what was happening at the time of the crash by looking a <em>post-mortem</em> dump. To do so, set <a href="" id="index-dump_002eframes"></a> <code class="calibre2">options(error=dump.frames)</code> and run the code again. Then invoke <code class="calibre2">debugger()</code> and explore the dump. Continuing our example:</p>
<div class="example">
<pre class="smallexample"><code>&gt; options(error = dump.frames)
&gt; glm(resp ~ 0 + predictor, family = binomial(link =&quot;log&quot;))
Error: no valid set of coefficients has been found: please supply starting values</code></pre>
</div>
<p>which is the same as before, but an object called <code class="calibre2">last.dump</code> has appeared in the workspace. (Such objects can be large, so remove it when it is no longer needed.) We can examine this at a later time by calling the function <code class="calibre2">debugger</code>. <a href="" id="index-debugger"></a></p>
<div class="example">
<pre class="smallexample"><code>&gt; debugger()
Message:  Error: no valid set of coefficients has been found: please supply starting values
Available environments had calls:
1: glm(resp ~ 0 + predictor, family = binomial(link = &quot;log&quot;))
2: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart, mus
3: stop(&quot;no valid set of coefficients has been found: please supply starting values
Enter an environment number, or 0 to exit  Selection:</code></pre>
</div>
<p>which gives the same sequence of calls as <code class="calibre2">traceback</code>, but in outer-first order and with only the first line of the call, truncated to the current width. However, we can now examine in more detail what was happening at the time of the error. Selecting an environment opens the browser in that frame. So we select the function call which spawned the error message, and explore some of the variables (and execute two function calls).</p>
<div class="example">
<pre class="smallexample"><code>Enter an environment number, or 0 to exit  Selection: 2
Browsing in the environment with call:
   glm.fit(x = X, y = Y, weights = weights, start = start, etas
Called from: debugger.look(ind)
Browse[1]&gt; ls()
 [1] &quot;aic&quot;        &quot;boundary&quot;   &quot;coefold&quot;    &quot;control&quot;    &quot;conv&quot;
 [6] &quot;dev&quot;        &quot;dev.resids&quot; &quot;devold&quot;     &quot;EMPTY&quot;      &quot;eta&quot;
[11] &quot;etastart&quot;   &quot;family&quot;     &quot;fit&quot;        &quot;good&quot;       &quot;intercept&quot;
[16] &quot;iter&quot;       &quot;linkinv&quot;    &quot;mu&quot;         &quot;mu.eta&quot;     &quot;mu.eta.val&quot;
[21] &quot;mustart&quot;    &quot;n&quot;          &quot;ngoodobs&quot;   &quot;nobs&quot;       &quot;nvars&quot;
[26] &quot;offset&quot;     &quot;start&quot;      &quot;valideta&quot;   &quot;validmu&quot;    &quot;variance&quot;
[31] &quot;varmu&quot;      &quot;w&quot;          &quot;weights&quot;    &quot;x&quot;          &quot;xnames&quot;
[36] &quot;y&quot;          &quot;ynames&quot;     &quot;z&quot;
Browse[1]&gt; eta
            1             2             3             4             5
 0.000000e+00 -2.235357e-06 -1.117679e-05 -5.588393e-05 -2.794197e-04
            6             7             8             9
-1.397098e-03 -6.985492e-03 -3.492746e-02 -1.746373e-01
Browse[1]&gt; valideta(eta)
[1] TRUE
Browse[1]&gt; mu
        1         2         3         4         5         6         7         8
1.0000000 0.9999978 0.9999888 0.9999441 0.9997206 0.9986039 0.9930389 0.9656755
        9
.8397616
Browse[1]&gt; validmu(mu)
[1] FALSE
Browse[1]&gt; c
Available environments had calls:
1: glm(resp ~ 0 + predictor, family = binomial(link = &quot;log&quot;))
2: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart
3: stop(&quot;no valid set of coefficients has been found: please supply starting v

Enter an environment number, or 0 to exit  Selection: 0
&gt; rm(last.dump)</code></pre>
</div>
<p>Because <code class="calibre2">last.dump</code> can be looked at later or even in another R session, post-mortem debugging is possible even for batch usage of R. We do need to arrange for the dump to be saved: this can be done either using the command-line flag --save to save the workspace at the end of the run, or <em>via</em> a setting such as</p>
<div class="example">
<pre class="example1"><code>&gt; options(error = quote({dump.frames(to.file=TRUE); q()}))</code></pre>
</div>
<p>See the help on <code class="calibre2">dump.frames</code> for further options and a worked example.</p>
<p><a href="" id="index-recover"></a></p>
<p>An alternative error action is to use the function <code class="calibre2">recover()</code>:</p>
<div class="example">
<pre class="smallexample"><code>&gt; options(error = recover)
&gt; glm(resp ~ 0 + predictor, family = binomial(link = &quot;log&quot;))
Error: no valid set of coefficients has been found: please supply starting values

Enter a frame number, or 0 to exit

1: glm(resp ~ 0 + predictor, family = binomial(link = &quot;log&quot;))
2: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart

Selection:</code></pre>
</div>
<p>which is very similar to <code class="calibre2">dump.frames</code>. However, we can examine the state of the program directly, without dumping and re-loading the dump. As its help page says, <code class="calibre2">recover</code> can be routinely used as the error action in place of <code class="calibre2">dump.calls</code> and <code class="calibre2">dump.frames</code>, since it behaves like <code class="calibre2">dump.frames</code> in non-interactive use.</p>
<p><a href="" id="index-debug"></a></p>
<p>Post-mortem debugging is good for finding out exactly what went wrong, but not necessarily why. An alternative approach is to take a closer look at what was happening just before the error, and a good way to do that is to use <code class="calibre2">debug</code>. This inserts a call to the browser at the beginning of the function, starting in step-through mode. So in our example we could use</p>
<div class="example">
<pre class="smallexample"><code>&gt; debug(glm.fit)
&gt; glm(resp ~ 0 + predictor, family = binomial(link =&quot;log&quot;))
debugging in: glm.fit(x = X, y = Y, weights = weights, start = start, etastart = etastart,
    mustart = mustart, offset = offset, family = family, control = control,
    intercept = attr(mt, &quot;intercept&quot;) &gt; 0)
debug: {
## lists the whole function
Browse[1]&gt;
debug: x &lt;- as.matrix(x)
...
Browse[1]&gt; start
[1] -2.235357e-06
debug: eta &lt;- drop(x %*% start)
Browse[1]&gt; eta
            1             2             3             4             5
 0.000000e+00 -2.235357e-06 -1.117679e-05 -5.588393e-05 -2.794197e-04
            6             7             8             9
-1.397098e-03 -6.985492e-03 -3.492746e-02 -1.746373e-01
Browse[1]&gt;
debug: mu &lt;- linkinv(eta &lt;- eta + offset)
Browse[1]&gt; mu
        1         2         3         4         5         6         7         8
1.0000000 0.9999978 0.9999888 0.9999441 0.9997206 0.9986039 0.9930389 0.9656755
        9
.8397616</code></pre>
</div>
<p>(The prompt <code class="calibre2">Browse[1]&gt;</code> indicates that this is the first level of browsing: it is possible to step into another function that is itself being debugged or contains a call to <code class="calibre2">browser()</code>.)</p>
<p><code class="calibre2">debug</code> can be used for hidden functions and S3 methods by e.g. <code class="calibre2">debug(stats:::predict.Arima)</code>. (It cannot be used for S4 methods, but an alternative is given on the help page for <code class="calibre2">debug</code>.) Sometimes you want to debug a function defined inside another function, e.g. the function <code class="calibre2">arimafn</code> defined inside <code class="calibre2">arima</code>. To do so, set <code class="calibre2">debug</code> on the outer function (here <code class="calibre2">arima</code>) and step through it until the inner function has been defined. Then call <code class="calibre2">debug</code> on the inner function (and use <code class="calibre2">c</code> to get out of step-through mode in the outer function).</p>
<p><a href="" id="index-undebug"></a></p>
<p>To remove debugging of a function, call <code class="calibre2">undebug</code> with the argument previously given to <code class="calibre2">debug</code>; debugging otherwise lasts for the rest of the R session (or until the function is edited or otherwise replaced).</p>
<p><a href="" id="index-trace"></a></p>
<p><code class="calibre2">trace</code> can be used to temporarily insert debugging code into a function, for example to insert a call to <code class="calibre2">browser()</code> just before the point of the error. To return to our running example</p>
<div class="example">
<pre class="example1"><code>## first get a numbered listing of the expressions of the function
&gt; page(as.list(body(glm.fit)), method=&quot;print&quot;)
&gt; trace(glm.fit, browser, at=22)
Tracing function &quot;glm.fit&quot; in package &quot;stats&quot;
[1] &quot;glm.fit&quot;
&gt; glm(resp ~ 0 + predictor, family = binomial(link =&quot;log&quot;))
Tracing glm.fit(x = X, y = Y, weights = weights, start = start,
   etastart = etastart,  .... step 22
Called from: eval(expr, envir, enclos)
Browse[1]&gt; n
## and single-step from here.
&gt; untrace(glm.fit)</code></pre>
</div>
<p>For your own functions, it may be as easy to use <code class="calibre2">fix</code> to insert temporary code, but <code class="calibre2">trace</code> can help with functions in a namespace (as can <code class="calibre2">fixInNamespace</code>). Alternatively, use <code class="calibre2">trace(,edit=TRUE)</code> to insert code visually.</p>
<hr />
<p><a href="" id="Checking-memory-access"></a> <a href="" id="Checking-memory-access-1"></a></p>
<h3 id="checking-memory-access" class="section">4.3 Checking memory access</h3>
<p>Errors in memory allocation and reading/writing outside arrays are very common causes of crashes (e.g., segfaults) on some machines. Often the crash appears long after the invalid memory access: in particular damage to the structures which R itself has allocated may only become apparent at the next garbage collection (or even at later garbage collections after objects have been deleted).</p>
<p>Note that memory access errors may be seen with LAPACK, BLAS, OpenMP and Java-using packages: some at least of these seem to be intentional, and some are related to passing characters to Fortran.</p>
<p>Some of these tools can detect mismatched allocation and deallocation. C++ programmers should note that memory allocated by <code class="calibre2">new []</code> must be freed by <code class="calibre2">delete []</code>, other uses of <code class="calibre2">new</code> by <code class="calibre2">delete</code>, and memory allocated by <code class="calibre2">malloc</code>, <code class="calibre2">calloc</code> and <code class="calibre2">realloc</code> by <code class="calibre2">free</code>. Some platforms will tolerate mismatches (perhaps with memory leaks) but others will segfault.</p>
<hr />
<p><a href="" id="Using-gctorture"></a> <a href="" id="Using-gctorture-1"></a></p>
<h4 id="using-gctorture" class="subsection">4.3.1 Using gctorture</h4>
<p><a href="" id="index-gctorture"></a></p>
<p>We can help to detect memory problems in R objects earlier by running garbage collection as often as possible. This is achieved by <code class="calibre2">gctorture(TRUE)</code>, which as described on its help page</p>
<blockquote>
<p>Provokes garbage collection on (nearly) every memory allocation. Intended to ferret out memory protection bugs. Also makes R run <em>very</em> slowly, unfortunately.</p>
</blockquote>
<p>The reference to ‘memory protection’ is to missing C-level calls to <code class="calibre2">PROTECT</code>/<code class="calibre2">UNPROTECT</code> (see <a href="R-exts_split_009.html#Garbage-Collection">Garbage Collection</a>) which if missing allow R objects to be garbage-collected when they are still in use. But it can also help with other memory-related errors.</p>
<p>Normally running under <code class="calibre2">gctorture(TRUE)</code> will just produce a crash earlier in the R program, hopefully close to the actual cause. See the next section for how to decipher such crashes.</p>
<p>It is possible to run all the examples, tests and vignettes covered by <code class="calibre2">R CMD check</code> under <code class="calibre2">gctorture(TRUE)</code> by using the option --use-gct.</p>
<p>The function <code class="calibre2">gctorture2</code> provides more refined control over the GC torture process. Its arguments <code class="calibre2">step</code>, <code class="calibre2">wait</code> and <code class="calibre2">inhibit_release</code> are documented on its help page. Environment variables can also be used at the start of the R session to turn on GC torture: <code class="calibre2">R_GCTORTURE</code> corresponds to the <code class="calibre2">step</code> argument to <code class="calibre2">gctorture2</code>, <code class="calibre2">R_GCTORTURE_WAIT</code> to <code class="calibre2">wait</code>, and <code class="calibre2">R_GCTORTURE_INHIBIT_RELEASE</code> to <code class="calibre2">inhibit_release</code>.</p>
<p>If R is configured with --enable-strict-barrier then a variety of tests for the integrity of the write barrier are enabled. In addition tests to help detect protect issues are enabled:</p>
<ul>
<li>All GCs are full GCs.</li>
<li>New nodes in small node pages are marked as <code class="calibre2">NEWSXP</code> on creation.</li>
<li>After a GC all free nodes that are not of type <code class="calibre2">NEWSXP</code> are marked as type <code class="calibre2">FREESXP</code> and their previous type is recorded.</li>
<li>Most calls to accessor functions check their <code class="calibre2">SEXP</code> inputs and <code class="calibre2">SEXP</code> outputs and signal an error if a <code class="calibre2">FREESXP</code> is found. The address of the node and the old type are included in the error message.</li>
</ul>
<p><code class="calibre2">R CMD check --use-gct</code> can be set to use <code class="calibre2">gctorture2(n)</code> rather than <code class="calibre2">gctorture(TRUE)</code> by setting environment variable <code class="calibre2">_R_CHECK_GCT_N_</code> to a positive integer value to be used as <code class="calibre2">n</code>.</p>
<p>Used with a debugger and with <code class="calibre2">gctorture</code> or <code class="calibre2">gctorture2</code> this mechanism can be helpful in isolating memory protect problems.</p>
<hr />
<p><a href="" id="Using-valgrind"></a> <a href="" id="Using-valgrind-1"></a></p>
<h4 id="using-valgrind" class="subsection">4.3.2 Using valgrind</h4>
<p>If you have access to Linux on a common CPU type or supported versions of macOS<a href="R-exts_split_014.html#FOOT104" id="DOCF104"><sup>104</sup></a> you can use <code class="calibre2">valgrind</code> (<a href="http://www.valgrind.org/" class="uri">http://www.valgrind.org/</a>, pronounced to rhyme with ‘tinned’) to check for possible problems. To run some examples under <code class="calibre2">valgrind</code> use something like</p>
<div class="example">
<pre class="example1"><code>R -d valgrind --vanilla &lt; mypkg-Ex.R
R -d &quot;valgrind --tool=memcheck --leak-check=full&quot; --vanilla &lt; mypkg-Ex.R</code></pre>
</div>
<p>where mypkg-Ex.R is a set of examples, e.g. the file created in mypkg.Rcheck by <code class="calibre2">R CMD check</code>. Occasionally this reports memory reads of ‘uninitialised values’ that are the result of compiler optimization, so can be worth checking under an unoptimized compile: for maximal information use a build with debugging symbols. We know there will be some small memory leaks from <code class="calibre2">readline</code> and R itself — these are memory areas that are in use right up to the end of the R session. Expect this to run around 20x slower than without <code class="calibre2">valgrind</code>, and in some cases much slower than that. Several versions of <code class="calibre2">valgrind</code> were not happy with some optimized BLASes that use CPU-specific instructions so you may need to build a version of R specifically to use with <code class="calibre2">valgrind</code>.</p>
<p>On platforms where <code class="calibre2">valgrind</code> is installed you can build a version of R with extra instrumentation to help <code class="calibre2">valgrind</code> detect errors in the use of memory allocated from the R heap. The <code class="calibre2">configure</code> option is --with-valgrind-instrumentation=level, where level is 0, 1 or 2. Level 0 is the default and does not add anything. Level 1 will detect some uses<a href="R-exts_split_014.html#FOOT105" id="DOCF105"><sup>105</sup></a> of uninitialised memory and has little impact on speed (compared to level 0). Level 2 will detect many other memory-use bugs<a href="R-exts_split_014.html#FOOT106" id="DOCF106"><sup>106</sup></a> but make R much slower when running under <code class="calibre2">valgrind</code>. Using this in conjunction with <code class="calibre2">gctorture</code> can be even more effective (and even slower).</p>
<p>An example of <code class="calibre2">valgrind</code> output is</p>
<div class="example">
<pre class="smallexample"><code>==12539== Invalid read of size 4
==12539==    at 0x1CDF6CBE: csc_compTr (Mutils.c:273)
==12539==    by 0x1CE07E1E: tsc_transpose (dtCMatrix.c:25)
==12539==    by 0x80A67A7: do_dotcall (dotcode.c:858)
==12539==    by 0x80CACE2: Rf_eval (eval.c:400)
==12539==    by 0x80CB5AF: R_execClosure (eval.c:658)
==12539==    by 0x80CB98E: R_execMethod (eval.c:760)
==12539==    by 0x1B93DEFA: R_standardGeneric (methods_list_dispatch.c:624)
==12539==    by 0x810262E: do_standardGeneric (objects.c:1012)
==12539==    by 0x80CAD23: Rf_eval (eval.c:403)
==12539==    by 0x80CB2F0: Rf_applyClosure (eval.c:573)
==12539==    by 0x80CADCC: Rf_eval (eval.c:414)
==12539==    by 0x80CAA03: Rf_eval (eval.c:362)
==12539==  Address 0x1C0D2EA8 is 280 bytes inside a block of size 1996 alloc&#39;d
==12539==    at 0x1B9008D1: malloc (vg_replace_malloc.c:149)
==12539==    by 0x80F1B34: GetNewPage (memory.c:610)
==12539==    by 0x80F7515: Rf_allocVector (memory.c:1915)
...</code></pre>
</div>
<p>This example is from an instrumented version of R, while tracking down a bug in the <a href="https://CRAN.R-project.org/package=Matrix"><strong>Matrix</strong></a> package in 2006. The first line indicates that R has tried to read 4 bytes from a memory address that it does not have access to. This is followed by a C stack trace showing where the error occurred. Next is a description of the memory that was accessed. It is inside a block allocated by <code class="calibre2">malloc</code>, called from <code class="calibre2">GetNewPage</code>, that is, in the internal R heap. Since this memory all belongs to R, <code class="calibre2">valgrind</code> would not (and did not) detect the problem in an uninstrumented build of R. In this example the stack trace was enough to isolate and fix the bug, which was in <code class="calibre2">tsc_transpose</code>, and in this example running under <code class="calibre2">gctorture()</code> did not provide any additional information. When the stack trace is not sufficiently informative the option --db-attach=yes to <code class="calibre2">valgrind</code> may be helpful. This starts a post-mortem debugger (by default <code class="calibre2">gdb</code>) so that variables in the C code can be inspected (see <a href="#Inspecting-R-objects">Inspecting R objects</a>).</p>
<p><code class="calibre2">valgrind</code> is good at spotting the use of uninitialized values: use option --track-origins=yes to show where these originated from. What it cannot detect is the misuse of arrays allocated on the stack: this includes C automatic variables and some<a href="R-exts_split_014.html#FOOT107" id="DOCF107"><sup>107</sup></a> Fortran arrays.</p>
<p>It is possible to run all the examples, tests and vignettes covered by <code class="calibre2">R CMD check</code> under <code class="calibre2">valgrind</code> by using the option --use-valgrind. If you do this you will need to select the <code class="calibre2">valgrind</code> options some other way, for example by having a ~/.valgrindrc file containing</p>
<div class="example">
<pre class="example1"><code>--leak-check=full
--track-origins=yes</code></pre>
</div>
<p>or setting the environment variable <code class="calibre2">VALGRIND_OPTS</code>.</p>
<p>On macOS you may need to ensure that debugging symbols are made available (so <code class="calibre2">valgrind</code> reports line numbers in files). This can usually be done with the <code class="calibre2">valgrind</code> option --dsymutil=yes to ask for the symbols to be dumped when the .so file is loaded. This will not work where packages are installed into a system area (such as the R.framework) and can be slow. Installing packages with <code class="calibre2">R CMD INSTALL --dsym</code> installs the dumped symbols. (This can also be done by setting environment variable <code class="calibre2">PKG_MAKE_DSYM</code> to a non-empty value before the <code class="calibre2">INSTALL</code>.)</p>
<p>This section has described the use of <code class="calibre2">memtest</code>, the default (and most useful) of <code class="calibre2">valgrind</code>’s tools. There are others described in its documentation: <code class="calibre2">helgrind</code> can be useful for threaded programs.</p>
<hr />
<p><a href="" id="Using-Address-Sanitizer"></a> <a href="" id="Using-the-Address-Sanitizer"></a></p>
<h4 id="using-the-address-sanitizer" class="subsection">4.3.3 Using the Address Sanitizer</h4>
<p><code class="calibre2">AddressSanitizer</code> (‘ASan’) is a tool with similar aims to the memory checker in <code class="calibre2">valgrind</code>. It is available with suitable builds<a href="R-exts_split_014.html#FOOT108" id="DOCF108"><sup>108</sup></a> of <code class="calibre2">gcc</code> and <code class="calibre2">clang</code> on common Linux and macOS platforms. See <a href="http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation" class="uri">http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation</a>, <a href="http://clang.llvm.org/docs/AddressSanitizer.html" class="uri">http://clang.llvm.org/docs/AddressSanitizer.html</a> and <a href="https://code.google.com/p/address-sanitizer/" class="uri">https://code.google.com/p/address-sanitizer/</a>.</p>
<p>More thorough checks of C++ code are done if the C++ library has been ‘annotated’: at the time of writing this applied to <code class="calibre2">std::vector</code> in <code class="calibre2">libc++</code> for use with <code class="calibre2">clang</code> and gives rise to ‘container-overflow’<a href="R-exts_split_014.html#FOOT109" id="DOCF109"><sup>109</sup></a> reports.</p>
<p>It requires code to have been compiled <em>and linked</em> with -fsanitize=address and compiling with <code class="calibre2">-fno-omit-frame-pointer</code> will give more legible reports. It has a runtime penalty of 2–3x, extended compilation times and uses substantially more memory, often 1–2GB, at run time. On 64-bit platforms it reserves (but does not allocate) 16–20TB of virtual memory: restrictive shell settings can cause problems.</p>
<p>By comparison with <code class="calibre2">valgrind</code>, ASan can detect misuse of stack and global variables but not the use of uninitialized memory.</p>
<p>Recent versions return symbolic addresses for the location of the error provided <code class="calibre2">llvm-symbolizer</code><a href="R-exts_split_014.html#FOOT110" id="DOCF110"><sup>110</sup></a> is on the path: if it is available but not on the path or has been renamed<a href="R-exts_split_014.html#FOOT111" id="DOCF111"><sup>111</sup></a>, one can use an environment variable, e.g.</p>
<div class="example">
<pre class="example1"><code>ASAN_SYMBOLIZER_PATH=/path/to/llvm-symbolizer</code></pre>
</div>
<p>An alternative is to pipe the output through <code class="calibre2">asan_symbolize.py</code><a href="R-exts_split_014.html#FOOT112" id="DOCF112"><sup>112</sup></a> and perhaps then (for compiled C++ code) <code class="calibre2">c++filt</code>. (On macOS, you may need to run <code class="calibre2">dsymutil</code> to get line-number reports.)</p>
<p>The simplest way to make use of this is to build a version of R with something like</p>
<div class="example">
<pre class="example1"><code>CC=&quot;gcc -std=gnu99 -fsanitize=address&quot;
CFLAGS=&quot;-fno-omit-frame-pointer -g -O2 -Wall -pedantic -mtune=native&quot;</code></pre>
</div>
<p>which will ensure that the <code class="calibre2">libasan</code> run-time library is compiled into the R executable. However this check can be enabled on a per-package basis by using a ~/.R/Makevars file like</p>
<div class="example">
<pre class="example1"><code>CC = gcc -std=gnu99 -fsanitize=address -fno-omit-frame-pointer
CXX = g++ -fsanitize=address -fno-omit-frame-pointer
F77 = gfortran -fsanitize=address
FC = gfortran -fsanitize=address</code></pre>
</div>
<p>(Note that <code class="calibre2">-fsanitize=address</code> has to be part of the compiler specification to ensure it is used for linking. These settings will not be honoured by packages which ignore ~/.R/Makevars.) It will be necessary to build R with</p>
<div class="example">
<pre class="example1"><code>MAIN_LDFLAGS = -fsanitize=address</code></pre>
</div>
<p>to link the runtime libraries into the R executable if it was not specified as part of ‘CC’ when R was built.</p>
<p>For options available <em>via</em> the environment variable <code class="calibre2">ASAN_OPTIONS</code> see <a href="https://code.google.com/p/address-sanitizer/wiki/AddressSanitizerFLags" class="uri">https://code.google.com/p/address-sanitizer/wiki/AddressSanitizerFLags</a>. With <code class="calibre2">gcc</code> additional control is available <em>via</em> the --param flag: see its <code class="calibre2">man</code> page.</p>
<p>For more detailed information on an error, R can be run under a debugger with a breakpoint set before the address sanitizer report is produced: for <code class="calibre2">gdb</code> or <code class="calibre2">lldb</code> you could use</p>
<div class="example">
<pre class="example1"><code>break __asan_report_error</code></pre>
</div>
<p>(See <a href="https://code.google.com/p/address-sanitizer/wiki/AddressSanitizer#gdb" class="uri">https://code.google.com/p/address-sanitizer/wiki/AddressSanitizer#gdb</a>.)</p>
<p>Recent versions<a href="R-exts_split_014.html#FOOT113" id="DOCF113"><sup>113</sup></a> added the flag -fsanitize-address-use-after-scope: see <a href="https://github.com/google/sanitizers/wiki/AddressSanitizerUseAfterScope" class="uri">https://github.com/google/sanitizers/wiki/AddressSanitizerUseAfterScope</a>.</p>
<hr />
<p><a href="" id="Using-Leak-Sanitizer"></a> <a href="" id="Using-the-Leak-Sanitizer"></a></p>
<h4 id="using-the-leak-sanitizer" class="subsection">4.3.3.1 Using the Leak Sanitizer</h4>
<p>For <code class="calibre2">x86_64</code> Linux there is a leak sanitizer, ‘LSan’: see <a href="https://code.google.com/p/address-sanitizer/wiki/LeakSanitizer" class="uri">https://code.google.com/p/address-sanitizer/wiki/LeakSanitizer</a>. This is available on recent versions of <code class="calibre2">gcc</code> and <code class="calibre2">clang</code>, and where available is compiled in as part of ASan.</p>
<p>One way to invoke this from an ASan-enabled build is by the environment variable</p>
<div class="example">
<pre class="example1"><code>ASAN_OPTIONS=&#39;detect_leaks=1&#39;</code></pre>
</div>
<p>However, this was made the default as from <code class="calibre2">clang</code> 3.5 and <code class="calibre2">gcc</code> 5.1.0.</p>
<p>When LSan is enabled, leaks give the process a failure error status (by default <code class="calibre2">23</code>). For an R package this means the R process, and as the parser retains some memory to the end of the process, if R itself was built against ASan, all runs will have a failure error status (which may include running R as part of building R itself).</p>
<p>To disable both this and some strict checking use</p>
<div class="example">
<pre class="example1"><code>setenv ASAN_OPTIONS ‘alloc_dealloc_mismatch=0:detect_leaks=0:detect_odr_violation=0’</code></pre>
</div>
<p>LSan also has a ‘stand-alone’ mode where it is compiled in using -fsanitize=leak and avoids the run-time overhead of ASan.</p>
<hr />
<p><a href="" id="Using-Undefined-Behaviour-Sanitizer"></a> <a href="" id="Using-the-Undefined-Behaviour-Sanitizer"></a></p>
<h4 id="using-the-undefined-behaviour-sanitizer" class="subsection">4.3.4 Using the Undefined Behaviour Sanitizer</h4>
<p>‘Undefined behaviour’ is where the language standard does not require particular behaviour from the compiler. Examples include division by zero (where for doubles R requires the ISO/IEC 60559 behaviour but C/C++ do not), use of zero-length arrays, shifts too far for signed types (e.g. <code class="calibre2">int x, y; y = x &lt;&lt; 31;</code>), out-of-range coercion, invalid C++ casts and mis-alignment. Not uncommon examples of out-of-range coercion in R packages are attempts to coerce a <code class="calibre2">NaN</code> or infinity to type <code class="calibre2">int</code> or <code class="calibre2">NA_INTEGER</code> to an unsigned type such as <code class="calibre2">size_t</code>. Also common is <code class="calibre2">y[x - 1]</code> forgetting that <code class="calibre2">x</code> might be <code class="calibre2">NA_INTEGER</code>.</p>
<p>‘UBSanitizer’ is a tool for C/C++ source code selected by -fsanitize=undefined in suitable builds<a href="R-exts_split_014.html#FOOT114" id="DOCF114"><sup>114</sup></a> of <code class="calibre2">clang</code> and GCC. Its (main) runtime library is linked into each package’s DLL, so it is less often needed to be included in <code class="calibre2">MAIN_LDFLAGS</code>.</p>
<p>This sanitizer can be combined with the Address Sanitizer by -fsanitize=undefined,address (where both are supported).</p>
<p>Finer control of what is checked can be achieved by other options: for <code class="calibre2">clang</code> see <a href="http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation" class="uri">http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation</a>.<a href="R-exts_split_014.html#FOOT115" id="DOCF115"><sup>115</sup></a> The current set for <code class="calibre2">clang</code> is (on a single line):</p>
<div class="example">
<pre class="example1"><code>-fsanitize=alignment,bool,bounds,enum,float-cast-overflow,
float-divide-by-zero,function,integer-divide-by-zero,nonnull-attribute,
null,object-size,pointer-overflow,return,returns-nonnull-attribute,shift,
signed-integer-overflow,unreachable,unsigned-integer-overflow,vla-bound,vptr</code></pre>
</div>
<p>(plus the more specific versions <code class="calibre2">shift-base</code> and <code class="calibre2">shift-exponent</code>) a subset of which could be combined with <code class="calibre2">address</code>, or use something like</p>
<div class="example">
<pre class="example1"><code>-fsanitize=undefined -fno-sanitize=float-divide-by-zero</code></pre>
</div>
<p>Options <code class="calibre2">function</code>, <code class="calibre2">return</code> and <code class="calibre2">vptr</code> apply only to C++: to use <code class="calibre2">vptr</code> its run-time library needs to be linked into the main R executable by building the latter with something like</p>
<div class="example">
<pre class="example1"><code>MAIN_LD=&quot;clang++ -fsanitize=undefined&quot;</code></pre>
</div>
<p>Option <code class="calibre2">float-divide-by-zero</code> is undesirable for use with R which allow such divisions as part of IEC 60559 arithmetic.</p>
<p>See <a href="https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html" class="uri">https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html</a> (or the manual for your version of GCC, installed or <em>via</em> <a href="https://gcc.gnu.org/onlinedocs/" class="uri">https://gcc.gnu.org/onlinedocs/</a>: look for ‘Program Instrumentation Options’) for the options supported by GCC: 6 and 7 support</p>
<div class="example">
<pre class="example1"><code>-fsanitize=alignment,bool,bounds,enum,integer-divide-by-zero,
nonnull-attribute,null,object-size, return,returns-nonnull-attribute,
shift,signed-integer-overflow,unreachable,vla-bound,vptr</code></pre>
</div>
<p>plus the more specific versions <code class="calibre2">shift-base</code> and <code class="calibre2">shift-exponent</code> and non-default options</p>
<div class="example">
<pre class="example1"><code>bound-strict,float-cast-overflow,float-divide-by-zero</code></pre>
</div>
<p>where <code class="calibre2">float-divide-by-zero</code> is not desirable for R uses and <code class="calibre2">bounds-strict</code> is an extension of <code class="calibre2">bounds</code>.</p>
<p>From GCC 8 <code class="calibre2">signed-integer-overflow</code> will no longer be a default part of -fsanitize=undefined, but can be specified separately.</p>
<p>Other useful flags include</p>
<div class="example">
<pre class="example1"><code>-no-fsanitize-recover</code></pre>
</div>
<p>which causes the first report to be fatal (it always is for the <code class="calibre2">unreachable</code> and <code class="calibre2">return</code> suboptions). For more detailed information on where the runtime error occurs, R can be run under a debugger with a breakpoint set before the sanitizer report is produced: for <code class="calibre2">gdb</code> or <code class="calibre2">lldb</code> you could use</p>
<div class="example">
<pre class="example1"><code>break __ubsan_handle_float_cast_overflow
break __ubsan_handle_float_cast_overflow_abort</code></pre>
</div>
<p>or similar (there are handlers for each type of undefined behaviour).</p>
<p>There are also the compiler flags -fcatch-undefined-behavior and -ftrapv, said to be more reliable in <code class="calibre2">clang</code> than <code class="calibre2">gcc</code>.</p>
<p>For more details on the topic see <a href="http://blog.regehr.org/archives/213" class="uri">http://blog.regehr.org/archives/213</a> and <a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html" class="uri">http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html</a> (which has 3 parts).</p>
<hr />
<p><a href="" id="Other-analyses-with-_0060clang_0027"></a> <a href="" id="Other-analyses-with-_0060clang_0027-1"></a></p>
<h4 id="other-analyses-with-clang" class="subsection">4.3.5 Other analyses with ‘clang’</h4>
<p>Recent versions of <code class="calibre2">clang</code> on ‘x86_64’ Linux have ‘ThreadSanitizer’ (<a href="https://code.google.com/p/thread-sanitizer/" class="uri">https://code.google.com/p/thread-sanitizer/</a>), a ‘data race detector for C/C++ programs’, and ‘MemorySanitizer’ (<a href="http://clang.llvm.org/docs/MemorySanitizer.html" class="uri">http://clang.llvm.org/docs/MemorySanitizer.html</a>, <a href="https://code.google.com/p/memory-sanitizer/wiki/MemorySanitizer" class="uri">https://code.google.com/p/memory-sanitizer/wiki/MemorySanitizer</a>) for the detection of uninitialized memory. Both are based on and provide similar functionality to tools in <code class="calibre2">valgrind</code>.</p>
<p><code class="calibre2">clang</code> has a ‘Static Analyser’ which can be run on the source files during compilation: see <a href="http://clang-analyzer.llvm.org/" class="uri">http://clang-analyzer.llvm.org/</a>.</p>
<hr />
<p><a href="" id="Using-_0060Dr_002e-Memory_0027"></a> <a href="" id="Using-_0060Dr_002e-Memory_0027-1"></a></p>
<h4 id="using-dr.-memory" class="subsection">4.3.6 Using ‘Dr. Memory’</h4>
<p>‘Dr. Memory’ from <a href="http://www.drmemory.org/" class="uri">http://www.drmemory.org/</a> is a memory checker for (currently) 32-bit Windows, Linux and macOS with similar aims to <code class="calibre2">valgrind</code>. It works with unmodified executables<a href="R-exts_split_014.html#FOOT116" id="DOCF116"><sup>116</sup></a> and detects memory access errors, uninitialized reads and memory leaks.</p>
<hr />
<p><a href="" id="Fortran-array-bounds-checking"></a> <a href="" id="Fortran-array-bounds-checking-1"></a></p>
<h4 id="fortran-array-bounds-checking" class="subsection">4.3.7 Fortran array bounds checking</h4>
<p>Most of the Fortran compilers used with R allow code to be compiled with checking of array bounds: for example <code class="calibre2">gfortran</code> has option -fbounds-check and Oracle Studio has -C. This will give an error when the upper or lower bound is exceeded, e.g.</p>
<div class="example">
<pre class="example1"><code>At line 97 of file .../src/appl/dqrdc2.f
Fortran runtime error: Index ‘1’ of dimension 1 of array ‘x’ above upper bound of 0</code></pre>
</div>
<p>One does need to be aware that lazy programmers often specify Fortran dimensions as <code class="calibre2">1</code> rather than <code class="calibre2">*</code> or a real bound and these will be reported.</p>
<p>It is easy to arrange to use this check on just the code in your package: add to ~/.R/Makevars something like (for <code class="calibre2">gfortran</code>)</p>
<div class="example">
<pre class="example1"><code>FCFLAGS = -g -O2 -mtune=native -fbounds-check
FFLAGS = -g -O2 -mtune=native -fbounds-check</code></pre>
</div>
<p>when you run <code class="calibre2">R CMD check</code>.</p>
<p>This may report incorrectly errors with the way that Fortran character variables are passed, particularly when Fortran subroutines are called from C code. This may include the use of BLAS and LAPACK subroutines in R, so it is not advisable to build R itself with bounds checking (and may not even be possible as these subroutines are called during the R build).</p>
<hr />
<p><a href="" id="Debugging-compiled-code"></a> <a href="" id="Debugging-compiled-code-1"></a></p>
<h3 id="debugging-compiled-code" class="section">4.4 Debugging compiled code</h3>
<p><a href="" id="index-Debugging"></a></p>
<p>Sooner or later programmers will be faced with the need to debug compiled code loaded into R. This section is geared to platforms using <code class="calibre2">gdb</code> with code compiled by <code class="calibre2">gcc</code>, but similar things are possible with other debuggers such as <code class="calibre2">lldb</code> (<a href="http://lldb.llvm.org/" class="uri">http://lldb.llvm.org/</a>, used on macOS) and Sun’s <code class="calibre2">dbx</code>: some debuggers have graphical front-ends available.</p>
<p>Consider first ‘crashes’, that is when R terminated unexpectedly with an illegal memory access (a ‘segfault’ or ‘bus error’), illegal instruction or similar. Unix-alike versions of R use a signal handler which aims to give some basic information. For example</p>
<div class="example">
<pre class="example1"><code> *** caught segfault ***
address 0x20000028, cause ‘memory not mapped’

Traceback:
 1: .identC(class1[[1]], class2)
 2: possibleExtends(class(sloti), classi, ClassDef2 = getClassDef(classi,
where = where))
 3: validObject(t(cu))
 4: stopifnot(validObject(cu &lt;- as(tu, &quot;dtCMatrix&quot;)), validObject(t(cu)),
validObject(t(tu)))

Possible actions:
1: abort (with core dump)
2: normal R exit
3: exit R without saving workspace
4: exit R saving workspace
Selection: 3</code></pre>
</div>
<p>Since the R process may be damaged, the only really safe options are the first or third. (Note that a core dump is only produced where enabled: a common default in a shell is to limit its size to 0, thereby disabling it.)</p>
<p>A fairly common cause of such crashes is a package which uses <code class="calibre2">.C</code> or <code class="calibre2">.Fortran</code> and writes beyond (at either end) one of the arguments it is passed. There is a good way to detect this: using <code class="calibre2">options(CBoundsCheck = TRUE)</code> (which can be selected <em>via</em> the environment variable <code class="calibre2">R_C_BOUNDS_CHECK=yes)</code> changes the way <code class="calibre2">.C</code> and <code class="calibre2">.Fortran</code> work to check if the compiled code writes in the 64 bytes at either end of an argument.</p>
<p>Another cause of a ‘crash’ is to overrun the C stack. R tries to track that in its own code, but it may happen in third-party compiled code. For modern POSIX-compliant OSes R can safely catch that and return to the top-level prompt, so one gets something like</p>
<div class="example">
<pre class="example1"><code>&gt; .C(&quot;aaa&quot;)
Error: segfault from C stack overflow
&gt;</code></pre>
</div>
<p>However, C stack overflows are fatal under Windows and normally defeat attempts at debugging on that platform. Further, the size of the stack is set when R is compiled, whereas on POSIX OSes it can be set in the shell from which R is launched.</p>
<p>If you have a crash which gives a core dump you can use something like</p>
<div class="example">
<pre class="example1"><code>gdb /path/to/R/bin/exec/R core.12345</code></pre>
</div>
<p>to examine the core dump. If core dumps are disabled or to catch errors that do not generate a dump one can run R directly under a debugger by for example</p>
<div class="example">
<pre class="example1"><code>$ R -d gdb --vanilla
...
gdb&gt; run</code></pre>
</div>
<p>at which point R will run normally, and hopefully the debugger will catch the error and return to its prompt. This can also be used to catch infinite loops or interrupt very long-running code. For a simple example</p>
<div class="example">
<pre class="example1"><code>&gt; for(i in 1:1e7) x &lt;- rnorm(100)
[hit Ctrl-C]
Program received signal SIGINT, Interrupt.
x00397682 in _int_free () from /lib/tls/libc.so.6
(gdb) where
#0  0x00397682 in _int_free () from /lib/tls/libc.so.6
#1  0x00397eba in free () from /lib/tls/libc.so.6
#2  0xb7cf2551 in R_gc_internal (size_needed=313)
    at /users/ripley/R/svn/R-devel/src/main/memory.c:743
#3  0xb7cf3617 in Rf_allocVector (type=13, length=626)
    at /users/ripley/R/svn/R-devel/src/main/memory.c:1906
#4  0xb7c3f6d3 in PutRNGstate ()
    at /users/ripley/R/svn/R-devel/src/main/RNG.c:351
#5  0xb7d6c0a5 in do_random2 (call=0x94bf7d4, op=0x92580e8, args=0x9698f98,
    rho=0x9698f28) at /users/ripley/R/svn/R-devel/src/main/random.c:183
...</code></pre>
</div>
<p>In many cases it is possible to attach a debugger to a running process: this is helpful if an alternative front-end is in use or to investigate a task that seems to be taking far too long. This is done by something like</p>
<div class="example">
<pre class="example1"><code>gdb -p pid</code></pre>
</div>
<p>where <code class="calibre2">pid</code> is the id of the R executable or front-end. This stops the process so its state can be examined: use <code class="calibre2">continue</code> to resume execution.</p>
<p>Some “tricks” worth knowing follow:</p>
<hr />
<p><a href="" id="Finding-entry-points"></a> <a href="" id="Finding-entry-points-in-dynamically-loaded-code"></a></p>
<h4 id="finding-entry-points-in-dynamically-loaded-code" class="subsection">4.4.1 Finding entry points in dynamically loaded code</h4>
<p>Under most compilation environments, compiled code dynamically loaded into R cannot have breakpoints set within it until it is loaded. To use a symbolic debugger on such dynamically loaded code under Unix-alikes use</p>
<ul>
<li>Call the debugger on the R executable, for example by R -d gdb.</li>
<li>Start R.</li>
<li>At the R prompt, use <code class="calibre2">dyn.load</code> or <code class="calibre2">library</code> to load your shared object.</li>
<li>Send an interrupt signal. This will put you back to the debugger prompt.</li>
<li>Set the breakpoints in your code.</li>
<li>Continue execution of R by typing signal 0<span>RET</span>.</li>
</ul>
<p>Under Windows signals may not be able to be used, and if so the procedure is more complicated. See the rw-FAQ and <a href="http://www.stats.uwo.ca/faculty/murdoch/software/debuggingR/gdb.shtml"><code class="calibre2">www.stats.uwo.ca/faculty/murdoch/software/debuggingR/gdb.shtml</code></a>.</p>
<hr />
<p><a href="" id="Inspecting-R-objects"></a> <a href="" id="Inspecting-R-objects-when-debugging"></a></p>
<h4 id="inspecting-r-objects-when-debugging" class="subsection">4.4.2 Inspecting R objects when debugging</h4>
<p><a href="" id="index-Inspecting-R-objects-when-debugging"></a></p>
<p>The key to inspecting R objects from compiled code is the function <code class="calibre2">PrintValue(SEXP s)</code> which uses the normal R printing mechanisms to print the R object pointed to by s, or the safer version <code class="calibre2">R_PV(SEXP s)</code> which will only print ‘objects’.</p>
<p>One way to make use of <code class="calibre2">PrintValue</code> is to insert suitable calls into the code to be debugged.</p>
<p>Another way is to call <code class="calibre2">R_PV</code> from the symbolic debugger. (<code class="calibre2">PrintValue</code> is hidden as <code class="calibre2">Rf_PrintValue</code>.) For example, from <code class="calibre2">gdb</code> we can use</p>
<div class="example">
<pre class="example1"><code>(gdb) p R_PV(ab)</code></pre>
</div>
<p>using the object <code class="calibre2">ab</code> from the convolution example, if we have placed a suitable breakpoint in the convolution C code.</p>
<p>To examine an arbitrary R object we need to work a little harder. For example, let</p>
<div class="example">
<pre class="example1"><code>R&gt; DF &lt;- data.frame(a = 1:3, b = 4:6)</code></pre>
</div>
<p>By setting a breakpoint at <code class="calibre2">do_get</code> and typing get(&quot;DF&quot;) at the R prompt, one can find out the address in memory of <code class="calibre2">DF</code>, for example</p>
<div class="example">
<pre class="example1"><code>Value returned is $1 = (SEXPREC *) 0x40583e1c
(gdb) p *$1
$2 = {
  sxpinfo = {type = 19, obj = 1, named = 1, gp = 0,
    mark = 0, debug = 0, trace = 0, = 0},
  attrib = 0x40583e80,
  u = {
    vecsxp = {
      length = 2,
      type = {c = 0x40634700 &quot;0&gt;X@D&gt;X@0&gt;X@&quot;, i = 0x40634700,
        f = 0x40634700, z = 0x40634700, s = 0x40634700},
      truelength = 1075851272,
    },
    primsxp = {offset = 2},
    symsxp = {pname = 0x2, value = 0x40634700, internal = 0x40203008},
    listsxp = {carval = 0x2, cdrval = 0x40634700, tagval = 0x40203008},
    envsxp = {frame = 0x2, enclos = 0x40634700},
    closxp = {formals = 0x2, body = 0x40634700, env = 0x40203008},
    promsxp = {value = 0x2, expr = 0x40634700, env = 0x40203008}
  }
}</code></pre>
</div>
<p>(Debugger output reformatted for better legibility).</p>
<p>Using <code class="calibre2">R_PV()</code> one can “inspect” the values of the various elements of the SEXP, for example,</p>
<div class="example">
<pre class="example1"><code>(gdb) p R_PV($1-&gt;attrib)
$names
[1] &quot;a&quot; &quot;b&quot;

$row.names
[1] &quot;1&quot; &quot;2&quot; &quot;3&quot;

$class
[1] &quot;data.frame&quot;

$3 = void</code></pre>
</div>
<p>To find out where exactly the corresponding information is stored, one needs to go “deeper”:</p>
<div class="example">
<pre class="example1"><code>(gdb) set $a = $1-&gt;attrib
(gdb) p $a-&gt;u.listsxp.tagval-&gt;u.symsxp.pname-&gt;u.vecsxp.type.c
$4 = 0x405d40e8 &quot;names&quot;
(gdb) p $a-&gt;u.listsxp.carval-&gt;u.vecsxp.type.s[1]-&gt;u.vecsxp.type.c
$5 = 0x40634378 &quot;b&quot;
(gdb) p $1-&gt;u.vecsxp.type.s[0]-&gt;u.vecsxp.type.i[0]
$6 = 1
(gdb) p $1-&gt;u.vecsxp.type.s[1]-&gt;u.vecsxp.type.i[1]
$7 = 5</code></pre>
</div>
<p>Another alternative is the <code class="calibre2">R_inspect</code> function which shows the low-level structure of the objects recursively (addresses differ from the above as this example is created on another machine):</p>
<div class="example">
<pre class="example1"><code>(gdb) p R_inspect($1)
@100954d18 19 VECSXP g0c2 [OBJ,NAM(2),ATT] (len=2, tl=0)
  @100954d50 13 INTSXP g0c2 [NAM(2)] (len=3, tl=0) 1,2,3
  @100954d88 13 INTSXP g0c2 [NAM(2)] (len=3, tl=0) 4,5,6
ATTRIB:
  @102a70140 02 LISTSXP g0c0 []
    TAG: @10083c478 01 SYMSXP g0c0 [MARK,NAM(2),gp=0x4000] &quot;names&quot;
    @100954dc0 16 STRSXP g0c2 [NAM(2)] (len=2, tl=0)
      @10099df28 09 CHARSXP g0c1 [MARK,gp=0x21] &quot;a&quot;
      @10095e518 09 CHARSXP g0c1 [MARK,gp=0x21] &quot;b&quot;
    TAG: @100859e60 01 SYMSXP g0c0 [MARK,NAM(2),gp=0x4000] &quot;row.names&quot;
    @102a6f868 13 INTSXP g0c1 [NAM(2)] (len=2, tl=1) -2147483648,-3
    TAG: @10083c948 01 SYMSXP g0c0 [MARK,gp=0x4000] &quot;class&quot;
    @102a6f838 16 STRSXP g0c1 [NAM(2)] (len=1, tl=1)
      @1008c6d48 09 CHARSXP g0c2 [MARK,gp=0x21,ATT] &quot;data.frame&quot;</code></pre>
</div>
<p>In general the representation of each object follows the format:</p>
<div class="example">
<pre class="smallexample"><code>@&lt;address&gt; &lt;type-nr&gt; &lt;type-name&gt; &lt;gc-info&gt; [&lt;flags&gt;] ...</code></pre>
</div>
<p>For a more fine-grained control over the depth of the recursion and the output of vectors <code class="calibre2">R_inspect3</code> takes additional two character() parameters: maximum depth and the maximal number of elements that will be printed for scalar vectors. The defaults in <code class="calibre2">R_inspect</code> are currently -1 (no limit) and 5 respectively.</p>
<hr />
<p><a href="" id="System-and-foreign-language-interfaces"></a> <a href="" id="System-and-foreign-language-interfaces-1"></a></p>
<div id="calibre_pb_12" class="calibre6">

</div>

<!--chapter:end:8-R-exts.Rmd-->

#  System and foreign language interfaces
<hr />
<p><a href="" id="Operating-system-access"></a> <a href="" id="Operating-system-access-1"></a></p>
<h3 id="operating-system-access" class="section">5.1 Operating system access</h3>
<p><a href="" id="index-Operating-system-access"></a></p>
<p>Access to operating system functions is <em>via</em> the R functions <code class="calibre2">system</code> and <code class="calibre2">system2</code>. <a href="" id="index-system"></a> <a href="" id="index-system2"></a> The details will differ by platform (see the on-line help), and about all that can safely be assumed is that the first argument will be a string <code class="calibre2">command</code> that will be passed for execution (not necessarily by a shell) and the second argument to <code class="calibre2">system</code> will be <code class="calibre2">internal</code> which if true will collect the output of the command into an R character vector.</p>
<p>On POSIX-compliant OSes these commands pass a command-line to a shell: Windows is not POSIX-compliant and there is a separate function <code class="calibre2">shell</code> to do so.</p>
<p>The function <code class="calibre2">system.time</code> <a href="" id="index-system_002etime"></a> is available for timing. Timing on child processes is only available on Unix-alikes, and may not be reliable there.</p>
<hr />
<p><a href="" id="Interface-functions-_002eC-and-_002eFortran"></a> <a href="" id="Interface-functions-_002eC-and-_002eFortran-1"></a></p>
<h3 id="interface-functions-.c-and-.fortran" class="section">5.2 Interface functions <code class="calibre18">.C</code> and <code class="calibre18">.Fortran</code></h3>
<p><a href="" id="index-Interfaces-to-compiled-code"></a> <a href="" id="index-_002eC"></a> <a href="" id="index-_002eFortran"></a></p>
<p>These two functions provide an interface to compiled code that has been linked into R, either at build time or <em>via</em> <code class="calibre2">dyn.load</code> (see <a href="#dyn_002eload-and-dyn_002eunload">dyn.load and dyn.unload</a>). They are primarily intended for compiled C and FORTRAN 77 code respectively, but the <code class="calibre2">.C</code> function can be used with other languages which can generate C interfaces, for example C++ (see <a href="#Interfacing-C_002b_002b-code">Interfacing C++ code</a>).</p>
<p>The first argument to each function is a character string specifying the symbol name as known<a href="R-exts_split_014.html#FOOT117" id="DOCF117"><sup>117</sup></a> to C or FORTRAN, that is the function or subroutine name. (That the symbol is loaded can be tested by, for example, <code class="calibre2">is.loaded(&quot;cg&quot;)</code>. Use the name you pass to <code class="calibre2">.C</code> or <code class="calibre2">.Fortran</code> rather than the translated symbol name.)</p>
<p>There can be up to 65 further arguments giving R objects to be passed to compiled code. Normally these are copied before being passed in, and copied again to an R list object when the compiled code returns. If the arguments are given names, these are used as names for the components in the returned list object (but not passed to the compiled code).</p>
<p>The following table gives the mapping between the modes of R atomic vectors and the types of arguments to a C function or FORTRAN subroutine.</p>
<blockquote>
<table>
<thead>
<tr class="header">
<th align="left">R storage mode</th>
<th align="left">C type</th>
<th align="left">FORTRAN type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left"><code class="calibre2">logical</code></td>
<td align="left"><code class="calibre2">int *</code></td>
<td align="left"><code class="calibre2">INTEGER</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">integer</code></td>
<td align="left"><code class="calibre2">int *</code></td>
<td align="left"><code class="calibre2">INTEGER</code></td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">double</code></td>
<td align="left"><code class="calibre2">double *</code></td>
<td align="left"><code class="calibre2">DOUBLE PRECISION</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">complex</code></td>
<td align="left"><code class="calibre2">Rcomplex *</code></td>
<td align="left"><code class="calibre2">DOUBLE COMPLEX</code></td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">character</code></td>
<td align="left"><code class="calibre2">char **</code></td>
<td align="left"><code class="calibre2">CHARACTER*255</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">raw</code></td>
<td align="left"><code class="calibre2">unsigned char *</code></td>
<td align="left">none</td>
</tr>
</tbody>
</table>
</blockquote>
<p>Do please note the first two. On the 64-bit Unix/Linux/macOS platforms, <code class="calibre2">long</code> is 64-bit whereas <code class="calibre2">int</code> and <code class="calibre2">INTEGER</code> are 32-bit. Code ported from S-PLUS (which uses <code class="calibre2">long *</code> for <code class="calibre2">logical</code> and <code class="calibre2">integer</code>) will not work on all 64-bit platforms (although it may appear to work on some, including Windows). Note also that if your compiled code is a mixture of C functions and FORTRAN subprograms the argument types must match as given in the table above.</p>
<p>C type <code class="calibre2">Rcomplex</code> is a structure with <code class="calibre2">double</code> members <code class="calibre2">r</code> and <code class="calibre2">i</code> defined in the header file R_ext/Complex.h included by R.h. (On most platforms this is stored in a way compatible with the C99 <code class="calibre2">double complex</code> type: however, it may not be possible to pass <code class="calibre2">Rcomplex</code> to a C99 function expecting a <code class="calibre2">double complex</code> argument. Nor need it be compatible with a C++ <code class="calibre2">complex</code> type. Moreover, the compatibility can depends on the optimization level set for the compiler.)</p>
<p>Only a single character string can be passed to or from FORTRAN, and the success of this is compiler-dependent. Other R objects can be passed to <code class="calibre2">.C</code>, but it is much better to use one of the other interfaces.</p>
<p>It is possible to pass numeric vectors of storage mode <code class="calibre2">double</code> to C as <code class="calibre2">float *</code> or to FORTRAN as <code class="calibre2">REAL</code> by setting the attribute <code class="calibre2">Csingle</code>, most conveniently by using the R functions <code class="calibre2">as.single</code>, <code class="calibre2">single</code> or <code class="calibre2">mode</code>. This is intended only to be used to aid interfacing existing C or FORTRAN code.</p>
<p>Logical values are sent as <code class="calibre2">0</code> (<code class="calibre2">FALSE</code>), <code class="calibre2">1</code> (<code class="calibre2">TRUE</code>) or <code class="calibre2">INT_MIN = -2147483648</code> (<code class="calibre2">NA</code>, but only if <code class="calibre2">NAOK</code> is true), and the compiled code should return one of these three values. (Non-zero values other than <code class="calibre2">INT_MIN</code> are mapped to <code class="calibre2">TRUE</code>.)</p>
<p>Unless formal argument <code class="calibre2">NAOK</code> is true, all the other arguments are checked for missing values <code class="calibre2">NA</code> and for the IEEE special values <code class="calibre2">NaN</code>, <code class="calibre2">Inf</code> and <code class="calibre2">-Inf</code>, and the presence of any of these generates an error. If it is true, these values are passed unchecked.</p>
<p>Argument <code class="calibre2">PACKAGE</code> confines the search for the symbol name to a specific shared object (or use <code class="calibre2">&quot;base&quot;</code> for code compiled into R). Its use is highly desirable, as there is no way to avoid two package writers using the same symbol name, and such name clashes are normally sufficient to cause R to crash. (If it is not present and the call is from the body of a function defined in a package namespace, the shared object loaded by the first (if any) <code class="calibre2">useDynLib</code> directive will be used.</p>
<p>Note that the compiled code should not return anything except through its arguments: C functions should be of type <code class="calibre2">void</code> and FORTRAN subprograms should be subroutines.</p>
<p>To fix ideas, let us consider a very simple example which convolves two finite sequences. (This is hard to do fast in interpreted R code, but easy in C code.) We could do this using <code class="calibre2">.C</code> by</p>
<div class="example">
<pre class="example1"><code>void convolve(double *a, int *na, double *b, int *nb, double *ab)
{
    int nab = *na + *nb - 1;

    for(int i = 0; i &lt; nab; i++)
        ab[i] = 0.0;
    for(int i = 0; i &lt; *na; i++)
        for(int j = 0; j &lt; *nb; j++)
            ab[i + j] += a[i] * b[j];
}</code></pre>
</div>
<p>called from R by</p>
<div class="example">
<pre class="example1"><code>conv &lt;- function(a, b)
    .C(&quot;convolve&quot;,
       as.double(a),
       as.integer(length(a)),
       as.double(b),
       as.integer(length(b)),
       ab = double(length(a) + length(b) - 1))$ab</code></pre>
</div>
<p>Note that we take care to coerce all the arguments to the correct R storage mode before calling <code class="calibre2">.C</code>; mistakes in matching the types can lead to wrong results or hard-to-catch errors.</p>
<p>Special care is needed in handling <code class="calibre2">character</code> vector arguments in C (or C++). On entry the contents of the elements are duplicated and assigned to the elements of a <code class="calibre2">char **</code> array, and on exit the elements of the C array are copied to create new elements of a character vector. This means that the contents of the character strings of the <code class="calibre2">char **</code> array can be changed, including to <code class="calibre2">\0</code> to shorten the string, but the strings cannot be lengthened. It is possible<a href="R-exts_split_014.html#FOOT118" id="DOCF118"><sup>118</sup></a> to allocate a new string <em>via</em> <code class="calibre2">R_alloc</code> and replace an entry in the <code class="calibre2">char **</code> array by the new string. However, when character vectors are used other than in a read-only way, the <code class="calibre2">.Call</code> interface is much to be preferred.</p>
<p>Passing character strings to FORTRAN code needs even more care, and should be avoided where possible. Only the first element of the character vector is passed in, as a fixed-length (255) character array. Up to 255 characters are passed back to a length-one character vector. How well this works (or even if it works at all) depends on the C and FORTRAN compilers on each platform (including on their options). Often what is being passed to FORTRAN is one of a small set of possible values (a factor in R terms) which could alternatively be passed as an integer code: similarly FORTRAN code that wants to generate diagnostic messages can pass an integer code to a C or R wrapper which will convert it to a character string.</p>
<p>It is possible to pass some R objects other than atomic vectors via <code class="calibre2">.C</code>, but this is only supported for historical compatibility: use the <code class="calibre2">.Call</code> or <code class="calibre2">.External</code> interfaces for such objects. Any C/C++ code that includes Rinternals.h should be called via <code class="calibre2">.Call</code> or <code class="calibre2">.External</code>.</p>
<hr />
<p><a href="" id="dyn_002eload-and-dyn_002eunload"></a> <a href="" id="dyn_002eload-and-dyn_002eunload-1"></a></p>
<h3 id="dyn.load-and-dyn.unload" class="section">5.3 <code class="calibre18">dyn.load</code> and <code class="calibre18">dyn.unload</code></h3>
<p><a href="" id="index-Dynamic-loading"></a> <a href="" id="index-dyn_002eload"></a> <a href="" id="index-dyn_002eunload"></a></p>
<p>Compiled code to be used with R is loaded as a shared object (Unix-alikes including macOS, see <a href="#Creating-shared-objects">Creating shared objects</a> for more information) or DLL (Windows).</p>
<p>The shared object/DLL is loaded by <code class="calibre2">dyn.load</code> and unloaded by <code class="calibre2">dyn.unload</code>. Unloading is not normally necessary, but it is needed to allow the DLL to be re-built on some platforms, including Windows.</p>
<p>The first argument to both functions is a character string giving the path to the object. Programmers should not assume a specific file extension for the object/DLL (such as .so) but use a construction like</p>
<div class="example">
<pre class="example1"><code>file.path(path1, path2, paste0(&quot;mylib&quot;, .Platform$dynlib.ext))</code></pre>
</div>
<p>for platform independence. On Unix-alike systems the path supplied to <code class="calibre2">dyn.load</code> can be an absolute path, one relative to the current directory or, if it starts with ‘~’, relative to the user’s home directory.</p>
<p>Loading is most often done automatically based on the <code class="calibre2">useDynLib()</code> declaration in the NAMESPACE file, but may be done explicitly <em>via</em> a call to <code class="calibre2">library.dynam</code>. <a href="" id="index-library_002edynam-1"></a> This has the form</p>
<div class="example">
<pre class="example1"><code>library.dynam(&quot;libname&quot;, package, lib.loc)</code></pre>
</div>
<p>where <code class="calibre2">libname</code> is the object/DLL name <em>with the extension omitted</em>. Note that the first argument, <code class="calibre2">chname</code>, should <strong>not</strong> be <code class="calibre2">package</code> since this will not work if the package is installed under another name.</p>
<p>Under some Unix-alike systems there is a choice of how the symbols are resolved when the object is loaded, governed by the arguments <code class="calibre2">local</code> and <code class="calibre2">now</code>. Only use these if really necessary: in particular using <code class="calibre2">now=FALSE</code> and then calling an unresolved symbol will terminate R unceremoniously.</p>
<p>R provides a way of executing some code automatically when a object/DLL is either loaded or unloaded. This can be used, for example, to register native routines with R’s dynamic symbol mechanism, initialize some data in the native code, or initialize a third party library. On loading a DLL, R will look for a routine within that DLL named <code class="calibre2">R_init_lib</code> where lib is the name of the DLL file with the extension removed. For example, in the command</p>
<div class="example">
<pre class="example1"><code>library.dynam(&quot;mylib&quot;, package, lib.loc)</code></pre>
</div>
<p>R looks for the symbol named <code class="calibre2">R_init_mylib</code>. Similarly, when unloading the object, R looks for a routine named <code class="calibre2">R_unload_lib</code>, e.g., <code class="calibre2">R_unload_mylib</code>. In either case, if the routine is present, R will invoke it and pass it a single argument describing the DLL. This is a value of type <code class="calibre2">DllInfo</code> which is defined in the Rdynload.h file in the R_ext directory.</p>
<p>Note that there are some implicit restrictions on this mechanism as the basename of the DLL needs to be both a valid file name and valid as part of a C entry point (e.g. it cannot contain ‘.’): for portable code it is best to confine DLL names to be ASCII alphanumeric plus underscore. If entry point <code class="calibre2">R_init_lib</code> is not found it is also looked for with ‘.’ replaced by ‘_’.</p>
<p>The following example shows templates for the initialization and unload routines for the <code class="calibre2">mylib</code> DLL.</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>#include &lt;R_ext/Rdynload.h&gt;

void
R_init_mylib(DllInfo *info)
{
  /* Register routines,
     allocate resources. */
}

void
R_unload_mylib(DllInfo *info)
{
  /* Release resources. */
}</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>If a shared object/DLL is loaded more than once the most recent version is used.<a href="R-exts_split_014.html#FOOT119" id="DOCF119"><sup>119</sup></a> More generally, if the same symbol name appears in several shared objects, the most recently loaded occurrence is used. The <code class="calibre2">PACKAGE</code> argument and registration (see the next section) provide good ways to avoid any ambiguity in which occurrence is meant.</p>
<p>On Unix-alikes the paths used to resolve dynamically linked dependent libraries are fixed (for security reasons) when the process is launched, so <code class="calibre2">dyn.load</code> will only look for such libraries in the locations set by the R shell script (<em>via</em> etc/ldpaths) and in the OS-specific defaults.</p>
<p>Windows allows more control (and less security) over where dependent DLLs are looked for. On all versions this includes the <code class="calibre2">PATH</code> environment variable, but with lowest priority: note that it does not include the directory from which the DLL was loaded. It is possible to add a single path with quite high priority <em>via</em> the <code class="calibre2">DLLpath</code> argument to <code class="calibre2">dyn.load</code>. This is (by default) used by <code class="calibre2">library.dynam</code> to include the package’s libs/i386 or libs/x64 directory in the DLL search path.</p>
<hr />
<p><a href="" id="Registering-native-routines"></a> <a href="" id="Registering-native-routines-1"></a></p>
<h3 id="registering-native-routines" class="section">5.4 Registering native routines</h3>
<p><a href="" id="index-Registering-native-routines"></a></p>
<p>By ‘native’ routine, we mean an entry point in compiled code.</p>
<p>In calls to <code class="calibre2">.C</code>, <code class="calibre2">.Call</code>, <code class="calibre2">.Fortran</code> and <code class="calibre2">.External</code>, R must locate the specified native routine by looking in the appropriate shared object/DLL. By default, R uses the operating-system-specific dynamic loader to lookup the symbol in all<a href="R-exts_split_014.html#FOOT120" id="DOCF120"><sup>120</sup></a> loaded DLLs and the R executable or libraries it is linked to. Alternatively, the author of the DLL can explicitly register routines with R and use a single, platform-independent mechanism for finding the routines in the DLL. One can use this registration mechanism to provide additional information about a routine, including the number and type of the arguments, and also make it available to R programmers under a different name.</p>
<p>Registering routines has two main advantages: it provides a faster<a href="R-exts_split_014.html#FOOT121" id="DOCF121"><sup>121</sup></a> way to find the address of the entry point <em>via</em> tables stored in the DLL at compilation time, and it provides a run-time check that the entry point is called with the right number of arguments and, optionally, the right argument types.</p>
<p><a href="" id="index-R_005fregisterRoutines"></a></p>
<p>To register routines with R, one calls the C routine <code class="calibre2">R_registerRoutines</code>. This is typically done when the DLL is first loaded within the initialization routine <code class="calibre2">R_init_dll name</code> described in <a href="#dyn_002eload-and-dyn_002eunload">dyn.load and dyn.unload</a>. <code class="calibre2">R_registerRoutines</code> takes 5 arguments. The first is the <code class="calibre2">DllInfo</code> object passed by R to the initialization routine. This is where R stores the information about the methods. The remaining 4 arguments are arrays describing the routines for each of the 4 different interfaces: <code class="calibre2">.C</code>, <code class="calibre2">.Call</code>, <code class="calibre2">.Fortran</code> and <code class="calibre2">.External</code>. Each argument is a <code class="calibre2">NULL</code>-terminated array of the element types given in the following table:</p>
<blockquote>
<table>
<tbody>
<tr class="odd">
<td align="left"><code class="calibre2">.C</code></td>
<td align="left"><code class="calibre2">R_CMethodDef</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">.Call</code></td>
<td align="left"><code class="calibre2">R_CallMethodDef</code></td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">.Fortran</code></td>
<td align="left"><code class="calibre2">R_FortranMethodDef</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">.External</code></td>
<td align="left"><code class="calibre2">R_ExternalMethodDef</code></td>
</tr>
</tbody>
</table>
</blockquote>
<p>Currently, the <code class="calibre2">R_ExternalMethodDef</code> type is the same as <code class="calibre2">R_CallMethodDef</code> type and contains fields for the name of the routine by which it can be accessed in R, a pointer to the actual native symbol (i.e., the routine itself), and the number of arguments the routine expects to be passed from R. For example, if we had a routine named <code class="calibre2">myCall</code> defined as</p>
<div class="example">
<pre class="example1"><code>SEXP myCall(SEXP a, SEXP b, SEXP c);</code></pre>
</div>
<p>we would describe this as</p>
<div class="example">
<pre class="example1"><code>static const R_CallMethodDef callMethods[]  = {
  {&quot;myCall&quot;, (DL_FUNC) &amp;myCall, 3},
  {NULL, NULL, 0}
};</code></pre>
</div>
<p>along with any other routines for the <code class="calibre2">.Call</code> interface. For routines with a variable number of arguments invoked <em>via</em> the <code class="calibre2">.External</code> interface, one specifies <code class="calibre2">-1</code> for the number of arguments which tells R not to check the actual number passed.</p>
<p>Routines for use with the <code class="calibre2">.C</code> and <code class="calibre2">.Fortran</code> interfaces are described with similar data structures, but which have two additional fields for describing the type and “style” of each argument. Each of these can be omitted. However, if specified, each should be an array with the same number of elements as the number of parameters for the routine. The types array should contain the <code class="calibre2">SEXP</code> types describing the expected type of the argument. (Technically, the elements of the types array are of type <code class="calibre2">R_NativePrimitiveArgType</code> which is just an unsigned integer.) The R types and corresponding type identifiers are provided in the following table:</p>
<blockquote>
<table>
<tbody>
<tr class="odd">
<td align="left"><code class="calibre2">numeric</code></td>
<td align="left"><code class="calibre2">REALSXP</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">integer</code></td>
<td align="left"><code class="calibre2">INTSXP</code></td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">logical</code></td>
<td align="left"><code class="calibre2">LGLSXP</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">single</code></td>
<td align="left"><code class="calibre2">SINGLESXP</code></td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">character</code></td>
<td align="left"><code class="calibre2">STRSXP</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">list</code></td>
<td align="left"><code class="calibre2">VECSXP</code></td>
</tr>
</tbody>
</table>
</blockquote>
<p>Consider a C routine, <code class="calibre2">myC</code>, declared as</p>
<div class="example">
<pre class="example1"><code>void myC(double *x, int *n, char **names, int *status);</code></pre>
</div>
<p>We would register it as</p>
<div class="example">
<pre class="example1"><code>static R_NativePrimitiveArgType myC_t[] = {
    REALSXP, INTSXP, STRSXP, LGLSXP
};

static const R_CMethodDef cMethods[] = {
   {&quot;myC&quot;, (DL_FUNC) &amp;myC, 4, myC_t},
   {NULL, NULL, 0, NULL}
};</code></pre>
</div>
<p>Note that <code class="calibre2">.Fortran</code> entry points are mapped to lowercase, so registration should use lowercase only.</p>
<p>Having created the arrays describing each routine, the last step is to actually register them with R. We do this by calling <code class="calibre2">R_registerRoutines</code>. For example, if we have the descriptions above for the routines accessed by the <code class="calibre2">.C</code> and <code class="calibre2">.Call</code> we would use the following code:</p>
<div class="example">
<pre class="example1"><code>void
R_init_myLib(DllInfo *info)
{
   R_registerRoutines(info, cMethods, callMethods, NULL, NULL);
}</code></pre>
</div>
<p>This routine will be invoked when R loads the shared object/DLL named <code class="calibre2">myLib</code>. The last two arguments in the call to <code class="calibre2">R_registerRoutines</code> are for the routines accessed by <code class="calibre2">.Fortran</code> and <code class="calibre2">.External</code> interfaces. In our example, these are given as <code class="calibre2">NULL</code> since we have no routines of these types.</p>
<p>When R unloads a shared object/DLL, its registrations are removed. There is no other facility for unregistering a symbol.</p>
<p>Examples of registering routines can be found in the different packages in the R source tree (e.g., <strong>stats</strong> and <strong>graphics</strong>). Also, there is a brief, high-level introduction in <em>R News</em> (volume 1/3, September 2001, pages 20–23, <a href="https://www.r-project.org/doc/Rnews/Rnews_2001-3.pdf" class="uri">https://www.r-project.org/doc/Rnews/Rnews_2001-3.pdf</a>).</p>
<p>Once routines are registered, they can be referred to as R objects if they this is arranged in the <code class="calibre2">useDynLib</code> call in the package’s NAMESPACE file (see <a href="R-exts_split_005.html#useDynLib">useDynLib</a>). So for example the <strong>stats</strong> package has</p>
<div class="example">
<pre class="example1"><code># Refer to all C/Fortran routines by their name prefixed by C_
useDynLib(stats, .registration = TRUE, .fixes = &quot;C_&quot;)</code></pre>
</div>
<p>in its NAMESPACE file, and then <code class="calibre2">ansari.test</code>’s default methods can contain</p>
<div class="example">
<pre class="example1"><code>        pansari &lt;- function(q, m, n)
            .C(C_pansari, as.integer(length(q)), p = as.double(q),
                as.integer(m), as.integer(n))$p</code></pre>
</div>
<p>This avoids the overhead of looking up an entry point each time it is used, and ensures that the entry point in the package is the one used (without a <code class="calibre2">PACKAGE = &quot;pkg&quot;</code> argument).</p>
<p><code class="calibre2">R_init_</code> routines are often of the form</p>
<div class="example">
<pre class="example1"><code>void attribute_visible R_init_mypkg(DllInfo *dll)
{
    R_registerRoutines(dll, CEntries, CallEntries, FortEntries,
                       ExternalEntries);
    R_useDynamicSymbols(dll, FALSE);
    R_forceSymbols(dll, TRUE);
...
}</code></pre>
</div>
<p><a href="" id="index-R_005fuseDynamicSymbols"></a> <a href="" id="index-R_005fforceSymbols"></a> The <code class="calibre2">R_useDynamicSymbols</code> call says the DLL is not to be searched for entry points specified by character strings so <code class="calibre2">.C</code> etc calls will only find registered symbols: the <code class="calibre2">R_forceSymbols</code> call only allows <code class="calibre2">.C</code> etc calls which specify entry points by R objects such as <code class="calibre2">C_pansari</code> (and not by character strings). Each provides some protection against accidentally finding your entry points when people supply a character string without a package, and avoids slowing down such searches. Routine <code class="calibre2">R_forceSymbols</code> is available from R 3.0.0, so packages using it should have a dependency on at least ‘R (&gt;= 3.0.0)’. (For the visibility attribute see <a href="R-exts_split_010.html#Controlling-visibility">Controlling visibility</a>.)</p>
<p>In more detail, if a package <code class="calibre2">mypkg</code> contains entry points <code class="calibre2">reg</code> and <code class="calibre2">unreg</code> and the first is registered as a 0-argument <code class="calibre2">.Call</code> routine, we could use (from code in the package)</p>
<div class="example">
<pre class="example1"><code>.Call(&quot;reg&quot;)
.Call(&quot;unreg&quot;)</code></pre>
</div>
<p>Without or with registration, these will both work. If <code class="calibre2">R_init_mypkg</code> calls <code class="calibre2">R_useDynamicSymbols(dll, FALSE)</code>, only the first will work. If in addition to registration the NAMESPACE file contains</p>
<div class="example">
<pre class="example1"><code>useDynLib(mypkg, .registration = TRUE, .fixes = &quot;C_&quot;)</code></pre>
</div>
<p>then we can call <code class="calibre2">.Call(C_reg)</code>. Finally, if <code class="calibre2">R_init_mypkg</code> also calls <code class="calibre2">R_forceSymbols(dll, TRUE)</code>, only <code class="calibre2">.Call(C_reg)</code> will work (and not <code class="calibre2">.Call(&quot;reg&quot;)</code>). This is usually what we want: it ensures that all of our own <code class="calibre2">.Call</code> calls go directly to the intended code in our package and that no one else accidentally finds our entry points. (Should someone need to call our code from outside the package, for example for debugging, they can use <code class="calibre2">.Call(mypkg:::C_reg)</code>.)</p>
<hr />
<p><a href="" id="Speed-considerations"></a> <a href="" id="Speed-considerations-1"></a></p>
<h4 id="speed-considerations" class="subsection">5.4.1 Speed considerations</h4>
<p>Sometimes registering native routines or using a <code class="calibre2">PACKAGE</code> argument can make a large difference. The results can depend quite markedly on the OS (and even if it is 32- or 64-bit), on the version of R and what else is loaded into R at the time.</p>
<p>To fix ideas, first consider <code class="calibre2">x84_64</code> OS 10.7 and R 2.15.2. A simple <code class="calibre2">.Call</code> function might be</p>
<div class="example">
<pre class="example1"><code>foo &lt;- function(x) .Call(&quot;foo&quot;, x)</code></pre>
</div>
<p>with C code</p>
<div class="example">
<pre class="example1"><code>#include &lt;Rinternals.h&gt;

SEXP foo(SEXP x)
{
    return x;
}</code></pre>
</div>
<p>If we compile with by <code class="calibre2">R CMD SHLIB foo.c</code>, load the code by <code class="calibre2">dyn.load(&quot;foo.so&quot;)</code> and run <code class="calibre2">foo(pi)</code> it took around 22 microseconds (us). Specifying the DLL by</p>
<div class="example">
<pre class="example1"><code>foo2 &lt;- function(x) .Call(&quot;foo&quot;, x, PACKAGE = &quot;foo&quot;)</code></pre>
</div>
<p>reduced the time to 1.7 us.</p>
<p>Now consider making these functions part of a package whose NAMESPACE file uses <code class="calibre2">useDynlib(foo)</code>. This immediately reduces the running time as <code class="calibre2">&quot;foo&quot;</code> will be preferentially looked for foo.dll. Without specifying <code class="calibre2">PACKAGE</code> it took about 5 us (it needs to fathom out the appropriate DLL each time it is invoked but it does not need to search all DLLs), and with the <code class="calibre2">PACKAGE</code> argument it is again about 1.7 us.</p>
<p>Next suppose the package has registered the native routine <code class="calibre2">foo</code>. Then <code class="calibre2">foo()</code> still has to find the appropriate DLL but can get to the entry point in the DLL faster, in about 4.2 us. And <code class="calibre2">foo2()</code> now takes about 1 us. If we register the symbols in the NAMESPACE file and use</p>
<div class="example">
<pre class="example1"><code>foo3 &lt;- function(x) .Call(C_foo, x)</code></pre>
</div>
<p>then the address for the native routine is looked up just once when the package is loaded, and <code class="calibre2">foo3(pi)</code> takes about 0.8 us.</p>
<p>Versions using <code class="calibre2">.C()</code> rather than <code class="calibre2">.Call()</code> took about 0.2 us longer.</p>
<p>These are all quite small differences, but C routines are not uncommonly invoked millions of times for run times of a few microseconds each, and those doing such things may wish to be aware of the differences.</p>
<p>On Linux and Solaris there is a smaller overhead in looking up symbols.</p>
<p>Symbol lookup on Windows used to be far slower, so R maintains a small cache. If the cache is currently empty enough that the symbol can be stored in the cache then the performance is similar to Linux and Solaris: if not it may be slower. R’s own code always uses registered symbols and so these never contribute to the cache: however many other packages do rely on symbol lookup.</p>
<p>In more recent versions of R all the standard packages register native symbols and do not allow symbol search, so in a new session <code class="calibre2">foo()</code> can only look in foo.so and may be as fast as <code class="calibre2">foo2()</code>. This will no longer apply when many contributed packages are loaded, and generally those last loaded are searched first. For example, consider R 3.3.2 on x86_64 Linux. In an empty R session, both <code class="calibre2">foo()</code> and <code class="calibre2">foo2()</code> took about 0.75 us; however after packages <a href="https://CRAN.R-project.org/package=igraph"><strong>igraph</strong></a> and <a href="https://CRAN.R-project.org/package=spatstat"><strong>spatstat</strong></a> had been loaded (which loaded another 12 DLLs), <code class="calibre2">foo()</code> took 3.6 us but <code class="calibre2">foo2()</code> still took about 0.80 us. Using registration in a package reduced this to 0.55 us and <code class="calibre2">foo3()</code> took 0.40 us, times which were unchanged when further packages were loaded.</p>
<hr />
<p><a href="" id="Converting-a-package-to-use-registration"></a> <a href="" id="Example_003a-converting-a-package-to-use-registration"></a></p>
<h4 id="example-converting-a-package-to-use-registration" class="subsection">5.4.2 Example: converting a package to use registration</h4>
<p>The <strong>splines</strong> package was converted to use symbol registration in 2001, but we can use it as an example<a href="R-exts_split_014.html#FOOT122" id="DOCF122"><sup>122</sup></a> of what needs to be done for a small package.</p>
<ul>
<li><p>Find the relevant entry points. This is somewhat OS-specific, but something like the following should be possible at the OS command-line</p>
<div class="example">
<pre class="example1"><code>nm -g /path/to/splines.so | grep &quot; T &quot;
00000000002670 T _spline_basis
00000000001ec0 T _spline_value</code></pre>
</div>
<p>This indicates that there are two relevant entry points. (They may or may not have a leading underscore, as here. Fortran entry points will have a trailing underscore.) Check in the R code that they are called by the package and how: in this case they are used by <code class="calibre2">.Call</code>.</p>
<p>Alternatively, examine the package’s R code for all <code class="calibre2">.C</code>, <code class="calibre2">.Fortran</code>, <code class="calibre2">.Call</code> and <code class="calibre2">.External</code> calls.</p></li>
<li><p>Construct the registration table. First write skeleton registration code, conventionally in file src/init.c (or at the end of the only C source file in the package: if included in a C++ file the ‘R_init’ function would need to be declared <code class="calibre2">extern &quot;C&quot;</code>):</p>
<div class="example">
<pre class="example1"><code>#include &lt;stdlib.h&gt; // for NULL
#include &lt;R_ext/Rdynload.h&gt;

#define CALLDEF(name, n)  {#name, (DL_FUNC) &amp;name, n}

static const R_CallMethodDef R_CallDef[] = {
   CALLDEF(spline_basis, ?),
   CALLDEF(spline_value, ?),
   {NULL, NULL, 0}
};

void R_init_splines(DllInfo *dll)
{
    R_registerRoutines(dll, NULL, R_CallDef, NULL, NULL);
}</code></pre>
</div>
<p>and then replace the <code class="calibre2">?</code> in the skeleton with the actual numbers of arguments. You will need to add declarations (also known as ‘prototypes’) of the functions unless appending to the only C source file. Some packages will already have these in a header file, or you could create one and include it in init.c, for example splines.h containing</p>
<div class="example">
<pre class="smallexample"><code>#include &lt;Rinternals.h&gt; // for SEXP
extern SEXP spline_basis(SEXP knots, SEXP order, SEXP xvals, SEXP derivs);
extern SEXP spline_value(SEXP knots, SEXP coeff, SEXP order, SEXP x, SEXP deriv);</code></pre>
</div>
<p>Tools are available to extract declarations, at least for C and C++ code: see the help file for <code class="calibre2">package_native_routine_registration_skeleton</code> in package <strong>tools</strong>. Here we could have used</p>
<div class="example">
<pre class="example1"><code>cproto -I/path/to/R/include -e splines.c</code></pre>
</div>
<p>For examples of registering other types of calls, see packages <strong>graphics</strong> and <strong>stats</strong>. In particular, when registering entry points for <code class="calibre2">.Fortran</code> one needs declarations as if called from C, such as</p>
<div class="example">
<pre class="example1"><code>#include &lt;R_ext/RS.h&gt;
void F77_NAME(supsmu)(int *n, double *x, double *y,
                      double *w, int *iper, double *span, double *alpha,
                      double *smo, double *sc, double *edf);</code></pre>
</div>
<p>One can get away with inaccurate argument lists in the declarations: it is easy to specify the arguments for <code class="calibre2">.Call</code> (all <code class="calibre2">SEXP</code>) and <code class="calibre2">.External</code> (one <code class="calibre2">SEXP</code>) and as the arguments for <code class="calibre2">.C</code> and <code class="calibre2">.Fortran</code> are all pointers, specifying them as <code class="calibre2">void *</code> suffices. (For most platforms one can omit all the arguments.)</p></li>
<li>(Optional but highly recommended.) Restrict <code class="calibre2">.Call</code> etc to using the symbols you chose to register by editing src/init.c to contain
<div class="example">
<pre class="example1"><code>void R_init_splines(DllInfo *dll)
{
    R_registerRoutines(dll, NULL, R_CallDef, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}</code></pre>
</div></li>
</ul>
<p>A skeleton for the steps so far can be made using <code class="calibre2">package_native_routine_registration_skeleton</code> in package <strong>tools</strong>. This will optionally create declarations based on the usage in the R code.</p>
<p>The remaining steps are optional but recommended.</p>
<ul>
<li>Edit the NAMESPACE file to create R objects for the registered symbols:
<div class="example">
<pre class="example1"><code>useDynLib(splines, .registration = TRUE, .fixes = &quot;C_&quot;)</code></pre>
</div></li>
<li><p>Find all the relevant calls in the R code and edit them to use the R objects. This entailed changing the lines</p>
<div class="example">
<pre class="smallexample"><code>temp &lt;- .Call(&quot;spline_basis&quot;, knots, ord, x, derivs, PACKAGE = &quot;splines&quot;)
y[accept] &lt;- .Call(&quot;spline_value&quot;, knots, coeff, ord, x[accept], deriv, PACKAGE = &quot;splines&quot;)
y = .Call(&quot;spline_value&quot;, knots, coef(object), ord, x, deriv, PACKAGE = &quot;splines&quot;)</code></pre>
</div>
<p>to</p>
<div class="example">
<pre class="smallexample"><code>temp &lt;- .Call(C_spline_basis, knots, ord, x, derivs)
y[accept] &lt;- .Call(C_spline_value, knots, coeff, ord, x[accept], deriv)
y = .Call(C_spline_value, knots, coef(object), ord, x, deriv)</code></pre>
</div>
<p>Check that there is no <code class="calibre2">exportPattern</code> directive which unintentionally exports the newly created R objects.</p></li>
<li>Restrict <code class="calibre2">.Call</code> to using the R symbols by editing src/init.c to contain
<div class="example">
<pre class="example1"><code>void R_init_splines(DllInfo *dll)
{
    R_registerRoutines(dll, NULL, R_CallDef, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    R_forceSymbols(dll, TRUE);
}</code></pre>
</div></li>
<li><p>Consider visibility. On some OSes we can hide entry points from the loader, which precludes any possible name clashes and calling them accidentally (usually with incorrect arguments and crashing the R process). If we repeat the first step we now see</p>
<div class="example">
<pre class="example1"><code>nm -g /path/to/splines.so | grep &quot; T &quot;
00000000002e00 T _R_init_splines
000000000025e0 T _spline_basis
00000000001e20 T _spline_value</code></pre>
</div>
<p>If there were any entry points not intended to be used by the package we should try to avoid exporting them, for example by making them <code class="calibre2">static</code>. Now the two relevant entry points are only accessed <em>via</em> the registration table, we can hide them. There are two ways to do so on some Unix-alikes. We can hide individual entry points <em>via</em></p>
<div class="example">
<pre class="example1"><code>#include &lt;R_ext/Visibility.h&gt;

SEXP attribute_hidden
spline_basis(SEXP knots, SEXP order, SEXP xvals, SEXP derivs)
…

SEXP attribute_hidden
spline_value(SEXP knots, SEXP coeff, SEXP order, SEXP x, SEXP deriv)
…</code></pre>
</div>
<p>Alternatively, we can change the default visibility for all C symbols by including</p>
<div class="example">
<pre class="example1"><code>PKG_CFLAGS = $(C_VISIBILITY)</code></pre>
</div>
<p>in src/Makevars, and then we need to allow registration by declaring <code class="calibre2">R_init_splines</code> to be visible:</p>
<div class="example">
<pre class="example1"><code>#include &lt;R_ext/Visibility.h&gt;

void attribute_visible
R_init_splines(DllInfo *dll)
…</code></pre>
</div>
<p>See <a href="R-exts_split_010.html#Controlling-visibility">Controlling visibility</a> for more details, including using Fortran code and ways to restrict visibility on Windows.</p></li>
<li><p>We end up with a file src/init.c containing</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>#include &lt;stdlib.h&gt;
#include &lt;R_ext/Rdynload.h&gt;
#include &lt;R_ext/Visibility.h&gt;  // optional

#include &quot;splines.h&quot;

#define CALLDEF(name, n)  {#name, (DL_FUNC) &amp;name, n}

static const R_CallMethodDef R_CallDef[] = {
    CALLDEF(spline_basis, 4),
    CALLDEF(spline_value, 5),
    {NULL, NULL, 0}
};

void
attribute_visible  // optional
R_init_splines(DllInfo *dll)
{
    R_registerRoutines(dll, NULL, R_CallDef, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    R_forceSymbols(dll, TRUE);
}</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote></li>
</ul>
<hr />
<p><a href="" id="Linking-to-native-routines-in-other-packages"></a> <a href="" id="Linking-to-native-routines-in-other-packages-1"></a></p>
<h4 id="linking-to-native-routines-in-other-packages" class="subsection">5.4.3 Linking to native routines in other packages</h4>
<p>In addition to registering C routines to be called by R, it can at times be useful for one package to make some of its C routines available to be called by C code in another package. The interface consists of two routines declared in header R_ext/Rdynload.h as</p>
<p><a href="" id="index-R_005fRegisterCCallable"></a> <a href="" id="index-R_005fGetCCallable"></a></p>
<div class="example">
<pre class="example1"><code>void R_RegisterCCallable(const char *package, const char *name,
                         DL_FUNC fptr);
DL_FUNC R_GetCCallable(const char *package, const char *name);</code></pre>
</div>
<p>A package <strong>packA</strong> that wants to make a C routine <code class="calibre2">myCfun</code> available to C code in other packages would include the call</p>
<div class="example">
<pre class="example1"><code>R_RegisterCCallable(&quot;packA&quot;, &quot;myCfun&quot;, myCfun);</code></pre>
</div>
<p>in its initialization function <code class="calibre2">R_init_packA</code>. A package <strong>packB</strong> that wants to use this routine would retrieve the function pointer with a call of the form</p>
<div class="example">
<pre class="example1"><code>p_myCfun = R_GetCCallable(&quot;packA&quot;, &quot;myCfun&quot;);</code></pre>
</div>
<p>The author of <strong>packB</strong> is responsible for ensuring that <code class="calibre2">p_myCfun</code> has an appropriate declaration. In the future R may provide some automated tools to simplify exporting larger numbers of routines.</p>
<p>A package that wishes to make use of header files in other packages needs to declare them as a comma-separated list in the field ‘LinkingTo’ in the DESCRIPTION file. This then arranges that the include directories in the installed linked-to packages are added to the include paths for C and C++ code.</p>
<p>It must specify<a href="R-exts_split_014.html#FOOT123" id="DOCF123"><sup>123</sup></a> ‘Imports’ or ‘Depends’ of those packages, for they have to be loaded<a href="R-exts_split_014.html#FOOT124" id="DOCF124"><sup>124</sup></a> prior to this one (so the path to their compiled code has been registered).</p>
<p>CRAN examples of the use of this mechanism include <a href="https://CRAN.R-project.org/package=coxme"><strong>coxme</strong></a> linking to <a href="https://CRAN.R-project.org/package=bdsmatrix"><strong>bdsmatrix</strong></a> and <a href="https://CRAN.R-project.org/package=xts"><strong>xts</strong></a> linking to <a href="https://CRAN.R-project.org/package=zoo"><strong>zoo</strong></a></p>
<hr />
<p><a href="" id="Creating-shared-objects"></a> <a href="" id="Creating-shared-objects-1"></a></p>
<h3 id="creating-shared-objects" class="section">5.5 Creating shared objects</h3>
<p><a href="" id="index-Creating-shared-objects"></a> <a href="" id="index-R-CMD-SHLIB"></a></p>
<p>Shared objects for loading into R can be created using <code class="calibre2">R CMD SHLIB</code>. This accepts as arguments a list of files which must be object files (with extension .o) or sources for C, C++, FORTRAN 77, Fortran 9x, Objective C or Objective C++ (with extensions .c, .cc or .cpp, .f, .f90 or .f95, .m, and .mm or .M, respectively), or commands to be passed to the linker. See R CMD SHLIB --help (or the R help for <code class="calibre2">SHLIB</code>) for usage information.</p>
<p>If compiling the source files does not work “out of the box”, you can specify additional flags by setting some of the variables <a href="" id="index-PKG_005fCPPFLAGS"></a> <code class="calibre2">PKG_CPPFLAGS</code> (for the C preprocessor, typically ‘-I’ flags), <a href="" id="index-PKG_005fCFLAGS"></a> <a href="" id="index-PKG_005fCXXFLAGS"></a> <a href="" id="index-PKG_005fFFLAGS"></a> <a href="" id="index-PKG_005fFCFLAGS"></a> <a href="" id="index-PKG_005fOBJCFLAGS"></a> <a href="" id="index-PKG_005fOBJCXXFLAGS"></a> <code class="calibre2">PKG_CFLAGS</code>, <code class="calibre2">PKG_CXXFLAGS</code>, <code class="calibre2">PKG_FFLAGS</code>, <code class="calibre2">PKG_FCFLAGS</code>, <code class="calibre2">PKG_OBJCFLAGS</code>, and <code class="calibre2">PKG_OBJCXXFLAGS</code> (for the C, C++, FORTRAN 77, Fortran 9x, Objective C, and Objective C++ compilers, respectively) in the file Makevars in the compilation directory (or, of course, create the object files directly from the command line). <a href="" id="index-PKG_005fLIBS"></a> Similarly, variable <code class="calibre2">PKG_LIBS</code> in Makevars can be used for additional ‘-l’ and ‘-L’ flags to be passed to the linker when building the shared object. (Supplying linker commands as arguments to <code class="calibre2">R CMD SHLIB</code> will take precedence over <code class="calibre2">PKG_LIBS</code> in Makevars.)</p>
<p><a href="" id="index-OBJECTS-1"></a></p>
<p>It is possible to arrange to include compiled code from other languages by setting the macro ‘OBJECTS’ in file Makevars, together with suitable rules to make the objects.</p>
<p>Flags which are already set (for example in file etcR_ARCH/Makeconf) can be overridden by the environment variable <code class="calibre2">MAKEFLAGS</code> (at least for systems using a POSIX-compliant <code class="calibre2">make</code>), as in (Bourne shell syntax)</p>
<div class="example">
<pre class="example1"><code>MAKEFLAGS=&quot;CFLAGS=-O3&quot; R CMD SHLIB *.c</code></pre>
</div>
<p>It is also possible to set such variables in personal Makevars files, which are read after the local Makevars and the system makefiles or in a site-wide Makevars.site file.</p>
<p>Note that as <code class="calibre2">R CMD SHLIB</code> uses Make, it will not remake a shared object just because the flags have changed, and if test.c and test.f both exist in the current directory</p>
<div class="example">
<pre class="example1"><code>R CMD SHLIB test.f</code></pre>
</div>
<p>will compile test.c!</p>
<p>If the src subdirectory of an add-on package contains source code with one of the extensions listed above or a file Makevars but <strong>not</strong> a file Makefile, <code class="calibre2">R CMD INSTALL</code> creates a shared object (for loading into R through <code class="calibre2">useDynlib</code> in the NAMESPACE, or in the <code class="calibre2">.onLoad</code> function of the package) using the <code class="calibre2">R CMD SHLIB</code> mechanism. If file Makevars exists it is read first, then the system makefile and then any personal Makevars files.</p>
<p>If the src subdirectory of package contains a file Makefile, this is used by <code class="calibre2">R CMD INSTALL</code> in place of the <code class="calibre2">R CMD SHLIB</code> mechanism. <code class="calibre2">make</code> is called with makefiles R_HOME/etcR_ARCH/Makeconf, src/Makefile and any personal Makevars files (in that order). The first target found in src/Makefile is used.</p>
<p>It is better to make use of a Makevars file rather than a Makefile: the latter should be needed only exceptionally.</p>
<p>Under Windows the same commands work, but Makevars.win will be used in preference to Makevars, and only src/Makefile.win will be used by <code class="calibre2">R CMD INSTALL</code> with src/Makefile being ignored. For past experiences of building DLLs with a variety of compilers, see file ‘README.packages’ and <a href="http://www.stats.uwo.ca/faculty/murdoch/software/compilingDLLs/" class="uri">http://www.stats.uwo.ca/faculty/murdoch/software/compilingDLLs/</a> . Under Windows you can supply an exports definitions file called dllname-win.def: otherwise all entry points in objects (but not libraries) supplied to <code class="calibre2">R CMD SHLIB</code> will be exported from the DLL. An example is stats-win.def for the <strong>stats</strong> package: a CRAN example in package <a href="https://CRAN.R-project.org/package=fastICA"><strong>fastICA</strong></a>.</p>
<p>If you feel tempted to read the source code and subvert these mechanisms, please resist. Far too much developer time has been wasted in chasing down errors caused by failures to follow this documentation, and even more by package authors demanding explanations as to why their packages no longer work. In particular, undocumented environment or <code class="calibre2">make</code> variables are not for use by package writers and are subject to change without notice.</p>
<hr />
<p><a href="" id="Interfacing-C_002b_002b-code"></a> <a href="" id="Interfacing-C_002b_002b-code-1"></a></p>
<h3 id="interfacing-c-code" class="section">5.6 Interfacing C++ code</h3>
<p><a href="" id="index-Interfacing-C_002b_002b-code"></a> <a href="" id="index-C_002b_002b-code_002c-interfacing"></a></p>
<p>Suppose we have the following hypothetical C++ library, consisting of the two files X.h and X.cpp, and implementing the two classes <code class="calibre2">X</code> and <code class="calibre2">Y</code> which we want to use in R.</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>// X.h

class X {
public: X (); ~X ();
};

class Y {
public: Y (); ~Y ();
};</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>// X.cpp

#include &lt;R.h&gt;
#include &quot;X.h&quot;

static Y y;

X::X()  { REprintf(&quot;constructor X\n&quot;); }
X::~X() { REprintf(&quot;destructor X\n&quot;);  }
Y::Y()  { REprintf(&quot;constructor Y\n&quot;); }
Y::~Y() { REprintf(&quot;destructor Y\n&quot;);  }</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>To use with R, the only thing we have to do is writing a wrapper function and ensuring that the function is enclosed in</p>
<div class="example">
<pre class="example1"><code>extern &quot;C&quot; {

}</code></pre>
</div>
<p>For example,</p>
<blockquote>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="example">
<pre class="example1"><code>// X_main.cpp:

#include &quot;X.h&quot;

extern &quot;C&quot; {

void X_main () {
  X x;
}

} // extern &quot;C&quot;</code></pre>
</div></td>
</tr>
</tbody>
</table>
</blockquote>
<p>Compiling and linking should be done with the C++ compiler-linker (rather than the C compiler-linker or the linker itself); otherwise, the C++ initialization code (and hence the constructor of the static variable <code class="calibre2">Y</code>) are not called. On a properly configured system, one can simply use</p>
<div class="example">
<pre class="example1"><code>R CMD SHLIB X.cpp X_main.cpp</code></pre>
</div>
<p>to create the shared object, typically X.so (the file name extension may be different on your platform). Now starting R yields</p>
<div class="example">
<pre class="example1"><code>R version 2.14.1 Patched (2012-01-16 r58124)
Copyright (C) 2012 The R Foundation for Statistical Computing
...
Type    &quot;q()&quot; to quit R.</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>R&gt; dyn.load(paste(&quot;X&quot;, .Platform$dynlib.ext, sep = &quot;&quot;))
constructor Y
R&gt; .C(&quot;X_main&quot;)
constructor X
destructor X
list()
R&gt; q()
Save workspace image? [y/n/c]: y
destructor Y</code></pre>
</div>
<p>The R for Windows FAQ (rw-FAQ) contains details of how to compile this example under Windows.</p>
<p>Earlier versions of this example used C++ iostreams: this is best avoided. There is no guarantee that the output will appear in the R console, and indeed it will not on the R for Windows console. Use R code or the C entry points (see <a href="R-exts_split_010.html#Printing">Printing</a>) for all I/O if at all possible. Examples have been seen where merely loading a DLL that contained calls to C++ I/O upset R’s own C I/O (for example by resetting buffers on open files).</p>
<p>Most R header files can be included within C++ programs but they should <strong>not</strong> be included within an <code class="calibre2">extern &quot;C&quot;</code> block (as they include system headers<a href="R-exts_split_014.html#FOOT125" id="DOCF125"><sup>125</sup></a>). The inclusion of system headers in C++ changed in R 3.3.0<a href="R-exts_split_014.html#FOOT126" id="DOCF126"><sup>126</sup></a>, so if you care about earlier versions of R please check your package there.</p>
<p>Legacy header S.h cannot be used with C++.</p>
<p><a href="" id="External-C_002b_002b-code"></a></p>
<h4 id="external-c-code" class="subsection">5.6.1 External C++ code</h4>
<p>Quite a lot of external C++ software is header-only (e.g. most of the Boost ‘libraries’ including all those supplied by package <a href="https://CRAN.R-project.org/package=BH"><strong>BH</strong></a>, and most of Armadillo as supplied by package <a href="https://CRAN.R-project.org/package=RcppArmadillo"><strong>RcppArmadillo</strong></a>) and so is compiled when an R package which uses it is installed. This causes few problems.</p>
<p>A small number of external libraries used in R packages have a C++ interface to a library of compiled code, e.g. packages <a href="https://CRAN.R-project.org/package=rgdal"><strong>rgdal</strong></a> and <a href="https://CRAN.R-project.org/package=rjags"><strong>rjags</strong></a>. This raises many more problems! The C++ interface uses name-mangling and the ABI<a href="R-exts_split_014.html#FOOT127" id="DOCF127"><sup>127</sup></a> may depend on the compiler, version and even C++ defines<a href="R-exts_split_014.html#FOOT128" id="DOCF128"><sup>128</sup></a>, so requires the package C++ code to be compiled in exactly the same way as the library (and what that was is often undocumented). Examples include use of <code class="calibre2">g++</code> <em>vs</em> <code class="calibre2">clang++</code> or Solaris’ <code class="calibre2">CC</code>, and the two ABIs available for C++11 in <code class="calibre2">g++</code> with different defaults for GCC 4.9 and 5.x in some Linux distributions.</p>
<p>Even fewer external libraries use C++ internally but present a C interface, such as <a href="https://CRAN.R-project.org/package=rgeos"><strong>rgeos</strong></a>. These require the C++ runtime library to be linked into the package’s shared object/DLL, and this is best done by including a dummy C++ file in the package sources.</p>
<p>There is a recent trend to link to the C++ interfaces offered by C software such as <strong>hdf5</strong>, <strong>pcre</strong> and <strong>ImageMagick</strong>. Their C interfaces are much preferred for portability (and can be used from C++ code). Also, the C++ interfaces are often optional in the software build or packaged separately and so users installing from package sources are far less likely to already have them installed.</p>
<hr />
<p><a href="" id="Fortran-I_002fO"></a> <a href="" id="Fortran-I_002fO-1"></a></p>
<h3 id="fortran-io" class="section">5.7 Fortran I/O</h3>
<p>We have already warned against the use of C++ iostreams not least because output is not guaranteed to appear on the R console, and this warning applies equally to Fortran (77 or 9x) output to units <code class="calibre2">*</code> and <code class="calibre2">6</code>. See <a href="R-exts_split_010.html#Printing-from-FORTRAN">Printing from FORTRAN</a>, which describes workarounds.</p>
<p>In the past most Fortran compilers implemented I/O on top of the C I/O system and so the two interworked successfully. This was true of <code class="calibre2">g77</code>, but it is less true of <code class="calibre2">gfortran</code> as used in <code class="calibre2">gcc</code> 4 and later. In particular, any package that makes use of Fortran I/O will when compiled on Windows interfere with C I/O: when the Fortran I/O is initialized (typically when the package is loaded) the C <code class="calibre2">stdout</code> and <code class="calibre2">stderr</code> are switched to LF line endings. (Function <code class="calibre2">init</code> in file src/modules/lapack/init_win.c shows how to mitigate this.)</p>
<hr />
<p><a href="" id="Linking-to-other-packages"></a> <a href="" id="Linking-to-other-packages-1"></a></p>
<h3 id="linking-to-other-packages" class="section">5.8 Linking to other packages</h3>
<p>It is not in general possible to link a DLL in package <strong>packA</strong> to a DLL provided by package <strong>packB</strong> (for the security reasons mentioned in <a href="#dyn_002eload-and-dyn_002eunload">dyn.load and dyn.unload</a>, and also because some platforms distinguish between shared objects and dynamic libraries), but it is on Windows.</p>
<p>Note that there can be tricky versioning issues here, as package <strong>packB</strong> could be re-installed after package <strong>packA</strong> — it is desirable that the API provided by package <strong>packB</strong> remains backwards-compatible.</p>
<p>Shipping a static library in package <strong>packB</strong> for other packages to link to avoids most of the difficulties.</p>
<hr />
<p><a href="" id="Unix_002dalikes"></a> <a href="" id="Unix_002dalikes-1"></a></p>
<h4 id="unix-alikes" class="subsection">5.8.1 Unix-alikes</h4>
<p>It is possible to link a shared object in package <strong>packA</strong> to a library provided by package <strong>packB</strong> under limited circumstances on a Unix-alike OS. There are severe portability issues, so this is not recommended for a distributed package.</p>
<p>This is easiest if <strong>packB</strong> provides a static library packB/lib/libpackB.a. (Note using directory lib rather than libs is conventional, and architecture-specific sub-directories may be needed and are assumed in the sample code below. The code in the static library will need to be compiled with <code class="calibre2">PIC</code> flags on platforms where it matters.) Then as the code from package <strong>packB</strong> is incorporated when package <strong>packA</strong> is installed, we only need to find the static library at install time for package <strong>packA</strong>. The only issue is to find package <strong>packB</strong>, and for that we can ask R by something like (long lines broken for display here)</p>
<div class="example">
<pre class="example1"><code>PKGB_PATH=‘echo ’library(packB);
  cat(system.file(&quot;lib&quot;,  package=&quot;packB&quot;, mustWork=TRUE))&#39; \
 | &quot;${R_HOME}/bin/R&quot; --vanilla --slave`
PKG_LIBS=&quot;$(PKGB_PATH)$(R_ARCH)/libpackB.a&quot;</code></pre>
</div>
<p>For a dynamic library packB/lib/libpackB.so (packB/lib/libpackB.dylib on macOS: note that you cannot link to a shared object, .so, on that platform) we could use</p>
<div class="example">
<pre class="example1"><code>PKGB_PATH=‘echo ’library(packB);
  cat(system.file(&quot;lib&quot;, package=&quot;packB&quot;, mustWork=TRUE))&#39; \
 | &quot;${R_HOME}/bin/R&quot; --vanilla --slave`
PKG_LIBS=-L&quot;$(PKGB_PATH)$(R_ARCH)&quot; -lpackB</code></pre>
</div>
<p>This will work for installation, but very likely not when package <code class="calibre2">packB</code> is loaded, as the path to package <strong>packB</strong>’s lib directory is not in the <code class="calibre2">ld.so</code><a href="R-exts_split_014.html#FOOT129" id="DOCF129"><sup>129</sup></a> search path. You can arrange to put it there <strong>before</strong> R is launched by setting (on some platforms) <code class="calibre2">LD_RUN_PATH</code> or <code class="calibre2">LD_LIBRARY_PATH</code> or adding to the <code class="calibre2">ld.so</code> cache (see <code class="calibre2">man ldconfig</code>). On platforms that support it, the path to the directory containing the dynamic library can be hardcoded at install time (which assumes that the location of package <strong>packB</strong> will not be changed nor the package updated to a changed API). On systems with the <code class="calibre2">gcc</code> or <code class="calibre2">clang</code> and the GNU linker (e.g. Linux) and some others this can be done by e.g.</p>
<div class="example">
<pre class="example1"><code>PKGB_PATH=‘echo ’library(packB);
  cat(system.file(&quot;lib&quot;, package=&quot;packB&quot;, mustWork=TRUE)))&#39; \
 | &quot;${R_HOME}/bin/R&quot; --vanilla --slave`
PKG_LIBS=-L&quot;$(PKGB_PATH)$(R_ARCH)&quot; -Wl,-rpath,&quot;$(PKGB_PATH)$(R_ARCH)&quot; -lpackB</code></pre>
</div>
<p>Some other systems (e.g. Solaris with its native linker) use -Rdir rather than -rpath,dir (and this is accepted by the compiler as well as the linker).</p>
<p>It may be possible to figure out what is required semi-automatically from the result of <code class="calibre2">R CMD libtool --config</code> (look for ‘hardcode’).</p>
<p>Making headers provided by package <strong>packB</strong> available to the code to be compiled in package <strong>packA</strong> can be done by the <code class="calibre2">LinkingTo</code> mechanism (see <a href="#Registering-native-routines">Registering native routines</a>).</p>
<hr />
<p><a href="" id="Windows"></a> <a href="" id="Windows-1"></a></p>
<h4 id="windows" class="subsection">5.8.2 Windows</h4>
<p>Suppose package <strong>packA</strong> wants to make use of compiled code provided by <strong>packB</strong> in DLL packB/libs/exB.dll, possibly the package’s DLL packB/libs/packB.dll. (This can be extended to linking to more than one package in a similar way.) There are three issues to be addressed:</p>
<ul>
<li><p>Making headers provided by package <strong>packB</strong> available to the code to be compiled in package <strong>packA</strong>.</p>
<p>This is done by the <code class="calibre2">LinkingTo</code> mechanism (see <a href="#Registering-native-routines">Registering native routines</a>).</p></li>
<li><p>preparing <code class="calibre2">packA.dll</code> to link to packB/libs/exB.dll.</p>
<p>This needs an entry in Makevars.win of the form</p>
<div class="example">
<pre class="example1"><code>PKG_LIBS= -L&lt;something&gt; -lexB</code></pre>
</div>
<p>and one possibility is that <code class="calibre2">&lt;something&gt;</code> is the path to the installed pkgB/libs directory. To find that we need to ask R where it is by something like</p>
<div class="example">
<pre class="example1"><code>PKGB_PATH=‘echo ’library(packB);
  cat(system.file(&quot;libs&quot;, package=&quot;packB&quot;, mustWork=TRUE))&#39; \
 | rterm --vanilla --slave`
PKG_LIBS= -L&quot;$(PKGB_PATH)$(R_ARCH)&quot; -lexB</code></pre>
</div>
<p>Another possibility is to use an import library, shipping with package <strong>packA</strong> an exports file exB.def. Then Makevars.win could contain</p>
<div class="example">
<pre class="example1"><code>PKG_LIBS= -L. -lexB

all: $(SHLIB) before

before: libexB.dll.a
libexB.dll.a: exB.def</code></pre>
</div>
<p>and then installing package <strong>packA</strong> will make and use the import library for exB.dll. (One way to prepare the exports file is to use pexports.exe.)</p></li>
<li><p>loading packA.dll which depends on exB.dll.</p>
<p>If <code class="calibre2">exB.dll</code> was used by package <strong>packB</strong> (because it is in fact packB.dll or packB.dll depends on it) and <strong>packB</strong> has been loaded before <strong>packA</strong>, then nothing more needs to be done as exB.dll will already be loaded into the R executable. (This is the most common scenario.)</p>
<p>More generally, we can use the <code class="calibre2">DLLpath</code> argument to <code class="calibre2">library.dynam</code> to ensure that <code class="calibre2">exB.dll</code> is found, for example by setting</p>
<div class="example">
<pre class="example1"><code>library.dynam(&quot;packA&quot;, pkg, lib,
              DLLpath = system.file(&quot;libs&quot;, package=&quot;packB&quot;))</code></pre>
</div>
<p>Note that <code class="calibre2">DLLpath</code> can only set one path, and so for linking to two or more packages you would need to resort to setting environment variable <code class="calibre2">PATH</code>.</p></li>
</ul>
<hr />
<p><a href="" id="Handling-R-objects-in-C"></a> <a href="" id="Handling-R-objects-in-C-1"></a></p>
<h3 id="handling-r-objects-in-c" class="section">5.9 Handling R objects in C</h3>
<p><a href="" id="index-Handling-R-objects-in-C"></a></p>
<p>Using C code to speed up the execution of an R function is often very fruitful. Traditionally this has been done <em>via</em> the <code class="calibre2">.C</code> function in R. However, if a user wants to write C code using internal R data structures, then that can be done using the <code class="calibre2">.Call</code> and <code class="calibre2">.External</code> functions. The syntax for the calling function in R in each case is similar to that of <code class="calibre2">.C</code>, but the two functions have different C interfaces. Generally the <code class="calibre2">.Call</code> interface is simpler to use, but <code class="calibre2">.External</code> is a little more general. <a href="" id="index-_002eCall"></a> <a href="" id="index-_002eExternal"></a></p>
<p>A call to <code class="calibre2">.Call</code> is very similar to <code class="calibre2">.C</code>, for example</p>
<div class="example">
<pre class="example1"><code>.Call(&quot;convolve2&quot;, a, b)</code></pre>
</div>
<p>The first argument should be a character string giving a C symbol name of code that has already been loaded into R. Up to 65 R objects can passed as arguments. The C side of the interface is</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

SEXP convolve2(SEXP a, SEXP b)
 ...</code></pre>
</div>
<p>A call to <code class="calibre2">.External</code> is almost identical</p>
<div class="example">
<pre class="example1"><code>.External(&quot;convolveE&quot;, a, b)</code></pre>
</div>
<p>but the C side of the interface is different, having only one argument</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

SEXP convolveE(SEXP args)
 ...</code></pre>
</div>
<p>Here <code class="calibre2">args</code> is a <code class="calibre2">LISTSXP</code>, a Lisp-style pairlist from which the arguments can be extracted.</p>
<p>In each case the R objects are available for manipulation <em>via</em> a set of functions and macros defined in the header file Rinternals.h or some S-compatibility macros<a href="R-exts_split_014.html#FOOT130" id="DOCF130"><sup>130</sup></a> defined in Rdefines.h. See <a href="#Interface-functions-_002eCall-and-_002eExternal">Interface functions .Call and .External</a> for details on <code class="calibre2">.Call</code> and <code class="calibre2">.External</code>.</p>
<p>Before you decide to use <code class="calibre2">.Call</code> or <code class="calibre2">.External</code>, you should look at other alternatives. First, consider working in interpreted R code; if this is fast enough, this is normally the best option. You should also see if using <code class="calibre2">.C</code> is enough. If the task to be performed in C is simple enough involving only atomic vectors and requiring no call to R, <code class="calibre2">.C</code> suffices. A great deal of useful code was written using just <code class="calibre2">.C</code> before <code class="calibre2">.Call</code> and <code class="calibre2">.External</code> were available. These interfaces allow much more control, but they also impose much greater responsibilities so need to be used with care. Neither <code class="calibre2">.Call</code> nor <code class="calibre2">.External</code> copy their arguments: you should treat arguments you receive through these interfaces as read-only.</p>
<p>To handle R objects from within C code we use the macros and functions that have been used to implement the core parts of R. A public<a href="R-exts_split_014.html#FOOT131" id="DOCF131"><sup>131</sup></a> subset of these is defined in the header file Rinternals.h in the directory R_INCLUDE_DIR (default R_HOME/include) that should be available on any R installation.</p>
<p>A substantial amount of R, including the standard packages, is implemented using the functions and macros described here, so the R source code provides a rich source of examples and “how to do it”: do make use of the source code for inspirational examples.</p>
<p>It is necessary to know something about how R objects are handled in C code. All the R objects you will deal with will be handled with the type <em>SEXP</em><a href="R-exts_split_014.html#FOOT132" id="DOCF132"><sup>132</sup></a>, which is a pointer to a structure with typedef <code class="calibre2">SEXPREC</code>. Think of this structure as a <em>variant type</em> that can handle all the usual types of R objects, that is vectors of various modes, functions, environments, language objects and so on. The details are given later in this section and in <a href="./R-ints.html#R-Internal-Structures">R Internal Structures</a> in R Internals, but for most purposes the programmer does not need to know them. Think rather of a model such as that used by Visual Basic, in which R objects are handed around in C code (as they are in interpreted R code) as the variant type, and the appropriate part is extracted for, for example, numerical calculations, only when it is needed. As in interpreted R code, much use is made of coercion to force the variant object to the right type.</p>
<hr />
<p><a href="" id="Garbage-Collection"></a> <a href="" id="Handling-the-effects-of-garbage-collection"></a></p>
<h4 id="handling-the-effects-of-garbage-collection" class="subsection">5.9.1 Handling the effects of garbage collection</h4>
<p><a href="" id="index-Garbage-collection"></a> <a href="" id="index-PROTECT"></a> <a href="" id="index-UNPROTECT"></a></p>
<p>We need to know a little about the way R handles memory allocation. The memory allocated for R objects is not freed by the user; instead, the memory is from time to time <em>garbage collected</em>. That is, some or all of the allocated memory not being used is freed or marked as re-usable.</p>
<p>The R object types are represented by a C structure defined by a typedef <code class="calibre2">SEXPREC</code> in Rinternals.h. It contains several things among which are pointers to data blocks and to other <code class="calibre2">SEXPREC</code>s. A <code class="calibre2">SEXP</code> is simply a pointer to a <code class="calibre2">SEXPREC</code>.</p>
<p>If you create an R object in your C code, you must tell R that you are using the object by using the <code class="calibre2">PROTECT</code> macro on a pointer to the object. This tells R that the object is in use so it is not destroyed during garbage collection. Notice that it is the object which is protected, not the pointer variable. It is a common mistake to believe that if you invoked <code class="calibre2">PROTECT(p)</code> at some point then p is protected from then on, but that is not true once a new object is assigned to p.</p>
<p>Protecting an R object automatically protects all the R objects pointed to in the corresponding <code class="calibre2">SEXPREC</code>, for example all elements of a protected list are automatically protected.</p>
<p>The programmer is solely responsible for housekeeping the calls to <code class="calibre2">PROTECT</code>. There is a corresponding macro <code class="calibre2">UNPROTECT</code> that takes as argument an <code class="calibre2">int</code> giving the number of objects to unprotect when they are no longer needed. The protection mechanism is stack-based, so <code class="calibre2">UNPROTECT(n)</code> unprotects the last n objects which were protected. The calls to <code class="calibre2">PROTECT</code> and <code class="calibre2">UNPROTECT</code> must balance when the user’s code returns. R will warn about <code class="calibre2">&quot;stack imbalance in .Call&quot;</code> (or <code class="calibre2">.External</code>) if the housekeeping is wrong.</p>
<p>Here is a small example of creating an R numeric vector in C code:</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

    SEXP ab;
      ....
    ab = PROTECT(allocVector(REALSXP, 2));
    REAL(ab)[0] = 123.45;
    REAL(ab)[1] = 67.89;
    UNPROTECT(1);</code></pre>
</div>
<p>Now, the reader may ask how the R object could possibly get removed during those manipulations, as it is just our C code that is running. As it happens, we can do without the protection in this example, but in general we do not know (nor want to know) what is hiding behind the R macros and functions we use, and any of them might cause memory to be allocated, hence garbage collection and hence our object <code class="calibre2">ab</code> to be removed. It is usually wise to err on the side of caution and assume that any of the R macros and functions might remove the object.</p>
<p>In some cases it is necessary to keep better track of whether protection is really needed. Be particularly aware of situations where a large number of objects are generated. The pointer protection stack has a fixed size (default 10,000) and can become full. It is not a good idea then to just <code class="calibre2">PROTECT</code> everything in sight and <code class="calibre2">UNPROTECT</code> several thousand objects at the end. It will almost invariably be possible to either assign the objects as part of another object (which automatically protects them) or unprotect them immediately after use.</p>
<p>Protection is not needed for objects which R already knows are in use. In particular, this applies to function arguments.</p>
<p>There is a less-used macro <code class="calibre2">UNPROTECT_PTR(s)</code> that unprotects the object pointed to by the <code class="calibre2">SEXP</code> s, even if it is not the top item on the pointer protection stack. This is rarely needed outside the parser (the R sources currently have three examples, one in src/main/plot3d.c). <a href="" id="index-UNPROTECT_005fPTR"></a></p>
<p>Sometimes an object is changed (for example duplicated, coerced or grown) yet the current value needs to be protected. For these cases <code class="calibre2">PROTECT_WITH_INDEX</code> saves an index of the protection location that can be used to replace the protected value using <code class="calibre2">REPROTECT</code>. <a href="" id="index-PROTECT_005fWITH_005fINDEX"></a> <a href="" id="index-REPROTECT"></a> For example (from the internal code for <code class="calibre2">optim</code>)</p>
<div class="example">
<pre class="example1"><code>    PROTECT_INDEX ipx;

    ....
    PROTECT_WITH_INDEX(s = eval(OS-&gt;R_fcall, OS-&gt;R_env), &amp;ipx);
    REPROTECT(s = coerceVector(s, REALSXP), ipx);</code></pre>
</div>
<p>Note that it is dangerous to mix <code class="calibre2">UNPROTECT_PTR</code> with <code class="calibre2">PROTECT_WITH_INDEX</code>, as the former changes the protection locations of objects that were protected after the one being unprotected.</p>
<p><a href="" id="index-R_005fPreserveObject"></a> <a href="" id="index-R_005fReleaseObject"></a></p>
<p>There is another way to avoid the affects of garbage collection: a call to <code class="calibre2">R_PreserveObject</code> adds an object to an internal list of objects not to be collects, and a subsequent call to <code class="calibre2">R_ReleaseObject</code> removes it from that list. This provides a way for objects which are not returned as part of R objects to be protected across calls to compiled code: on the other hand it becomes the user’s responsibility to release them when they are no longer needed (and this often requires the use of a finalizer). It is less efficient that the normal protection mechanism, and should be used sparingly.</p>
<hr />
<p><a href="" id="Allocating-storage"></a> <a href="" id="Allocating-storage-1"></a></p>
<h4 id="allocating-storage" class="subsection">5.9.2 Allocating storage</h4>
<p><a href="" id="index-Allocating-storage"></a></p>
<p>For many purposes it is sufficient to allocate R objects and manipulate those. There are quite a few <code class="calibre2">allocXxx</code> functions defined in Rinternals.h—you may want to explore them.</p>
<p><a href="" id="index-allocVector"></a></p>
<p>One that is commonly used is <code class="calibre2">allocVector</code>, the C-level equivalent of R-level <code class="calibre2">vector()</code> and its wrappers such as <code class="calibre2">integer()</code> and <code class="calibre2">character()</code>. One distinction is that whereas the R functions always initialize the elements of the vector, <code class="calibre2">allocVector</code> only does so for lists, expressions and character vectors (the cases where the elements are themselves R objects).</p>
<p>If storage is required for C objects during the calculations this is best allocating by calling <code class="calibre2">R_alloc</code>; see <a href="R-exts_split_010.html#Memory-allocation">Memory allocation</a>. All of these memory allocation routines do their own error-checking, so the programmer may assume that they will raise an error and not return if the memory cannot be allocated.</p>
<hr />
<p><a href="" id="Details-of-R-types"></a> <a href="" id="Details-of-R-types-1"></a></p>
<h4 id="details-of-r-types" class="subsection">5.9.3 Details of R types</h4>
<p><a href="" id="index-Details-of-R-types"></a></p>
<p>Users of the Rinternals.h macros will need to know how the R types are known internally. The different R data types are represented in C by <em>SEXPTYPE</em>. Some of these are familiar from R and some are internal data types. The usual R object modes are given in the table.</p>
<blockquote>
<table>
<thead>
<tr class="header">
<th align="left">SEXPTYPE</th>
<th align="left">R equivalent</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left"><code class="calibre2">REALSXP</code></td>
<td align="left">numeric with storage mode <code class="calibre2">double</code></td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">INTSXP</code></td>
<td align="left">integer</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">CPLXSXP</code></td>
<td align="left">complex</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">LGLSXP</code></td>
<td align="left">logical</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">STRSXP</code></td>
<td align="left">character</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">VECSXP</code></td>
<td align="left">list (generic vector)</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">LISTSXP</code></td>
<td align="left">pairlist</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">DOTSXP</code></td>
<td align="left">a ‘…’ object</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">NILSXP</code></td>
<td align="left">NULL</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">SYMSXP</code></td>
<td align="left">name/symbol</td>
</tr>
<tr class="odd">
<td align="left"><code class="calibre2">CLOSXP</code></td>
<td align="left">function or function closure</td>
</tr>
<tr class="even">
<td align="left"><code class="calibre2">ENVSXP</code></td>
<td align="left">environment</td>
</tr>
</tbody>
</table>
</blockquote>
<p>Among the important internal <code class="calibre2">SEXPTYPE</code>s are <code class="calibre2">LANGSXP</code>, <code class="calibre2">CHARSXP</code>, <code class="calibre2">PROMSXP</code>, etc. (<strong>N.B.</strong>: although it is possible to return objects of internal types, it is unsafe to do so as assumptions are made about how they are handled which may be violated at user-level evaluation.) More details are given in <a href="./R-ints.html#R-Internal-Structures">R Internal Structures</a> in R Internals.</p>
<p>Unless you are very sure about the type of the arguments, the code should check the data types. Sometimes it may also be necessary to check data types of objects created by evaluating an R expression in the C code. You can use functions like <code class="calibre2">isReal</code>, <code class="calibre2">isInteger</code> and <code class="calibre2">isString</code> to do type checking. See the header file Rinternals.h for definitions of other such functions. All of these take a <code class="calibre2">SEXP</code> as argument and return 1 or 0 to indicate TRUE or FALSE.</p>
<p>What happens if the <code class="calibre2">SEXP</code> is not of the correct type? Sometimes you have no other option except to generate an error. You can use the function <code class="calibre2">error</code> for this. It is usually better to coerce the object to the correct type. For example, if you find that an <code class="calibre2">SEXP</code> is of the type <code class="calibre2">INTEGER</code>, but you need a <code class="calibre2">REAL</code> object, you can change the type by using</p>
<div class="example">
<pre class="example1"><code>newSexp = PROTECT(coerceVector(oldSexp, REALSXP));</code></pre>
</div>
<p>Protection is needed as a new <em>object</em> is created; the object formerly pointed to by the <code class="calibre2">SEXP</code> is still protected but now unused.<a href="R-exts_split_014.html#FOOT133" id="DOCF133"><sup>133</sup></a></p>
<p>All the coercion functions do their own error-checking, and generate <code class="calibre2">NA</code>s with a warning or stop with an error as appropriate.</p>
<p>Note that these coercion functions are <em>not</em> the same as calling <code class="calibre2">as.numeric</code> (and so on) in R code, as they do not dispatch on the class of the object. Thus it is normally preferable to do the coercion in the calling R code.</p>
<p>So far we have only seen how to create and coerce R objects from C code, and how to extract the numeric data from numeric R vectors. These can suffice to take us a long way in interfacing R objects to numerical algorithms, but we may need to know a little more to create useful return objects.</p>
<hr />
<p><a href="" id="Attributes"></a> <a href="" id="Attributes-1"></a></p>
<h4 id="attributes" class="subsection">5.9.4 Attributes</h4>
<p><a href="" id="index-Attributes"></a></p>
<p>Many R objects have attributes: some of the most useful are classes and the <code class="calibre2">dim</code> and <code class="calibre2">dimnames</code> that mark objects as matrices or arrays. It can also be helpful to work with the <code class="calibre2">names</code> attribute of vectors.</p>
<p>To illustrate this, let us write code to take the outer product of two vectors (which <code class="calibre2">outer</code> and <code class="calibre2">%o%</code> already do). As usual the R code is simple</p>
<div class="example">
<pre class="example1"><code>out &lt;- function(x, y)
{
    storage.mode(x) &lt;- storage.mode(y) &lt;- &quot;double&quot;
    .Call(&quot;out&quot;, x, y)
}</code></pre>
</div>
<p>where we expect <code class="calibre2">x</code> and <code class="calibre2">y</code> to be numeric vectors (possibly integer), possibly with names. This time we do the coercion in the calling R code.</p>
<p>C code to do the computations is</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

SEXP out(SEXP x, SEXP y)
{
    int nx = length(x), ny = length(y);
    SEXP ans = PROTECT(allocMatrix(REALSXP, nx, ny));
    double *rx = REAL(x), *ry = REAL(y), *rans = REAL(ans);
    for(int i = 0; i &lt; nx; i++) {
        double tmp = rx[i];
        for(int j = 0; j &lt; ny; j++)
            rans[i + nx*j] = tmp * ry[j];
    }
    UNPROTECT(1);
    return ans;
}</code></pre>
</div>
<p>Note the way <code class="calibre2">REAL</code> is used: as it is a function call it can be considerably faster to store the result and index that.</p>
<p>However, we would like to set the <code class="calibre2">dimnames</code> of the result. We can use</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;
</code></pre>
<pre class="example1"><code>SEXP out(SEXP x, SEXP y)
{
    int nx = length(x), ny = length(y);
    SEXP ans = PROTECT(allocMatrix(REALSXP, nx, ny));
    double *rx = REAL(x), *ry = REAL(y), *rans = REAL(ans);

    for(int i = 0; i &lt; nx; i++) {
      double tmp = rx[i];
      for(int j = 0; j &lt; ny; j++)
        rans[i + nx*j] = tmp * ry[j];
    }

    SEXP dimnames = PROTECT(allocVector(VECSXP, 2));
    SET_VECTOR_ELT(dimnames, 0, getAttrib(x, R_NamesSymbol));
    SET_VECTOR_ELT(dimnames, 1, getAttrib(y, R_NamesSymbol));
    setAttrib(ans, R_DimNamesSymbol, dimnames);</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>    UNPROTECT(2);
    return ans;
}</code></pre>
</div>
<p>This example introduces several new features. The <code class="calibre2">getAttrib</code> and <code class="calibre2">setAttrib</code> <a href="" id="index-getAttrib"></a> <a href="" id="index-setAttrib"></a> functions get and set individual attributes. Their second argument is a <code class="calibre2">SEXP</code> defining the name in the symbol table of the attribute we want; these and many such symbols are defined in the header file Rinternals.h.</p>
<p>There are shortcuts here too: the functions <code class="calibre2">namesgets</code>, <code class="calibre2">dimgets</code> and <code class="calibre2">dimnamesgets</code> are the internal versions of the default methods of <code class="calibre2">names&lt;-</code>, <code class="calibre2">dim&lt;-</code> and <code class="calibre2">dimnames&lt;-</code> (for vectors and arrays), and there are functions such as <code class="calibre2">GetMatrixDimnames</code> and <code class="calibre2">GetArrayDimnames</code>.</p>
<p>What happens if we want to add an attribute that is not pre-defined? We need to add a symbol for it <em>via</em> a call to <a href="" id="index-install"></a> <code class="calibre2">install</code>. Suppose for illustration we wanted to add an attribute <code class="calibre2">&quot;version&quot;</code> with value <code class="calibre2">3.0</code>. We could use</p>
<div class="example">
<pre class="example1"><code>    SEXP version;
    version = PROTECT(allocVector(REALSXP, 1));
    REAL(version)[0] = 3.0;
    setAttrib(ans, install(&quot;version&quot;), version);
    UNPROTECT(1);</code></pre>
</div>
<p>Using <code class="calibre2">install</code> when it is not needed is harmless and provides a simple way to retrieve the symbol from the symbol table if it is already installed. However, the lookup takes a non-trivial amount of time, so consider code such as</p>
<div class="example">
<pre class="example1"><code>static SEXP VerSymbol = NULL;
...
    if (VerSymbol == NULL) VerSymbol = install(&quot;version&quot;);</code></pre>
</div>
<p>if it is to be done frequently.</p>
<p>This example can be simplified by another convenience function:</p>
<div class="example">
<pre class="example1"><code>    SEXP version = PROTECT(ScalarReal(3.0));
    setAttrib(ans, install(&quot;version&quot;), version);
    UNPROTECT(1);</code></pre>
</div>
<hr />
<p><a href="" id="Classes"></a> <a href="" id="Classes-1"></a></p>
<h4 id="classes" class="subsection">5.9.5 Classes</h4>
<p><a href="" id="index-Classes"></a></p>
<p>In R the class is just the attribute named <code class="calibre2">&quot;class&quot;</code> so it can be handled as such, but there is a shortcut <code class="calibre2">classgets</code>. Suppose we want to give the return value in our example the class <code class="calibre2">&quot;mat&quot;</code>. We can use</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;
      ....
    SEXP ans, dim, dimnames, class;
      ....
    class = PROTECT(allocVector(STRSXP, 1));
    SET_STRING_ELT(class, 0, mkChar(&quot;mat&quot;));
    classgets(ans, class);
    UNPROTECT(4);
    return ans;
}</code></pre>
</div>
<p>As the value is a character vector, we have to know how to create that from a C character array, which we do using the function <code class="calibre2">mkChar</code>.</p>
<hr />
<p><a href="" id="Handling-lists"></a> <a href="" id="Handling-lists-1"></a></p>
<h4 id="handling-lists" class="subsection">5.9.6 Handling lists</h4>
<p><a href="" id="index-Handling-lists"></a></p>
<p>Some care is needed with lists, as R moved early on from using LISP-like lists (now called “pairlists”) to S-like generic vectors. As a result, the appropriate test for an object of mode <code class="calibre2">list</code> is <code class="calibre2">isNewList</code>, and we need <code class="calibre2">allocVector(VECSXP, n</code>) and <em>not</em> <code class="calibre2">allocList(n)</code>.</p>
<p>List elements can be retrieved or set by direct access to the elements of the generic vector. Suppose we have a list object</p>
<div class="example">
<pre class="example1"><code>a &lt;- list(f = 1, g = 2, h = 3)</code></pre>
</div>
<p>Then we can access <code class="calibre2">a$g</code> as <code class="calibre2">a[[2]]</code> by</p>
<div class="example">
<pre class="example1"><code>    double g;
      ....
    g = REAL(VECTOR_ELT(a, 1))[0];</code></pre>
</div>
<p>This can rapidly become tedious, and the following function (based on one in package <strong>stats</strong>) is very useful:</p>
<div class="example">
<pre class="example1"><code>/* get the list element named str, or return NULL */

SEXP getListElement(SEXP list, const char *str)
{
    SEXP elmt = R_NilValue, names = getAttrib(list, R_NamesSymbol);</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>    for (int i = 0; i &lt; length(list); i++)
        if(strcmp(CHAR(STRING_ELT(names, i)), str) == 0) {
           elmt = VECTOR_ELT(list, i);
           break;
        }
    return elmt;
}</code></pre>
</div>
<p>and enables us to say</p>
<div class="example">
<pre class="example1"><code>  double g;
  g = REAL(getListElement(a, &quot;g&quot;))[0];</code></pre>
</div>
<hr />
<p><a href="" id="Handling-character-data"></a> <a href="" id="Handling-character-data-1"></a></p>
<h4 id="handling-character-data" class="subsection">5.9.7 Handling character data</h4>
<p><a href="" id="index-handling-character-data"></a></p>
<p>R character vectors are stored as <code class="calibre2">STRSXP</code>s, a vector type like <code class="calibre2">VECSXP</code> where every element is of type <code class="calibre2">CHARSXP</code>. The <code class="calibre2">CHARSXP</code> elements of <code class="calibre2">STRSXP</code>s are accessed using <code class="calibre2">STRING_ELT</code> and <code class="calibre2">SET_STRING_ELT</code>.</p>
<p><code class="calibre2">CHARSXP</code>s are read-only objects and must never be modified. In particular, the C-style string contained in a <code class="calibre2">CHARSXP</code> should be treated as read-only and for this reason the <code class="calibre2">CHAR</code> function used to access the character data of a <code class="calibre2">CHARSXP</code> returns <code class="calibre2">(const char *)</code> (this also allows compilers to issue warnings about improper use). Since <code class="calibre2">CHARSXP</code>s are immutable, the same <code class="calibre2">CHARSXP</code> can be shared by any <code class="calibre2">STRSXP</code> needing an element representing the same string. R maintains a global cache of <code class="calibre2">CHARSXP</code>s so that there is only ever one <code class="calibre2">CHARSXP</code> representing a given string in memory.</p>
<p><a href="" id="index-mkChar"></a> <a href="" id="index-mkCharLen"></a></p>
<p>You can obtain a <code class="calibre2">CHARSXP</code> by calling <code class="calibre2">mkChar</code> and providing a nul-terminated C-style string. This function will return a pre-existing <code class="calibre2">CHARSXP</code> if one with a matching string already exists, otherwise it will create a new one and add it to the cache before returning it to you. The variant <code class="calibre2">mkCharLen</code> can be used to create a <code class="calibre2">CHARSXP</code> from part of a buffer and will ensure null-termination.</p>
<p>Note that R character strings are restricted to <code class="calibre2">2^31 - 1</code> bytes, and hence so should the input to <code class="calibre2">mkChar</code> be (C allows longer strings on 64-bit platforms).</p>
<hr />
<p><a href="" id="Finding-and-setting-variables"></a> <a href="" id="Finding-and-setting-variables-1"></a></p>
<h4 id="finding-and-setting-variables" class="subsection">5.9.8 Finding and setting variables</h4>
<p><a href="" id="index-Finding-variables"></a> <a href="" id="index-Setting-variables"></a></p>
<p>It will be usual that all the R objects needed in our C computations are passed as arguments to <code class="calibre2">.Call</code> or <code class="calibre2">.External</code>, but it is possible to find the values of R objects from within the C given their names. The following code is the equivalent of <code class="calibre2">get(name, envir = rho)</code>.</p>
<div class="example">
<pre class="example1"><code>SEXP getvar(SEXP name, SEXP rho)
{
    SEXP ans;

    if(!isString(name) || length(name) != 1)
        error(&quot;name is not a single string&quot;);
    if(!isEnvironment(rho))
        error(&quot;rho should be an environment&quot;);
    ans = findVar(installChar(STRING_ELT(name, 0)), rho);
    Rprintf(&quot;first value is %f\n&quot;, REAL(ans)[0]);
    return R_NilValue;
}</code></pre>
</div>
<p>The main work is done by <a href="" id="index-findVar"></a> <code class="calibre2">findVar</code>, but to use it we need to install <code class="calibre2">name</code> as a name in the symbol table. As we wanted the value for internal use, we return <code class="calibre2">NULL</code>.</p>
<p>Similar functions with syntax</p>
<div class="example">
<pre class="example1"><code>void defineVar(SEXP symbol, SEXP value, SEXP rho)
void setVar(SEXP symbol, SEXP value, SEXP rho)</code></pre>
</div>
<p><a href="" id="index-defineVar"></a> <a href="" id="index-setVar"></a></p>
<p>can be used to assign values to R variables. <code class="calibre2">defineVar</code> creates a new binding or changes the value of an existing binding in the specified environment frame; it is the analogue of <code class="calibre2">assign(symbol, value, envir = rho, inherits = FALSE)</code>, but unlike <code class="calibre2">assign</code>, <code class="calibre2">defineVar</code> does not make a copy of the object <code class="calibre2">value</code>.<a href="R-exts_split_014.html#FOOT134" id="DOCF134"><sup>134</sup></a> <code class="calibre2">setVar</code> searches for an existing binding for <code class="calibre2">symbol</code> in <code class="calibre2">rho</code> or its enclosing environments. If a binding is found, its value is changed to <code class="calibre2">value</code>. Otherwise, a new binding with the specified value is created in the global environment. This corresponds to <code class="calibre2">assign(symbol, value, envir = rho, inherits = TRUE)</code>.</p>
<hr />
<p><a href="" id="Some-convenience-functions"></a> <a href="" id="Some-convenience-functions-1"></a></p>
<h4 id="some-convenience-functions" class="subsection">5.9.9 Some convenience functions</h4>
<p>Some operations are done so frequently that there are convenience functions to handle them. (All these are provided via the header file Rinternals.h.)</p>
<p>Suppose we wanted to pass a single logical argument <code class="calibre2">ignore_quotes</code>: we could use</p>
<div class="example">
<pre class="example1"><code>    int ign = asLogical(ignore_quotes);
    if(ign == NA_LOGICAL) error(&quot;&#39;ignore_quotes&#39; must be TRUE or FALSE&quot;);</code></pre>
</div>
<p>which will do any coercion needed (at least from a vector argument), and return <code class="calibre2">NA_LOGICAL</code> if the value passed was <code class="calibre2">NA</code> or coercion failed. There are also <code class="calibre2">asInteger</code>, <code class="calibre2">asReal</code> and <code class="calibre2">asComplex</code>. The function <code class="calibre2">asChar</code> returns a <code class="calibre2">CHARSXP</code>. All of these functions ignore any elements of an input vector after the first.</p>
<p>To return a length-one real vector we can use</p>
<div class="example">
<pre class="example1"><code>    double x;

    ...
    return ScalarReal(x);</code></pre>
</div>
<p>and there are versions of this for all the atomic vector types (those for a length-one character vector being <code class="calibre2">ScalarString</code> with argument a <code class="calibre2">CHARSXP</code> and <code class="calibre2">mkString</code> with argument <code class="calibre2">const char *</code>).</p>
<p>Some of the <code class="calibre2">isXXXX</code> functions differ from their apparent R-level counterparts: for example <code class="calibre2">isVector</code> is true for any atomic vector type (<code class="calibre2">isVectorAtomic</code>) and for lists and expressions (<code class="calibre2">isVectorList</code>) (with no check on attributes). <code class="calibre2">isMatrix</code> is a test of a length-2 <code class="calibre2">&quot;dim&quot;</code> attribute.</p>
<p>There are a series of small macros/functions to help construct pairlists and language objects (whose internal structures just differ by <code class="calibre2">SEXPTYPE</code>). Function <code class="calibre2">CONS(u, v)</code> is the basic building block: it constructs a pairlist from <code class="calibre2">u</code> followed by <code class="calibre2">v</code> (which is a pairlist or <code class="calibre2">R_NilValue</code>). <code class="calibre2">LCONS</code> is a variant that constructs a language object. Functions <code class="calibre2">list1</code> to <code class="calibre2">list6</code> construct a pairlist from one to six items, and <code class="calibre2">lang1</code> to <code class="calibre2">lang6</code> do the same for a language object (a function to call plus zero to five arguments). Functions <code class="calibre2">elt</code> and <code class="calibre2">lastElt</code> find the ith element and the last element of a pairlist, and <code class="calibre2">nthcdr</code> returns a pointer to the nth position in the pairlist (whose <code class="calibre2">CAR</code> is the nth item).</p>
<p>Functions <code class="calibre2">str2type</code> and <code class="calibre2">type2str</code> map R length-one character strings to and from <code class="calibre2">SEXPTYPE</code> numbers, and <code class="calibre2">type2char</code> maps numbers to C character strings.</p>
<hr />
<p><a href="" id="Semi_002dinternal-convenience-functions"></a> <a href="" id="Semi_002dinternal-convenience-functions-1"></a></p>
<h4 id="semi-internal-convenience-functions" class="subsection">5.9.9.1 Semi-internal convenience functions</h4>
<p>There is quite a collection of functions that may be used in your C code <em>if</em> you are willing to adapt to rare “API” changes. These typically contain “workhorses” of their R counterparts.</p>
<p>Functions <code class="calibre2">any_duplicated</code> and <code class="calibre2">any_duplicated3</code> are fast versions of R’s <code class="calibre2">any(duplicated(.))</code>.</p>
<p>Function <code class="calibre2">R_compute_identical</code> corresponds to R’s <code class="calibre2">identical</code> function.</p>
<hr />
<p><a href="" id="Named-objects-and-copying"></a> <a href="" id="Named-objects-and-copying-1"></a></p>
<h4 id="named-objects-and-copying" class="subsection">5.9.10 Named objects and copying</h4>
<p><a href="" id="index-duplicate"></a> <a href="" id="index-Copying-objects"></a></p>
<p>When assignments are done in R such as</p>
<div class="example">
<pre class="example1"><code>x &lt;- 1:10
y &lt;- x</code></pre>
</div>
<p>the named object is not necessarily copied, so after those two assignments <code class="calibre2">y</code> and <code class="calibre2">x</code> are bound to the same <code class="calibre2">SEXPREC</code> (the structure a <code class="calibre2">SEXP</code> points to). This means that any code which alters one of them has to make a copy before modifying the copy if the usual R semantics are to apply. Note that whereas <code class="calibre2">.C</code> and <code class="calibre2">.Fortran</code> do copy their arguments (unless the dangerous <code class="calibre2">dup = FALSE</code> is used), <code class="calibre2">.Call</code> and <code class="calibre2">.External</code> do not. So <code class="calibre2">duplicate</code> is commonly called on arguments to <code class="calibre2">.Call</code> before modifying them.</p>
<p>However, at least some of this copying is unneeded. In the first assignment shown, <code class="calibre2">x &lt;- 1:10</code>, R first creates an object with value <code class="calibre2">1:10</code> and then assigns it to <code class="calibre2">x</code> but if <code class="calibre2">x</code> is modified no copy is necessary as the temporary object with value <code class="calibre2">1:10</code> cannot be referred to again. R distinguishes between named and unnamed objects <em>via</em> a field in a <code class="calibre2">SEXPREC</code> that can be accessed <em>via</em> the macros <code class="calibre2">NAMED</code> and <code class="calibre2">SET_NAMED</code>. This can take values</p>
<dl>
<dt><code class="calibre2">0</code></dt>
<dd><p>The object is not bound to any symbol</p>
</dd>
<dt><code class="calibre2">1</code></dt>
<dd><p>The object has been bound to exactly one symbol</p>
</dd>
<dt><code class="calibre2">2</code></dt>
<dd><p>The object has potentially been bound to two or more symbols, and one should act as if another variable is currently bound to this value.</p>
</dd>
</dl>
<p>Note the past tenses: R does not do full reference counting and there may currently be fewer bindings.</p>
<p>It is safe to modify the value of any <code class="calibre2">SEXP</code> for which <code class="calibre2">NAMED(foo)</code> is zero, and if <code class="calibre2">NAMED(foo)</code> is two, the value should be duplicated (<em>via</em> a call to <code class="calibre2">duplicate</code>) before any modification. Note that it is the responsibility of the author of the code making the modification to do the duplication, even if it is <code class="calibre2">x</code> whose value is being modified after <code class="calibre2">y &lt;- x</code>.</p>
<p>The case <code class="calibre2">NAMED(foo) == 1</code> allows some optimization, but it can be ignored (and duplication done whenever <code class="calibre2">NAMED(foo) &gt; 0</code>). (This optimization is not currently usable in user code.) It is intended for use within replacement functions. Suppose we used</p>
<div class="example">
<pre class="example1"><code>x &lt;- 1:10
foo(x) &lt;- 3</code></pre>
</div>
<p>which is computed as</p>
<div class="example">
<pre class="example1"><code>x &lt;- 1:10
x &lt;- &quot;foo&lt;-&quot;(x, 3)</code></pre>
</div>
<p>Then inside <code class="calibre2">&quot;foo&lt;-&quot;</code> the object pointing to the current value of <code class="calibre2">x</code> will have <code class="calibre2">NAMED(foo)</code> as one, and it would be safe to modify it as the only symbol bound to it is <code class="calibre2">x</code> and that will be rebound immediately. (Provided the remaining code in <code class="calibre2">&quot;foo&lt;-&quot;</code> make no reference to <code class="calibre2">x</code>, and no one is going to attempt a direct call such as <code class="calibre2">y &lt;- &quot;foo&lt;-&quot;(x)</code>.)</p>
<p>This mechanism is likely to be replaced in future versions of R.</p>
<hr />
<p><a href="" id="Interface-functions-_002eCall-and-_002eExternal"></a> <a href="" id="Interface-functions-_002eCall-and-_002eExternal-1"></a></p>
<h3 id="interface-functions-.call-and-.external" class="section">5.10 Interface functions <code class="calibre18">.Call</code> and <code class="calibre18">.External</code></h3>
<p><a href="" id="index-Interfaces-to-compiled-code-1"></a></p>
<p>In this section we consider the details of the R/C interfaces.</p>
<p>These two interfaces have almost the same functionality. <code class="calibre2">.Call</code> is based on the interface of the same name in S version 4, and <code class="calibre2">.External</code> is based on R’s <code class="calibre2">.Internal</code>. <code class="calibre2">.External</code> is more complex but allows a variable number of arguments.</p>
<hr />
<p><a href="" id="Calling-_002eCall"></a> <a href="" id="Calling-_002eCall-1"></a></p>
<h4 id="calling-.call" class="subsection">5.10.1 Calling <code class="calibre2">.Call</code></h4>
<p><a href="" id="index-_002eCall-1"></a></p>
<p>Let us convert our finite convolution example to use <code class="calibre2">.Call</code>. The calling function in R is</p>
<div class="example">
<pre class="example1"><code>conv &lt;- function(a, b) .Call(&quot;convolve2&quot;, a, b)</code></pre>
</div>
<p>which could hardly be simpler, but as we shall see all the type coercion is transferred to the C code, which is</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

SEXP convolve2(SEXP a, SEXP b)
{
    int na, nb, nab;
    double *xa, *xb, *xab;
    SEXP ab;

    a = PROTECT(coerceVector(a, REALSXP));
    b = PROTECT(coerceVector(b, REALSXP));
    na = length(a); nb = length(b); nab = na + nb - 1;
    ab = PROTECT(allocVector(REALSXP, nab));
    xa = REAL(a); xb = REAL(b); xab = REAL(ab);
    for(int i = 0; i &lt; nab; i++) xab[i] = 0.0;
    for(int i = 0; i &lt; na; i++)
        for(int j = 0; j &lt; nb; j++) xab[i + j] += xa[i] * xb[j];
    UNPROTECT(3);
    return ab;
}</code></pre>
</div>
<hr />
<p><a href="" id="Calling-_002eExternal"></a> <a href="" id="Calling-_002eExternal-1"></a></p>
<h4 id="calling-.external" class="subsection">5.10.2 Calling <code class="calibre2">.External</code></h4>
<p><a href="" id="index-_002eExternal-1"></a></p>
<p>We can use the same example to illustrate <code class="calibre2">.External</code>. The R code changes only by replacing <code class="calibre2">.Call</code> by <code class="calibre2">.External</code></p>
<div class="example">
<pre class="example1"><code>conv &lt;- function(a, b) .External(&quot;convolveE&quot;, a, b)</code></pre>
</div>
<p>but the main change is how the arguments are passed to the C code, this time as a single SEXP. The only change to the C code is how we handle the arguments.</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;

SEXP convolveE(SEXP args)
{
    int i, j, na, nb, nab;
    double *xa, *xb, *xab;
    SEXP a, b, ab;

    a = PROTECT(coerceVector(CADR(args), REALSXP));
    b = PROTECT(coerceVector(CADDR(args), REALSXP));
    ...
}</code></pre>
</div>
<p>Once again we do not need to protect the arguments, as in the R side of the interface they are objects that are already in use. The macros</p>
<div class="example">
<pre class="example1"><code>  first = CADR(args);
  second = CADDR(args);
  third = CADDDR(args);
  fourth = CAD4R(args);</code></pre>
</div>
<p>provide convenient ways to access the first four arguments. More generally we can use the <a href="" id="index-CAR"></a> <a href="" id="index-CDR"></a> <code class="calibre2">CDR</code> and <code class="calibre2">CAR</code> macros as in</p>
<div class="example">
<pre class="example1"><code>  args = CDR(args); a = CAR(args);
  args = CDR(args); b = CAR(args);</code></pre>
</div>
<p>which clearly allows us to extract an unlimited number of arguments (whereas <code class="calibre2">.Call</code> has a limit, albeit at 65 not a small one).</p>
<p>More usefully, the <code class="calibre2">.External</code> interface provides an easy way to handle calls with a variable number of arguments, as <code class="calibre2">length(args)</code> will give the number of arguments supplied (of which the first is ignored). We may need to know the names (‘tags’) given to the actual arguments, which we can by using the <code class="calibre2">TAG</code> macro and using something like the following example, that prints the names and the first value of its arguments if they are vector types.</p>
<div class="example">
<pre class="example1"><code>SEXP showArgs(SEXP args)
{
    args = CDR(args); /* skip ‘name’ */
    for(int i = 0; args != R_NilValue; i++, args = CDR(args)) {
        const char *name =
            isNull(TAG(args)) ? &quot;&quot; : CHAR(PRINTNAME(TAG(args)));
        SEXP el = CAR(args);
        if (length(el) == 0) {
            Rprintf(&quot;[%d] ‘%s’ R type, length 0\n&quot;, i+1, name);
           continue;
        }</code></pre>
<pre class="example1"><code>        switch(TYPEOF(el)) {
        case REALSXP:
            Rprintf(&quot;[%d] ‘%s’ %f\n&quot;, i+1, name, REAL(el)[0]);
            break;</code></pre>
<pre class="example1"><code>        case LGLSXP:
        case INTSXP:
            Rprintf(&quot;[%d] ‘%s’ %d\n&quot;, i+1, name, INTEGER(el)[0]);
            break;</code></pre>
<pre class="example1"><code>        case CPLXSXP:
        {
            Rcomplex cpl = COMPLEX(el)[0];
            Rprintf(&quot;[%d] ‘%s’ %f + %fi\n&quot;, i+1, name, cpl.r, cpl.i);
        }
            break;</code></pre>
<pre class="example1"><code>        case STRSXP:
            Rprintf(&quot;[%d] ‘%s’ %s\n&quot;, i+1, name,
                   CHAR(STRING_ELT(el, 0)));
           break;</code></pre>
<pre class="example1"><code>        default:
            Rprintf(&quot;[%d] ‘%s’ R type\n&quot;, i+1, name);
       }
    }
    return R_NilValue;
}</code></pre>
</div>
<p>This can be called by the wrapper function</p>
<div class="example">
<pre class="example1"><code>showArgs &lt;- function(...) invisible(.External(&quot;showArgs&quot;, ...))</code></pre>
</div>
<p>Note that this style of programming is convenient but not necessary, as an alternative style is</p>
<div class="example">
<pre class="example1"><code>showArgs1 &lt;- function(...) invisible(.Call(&quot;showArgs1&quot;, list(...)))</code></pre>
</div>
<p>The (very similar) C code is in the scripts.</p>
<hr />
<p><a href="" id="Missing-and-special-values"></a> <a href="" id="Missing-and-special-values-1"></a></p>
<h4 id="missing-and-special-values" class="subsection">5.10.3 Missing and special values</h4>
<p><a href="" id="index-Missing-values"></a> <a href="" id="index-IEEE-special-values"></a></p>
<p>One piece of error-checking the <code class="calibre2">.C</code> call does (unless <code class="calibre2">NAOK</code> is true) is to check for missing (<code class="calibre2">NA</code>) and IEEE special values (<code class="calibre2">Inf</code>, <code class="calibre2">-Inf</code> and <code class="calibre2">NaN</code>) and give an error if any are found. With the <code class="calibre2">.Call</code> interface these will be passed to our code. In this example the special values are no problem, as IEC60559 arithmetic will handle them correctly. In the current implementation this is also true of <code class="calibre2">NA</code> as it is a type of <code class="calibre2">NaN</code>, but it is unwise to rely on such details. Thus we will re-write the code to handle <code class="calibre2">NA</code>s using macros defined in R_ext/Arith.h included by R.h.</p>
<p>The code changes are the same in any of the versions of <code class="calibre2">convolve2</code> or <code class="calibre2">convolveE</code>:</p>
<div class="example">
<pre class="example1"><code>    ...
  for(int i = 0; i &lt; na; i++)
    for(int j = 0; j &lt; nb; j++)
        if(ISNA(xa[i]) || ISNA(xb[j]) || ISNA(xab[i + j]))
            xab[i + j] = NA_REAL;
        else
            xab[i + j] += xa[i] * xb[j];
    ...</code></pre>
</div>
<p><a href="" id="index-ISNA"></a> <a href="" id="index-ISNAN"></a></p>
<p>Note that the <code class="calibre2">ISNA</code> macro, and the similar macros <code class="calibre2">ISNAN</code> (which checks for <code class="calibre2">NaN</code> or <code class="calibre2">NA</code>) and <code class="calibre2">R_FINITE</code> (which is false for <code class="calibre2">NA</code> and all the special values), only apply to numeric values of type <code class="calibre2">double</code>. Missingness of integers, logicals and character strings can be tested by equality to the constants <code class="calibre2">NA_INTEGER</code>, <code class="calibre2">NA_LOGICAL</code> and <code class="calibre2">NA_STRING</code>. These and <code class="calibre2">NA_REAL</code> can be used to set elements of R vectors to <code class="calibre2">NA</code>.</p>
<p>The constants <code class="calibre2">R_NaN</code>, <code class="calibre2">R_PosInf</code> and <code class="calibre2">R_NegInf</code> can be used to set <code class="calibre2">double</code>s to the special values.</p>
<hr />
<p><a href="" id="Evaluating-R-expressions-from-C"></a> <a href="" id="Evaluating-R-expressions-from-C-1"></a></p>
<h3 id="evaluating-r-expressions-from-c" class="section">5.11 Evaluating R expressions from C</h3>
<p><a href="" id="index-Evaluating-R-expressions-from-C"></a></p>
<p>The main function we will use is</p>
<div class="example">
<pre class="example1"><code>SEXP eval(SEXP expr, SEXP rho);</code></pre>
</div>
<p>the equivalent of the interpreted R code <code class="calibre2">eval(expr, envir = rho)</code> (so <code class="calibre2">rho</code> must be an environment), although we can also make use of <code class="calibre2">findVar</code>, <code class="calibre2">defineVar</code> and <code class="calibre2">findFun</code> (which restricts the search to functions).</p>
<p>To see how this might be applied, here is a simplified internal version of <code class="calibre2">lapply</code> for expressions, used as</p>
<div class="example">
<pre class="example1"><code>a &lt;- list(a = 1:5, b = rnorm(10), test = runif(100))
.Call(&quot;lapply&quot;, a, quote(sum(x)), new.env())</code></pre>
</div>
<p>with C code</p>
<div class="example">
<pre class="example1"><code>SEXP lapply(SEXP list, SEXP expr, SEXP rho)
{
    int n = length(list);
    SEXP ans;

    if(!isNewList(list)) error(&quot;&#39;list&#39; must be a list&quot;);
    if(!isEnvironment(rho)) error(&quot;&#39;rho&#39; should be an environment&quot;);
    ans = PROTECT(allocVector(VECSXP, n));
    for(int i = 0; i &lt; n; i++) {
        defineVar(install(&quot;x&quot;), VECTOR_ELT(list, i), rho);
        SET_VECTOR_ELT(ans, i, eval(expr, rho));
    }
    setAttrib(ans, R_NamesSymbol, getAttrib(list, R_NamesSymbol));
    UNPROTECT(1);
    return ans;
}</code></pre>
</div>
<p>It would be closer to <code class="calibre2">lapply</code> if we could pass in a function rather than an expression. One way to do this is <em>via</em> interpreted R code as in the next example, but it is possible (if somewhat obscure) to do this in C code. The following is based on the code in src/main/optimize.c.</p>
<div class="example">
<pre class="example1"><code>SEXP lapply2(SEXP list, SEXP fn, SEXP rho)
{
    int n = length(list);
    SEXP R_fcall, ans;

    if(!isNewList(list)) error(&quot;&#39;list&#39; must be a list&quot;);
    if(!isFunction(fn)) error(&quot;&#39;fn&#39; must be a function&quot;);
    if(!isEnvironment(rho)) error(&quot;&#39;rho&#39; should be an environment&quot;);
    R_fcall = PROTECT(lang2(fn, R_NilValue));
    ans = PROTECT(allocVector(VECSXP, n));
    for(int i = 0; i &lt; n; i++) {
        SETCADR(R_fcall, VECTOR_ELT(list, i));
        SET_VECTOR_ELT(ans, i, eval(R_fcall, rho));
    }
    setAttrib(ans, R_NamesSymbol, getAttrib(list, R_NamesSymbol));
    UNPROTECT(2);
    return ans;
}</code></pre>
</div>
<p>used by</p>
<div class="example">
<pre class="example1"><code>.Call(&quot;lapply2&quot;, a, sum, new.env())</code></pre>
</div>
<p>Function <code class="calibre2">lang2</code> creates an executable pairlist of two elements, but this will only be clear to those with a knowledge of a LISP-like language.</p>
<p>As a more comprehensive example of constructing an R call in C code and evaluating, consider the following fragment of <code class="calibre2">printAttributes</code> in src/main/print.c.</p>
<div class="example">
<pre class="example1"><code>    /* Need to construct a call to
       print(CAR(a), digits=digits)
       based on the R_print structure, then eval(call, env).
       See do_docall for the template for this sort of thing.
    */
    SEXP s, t;
    t = s = PROTECT(allocList(3));
    SET_TYPEOF(s, LANGSXP);
    SETCAR(t, install(&quot;print&quot;)); t = CDR(t);
    SETCAR(t,  CAR(a)); t = CDR(t);
    SETCAR(t, ScalarInteger(digits));
    SET_TAG(t, install(&quot;digits&quot;));
    eval(s, env);
    UNPROTECT(1);</code></pre>
</div>
<p>At this point <code class="calibre2">CAR(a)</code> is the R object to be printed, the current attribute. There are three steps: the call is constructed as a pairlist of length 3, the list is filled in, and the expression represented by the pairlist is evaluated.</p>
<p>A pairlist is quite distinct from a generic vector list, the only user-visible form of list in R. A pairlist is a linked list (with <code class="calibre2">CDR(t)</code> computing the next entry), with items (accessed by <code class="calibre2">CAR(t)</code>) and names or tags (set by <code class="calibre2">SET_TAG</code>). In this call there are to be three items, a symbol (pointing to the function to be called) and two argument values, the first unnamed and the second named. Setting the type to <code class="calibre2">LANGSXP</code> makes this a call which can be evaluated.</p>
<hr />
<p><a href="" id="Zero_002dfinding"></a> <a href="" id="Zero_002dfinding-1"></a></p>
<h4 id="zero-finding" class="subsection">5.11.1 Zero-finding</h4>
<p><a href="" id="index-Zero_002dfinding"></a></p>
<p>In this section we re-work the example of Becker, Chambers &amp; Wilks (1988, pp.~205–10) on finding a zero of a univariate function. The R code and an example are</p>
<div class="example">
<pre class="example1"><code>zero &lt;- function(f, guesses, tol = 1e-7) {
    f.check &lt;- function(x) {
        x &lt;- f(x)
        if(!is.numeric(x)) stop(&quot;Need a numeric result&quot;)
        as.double(x)
    }
    .Call(&quot;zero&quot;, body(f.check), as.double(guesses), as.double(tol),
          new.env())
}

cube1 &lt;- function(x) (x^2 + 1) * (x - 1.5)
zero(cube1, c(0, 5))</code></pre>
</div>
<p>where this time we do the coercion and error-checking in the R code. The C code is</p>
<div class="example">
<pre class="example1"><code>SEXP mkans(double x)
{
    // no need for PROTECT() here, as REAL(.) does not allocate:
    SEXP ans = allocVector(REALSXP, 1);
    REAL(ans)[0] = x;
    return ans;
}</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>double feval(double x, SEXP f, SEXP rho)
{
    // a version with (too) much PROTECT()ion .. &quot;better safe than sorry&quot;
    SEXP symbol, value;
    PROTECT(symbol = install(&quot;x&quot;));
    PROTECT(value = mkans(x));
    defineVar(symbol, value, rho);
    UNPROTECT(2);
    return(REAL(eval(f, rho))[0]);
}</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>SEXP zero(SEXP f, SEXP guesses, SEXP stol, SEXP rho)
{
    double x0 = REAL(guesses)[0], x1 = REAL(guesses)[1],
           tol = REAL(stol)[0];
    double f0, f1, fc, xc;</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>    if(tol &lt;= 0.0) error(&quot;non-positive tol value&quot;);
    f0 = feval(x0, f, rho); f1 = feval(x1, f, rho);
    if(f0 == 0.0) return mkans(x0);
    if(f1 == 0.0) return mkans(x1);
    if(f0*f1 &gt; 0.0) error(&quot;x[0] and x[1] have the same sign&quot;);</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>    for(;;) {
        xc = 0.5*(x0+x1);
        if(fabs(x0-x1) &lt; tol) return  mkans(xc);
        fc = feval(xc, f, rho);
        if(fc == 0) return  mkans(xc);
        if(f0*fc &gt; 0.0) {
            x0 = xc; f0 = fc;
        } else {
            x1 = xc; f1 = fc;
        }
    }
}</code></pre>
</div>
<hr />
<p><a href="" id="Calculating-numerical-derivatives"></a> <a href="" id="Calculating-numerical-derivatives-1"></a></p>
<h4 id="calculating-numerical-derivatives" class="subsection">5.11.2 Calculating numerical derivatives</h4>
<p><a href="" id="index-Numerical-derivatives"></a></p>
<p>We will use a longer example (by Saikat DebRoy) to illustrate the use of evaluation and <code class="calibre2">.External</code>. This calculates numerical derivatives, something that could be done as effectively in interpreted R code but may be needed as part of a larger C calculation.</p>
<p>An interpreted R version and an example are</p>
<div class="example">
<pre class="example1"><code>numeric.deriv &lt;- function(expr, theta, rho=sys.frame(sys.parent()))
{
    eps &lt;- sqrt(.Machine$double.eps)
    ans &lt;- eval(substitute(expr), rho)
    grad &lt;- matrix(, length(ans), length(theta),
                   dimnames=list(NULL, theta))
    for (i in seq_along(theta)) {
        old &lt;- get(theta[i], envir=rho)
        delta &lt;- eps * max(1, abs(old))
        assign(theta[i], old+delta, envir=rho)
        ans1 &lt;- eval(substitute(expr), rho)
        assign(theta[i], old, envir=rho)
        grad[, i] &lt;- (ans1 - ans)/delta
    }
    attr(ans, &quot;gradient&quot;) &lt;- grad
    ans
}
omega &lt;- 1:5; x &lt;- 1; y &lt;- 2
numeric.deriv(sin(omega*x*y), c(&quot;x&quot;, &quot;y&quot;))</code></pre>
</div>
<p>where <code class="calibre2">expr</code> is an expression, <code class="calibre2">theta</code> a character vector of variable names and <code class="calibre2">rho</code> the environment to be used.</p>
<p>For the compiled version the call from R will be</p>
<div class="example">
<pre class="example1"><code>.External(&quot;numeric_deriv&quot;, expr, theta, rho)</code></pre>
</div>
<p>with example usage</p>
<div class="example">
<pre class="example1"><code>.External(&quot;numeric_deriv&quot;, quote(sin(omega*x*y)),
          c(&quot;x&quot;, &quot;y&quot;), .GlobalEnv)</code></pre>
</div>
<p>Note the need to quote the expression to stop it being evaluated in the caller.</p>
<p>Here is the complete C code which we will explain section by section.</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt; /* for DOUBLE_EPS */
#include &lt;Rinternals.h&gt;

SEXP numeric_deriv(SEXP args)
{
    SEXP theta, expr, rho, ans, ans1, gradient, par, dimnames;
    double tt, xx, delta, eps = sqrt(DOUBLE_EPS), *rgr, *rans;
    int i, start;</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>    expr = CADR(args);
    if(!isString(theta = CADDR(args)))
        error(&quot;theta should be of type character&quot;);
    if(!isEnvironment(rho = CADDDR(args)))
        error(&quot;rho should be an environment&quot;);</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>    ans = PROTECT(coerceVector(eval(expr, rho), REALSXP));
    gradient = PROTECT(allocMatrix(REALSXP, LENGTH(ans), LENGTH(theta)));
    rgr = REAL(gradient); rans = REAL(ans);</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>    for(i = 0, start = 0; i &lt; LENGTH(theta); i++, start += LENGTH(ans)) {
        par = PROTECT(findVar(installChar(STRING_ELT(theta, i)), rho));
        tt = REAL(par)[0];
        xx = fabs(tt);
        delta = (xx &lt; 1) ? eps : xx*eps;
        REAL(par)[0] += delta;
        ans1 = PROTECT(coerceVector(eval(expr, rho), REALSXP));
        for(int j = 0; j &lt; LENGTH(ans); j++)
            rgr[j + start] = (REAL(ans1)[j] - rans[j])/delta;
        REAL(par)[0] = tt;
        UNPROTECT(2); /* par, ans1 */
    }</code></pre>
<pre class="example1"><code></code></pre>
<pre class="example1"><code>    dimnames = PROTECT(allocVector(VECSXP, 2));
    SET_VECTOR_ELT(dimnames, 1,  theta);
    dimnamesgets(gradient, dimnames);
    setAttrib(ans, install(&quot;gradient&quot;), gradient);
    UNPROTECT(3); /* ans  gradient  dimnames */
    return ans;
}</code></pre>
</div>
<p>The code to handle the arguments is</p>
<div class="example">
<pre class="example1"><code>    expr = CADR(args);
    if(!isString(theta = CADDR(args)))
        error(&quot;theta should be of type character&quot;);
    if(!isEnvironment(rho = CADDDR(args)))
        error(&quot;rho should be an environment&quot;);</code></pre>
</div>
<p>Note that we check for correct types of <code class="calibre2">theta</code> and <code class="calibre2">rho</code> but do not check the type of <code class="calibre2">expr</code>. That is because <code class="calibre2">eval</code> can handle many types of R objects other than <code class="calibre2">EXPRSXP</code>. There is no useful coercion we can do, so we stop with an error message if the arguments are not of the correct mode.</p>
<p>The first step in the code is to evaluate the expression in the environment <code class="calibre2">rho</code>, by</p>
<div class="example">
<pre class="example1"><code>    ans = PROTECT(coerceVector(eval(expr, rho), REALSXP));</code></pre>
</div>
<p>We then allocate space for the calculated derivative by</p>
<div class="example">
<pre class="example1"><code>    gradient = PROTECT(allocMatrix(REALSXP, LENGTH(ans), LENGTH(theta)));</code></pre>
</div>
<p>The first argument to <code class="calibre2">allocMatrix</code> gives the <code class="calibre2">SEXPTYPE</code> of the matrix: here we want it to be <code class="calibre2">REALSXP</code>. The other two arguments are the numbers of rows and columns. (Note that <code class="calibre2">LENGTH</code> is intended to be used for vectors: <code class="calibre2">length</code> is more generally applicable.)</p>
<div class="example">
<pre class="example1"><code>    for(i = 0, start = 0; i &lt; LENGTH(theta); i++, start += LENGTH(ans)) {
        par = PROTECT(findVar(installChar(STRING_ELT(theta, i)), rho));</code></pre>
</div>
<p>Here, we are entering a for loop. We loop through each of the variables. In the <code class="calibre2">for</code> loop, we first create a symbol corresponding to the <code class="calibre2">i</code>’th element of the <code class="calibre2">STRSXP</code> <code class="calibre2">theta</code>. Here, <code class="calibre2">STRING_ELT(theta, i)</code> accesses the <code class="calibre2">i</code>’th element of the <code class="calibre2">STRSXP</code> <code class="calibre2">theta</code>. Macro <code class="calibre2">CHAR()</code> extracts the actual character representation<a href="R-exts_split_014.html#FOOT135" id="DOCF135"><sup>135</sup></a> of it: it returns a pointer. We then install the name and use <code class="calibre2">findVar</code> to find its value.</p>
<div class="example">
<pre class="example1"><code>        tt = REAL(par)[0];
        xx = fabs(tt);
        delta = (xx &lt; 1) ? eps : xx*eps;
        REAL(par)[0] += delta;
        ans1 = PROTECT(coerceVector(eval(expr, rho), REALSXP));</code></pre>
</div>
<p>We first extract the real value of the parameter, then calculate <code class="calibre2">delta</code>, the increment to be used for approximating the numerical derivative. Then we change the value stored in <code class="calibre2">par</code> (in environment <code class="calibre2">rho</code>) by <code class="calibre2">delta</code> and evaluate <code class="calibre2">expr</code> in environment <code class="calibre2">rho</code> again. Because we are directly dealing with original R memory locations here, R does the evaluation for the changed parameter value.</p>
<div class="example">
<pre class="example1"><code>        for(int j = 0; j &lt; LENGTH(ans); j++)
            rgr[j + start] = (REAL(ans1)[j] - rans[j])/delta;
        REAL(par)[0] = tt;
        UNPROTECT(2);
    }</code></pre>
</div>
<p>Now, we compute the <code class="calibre2">i</code>’th column of the gradient matrix. Note how it is accessed: R stores matrices by column (like FORTRAN).</p>
<div class="example">
<pre class="example1"><code>    dimnames = PROTECT(allocVector(VECSXP, 2));
    SET_VECTOR_ELT(dimnames, 1, theta);
    dimnamesgets(gradient, dimnames);
    setAttrib(ans, install(&quot;gradient&quot;), gradient);
    UNPROTECT(3);
    return ans;
}</code></pre>
</div>
<p>First we add column names to the gradient matrix. This is done by allocating a list (a <code class="calibre2">VECSXP</code>) whose first element, the row names, is <code class="calibre2">NULL</code> (the default) and the second element, the column names, is set as <code class="calibre2">theta</code>. This list is then assigned as the attribute having the symbol <code class="calibre2">R_DimNamesSymbol</code>. Finally we set the gradient matrix as the gradient attribute of <code class="calibre2">ans</code>, unprotect the remaining protected locations and return the answer <code class="calibre2">ans</code>.</p>
<hr />
<p><a href="" id="Parsing-R-code-from-C"></a> <a href="" id="Parsing-R-code-from-C-1"></a></p>
<h3 id="parsing-r-code-from-c" class="section">5.12 Parsing R code from C</h3>
<p><a href="" id="index-Parsing-R-code-from-C"></a></p>
<p>Suppose an R extension want to accept an R expression from the user and evaluate it. The previous section covered evaluation, but the expression will be entered as text and needs to be parsed first. A small part of R’s parse interface is declared in header file R_ext/Parse.h<a href="R-exts_split_014.html#FOOT136" id="DOCF136"><sup>136</sup></a>.</p>
<p>An example of the usage can be found in the (example) Windows package <strong>windlgs</strong> included in the R source tree. The essential part is</p>
<div class="example">
<pre class="example1"><code>#include &lt;R.h&gt;
#include &lt;Rinternals.h&gt;
#include &lt;R_ext/Parse.h&gt;

SEXP menu_ttest3()
{
    char cmd[256];
    SEXP cmdSexp, cmdexpr, ans = R_NilValue;
    ParseStatus status;
   ...
    if(done == 1) {
        cmdSexp = PROTECT(allocVector(STRSXP, 1));
        SET_STRING_ELT(cmdSexp, 0, mkChar(cmd));
        cmdexpr = PROTECT(R_ParseVector(cmdSexp, -1, &amp;status, R_NilValue));
        if (status != PARSE_OK) {
            UNPROTECT(2);
            error(&quot;invalid call %s&quot;, cmd);
        }
        /* Loop is needed here as EXPSEXP will be of length &gt; 1 */
        for(int i = 0; i &lt; length(cmdexpr); i++)
            ans = eval(VECTOR_ELT(cmdexpr, i), R_GlobalEnv);
        UNPROTECT(2);
    }
    return ans;
}</code></pre>
</div>
<p>Note that a single line of text may give rise to more than one R expression.</p>
<p><a href="" id="index-R_005fParseVector"></a></p>
<p><code class="calibre2">R_ParseVector</code> is essentially the code used to implement <code class="calibre2">parse(text=)</code> at R level. The first argument is a character vector (corresponding to <code class="calibre2">text</code>) and the second the maximal number of expressions to parse (corresponding to <code class="calibre2">n</code>). The third argument is a pointer to a variable of an enumeration type, and it is normal (as <code class="calibre2">parse</code> does) to regard all values other than <code class="calibre2">PARSE_OK</code> as an error. Other values which might be returned are <code class="calibre2">PARSE_INCOMPLETE</code> (an incomplete expression was found) and <code class="calibre2">PARSE_ERROR</code> (a syntax error), in both cases the value returned being <code class="calibre2">R_NilValue</code>. The fourth argument is a length one character vector to be used as a filename in error messages, a <code class="calibre2">srcfile</code> object or the R <code class="calibre2">NULL</code> object (as in the example above). If a <code class="calibre2">srcfile</code> object was used, a <code class="calibre2">srcref</code> attribute would be attached to the result, containing a list of <code class="calibre2">srcref</code> objects of the same length as the expression, to allow it to be echoed with its original formatting.</p>
<hr />
<p><a href="" id="Accessing-source-references"></a> <a href="" id="Accessing-source-references-1"></a></p>
<h4 id="accessing-source-references" class="subsection">5.12.1 Accessing source references</h4>
<p>The source references added by the parser are recorded by R’s evaluator as it evaluates code. Two functions make these available to debuggers running C code: <a href="" id="index-R_005fSrcref"></a> <a href="" id="index-R_005fGetCurrentSrcref"></a> <a href="" id="index-R_005fGetSrcFilename"></a></p>
<div class="example">
<pre class="example1"><code>SEXP R_GetCurrentSrcref(int skip);</code></pre>
</div>
<p>This function checks <code class="calibre2">R_Srcref</code> and the current evaluation stack for entries that contain source reference information. The <code class="calibre2">skip</code> argument tells how many source references to skip before returning the <code class="calibre2">SEXP</code> of the <code class="calibre2">srcref</code> object, counting from the top of the stack. If <code class="calibre2">skip &lt; 0</code>, <code class="calibre2">abs(skip)</code> locations are counted up from the bottom of the stack. If too few or no source references are found, <code class="calibre2">NULL</code> is returned.</p>
<div class="example">
<pre class="example1"><code>SEXP R_GetSrcFilename(SEXP srcref);</code></pre>
</div>
<p>This function extracts the filename from the source reference for display, returning a length 1 character vector containing the filename. If no name is found, <code class="calibre2">&quot;&quot;</code> is returned.</p>
<hr />
<p><a href="" id="External-pointers-and-weak-references"></a> <a href="" id="External-pointers-and-weak-references-1"></a></p>
<h3 id="external-pointers-and-weak-references" class="section">5.13 External pointers and weak references</h3>
<p>The <code class="calibre2">SEXPTYPE</code>s <code class="calibre2">EXTPTRSXP</code> and <code class="calibre2">WEAKREFSXP</code> can be encountered at R level, but are created in C code.</p>
<p><a href="" id="index-external-pointer"></a></p>
<p>External pointer <code class="calibre2">SEXP</code>s are intended to handle references to C structures such as ‘handles’, and are used for this purpose in package <a href="https://CRAN.R-project.org/package=RODBC"><strong>RODBC</strong></a> for example. They are unusual in their copying semantics in that when an R object is copied, the external pointer object is not duplicated. (For this reason external pointers should only be used as part of an object with normal semantics, for example an attribute or an element of a list.)</p>
<p>An external pointer is created by</p>
<div class="example">
<pre class="example1"><code>SEXP R_MakeExternalPtr(void *p, SEXP tag, SEXP prot);</code></pre>
</div>
<p>where <code class="calibre2">p</code> is the pointer (and hence this cannot portably be a function pointer), and <code class="calibre2">tag</code> and <code class="calibre2">prot</code> are references to ordinary R objects which will remain in existence (be protected from garbage collection) for the lifetime of the external pointer object. A useful convention is to use the <code class="calibre2">tag</code> field for some form of type identification and the <code class="calibre2">prot</code> field for protecting the memory that the external pointer represents, if that memory is allocated from the R heap. Both <code class="calibre2">tag</code> and <code class="calibre2">prot</code> can be <code class="calibre2">R_NilValue</code>, and often are.</p>
<p>An alternative way as from R 3.4.0 to create an external pointer from a function pointer is</p>
<div class="example">
<pre class="example1"><code>typedef void * (*R_DL_FUNC)();
SEXP R_MakeExternalPtrFn(R_DL_FUNC p, SEXP tag, SEXP prot);</code></pre>
</div>
<p>The elements of an external pointer can be accessed and set <em>via</em></p>
<div class="example">
<pre class="example1"><code>void *R_ExternalPtrAddr(SEXP s);
DL_FUNC R_ExternalPtrAddrFn(SEXP s);
SEXP R_ExternalPtrTag(SEXP s);
SEXP R_ExternalPtrProtected(SEXP s);
void R_ClearExternalPtr(SEXP s);
void R_SetExternalPtrAddr(SEXP s, void *p);
void R_SetExternalPtrTag(SEXP s, SEXP tag);
void R_SetExternalPtrProtected(SEXP s, SEXP p);</code></pre>
</div>
<p>Clearing a pointer sets its value to the C <code class="calibre2">NULL</code> pointer.</p>
<p><a href="" id="index-finalizer"></a></p>
<p>An external pointer object can have a <em>finalizer</em>, a piece of code to be run when the object is garbage collected. This can be R code or C code, and the various interfaces are, respectively.</p>
<div class="example">
<pre class="example1"><code>void R_RegisterFinalizerEx(SEXP s, SEXP fun, Rboolean onexit);

typedef void (*R_CFinalizer_t)(SEXP);
void R_RegisterCFinalizerEx(SEXP s, R_CFinalizer_t fun, Rboolean onexit);</code></pre>
</div>
<p>The R function indicated by <code class="calibre2">fun</code> should be a function of a single argument, the object to be finalized. R does not perform a garbage collection when shutting down, and the <code class="calibre2">onexit</code> argument of the extended forms can be used to ask that the finalizer be run during a normal shutdown of the R session. It is suggested that it is good practice to clear the pointer on finalization.</p>
<p>The only R level function for interacting with external pointers is <code class="calibre2">reg.finalizer</code> which can be used to set a finalizer.</p>
<p>It is probably not a good idea to allow an external pointer to be <code class="calibre2">save</code>d and then reloaded, but if this happens the pointer will be set to the C <code class="calibre2">NULL</code> pointer.</p>
<p>Finalizers can be run at many places in the code base and much of it, including the R interpreter, is not re-entrant. So great care is needed in choosing the code to be run in a finalizer. Finalizers are marked to be run at garbage collection but only run at a somewhat safe point thereafter.</p>
<p><a href="" id="index-weak-reference"></a></p>
<p>Weak references are used to allow the programmer to maintain information on entities without preventing the garbage collection of the entities once they become unreachable.</p>
<p>A weak reference contains a key and a value. The value is reachable is if it either reachable directly or <em>via</em> weak references with reachable keys. Once a value is determined to be unreachable during garbage collection, the key and value are set to <code class="calibre2">R_NilValue</code> and the finalizer will be run later in the garbage collection.</p>
<p>Weak reference objects are created by one of</p>
<div class="example">
<pre class="example1"><code>SEXP R_MakeWeakRef(SEXP key, SEXP val, SEXP fin, Rboolean onexit);
SEXP R_MakeWeakRefC(SEXP key, SEXP val, R_CFinalizer_t fin,
                    Rboolean onexit);</code></pre>
</div>
<p>where the R or C finalizer are specified in exactly the same way as for an external pointer object (whose finalization interface is implemented <em>via</em> weak references).</p>
<p>The parts can be accessed <em>via</em></p>
<div class="example">
<pre class="example1"><code>SEXP R_WeakRefKey(SEXP w);
SEXP R_WeakRefValue(SEXP w);
void R_RunWeakRefFinalizer(SEXP w);</code></pre>
</div>
<p>A toy example of the use of weak references can be found at <a href="http://homepage.stat.uiowa.edu/~luke/R/references/weakfinex.html"><code class="calibre2">homepage.stat.uiowa.edu/~luke/R/references/weakfinex.html</code></a>, but that is used to add finalizers to external pointers which can now be done more directly. At the time of writing no CRAN or Bioconductor package uses weak references.</p>
<hr />
<p><a href="" id="An-external-pointer-example"></a> <a href="" id="An-example-2"></a></p>
<h4 id="an-example" class="subsection">5.13.1 An example</h4>
<p>Package <a href="https://CRAN.R-project.org/package=RODBC"><strong>RODBC</strong></a> uses external pointers to maintain its <em>channels</em>, connections to databases. There can be several connections open at once, and the status information for each is stored in a C structure (pointed to by <code class="calibre2">thisHandle</code> in the code extract below) that is returned <em>via</em> an external pointer as part of the RODBC ‘channel’ (as the <code class="calibre2">&quot;handle_ptr&quot;</code> attribute). The external pointer is created by</p>
<div class="example">
<pre class="example1"><code>    SEXP ans, ptr;
    ans = PROTECT(allocVector(INTSXP, 1));
    ptr = R_MakeExternalPtr(thisHandle, install(&quot;RODBC_channel&quot;), R_NilValue);
    PROTECT(ptr);
    R_RegisterCFinalizerEx(ptr, chanFinalizer, TRUE);
            ...
    /* return the channel no */
    INTEGER(ans)[0] = nChannels;
    /* and the connection string as an attribute */
    setAttrib(ans, install(&quot;connection.string&quot;), constr);
    setAttrib(ans, install(&quot;handle_ptr&quot;), ptr);
    UNPROTECT(3);
    return ans;</code></pre>
</div>
<p>Note the symbol given to identify the usage of the external pointer, and the use of the finalizer. Since the final argument when registering the finalizer is <code class="calibre2">TRUE</code>, the finalizer will be run at the end of the R session (unless it crashes). This is used to close and clean up the connection to the database. The finalizer code is simply</p>
<div class="example">
<pre class="example1"><code>static void chanFinalizer(SEXP ptr)
{
    if(!R_ExternalPtrAddr(ptr)) return;
    inRODBCClose(R_ExternalPtrAddr(ptr));
    R_ClearExternalPtr(ptr); /* not really needed */
}</code></pre>
</div>
<p>Clearing the pointer and checking for a <code class="calibre2">NULL</code> pointer avoids any possibility of attempting to close an already-closed channel.</p>
<p>R’s connections provide another example of using external pointers, in that case purely to be able to use a finalizer to close and destroy the connection if it is no longer is use.</p>
<hr />
<p><a href="" id="Vector-accessor-functions"></a> <a href="" id="Vector-accessor-functions-1"></a></p>
<h3 id="vector-accessor-functions" class="section">5.14 Vector accessor functions</h3>
<p>The vector accessors like <code class="calibre2">REAL</code> and <code class="calibre2">INTEGER</code> and <code class="calibre2">VECTOR_ELT</code> are <em>functions</em> when used in R extensions. (For efficiency they are macros when used in the R source code, apart from <code class="calibre2">SET_STRING_ELT</code> and <code class="calibre2">SET_VECTOR_ELT</code> which are always functions.)</p>
<p>The accessor functions check that they are being used on an appropriate type of <code class="calibre2">SEXP</code>.</p>
<p>If efficiency is essential, the macro versions of the accessors can be obtained by defining ‘USE_RINTERNALS’ before including Rinternals.h. If you find it necessary to do so, please do test that your code compiles without ‘USE_RINTERNALS’ defined, as this provides a stricter test that the accessors have been used correctly. Note too that the use of ‘USE_RINTERNALS’ when the header is included in C++ code is not supported: doing so may use C99 features which are not necessarily supported by the C++ compiler. Nor is use with Rdefines.h supported.</p>
<hr />
<p><a href="" id="Character-encoding-issues"></a> <a href="" id="Character-encoding-issues-1"></a></p>
<h3 id="character-encoding-issues" class="section">5.15 Character encoding issues</h3>
<p><a href="" id="index-translateChar"></a> <a href="" id="index-translateCharUTF8"></a></p>
<p><code class="calibre2">CHARSXP</code>s can be marked as coming from a known encoding (Latin-1 or UTF-8). This is mainly intended for human-readable output, and most packages can just treat such <code class="calibre2">CHARSXP</code>s as a whole. However, if they need to be interpreted as characters or output at C level then it would normally be correct to ensure that they are converted to the encoding of the current locale: this can be done by accessing the data in the <code class="calibre2">CHARSXP</code> by <code class="calibre2">translateChar</code> rather than by <code class="calibre2">CHAR</code>. If re-encoding is needed this allocates memory with <code class="calibre2">R_alloc</code> which thus persists to the end of the <code class="calibre2">.Call</code>/<code class="calibre2">.External</code> call unless <code class="calibre2">vmaxset</code> is used (see <a href="R-exts_split_010.html#Transient-storage-allocation">Transient storage allocation</a>).</p>
<p>There is a similar function <code class="calibre2">translateCharUTF8</code> which converts to UTF-8: this has the advantage that a faithful translation is almost always possible (whereas only a few languages can be represented in the encoding of the current locale unless that is UTF-8).</p>
<p><a href="" id="index-getCharCE"></a> <a href="" id="index-mkCharCE"></a></p>
<p>There is a public interface to the encoding marked on <code class="calibre2">CHARXSXPs</code> <em>via</em></p>
<div class="example">
<pre class="example1"><code>typedef enum {CE_NATIVE, CE_UTF8, CE_LATIN1, CE_SYMBOL, CE_ANY} cetype_t;
cetype_t getCharCE(SEXP);
SEXP mkCharCE(const char *, cetype_t);</code></pre>
</div>
<p>Only <code class="calibre2">CE_UTF8</code> and <code class="calibre2">CE_LATIN1</code> are marked on <code class="calibre2">CHARSXPs</code> (and so <code class="calibre2">Rf_getCharCE</code> will only return one of the first three), and these should only be used on non-ASCII strings. Value <code class="calibre2">CE_SYMBOL</code> is used internally to indicate Adobe Symbol encoding. Value <code class="calibre2">CE_ANY</code> is used to indicate a character string that will not need re-encoding – this is used for character strings known to be in ASCII, and can also be used as an input parameter where the intention is that the string is treated as a series of bytes. (See the comments under <code class="calibre2">mkChar</code> about the length of input allowed.)</p>
<p>Function</p>
<p><a href="" id="index-reEnc"></a></p>
<div class="example">
<pre class="example1"><code>const char *reEnc(const char *x, cetype_t ce_in, cetype_t ce_out,
                  int subst);</code></pre>
</div>
<p>can be used to re-encode character strings: like <code class="calibre2">translateChar</code> it returns a string allocated by <code class="calibre2">R_alloc</code>. This can translate from <code class="calibre2">CE_SYMBOL</code> to <code class="calibre2">CE_UTF8</code>, but not conversely. Argument <code class="calibre2">subst</code> controls what to do with untranslatable characters or invalid input: this is done byte-by-byte with <code class="calibre2">1</code> indicates to output hex of the form <code class="calibre2">&lt;a0&gt;</code>, and <code class="calibre2">2</code> to replace by <code class="calibre2">.</code>, with any other value causing the byte to produce no output.</p>
<p><a href="" id="index-mkCharLenCE"></a></p>
<p>There is also</p>
<div class="example">
<pre class="example1"><code>SEXP mkCharLenCE(const char *, size_t, cetype_t);</code></pre>
</div>
<p>to create marked character strings of a given length.</p>
<hr />
<p><a href="" id="The-R-API"></a> <a href="" id="The-R-API_003a-entry-points-for-C-code"></a></p>
<div id="calibre_pb_14" class="calibre6">

</div>

<!--chapter:end:9-R-exts.Rmd-->

